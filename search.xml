<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>redis数据库介绍</title>
    <url>/2022/04/12/python%E7%88%AC%E8%99%AB/25-redis%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-redis数据库介绍"><a href="#1-redis数据库介绍" class="headerlink" title="1-redis数据库介绍"></a>1-redis数据库介绍</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><a id="more"></a>
<p><code>redis</code>是一种支持分布式的<code>nosql</code>数据库,他的数据是保存在内存中，同时<code>redis</code>可以定时把内存数据同步到磁盘，即可以将数据持久化，并且他比<code>memcached</code>支持更多的数据结构(<code>string</code>,<code>list列表[队列和栈]</code>,<code>set[集合]</code>,<code>sorted set[有序集合]</code>,<code>hash(hash表)</code>)。相关参考文档：<a href="http://redisdoc.com/index.html" target="_blank" rel="noopener">http://redisdoc.com/index.html</a></p>
<h2 id="redis使用场景："><a href="#redis使用场景：" class="headerlink" title="redis使用场景："></a>redis使用场景：</h2><ol>
<li>登录会话存储：存储在<code>redis</code>中，与<code>memcached</code>相比，数据不会丢失。</li>
<li>排行版/计数器：比如一些秀场类的项目，经常会有一些前多少名的主播排名。还有一些文章阅读量的技术，或者新浪微博的点赞数等。</li>
<li>作为消息队列：比如<code>celery</code>就是使用<code>redis</code>作为中间人。</li>
<li>当前在线人数：还是之前的秀场例子，会显示当前系统有多少在线人数。</li>
<li>一些常用的数据缓存：比如我们的<code>BBS</code>论坛，板块不会经常变化的，但是每次访问首页都要从<code>mysql</code>中获取，可以在<code>redis</code>中缓存起来，不用每次请求数据库。</li>
<li>把前200篇文章缓存或者评论缓存：一般用户浏览网站，只会浏览前面一部分文章或者评论，那么可以把前面200篇文章和对应的评论缓存起来。用户访问超过的，就访问数据库，并且以后文章超过200篇，则把之前的文章删除。</li>
<li>好友关系：微博的好友关系使用<code>redis</code>实现。</li>
<li>发布和订阅功能：可以用来做聊天软件。</li>
</ol>
<h2 id="redis和memcached的比较："><a href="#redis和memcached的比较：" class="headerlink" title="redis和memcached的比较："></a><code>redis</code>和<code>memcached</code>的比较：</h2><table>
<thead>
<tr>
<th></th>
<th>memcached</th>
<th>redis</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>纯内存数据库</td>
<td>内存磁盘同步数据库</td>
</tr>
<tr>
<td>数据类型</td>
<td>在定义value时就要固定数据类型</td>
<td>不需要</td>
</tr>
<tr>
<td>虚拟内存</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>过期策略</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>存储数据安全</td>
<td>不支持</td>
<td>可以将数据同步到dump.db中</td>
</tr>
<tr>
<td>灾难恢复</td>
<td>不支持</td>
<td>可以将磁盘中的数据恢复到内存中</td>
</tr>
<tr>
<td>分布式</td>
<td>支持</td>
<td>主从同步</td>
</tr>
<tr>
<td>订阅与发布</td>
<td>不支持</td>
<td>支持</td>
</tr>
</tbody></table>
<h2 id="redis在ubuntu系统中的安装与启动"><a href="#redis在ubuntu系统中的安装与启动" class="headerlink" title="redis在ubuntu系统中的安装与启动"></a><code>redis</code>在<code>ubuntu</code>系统中的安装与启动</h2><ol>
<li><p>安装：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install redis-server</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>卸载：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get purge --auto-remove redis-server</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>启动：<code>redis</code>安装后，默认会自动启动，可以通过以下命令查看：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ps aux|grep redis</span><br></pre></td></tr></tbody></table></figure>

<p>如果想自己手动启动，可以通过以下命令进行启动：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo service redis-server start</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>停止：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo service redis-server stop</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h2 id="redis在windows系统中的安装与启动："><a href="#redis在windows系统中的安装与启动：" class="headerlink" title="redis在windows系统中的安装与启动："></a>redis在windows系统中的安装与启动：</h2><ol>
<li>下载：redis官方是不支持windows操作系统的。但是微软的开源部门将redis移植到了windows上。因此下载地址不是在redis官网上。而是在github上：<a href="https://github.com/MicrosoftArchive/redis/releases。" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases。</a></li>
<li>安装：点击一顿下一步安装就可以了。</li>
<li>运行：进入到<code>redis</code>安装所在的路径然后执行<code>redis-server.exe redis.windows.conf</code>就可以运行了。</li>
<li>连接：<code>redis</code>和<code>mysql</code>以及<code>mongo</code>是一样的，都提供了一个客户端进行连接。输入命令<code>redis-cli</code>（前提是redis安装路径已经加入到环境变量中了）就可以连接到<code>redis</code>服务器了。</li>
</ol>
<h2 id="其他机器访问本机redis服务器："><a href="#其他机器访问本机redis服务器：" class="headerlink" title="其他机器访问本机redis服务器："></a>其他机器访问本机redis服务器：</h2><p>想要让其他机器访问本机的redis服务器。那么要修改redis.conf的配置文件，将bind改成<code>bind [自己的ip地址或者0.0.0.0]</code>，其他机器才能访问。<br><strong>注意：bind绑定的是本机网卡的ip地址，而不是想让其他机器连接的ip地址。如果有多块网卡，那么可以绑定多个网卡的ip地址。如果绑定到额是0.0.0.0，那么意味着其他机器可以通过本机所有的ip地址进行访问。</strong></p>
<h2 id="对redis的操作"><a href="#对redis的操作" class="headerlink" title="对redis的操作"></a>对<code>redis</code>的操作</h2><p>对<code>redis</code>的操作可以用两种方式，第一种方式采用<code>redis-cli</code>，第二种方式采用编程语言，比如<code>Python</code>、<code>PHP</code>和<code>JAVA</code>等。</p>
<ol>
<li><p>使用<code>redis-cli</code>对<code>redis</code>进行字符串操作：</p>
</li>
<li><p>启动<code>redis</code>：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sudo service redis-server start</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>连接上</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></tbody></table></figure>

<p>：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">redis-cli -h [ip] -p [端口]</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>添加：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">set key value</span><br><span class="line">如：</span><br><span class="line">set username xiaotuo</span><br></pre></td></tr></tbody></table></figure>

<p>将字符串值<code>value</code>关联到<code>key</code>。如果<code>key</code>已经持有其他值，<code>set</code>命令就覆写旧值，无视其类型。并且默认的过期时间是永久，即永远不会过期。</p>
</li>
<li><p>删除：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">del key</span><br><span class="line">如：</span><br><span class="line">del username</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>设置过期时间：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">expire key timeout(单位为秒)</span><br></pre></td></tr></tbody></table></figure>

<p>也可以在设置值的时候，一同指定过期时间：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">set key value EX timeout</span><br><span class="line">或：</span><br><span class="line">setex key timeout value</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>查看过期时间：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ttl key</span><br><span class="line">如：</span><br><span class="line">ttl username</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>查看当前<code>redis</code>中的所有<code>key</code>：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>列表操作：</p>
<ul>
<li><p>在列表左边添加元素：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">lpush key value</span><br></pre></td></tr></tbody></table></figure>

<p>将值<code>value</code>插入到列表<code>key</code>的表头。如果<code>key</code>不存在，一个空列表会被创建并执行<code>lpush</code>操作。当<code>key</code>存在但不是列表类型时，将返回一个错误。</p>
</li>
<li><p>在列表右边添加元素：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">rpush key value</span><br></pre></td></tr></tbody></table></figure>

<p>将值value插入到列表key的表尾。如果key不存在，一个空列表会被创建并执行RPUSH操作。当key存在但不是列表类型时，返回一个错误。</p>
</li>
<li><p>查看列表中的元素：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">lrange key start stop</span><br></pre></td></tr></tbody></table></figure>

<p>返回列表<code>key</code>中指定区间内的元素，区间以偏移量<code>start</code>和<code>stop</code>指定,如果要左边的第一个到最后的一个<code>lrange key 0 -1</code>。</p>
</li>
<li><p>移除列表中的元素：</p>
<ul>
<li><p>移除并返回列表</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">key</span><br></pre></td></tr></tbody></table></figure>

<p>的头元素：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">lpop key</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>移除并返回列表的尾元素：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">rpop key</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>移除并返回列表<code>key</code>的中间元素：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">lrem key count value</span><br></pre></td></tr></tbody></table></figure>

<p>将删除<code>key</code>这个列表中，<code>count</code>个值为<code>value</code>的元素。</p>
</li>
</ul>
</li>
<li><p>指定返回第几个元素：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">lindex key index</span><br></pre></td></tr></tbody></table></figure>

<p>将返回<code>key</code>这个列表中，索引为<code>index</code>的这个元素。</p>
</li>
<li><p>获取列表中的元素个数：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">llen key</span><br><span class="line">如：</span><br><span class="line">llen languages</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>删除指定的元素：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">lrem key count value</span><br><span class="line">如：</span><br><span class="line">lrem languages 0 php</span><br></pre></td></tr></tbody></table></figure>

<p>根据参数 count 的值，移除列表中与参数 value 相等的元素。<code>count</code>的值可以是以下几种：</p>
<ul>
<li>count > 0：从表头开始向表尾搜索，移除与<code>value</code>相等的元素，数量为<code>count</code>。</li>
<li>count < 0：从表尾开始向表头搜索，移除与 <code>value</code>相等的元素，数量为<code>count</code>的绝对值。</li>
<li>count = 0：移除表中所有与<code>value</code> 相等的值。</li>
</ul>
</li>
</ul>
</li>
<li><p><code>set</code>集合的操作：</p>
<ul>
<li><p>添加元素：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sadd set value1 value2....</span><br><span class="line">如：</span><br><span class="line">sadd team xiaotuo datuo</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>查看元素：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">smembers set</span><br><span class="line">如：</span><br><span class="line">smembers team</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>移除元素：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">srem set member...</span><br><span class="line">如：</span><br><span class="line">srem team xiaotuo datuo</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>查看集合中的元素个数：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">scard set</span><br><span class="line">如：</span><br><span class="line">scard team1</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>获取多个集合的交集：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sinter set1 set2</span><br><span class="line">如：</span><br><span class="line">sinter team1 team2</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>获取多个集合的并集：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sunion set1 set2</span><br><span class="line">如：</span><br><span class="line">sunion team1 team2</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>获取多个集合的差集：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">sdiff set1 set2</span><br><span class="line">如：</span><br><span class="line">sdiff team1 team2</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
</li>
<li><p><code>hash</code>哈希操作：</p>
<ul>
<li><p>添加一个新值：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hset key field value</span><br><span class="line">如：</span><br><span class="line">hset website baidu baidu.com</span><br></pre></td></tr></tbody></table></figure>

<p>将哈希表<code>key</code>中的域<code>field</code>的值设为<code>value</code>。<br>如果<code>key</code>不存在，一个新的哈希表被创建并进行 <code>HSET</code>操作。如果域 <code>field</code>已经存在于哈希表中，旧值将被覆盖。</p>
</li>
<li><p>获取哈希中的<code>field</code>对应的值：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hget key field</span><br><span class="line">如：</span><br><span class="line">hget website baidu</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>删除<code>field</code>中的某个<code>field</code>：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hdel key field</span><br><span class="line">如：</span><br><span class="line">hdel website baidu</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>获取某个哈希中所有的<code>field</code>和<code>value</code>：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hgetall key</span><br><span class="line">如：</span><br><span class="line">hgetall website</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>获取某个哈希中所有的<code>field</code>：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hkeys key</span><br><span class="line">如：</span><br><span class="line">hkeys website</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>获取某个哈希中所有的值：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hvals key</span><br><span class="line">如：</span><br><span class="line">hvals website</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>判断哈希中是否存在某个<code>field</code>：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexists key field</span><br><span class="line">如：</span><br><span class="line">hexists website baidu</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>获取哈希中总共的键值对：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hlen field</span><br><span class="line">如：</span><br><span class="line">hlen website</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
</li>
<li><p>事务操作：Redis事务可以一次执行多个命令，事务具有以下特征：</p>
<ul>
<li><p>隔离操作：事务中的所有命令都会序列化、按顺序地执行，不会被其他命令打扰。</p>
</li>
<li><p>原子操作：事务中的命令要么全部被执行，要么全部都不执行。</p>
</li>
<li><p>开启一个事务：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">multi</span><br></pre></td></tr></tbody></table></figure>

<p>以后执行的所有命令，都在这个事务中执行的。</p>
</li>
<li><p>执行事务：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">exec</span><br></pre></td></tr></tbody></table></figure>

<p>会将在<code>multi</code>和<code>exec</code>中的操作一并提交。</p>
</li>
<li><p>取消事务：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">discard</span><br></pre></td></tr></tbody></table></figure>

<p>会将<code>multi</code>后的所有命令取消。</p>
</li>
<li><p>监视一个或者多个<code>key</code>：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">watch key...</span><br></pre></td></tr></tbody></table></figure>

<p>监视一个(或多个)key，如果在事务执行之前这个(或这些) key被其他命令所改动，那么事务将被打断。</p>
</li>
<li><p>取消所有<code>key</code>的监视：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">unwatch</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
</li>
<li><p>发布/订阅操作：</p>
<ul>
<li><p>给某个频道发布消息：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">publish channel message</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>订阅某个频道的消息：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">subscribe channel</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>ScrapyShell</title>
    <url>/2022/04/12/python%E7%88%AC%E8%99%AB/19-ScrapyShell/</url>
    <content><![CDATA[<html><head></head><body><h1 id="4-ScrapyShell"><a href="#4-ScrapyShell" class="headerlink" title="4-ScrapyShell"></a>4-ScrapyShell</h1><a id="more"></a>
<p>我们想要在爬虫中使用xpath、beautifulsoup、正则表达式、css选择器等来提取想要的数据。但是因为<code>scrapy</code>是一个比较重的框架。每次运行起来都要等待一段时间。因此要去验证我们写的提取规则是否正确，是一个比较麻烦的事情。因此<code>Scrapy</code>提供了一个shell，用来方便的测试规则。当然也不仅仅局限于这一个功能。</p>
<h2 id="打开Scrapy-Shell："><a href="#打开Scrapy-Shell：" class="headerlink" title="打开Scrapy Shell："></a>打开Scrapy Shell：</h2><p>打开cmd终端，进入到<code>Scrapy</code>项目所在的目录，然后进入到<code>scrapy</code>框架所在的虚拟环境中，输入命令<code>scrapy shell [链接]</code>。就会进入到scrapy的shell环境中。在这个环境中，你可以跟在爬虫的<code>parse</code>方法中一样使用了。 </p>
</body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>CrawlSpider</title>
    <url>/2022/03/20/python%E7%88%AC%E8%99%AB/18-CrawlSpider/</url>
    <content><![CDATA[<html><head></head><body><h1 id="3-CrawlSpider"><a href="#3-CrawlSpider" class="headerlink" title="3-CrawlSpider"></a>3-CrawlSpider</h1><p>在上一个糗事百科的爬虫案例中。我们是自己在解析完整个页面后获取下一页的url，然后重新发送一个请求。有时候我们想要这样做，只要满足某个条件的url，都给我进行爬取。那么这时候我们就可以通过<code>CrawlSpider</code>来帮我们完成了。<code>CrawlSpider</code>继承自<code>Spider</code>，只不过是在之前的基础之上增加了新的功能，可以定义爬取的url的规则，以后scrapy碰到满足条件的url都进行爬取，而不用手动的<code>yield Request</code>。</p>
<a id="more"></a>
<h2 id="CrawlSpider爬虫："><a href="#CrawlSpider爬虫：" class="headerlink" title="CrawlSpider爬虫："></a>CrawlSpider爬虫：</h2><h3 id="创建CrawlSpider爬虫："><a href="#创建CrawlSpider爬虫：" class="headerlink" title="创建CrawlSpider爬虫："></a>创建CrawlSpider爬虫：</h3><p>之前创建爬虫的方式是通过<code>scrapy genspider [爬虫名字] [域名]</code>的方式创建的。如果想要创建<code>CrawlSpider</code>爬虫，那么应该通过以下命令创建：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">scrapy genspider -c crawl [爬虫名字] [域名]</span><br></pre></td></tr></tbody></table></figure>

<h3 id="LinkExtractors链接提取器："><a href="#LinkExtractors链接提取器：" class="headerlink" title="LinkExtractors链接提取器："></a>LinkExtractors链接提取器：</h3><p>使用<code>LinkExtractors</code>可以不用程序员自己提取想要的url，然后发送请求。这些工作都可以交给<code>LinkExtractors</code>，他会在所有爬的页面中找到满足规则的<code>url</code>，实现自动的爬取。以下对<code>LinkExtractors</code>类做一个简单的介绍：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">linkextractors</span>.<span class="title">LinkExtractor</span><span class="params">(</span></span></span><br><span class="line"><span class="class"><span class="params">    allow = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    deny = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    allow_domains = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    deny_domains = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    deny_extensions = None,</span></span></span><br><span class="line"><span class="class"><span class="params">    restrict_xpaths = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    tags = <span class="params">(<span class="string">'a'</span>,<span class="string">'area'</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    attrs = <span class="params">(<span class="string">'href'</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    canonicalize = True,</span></span></span><br><span class="line"><span class="class"><span class="params">    unique = True,</span></span></span><br><span class="line"><span class="class"><span class="params">    process_value = None</span></span></span><br><span class="line"><span class="class"><span class="params">)</span></span></span><br></pre></td></tr></tbody></table></figure>

<p>主要参数讲解：</p>
<ul>
<li>allow：允许的url。所有满足这个正则表达式的url都会被提取。</li>
<li>deny：禁止的url。所有满足这个正则表达式的url都不会被提取。</li>
<li>allow_domains：允许的域名。只有在这个里面指定的域名的url才会被提取。</li>
<li>deny_domains：禁止的域名。所有在这个里面指定的域名的url都不会被提取。</li>
<li>restrict_xpaths：严格的xpath。和allow共同过滤链接。</li>
</ul>
<h3 id="Rule规则类："><a href="#Rule规则类：" class="headerlink" title="Rule规则类："></a>Rule规则类：</h3><p>定义爬虫的规则类。以下对这个类做一个简单的介绍：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">spiders</span>.<span class="title">Rule</span><span class="params">(</span></span></span><br><span class="line"><span class="class"><span class="params">    link_extractor, </span></span></span><br><span class="line"><span class="class"><span class="params">    callback = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    cb_kwargs = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    follow = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    process_links = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    process_request = None</span></span></span><br><span class="line"><span class="class"><span class="params">)</span></span></span><br></pre></td></tr></tbody></table></figure>

<p>主要参数讲解：</p>
<ul>
<li>link_extractor：一个<code>LinkExtractor</code>对象，用于定义爬取规则。</li>
<li>callback：满足这个规则的url，应该要执行哪个回调函数。因为<code>CrawlSpider</code>使用了<code>parse</code>作为回调函数，因此不要覆盖<code>parse</code>作为回调函数自己的回调函数。</li>
<li>follow：指定根据该规则从response中提取的链接是否需要跟进。</li>
<li>process_links：从link_extractor中获取到链接后会传递给这个函数，用来过滤不需要爬取的链接。</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Android布局属性</title>
    <url>/2020/08/10/Android/Android%E5%B8%83%E5%B1%80%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<html><head></head><body><p>转载：<a href="http://blog.csdn.net/xiaole0313" target="_blank" rel="noopener">http://blog.csdn.net/xiaole0313</a><br>第一类:属性值为true或false<br>android:layout_centerHrizontal 水平居中 （Hrizontal表示水平）<br>android:layout_centerVertical 垂直居中 （Vertiacl表示垂直）<br>android:layout_centerInparent 相对于父元素完全居中android:layout_alignParentBottom 贴紧父元素的下边缘 （align 表示使什么成为一行）</p>
<a id="more"></a>

<p>android:layout_alignParentLeft 贴紧父元素的左边缘<br>android:layout_alignParentRight 贴紧父元素的右边缘<br>android:layout_alignParentTop 贴紧父元素的上边缘<br>android:layout_alignWithParentIfMissing 如果对应的兄弟元素找不到的话就以父元素做参照物<br>第二类：属性值必须为id的引用名”@id/id-name”<br>android:layout_below 在某元素的下方<br>android:layout_above 在某元素的的上方<br>android:layout_toLeftOf 在某元素的左边<br>android:layout_toRightOf 在某元素的右边<br>android:layout_alignTop 本元素的上边缘和某元素的的上边缘对齐<br>android:layout_alignLeft 本元素的左边缘和某元素的的左边缘对齐<br>android:layout_alignBottom 本元素的下边缘和某元素的的下边缘对齐<br>android:layout_alignRight 本元素的右边缘和某元素的的右边缘对齐<br>第三类：属性值为具体的像素值，如30dip，40px<br>android:layout_marginBottom 离某元素底边缘的距离 margin英文是边缘的意思<br>android:layout_marginLeft 离某元素左边缘的距离<br>android:layout_marginRight 离某元素右边缘的距离<br>android:layout_marginTop 离某元素上边缘的距离<br>EditText的属性<br>android:hint 设置EditText为空时输入框内的提示信息。<br>android:gravity属性是对该view 内容的限定．比如一个button 上面的text. 你可以设置该text 在view的靠左，靠右等位置．以button为例，android:gravity=”right”则button上面的文字靠右<br>android:layout_gravity<br>android:layout_gravity是用来设置该view相对与起父view 的位置．比如一个button 在linearlayout里，你想把该button放在靠左、靠右等位置就可以通过该属性设置．以button为例，android:layout_gravity=”right”则button靠右<br>android:scaleType：<br>android:scaleType是控制图片如何resized/moved来匹对ImageView的size。<br>ImageView.ScaleType / android:scaleType值的意义区别：<br>CENTER /center 按图片的原来size居中显示，当图片长/宽超过View的长/宽，则截取图片的居中部分显示<br>CENTER_CROP / centerCrop 按比例扩大图片的size居中显示，使得图片长(宽)等于或大于View的长(宽)<br>CENTER_INSIDE / centerInside 将图片的内容完整居中显示，通过按比例缩小或原来的size使得图片长/宽等于或小于View的长/宽<br>FIT_CENTER / fitCenter 把图片按比例扩大/缩小到View的宽度，居中显示<br>FIT_END / fitEnd 把图片按比例扩大/缩小到View的宽度，显示在View的下部分位置<br>FIT_START / fitStart 把图片按比例扩大/缩小到View的宽度，显示在View的上部分位置<br>FIT_XY / fitXY 把图片�不按比例扩大/缩小到View的大小显示<br>MATRIX / matrix 用矩阵来绘制，动态缩小放大图片来显示。<br>要注意一点，Drawable文件夹里面的图片命名是不能大写的。<br>android:id 为控件指定相应的ID<br>android:text 指定控件当中显示的文字，需要注意的是，这里尽量使用strings.xml文件当中的字符串<br>android:gravity 指定View组件的对齐方式，比如说居中，居右等位置 这里指的是控件中的文本位置并不是控件本身<br>android:layout_gravity 指定Container组件的对齐方式．比如一个button 在linearlayout里，你想把该button放在靠左、靠右等位置就可以通过该属性设置．以button为 例，android:layout_gravity=”right”则button靠右<br>android:textSize 指定控件当中字体的大小<br>android:background 指定该控件所使用的背景色，RGB命名法<br>android:width 指定控件的宽度 控件与组件<br>android:height 指定控件的高度<br>android:layout_width 指定Container组件的宽度<br>android:layout_height 指定Container组件的高度<br>android:layout_weight View中很重要的属性，按比例划分空间<br>android:padding* 指定控件的内边距，也就是说控件当中的内容<br>android:sigleLine 如果设置为真的话，则控件的内容在同一行中进行显示<br>android:scaleType 是控制图片如何resized/moved来匹对ImageView的siz<br>android:layout_centerHrizontal 水平居中<br>android:layout_centerVertical 垂直居中<br>android:layout_centerInparent 相对于父元素完全居中<br>android:layout_alignParentBottom 贴紧父元素的下边缘<br>android:layout_alignParentLeft 贴紧父元素的左边缘<br>android:layout_alignParentRight 贴紧父元素的右边缘<br>android:layout_alignParentTop 贴紧父元素的上边缘<br>android:layout_alignWithParentIfMissing 如果对应的兄弟元素找不到的话就以父元素做参照物<br>android:layout_below 在某元素的下方<br>android:layout_above 在某元素的的上方<br>android:layout_toLeftOf 在某元素的左边<br>android:layout_toRightOf 在某元素的右边<br>android:layout_alignTop 本元素的上边缘和某元素的的上边缘对齐<br>android:layout_alignLeft 本元素的左边缘和某元素的的左边缘对齐<br>android:layout_alignBottom 本元素的下边缘和某元素的的下边缘对齐<br>android:layout_alignRight 本元素的右边缘和某元素的的右边缘对齐<br>android:layout_marginBottom 离某元素底边缘的距离<br>android:layout_marginLeft 离某元素左边缘的距离<br>android:layout_marginRight 离某元素右边缘的距离<br>android:layout_marginTop 离某元素上边缘的距离<br>android:paddingLeft 本元素内容离本元素右边缘的距离<br>android:paddingRight 本元素内容离本元素上边缘的距离<br>android:hint 设置EditText为空时输入框内的提示信息<br>android:LinearLayout 它确定了LinearLayout的方向，其值可以为vertical， 表示垂直布局horizontal， 表示水平布局<br>android:interpolator 可能有很多人不理解它的用法，文档里说的也不太清楚，其实很简单，看下面：interpolator定义一个动画的变化率（the rate of change）。这使得基本的动画效果(alpha, scale, translate, rotate）得以加速，减速，重复等。用通俗的一点的话理解就是：动画的进度使用 Interpolator 控制。interpolator 定义了动画的变化速度，可以实现匀速、正加速、负加速、无规则变加速等。Interpolator 是基类，封装了所有 Interpolator 的共同方法，它只有一个方法，即 getInterpolation (float input)，该方法 maps a point on the timeline to a multiplier to be applied to the transformations of an animation。Android 提供了几个 Interpolator 子类，实现了不同的速度曲线，如下：<br>AccelerateDecelerateInterpolator 在动画开始与介绍的地方速率改变比较慢，在中间的时侯加速<br>AccelerateInterpolator 在动画开始的地方速率改变比较慢，然后开始加速<br>CycleInterpolator 动画循环播放特定的次数，速率改变沿着正弦曲线<br>DecelerateInterpolator 在动画开始的地方速率改变比较慢，然后开始减速<br>LinearInterpolator 在动画的以均匀的速率改变<br>对于 LinearInterpolator ，变化率是个常数，即 f (x) = x.</p>
<figure class="highlight plain"><figcaption><span>float getInterpolation(float input) {</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">return input;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Interpolator其他的几个子类，也都是按照特定的算法，实现了对变化率。还可以定义自己的 Interpolator 子类，实现抛物线、自由落体等物理效果。<br><strong>TextView属性汇总</strong><br>android:autoLink 设置是否当文本为URL链接/email/电话号码/map时，文本显示为可点击的链接。可选值(none/web/email/phone/map/all)<br>android:autoText 如果设置，将自动执行输入值的拼写纠正。此处无效果，在显示输入法并输入的时候起作用。<br>android:bufferType 指定getText()方式取得的文本类别。选项editable 类似于StringBuilder可追加字符，也就是说getText后可调用append方法设置文本内容。spannable 则可在给定的字符区域使用样式，参见这里1、这里2。<br>android:capitalize 设置英文字母大写类型。此处无效果，需要弹出输入法才能看得到，参见EditView此属性说明。<br>android:cursorVisible 设定光标为显示/隐藏，默认显示。<br>android:digits 设置允许输入哪些字符。如”1234567890.+-*/% ()”<br>android:drawableBottom 在text的下方输出一个drawable，如图片。如果指定一个颜色的话会把text的背景设为该颜色，并且同时和background使用时覆盖后者。<br>android:drawableLeft 在text的左边输出一个drawable，如图片。<br>android:drawablePadding 设置text与drawable(图片)的间隔，与drawableLeft、 drawableRight、drawableTop、drawableBottom一起使用，可设置为负数，单独使用没有效果。<br>android:drawableRight 在text的右边输出一个drawable。<br>android:drawableTop 在text的正上方输出一个drawable。<br>android:editable 设置是否可编辑。<br>android:editorExtras 设置文本的额外的输入数据。<br>android:ellipsize 设置当文字过长时,该控件该如何显示。有如下值设置：”start”—-省略号显示在开头;”end” ——省略号显示在结尾;”middle”—-省略号显示在中间;”marquee” ——以跑马灯的方式显示(动画横向移动)<br>android:freezesText 设置保存文本的内容以及光标的位置。<br>android:gravity 设置文本位置，如设置成”center”，文本将居中显示。<br>android:hintText 为空时显示的文字提示信息，可通过textColorHint设置提示信息的颜色。此属性在 EditView中使用，但是这里也可以用。<br>android:imeOptions 附加功能，设置右下角IME动作与编辑框相关的动作，如actionDone右下角将显示一个”完成”，而不设置默认是一个回车符号。这个在EditView中再详细说明，此处无用。<br>android:imeActionId 设置IME动作ID。<br>android:imeActionLabel 设置IME动作标签。<br>android:includeFontPadding 设置文本是否包含顶部和底部额外空白，默认为true。<br>android:inputMethod 为文本指定输入法，需要完全限定名(完整的包名)。例如：com.google.android.inputmethod.pinyin，但是这里报错找不到。<br>android:inputType设置文本的类型，用于帮助输入法显示合适的键盘类型。在EditView中再详细说明，这里无效果。<br>android:linksClickable 设置链接是否点击连接，即使设置了autoLink。<br>android:marqueeRepeatLimit 在ellipsize指定marquee的情况下，设置重复滚动的次数，当设置为 marquee_forever时表示无限次。<br>android:ems 设置TextView的宽度为N个字符的宽度。这里测试为一个汉字字符宽度<br>android:maxEms 设置TextView的宽度为最长为N个字符的宽度。与ems同时使用时覆盖ems选项。<br>android:minEms 设置TextView的宽度为最短为N个字符的宽度。与ems同时使用时覆盖ems选项。<br>android:maxLength 限制显示的文本长度，超出部分不显示。<br>android:lines 设置文本的行数，设置两行就显示两行，即使第二行没有数据。<br>android:maxLines 设置文本的最大显示行数，与width或者layout_width结合使用，超出部分自动换行，超出行数将不显示。<br>android:minLines 设置文本的最小行数，与lines类似。<br>android:lineSpacingExtra 设置行间距。<br>android:lineSpacingMultiplier 设置行间距的倍数。如”1.2″<br>android:numeric 如果被设置，该TextView有一个数字输入法。此处无用，设置后唯一效果是TextView有点击效果，此属性在EdtiView将详细说明。<br>android:password 以小点”.”显示文本<br>android:phoneNumber 设置为电话号码的输入方式。<br>android:privateImeOptions 设置输入法选项，此处无用，在EditText将进一步讨论。<br>android:scrollHorizontally 设置文本超出TextView的宽度的情况下，是否出现横拉条。<br>android:selectAllOnFocus 如果文本是可选择的，让他获取焦点而不是将光标移动为文本的开始位置或者末尾位置。 TextView中设置后无效果。<br>android:shadowColor 指定文本阴影的颜色，需要与shadowRadius一起使用。<br>android:shadowDx 设置阴影横向坐标开始位置。<br>android:shadowDy 设置阴影纵向坐标开始位置。<br>android:shadowRadius 设置阴影的半径。设置为0.1就变成字体的颜色了，一般设置为3.0的效果比较好。<br>android:singleLine 设置单行显示。如果和layout_width一起使用，当文本不能全部显示时，后面用”…”来表示。如android:text=”test_ singleLine ”<br>android:singleLine=”true” android:layout_width=”20dp”将只显示”t…”。如果不设置singleLine或者设置为false，文本将自动换行<br>android:text 设置显示文本.<br>android:textAppearance 设置文字外观。如 “?android:attr/textAppearanceLargeInverse”这里引用的是系统自带的一个外观，?表示系统是否有这种外观，否则使用默认的外观。可    </p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>android:textColor 设置文本颜色<br>android:textColorHighlight 被选中文字的底色，默认为蓝色<br>android:textColorHint 设置提示信息文字的颜色，默认为灰色。与hint一起使用。<br>android:textColorLink 文字链接的颜色.<br>android:textScaleX 设置文字之间间隔，默认为1.0f。<br>android:textSize 设置文字大小，推荐度量单位”sp”，如”15sp”<br>android:textStyle 设置字形[bold(粗体) 0, italic(斜体) 1, bolditalic(又粗又斜) 2] 可以设置一个或多个，用”|”隔开<br>android:typeface 设置文本字体，必须是以下常量值之一：normal 0, sans 1, serif 2, monospace(等宽字体) 3]<br>android:height 设置文本区域的高度，支持度量单位：px(像素)/dp/sp/in/mm(毫米)<br>android:maxHeight 设置文本区域的最大高度<br>android:minHeight 设置文本区域的最小高度<br>android:width 设置文本区域的宽度，支持度量单位：px(像素)/dp/sp/in/mm(毫米)，与layout_width 的区别看这里。<br>android:maxWidth 设置文本区域的最大宽度<br>android:minWidth 设置文本区域的最小宽度<br>Android activity 属性汇总<br>android:allowTaskReparenting<br>是否允许activity更换从属的任务，比如从短信息任务切换到浏览器任务。<br>android:alwaysRetainTaskState<br>是否保留状态不变， 比如切换回home, 再从新打开， activity处于最后的状态<br>android:clearTaskOnLanunch<br>比如 P 是 activity, Q 是被P 触发的 activity, 然后返回Home, 从新启动 P，是否显示 Q<br>android:configChanges<br>当配置list发生修改时，是否调用 onConfigurationChanged() 方法 比如 “locale|navigation|orientation”.<br>android:enabled activity 是否可以被实例化,<br>android:excludeFromRecents 是否可被显示在最近打开的activity列表里<br>android:exported 是否允许activity被其它程序调用<br>android:finishOnTaskLaunch 是否关闭已打开的activity当用户重新启动这个任务的时候<br>android.icon<br>android:label<br>android:launchMode activity启动方式， “standard” “singleTop” “singleTask” “singleInstance”<br>其中前两个为一组， 后两个为一组<br>android:multiprocess 允许多进程<br>android:name activity的类名， 必须指定<br>androidnHistory 是否需要移除这个activity当用户切换到其他屏幕时。这个属性是 API level 3 中引入的<br>android:permission<br>android:process 一 个activity运行时所在的进程名，所有程序组件运行在应用程序默认的进程中，这个进程名跟应用程序的包名一致。中的元素process属性能够为所有组件设定一个新的默认值。但是任何组件都可以覆盖这个默认值，允许你将你的程序放在多进程中运行。 如果这个属性被分配的名字以:开头，当这个activity运行时, 一个新的专属于这个程序的进程将会被创建。如果这个进程名以小写字母开头，这个activity将会运行在全局的进程中，被它的许可所提供。<br>android:screenOrientation activity显示的模式, “unspecified” 默认值 “landscape” 风景画模式，宽度比高度大一些 “portrait” 肖像模式, 高度比宽度大。 “user” 用户的设置 “behind” “sensor” “nosensor”<br>android:stateNotNeeded 是否 activity被销毁和成功重启并不保存状态<br>android:taskAffinity activity的亲属关系， 默认情况同一个应用程序下的activity有相同的关系<br>android:theme activity的样式主题, 如果没有设置，则activity的主题样式从属于应用程序，参见元素的theme属性<br>android:windowSoftInputMode<br>activity主窗口与软键盘的交互模式, 自从API level 3 被引入<br>活动的主窗口如何与包含屏幕上的软键盘窗口交互。这个属性的设置将会影响两件事情:<br>1> 软键盘的状态——是否它是隐藏或显示——当活动(Activity)成为用户关注的焦点。<br>2> 活动的主窗口调整——是否减少活动主窗口大小以便腾出空间放软键盘或是否当活动窗口的部分被软键盘覆盖时它的内容的当前焦点是可见的。<br>它的设置必须是下面列表中的一个值，或一个”state…”值加一个”adjust…”值的组合。在任一组设置多个值——多个”state…”values，例如＆mdash有未定义的结果。各个值之间用|分开。例如:<br>在这设置的值(除”stateUnspecified”和”adjustUnspecified”以外)将覆盖在主题中设置的值<br>值 描述<br>“stateUnspecified” 软键盘的状态(是否它是隐藏或可见)没有被指定。系统将选择一个合适的状态或依赖于主题的设置。这个是为了软件盘行为默认的设置。<br>“stateUnchanged” 软键盘被保持无论它上次是什么状态，是否可见或隐藏，当主窗口出现在前面时。<br>“stateHidden” 当用户选择该Activity时，软键盘被隐藏——也就是，当用户确定导航到该Activity时，而不是返回到它由于离开另一个Activity。<br>“stateAlwaysHidden” 软键盘总是被隐藏的，当该Activity主窗口获取焦点时。<br>“stateVisible” 软键盘是可见的，当那个是正常合适的时(当用户导航到Activity主窗口时)。<br>“stateAlwaysVisible” 当用户选择这个Activity时，软键盘是可见的——也就是，也就是，当用户确定导航到该Activity时，而不是返回到它由于离开另一个Activity。<br>“adjustUnspecified” 它不被指定是否该Activity主窗口调整大小以便留出软键盘的空间，或是否窗口上的内容得到屏幕上当前的焦点是可见的。系统将自动选择这些模式中一种主要依赖于是否窗口的内容有任何布局视图能够滚动他们的内容。如果有这样的一个视图，这个窗口将调整大小，这样的假设可以使滚动窗口的内容在一个较小的区域中可见的。这个是主窗口默认的行为设置。<br>“adjustResize” 该Activity主窗口总是被调整屏幕的大小以便留出软键盘的空间。<br>“adjustPan” 该Activity主窗口并不调整屏幕的大小以便留出软键盘的空间。相反，当前窗口的内容将自动移动以便当前焦点从不被键盘覆盖和用户能总是看到输入内容的部分。这个通常是不期望比调整大小，因为用户可能关闭软键盘以便获得与被覆盖内容的交互操作。<br>Android EditText 属性汇总<br>android:layout_gravity=”center_vertical” 设置控件显示的位置：默认top，这里居中显示，还有bottom<br>android:hint=”请输入数字！” 设置显示在空间上的提示信息<br>android:numeric=”integer” 设置只能输入整数，如果是小数则是：decimal<br>android:singleLine=”true” 设置单行输入，一旦设置为true，则文字不会自动换行。<br>android:password=”true” 设置只能输入密码<br>android:textColor = “#ff8c00″ 字体颜色<br>android:textStyle=”bold” 字体，bold, italic, bolditalic<br>android:textSize=”20dip” 大小<br>android:capitalize = “characters” 以大写字母写<br>android:textAlign=”center” EditText没有这个属性，但TextView有<br>android:textColorHighlight=”#cccccc” 被选中文字的底色，默认为蓝色<br>android:textColorHint=”#ffff00″ 设置提示信息文字的颜色，默认为灰色<br>android:textScaleX=”1.5″ 控制字与字之间的间距<br>android:typeface=”monospace” 字型，normal, sans, serif, monospace<br>android:background=”@null” 空间背景，这里没有，指透明<br>android:layout_weight=”1″ 权重，控制控件之间的地位,在控制控件显示的大小时蛮有用的。<br>android:textAppearance=”?android:attr/textAppearanceLargeInverse”<br>文字外观，这里引用的是系统自带的一个外观，？表示系统是否有这种外观，否则使用默认的外观。不知道这样理解对不对？<br>通过EditText的layout xml文件中的相关属性来实现:</p>
<ol>
<li>密码框属性 android:password=”true” 这条可以让EditText显示的内容自动为星号，输入时内容会在1秒内变成*字样。</li>
<li>纯数字 android:numeric=”true” 这条可以让输入法自动变为数字输入键盘，同时仅允许0-9的数字输入</li>
<li>仅允许 android:capitalize=”cwj1987″ 这样仅允许接受输入cwj1987，一般用于密码验证<br>下面是一些扩展的风格属性<br>android:editable=”false” 设置EditText不可编辑<br>android:singleLine=”true” 强制输入的内容在单行<br>android:ellipsize=”end” 自动隐藏尾部溢出数据，一般用于文字内容过长一行无法全部显示时<br>RelativeLayout布局<br>android:layout_marginTop=”25dip” //顶部距离<br>android:gravity=”left” //空间布局位置<br>android:layout_marginLeft=”15dip //距离左边距<br>// 相对于给定ID控件<br>android:layout_above 将该控件的底部置于给定ID的控件之上;<br>android:layout_below 将该控件的底部置于给定ID的控件之下;<br>android:layout_toLeftOf 将该控件的右边缘与给定ID的控件左边缘对齐;<br>android:layout_toRightOf 将该控件的左边缘与给定ID的控件右边缘对齐;<br>android:layout_alignBaseline 将该控件的baseline与给定ID的baseline对齐;<br>android:layout_alignTop 将该控件的顶部边缘与给定ID的顶部边缘对齐;<br>android:layout_alignBottom 将该控件的底部边缘与给定ID的底部边缘对齐;<br>android:layout_alignLeft 将该控件的左边缘与给定ID的左边缘对齐;<br>android:layout_alignRight 将该控件的右边缘与给定ID的右边缘对齐;<br>// 相对于父组件<br>android:layout_alignParentTop 如果为true,将该控件的顶部与其父控件的顶部对齐;<br>android:layout_alignParentBottom 如果为true,将该控件的底部与其父控件的底部对齐;<br>android:layout_alignParentLeft 如果为true,将该控件的左部与其父控件的左部对齐;<br>android:layout_alignParentRight 如果为true,将该控件的右部与其父控件的右部对齐;<br>// 居中<br>android:layout_centerHorizontal 如果为true,将该控件的置于水平居中;<br>android:layout_centerVertical 如果为true,将该控件的置于垂直居中;<br>android:layout_centerInParent 如果为true,将该控件的置于父控件的中央;<br>// 指定移动像素<br>android:layout_marginTop 上偏移的值;<br>android:layout_marginBottom 下偏移的值;<br>android:layout_marginLeft 左偏移的值;<br>android:layout_marginRight 　 右偏移的值;<br>android:id — 为控件指定相应的ID<br>android:text — 指定控件当中显示的文字，需要注意的是，这里尽量使用strings.xml文件当中的字符串<br>android:grivity — 指定控件的基本位置，比如说居中，居右等位置这里指的是控件中的文本位置并不是控件本身。<br>android:textSize — 指定控件当中字体的大小<br>android:background — 指定该控件所使用的背景色，RGB命名法<br>android:width — 指定控件的宽度<br>android:height — 指定控件的高度<br>android:padding* — 指定控件的内边距，也就是说控件当中的内容<br>android:sigleLine — 如果设置为真的话，则控件的内容在同一行中进行显示<br>下边是相对布局属性的说明：RelativeLayout<br>android:layout_above 将该控件的底部至于给定ID控件之上<br>android:layout_below 将该控件的顶部至于给定ID的控件之下<br>android:layout_toLeftOf 将该控件的右边缘和给定ID的控件左边缘对齐<br>android:layout_toRightOf 将该控件的左边缘和给定ID的控件的右边缘对齐<br>android:layout_alignBaseline 该控件的baseline和给定ID的控件的baseline对齐<br>android:layout_alignBottom 将该控件的底部边缘与给定ID控件的底部边缘对齐<br>android:layout_alignLeft 将该控件的左边缘与给定ID控件的左边缘对齐<br>android:layout_alignRight 将该控件的右边缘与给定ID控件的右边缘对齐<br>android:layout_alignTop 将该控件的顶部边缘与给定ID控件的顶部对齐<br>android:alignParentBottom 如果该值为true,则将该控件的底部和父控件的底部对齐<br>android:layout_alignParentLeft 如果该值为true,则将该控件左边与父控件的左边对齐<br>android:layout_alignParentRight 如果该值为true,则将该控件的右边与父控件的右边对齐<br>android:layout_alignParentTop 如果该值为true,则将该控件的顶部与父控件的顶部对齐<br>android:layout_centerHorizontal 如果为真，该控件将被至于水平方向的中央<br>android:layout_centerInParent 如果为真，该控件将被至于父控件水平方向和垂直方向的中央<br>android:layout_centerVertical 如果为真，该控件将被至于垂直方向的中央<br>android:layout_marginLeft此属性用来设置控件之间的间隙（控件和控件之间和内边距不同）<br>android:padding=”3dip”说明了四边的内边距是3dip<br>TableLayout<br>android:orientation=”vertical”<br>android:layout_width=”fill_parent”<br>android:layout_height=”fill_parent”<br>android:stretchColumns=”0″<blockquote>
</blockquote>
android:stretchColumns=”0″第一列作为拉伸列填满整行<br>Java中修饰符总结：<br>1、访问控制修饰符<br>public的访问级别是最高的，其次是protected、默认和private<br>成员变量和成员方法可以处于4个访问级别中的一个：公开、受保护、默认或私有<br>顶层类可以处于公开或默认级别，顶层类不能被protected和private修饰<br>局部变量不能被访问控制修饰符修饰<br>2、abstract修饰符<br>抽象类不能被实例化<br>抽象类中可以没有抽象方法，但包含了抽象方法的类必须被定义为抽象方法<br>如果子类没有实现父类中所有的抽象方法，子类也必须定义为抽象类<br>抽象类不能被定义为private、final、和static类型<br>没有抽象的构造方法<br>抽象方法没有方法体<br>3、final修饰符<br>用final修饰的类不能被继承<br>用final修饰的方法不能被子类的方法覆盖<br>private类型的方法都默认为是final方法，因而不能被子类的方法覆盖<br>final变量必须被显式初始化，并且只能被赋值一次值<br>4、static修饰符<br>静态变量在内存中只有一个拷贝，在类的所有实例中共享<br>在静态方法中不能直接访问实例方法和实例变量<br>在静态方法中不能使用this和super关键字<br>静态方法不能被abstract修饰<br>静态方法和静态变量都可以通过类名直接访问<br>当类被加载时，静态代码块只能被执行一次。类中不同的静态方法代码块按他们在类中出现的顺序被依次执行<br>当多个修饰符连用时，修饰符的顺序可以颠倒，不过作为普遍遵守的编程规范，通常把访问控制修饰符放在首位，其次是static或abstact修饰符，接着就是其他的修饰符<br>5、以下修饰符连用是无意义的，会导致编译错误：<br>abstract与private<br>abstract与final<br>abstract与static</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript面向对象</title>
    <url>/2023/04/06/%E5%89%8D%E7%AB%AF/ts%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<html><head></head><body><h1 id="第二章：面向对象"><a href="#第二章：面向对象" class="headerlink" title="第二章：面向对象"></a>第二章：面向对象</h1><p>面向对象是程序中一个非常重要的思想，它被很多同学理解成了一个比较难，比较深奥的问题，其实不然。面向对象很简单，简而言之就是程序之中所有的操作都需要通过对象来完成。</p>
<a id="more"></a>

<ul>
<li>举例来说：<ul>
<li>操作浏览器要使用window对象</li>
<li>操作网页要使用document对象</li>
<li>操作控制台要使用console对象</li>
</ul>
</li>
</ul>
<p>一切操作都要通过对象，也就是所谓的面向对象，那么对象到底是什么呢？这就要先说到程序是什么，计算机程序的本质就是对现实事物的抽象，抽象的反义词是具体，比如：照片是对一个具体的人的抽象，汽车模型是对具体汽车的抽象等等。程序也是对事物的抽象，在程序中我们可以表示一个人、一条狗、一把枪、一颗子弹等等所有的事物。一个事物到了程序中就变成了一个对象。</p>
<p>在程序中所有的对象都被分成了两个部分数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。所以简而言之，在程序中一切皆是对象。</p>
<h2 id="1、类（class）"><a href="#1、类（class）" class="headerlink" title="1、类（class）"></a>1、类（class）</h2><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。</p>
<ul>
<li><p>定义类：</p>
<ul>
<li><pre><code class="typescript"><span class="keyword">class</span> 类名 {
    属性名: 类型;

    <span class="keyword">constructor</span>(<span class="params">参数: 类型</span>){
        <span class="keyword">this</span>.属性名 = 参数;
    }

    方法名(){
        ....
    }

}
<!--￼<span class="number">0</span>--></code></pre>
</li>
</ul>
</li>
<li><p>使用类：</p>
<ul>
<li><pre><code class="typescript"><span class="keyword">const</span> p = <span class="keyword">new</span> Person(<span class="string">'孙悟空'</span>, <span class="number">18</span>);
p.sayHello();
<!--￼<span class="number">1</span>-->

- <span class="keyword">protected</span>

  - <span class="string">``</span><span class="string">`typescript</span>
<span class="string">    class Person{</span>
<span class="string">        protected name: string;</span>
<span class="string">        protected age: number;</span>
<span class="string"></span>
<span class="string">        constructor(name: string, age: number){</span>
<span class="string">            this.name = name; // 可以修改</span>
<span class="string">            this.age = age;</span>
<span class="string">        }</span>
<span class="string"></span>
<span class="string">        sayHello(){</span>
<span class="string">            console.log(`</span>大家好，我是${<span class="keyword">this</span>.name}<span class="string">`);</span>
<span class="string">        }</span>
<span class="string">    }</span>
<span class="string"></span>
<span class="string">    class Employee extends Person{</span>
<span class="string"></span>
<span class="string">        constructor(name: string, age: number){</span>
<span class="string">            super(name, age);</span>
<span class="string">            this.name = name; //子类中可以修改</span>
<span class="string">        }</span>
<span class="string">    }</span>
<span class="string"></span>
<span class="string">    const p = new Person('孙悟空', 18);</span>
<span class="string">    p.name = '猪八戒';// 不能修改</span>
<span class="string">    <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">- private</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    class Person{</span><br><span class="line">        private name: string;</span><br><span class="line">        private age: number;</span><br><span class="line">    </span><br><span class="line">        constructor(name: string, age: number){</span><br><span class="line">            this.name = name; // 可以修改</span><br><span class="line">            this.age = age;</span><br><span class="line">        }</span><br><span class="line">    </span><br><span class="line">        sayHello(){</span><br><span class="line">            console.log(`大家好，我是${this.name}`);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    class Employee extends Person{</span><br><span class="line">    </span><br><span class="line">        constructor(name: string, age: number){</span><br><span class="line">            super(name, age);</span><br><span class="line">            this.name = name; //子类中不能修改</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    const p = new Person('孙悟空', 18);</span><br><span class="line">    p.name = '猪八戒';// 不能修改</span><br></pre></td></tr></tbody></table></figure></span></code></pre>
</li>
<li><p>属性存取器</p>
<ul>
<li><p>对于一些不希望被任意修改的属性，可以将其设置为private</p>
</li>
<li><p>直接将其设置为private将导致无法再通过对象修改其中的属性</p>
</li>
<li><p>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</p>
</li>
<li><p>读取属性的方法叫做setter方法，设置属性的方法叫做getter方法</p>
</li>
<li><p>示例：</p>
<ul>
<li><pre><code class="typescript"><span class="keyword">class</span> Person{
    <span class="keyword">private</span> _name: <span class="built_in">string</span>;

    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>){
        <span class="keyword">this</span>._name = name;
    }

    <span class="keyword">get</span> name(){
        <span class="keyword">return</span> <span class="keyword">this</span>._name;
    }

    <span class="keyword">set</span> name(name: <span class="built_in">string</span>){
        <span class="keyword">this</span>._name = name;
    }

}

<span class="keyword">const</span> p1 = <span class="keyword">new</span> Person(<span class="string">'孙悟空'</span>);
<span class="built_in">console</span>.log(p1.name); <span class="comment">// 通过getter读取name属性</span>
p1.name = <span class="string">'猪八戒'</span>; <span class="comment">// 通过setter修改name属性</span>
<!--￼<span class="number">3</span>--></code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>this</p>
<ul>
<li>在类中，使用this表示当前对象</li>
</ul>
</li>
</ul>
</li>
<li><p>继承</p>
<ul>
<li><p>继承时面向对象中的又一个特性</p>
</li>
<li><p>通过继承可以将其他类中的属性和方法引入到当前类中</p>
<ul>
<li><p>示例：</p>
<ul>
<li><pre><code class="typescript"><span class="keyword">class</span> Animal{
    name: <span class="built_in">string</span>;
    age: <span class="built_in">number</span>;

    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>){
        <span class="keyword">this</span>.name = name;
        <span class="keyword">this</span>.age = age;
    }
}

<span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal{

    bark(){
        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">${<span class="keyword">this</span>.name}</span>在汪汪叫！`</span>);
    }
}

<span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">'旺财'</span>, <span class="number">4</span>);
dog.bark();
<!--￼<span class="number">4</span>--></code></pre>
</li>
<li><p>在子类中可以使用super来完成对父类的引用</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>抽象类（abstract class）</p>
<ul>
<li><p>抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</p>
</li>
<li><pre><code class="typescript"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal{
    <span class="keyword">abstract</span> run(): <span class="built_in">void</span>;
    bark(){
        <span class="built_in">console</span>.log(<span class="string">'动物在叫~'</span>);
    }
}

<span class="keyword">class</span> Dog <span class="keyword">extends</span> Animals{
    run(){
        <span class="built_in">console</span>.log(<span class="string">'狗在跑~'</span>);
    }
}
<!--￼<span class="number">5</span>--></code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>示例（实现）</p>
<ul>
<li><pre><code class="typescript"><span class="keyword">interface</span> Person{
    name: <span class="built_in">string</span>;
    sayHello():<span class="built_in">void</span>;
}

<span class="keyword">class</span> Student <span class="keyword">implements</span> Person{
    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) {
    }

    sayHello() {
        <span class="built_in">console</span>.log(<span class="string">'大家好，我是'</span>+<span class="keyword">this</span>.name);
    }
}
<!--￼<span class="number">6</span>--></code></pre>
</li>
<li><p>上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型</p>
</li>
<li><p>使用泛型：</p>
</li>
<li><pre><code class="typescript"><span class="function"><span class="keyword">function</span> <span class="title">test</span><<span class="title">T</span>>(<span class="params">arg: T</span>): <span class="title">T</span></span>{
    <span class="keyword">return</span> arg;
}
<!--￼<span class="number">7</span>-->

  - 使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式

- 方式二（指定类型）：

  - <span class="string">``</span><span class="string">`typescript</span>
<span class="string">    test<number>(10)</span>
<span class="string">    <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - 也可以在函数后手动指定泛型</span><br><span class="line"></span><br><span class="line">- 可以同时指定多个泛型，泛型间使用逗号隔开：</span><br><span class="line"></span><br><span class="line">  - ```typescript</span><br><span class="line">    function test<T, K>(a: T, b: K): K{</span><br><span class="line">        return b;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    test<number, string>(10, "hello");</span><br></pre></td></tr></tbody></table></figure></span>
<span class="string"></span>
<span class="string">- 使用泛型时，完全可以将泛型当成是一个普通的类去使用</span></code></pre>
</li>
<li><p>类中同样可以使用泛型：</p>
<ul>
<li><pre><code class="typescript"><span class="keyword">class</span> MyClass<T>{
    prop: T;

    <span class="keyword">constructor</span>(<span class="params">prop: T</span>){
        <span class="keyword">this</span>.prop = prop;
    }
}
<!--￼<span class="number">9</span>--></code></pre>
</li>
<li><p>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript入门</title>
    <url>/2023/04/06/%E5%89%8D%E7%AB%AF/ts%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<html><head></head><body><h1 id="第一章-快速入门"><a href="#第一章-快速入门" class="headerlink" title="第一章 快速入门"></a>第一章 快速入门</h1><h2 id="0、TypeScript简介"><a href="#0、TypeScript简介" class="headerlink" title="0、TypeScript简介"></a>0、TypeScript简介</h2><ol>
<li><p>TypeScript是JavaScript的超集。</p>
</li>
<li><p>它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。</p>
</li>
<li><p>TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。</p>
</li>
</ol>
<a id="more"></a>

<ol start="4">
<li><p>TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。</p>
</li>
<li><p>相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</p>
</li>
</ol>
<h2 id="1、TypeScript-开发环境搭建"><a href="#1、TypeScript-开发环境搭建" class="headerlink" title="1、TypeScript 开发环境搭建"></a>1、TypeScript 开发环境搭建</h2><ol>
<li><p>下载Node.js</p>
<ul>
<li>64位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi" target="_blank" rel="noopener">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi</a></li>
<li>32位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi" target="_blank" rel="noopener">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi</a></li>
</ul>
</li>
<li><p>安装Node.js</p>
</li>
<li><p>使用npm全局安装typescript</p>
<ul>
<li>进入命令行</li>
<li>输入：npm i -g typescript</li>
</ul>
</li>
<li><p>创建一个ts文件</p>
</li>
<li><p>使用tsc对ts文件进行编译</p>
<ul>
<li><p>进入命令行</p>
</li>
<li><p>进入ts文件所在目录</p>
</li>
<li><p>执行命令：tsc xxx.ts</p>
</li>
</ul>
</li>
</ol>
<h2 id="2、基本类型"><a href="#2、基本类型" class="headerlink" title="2、基本类型"></a>2、基本类型</h2><ul>
<li><p>类型声明</p>
<ul>
<li><p>类型声明是TS非常重要的一个特点</p>
</li>
<li><p>通过类型声明可以指定TS中变量（参数、形参）的类型</p>
</li>
<li><p>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</p>
</li>
<li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</p>
</li>
<li><p>语法：</p>
<ul>
<li><pre><code class="typescript"><span class="keyword">let</span> 变量: 类型;

<span class="keyword">let</span> 变量: 类型 = 值;

<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">参数: 类型, 参数: 类型</span>): 类型</span>{
    ...
}
<!--￼<span class="number">0</span>--></code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>boolean</p>
<ul>
<li><pre><code class="typescript"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;
<!--￼<span class="number">1</span>--></code></pre>
</li>
</ul>
</li>
<li><p>字面量</p>
<ul>
<li><p>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p>
</li>
<li><pre><code class="typescript"><span class="keyword">let</span> color: <span class="string">'red'</span> | <span class="string">'blue'</span> | <span class="string">'black'</span>;
<span class="keyword">let</span> num: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;
<!--￼<span class="number">2</span>--></code></pre>
</li>
</ul>
</li>
<li><p>unknown</p>
<ul>
<li><pre><code class="typescript"><span class="keyword">let</span> notSure: unknown = <span class="number">4</span>;
notSure = <span class="string">'hello'</span>;
<!--￼<span class="number">3</span>--></code></pre>
</li>
</ul>
</li>
<li><p>never</p>
<ul>
<li><pre><code class="typescript"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>{
  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);
}
<!--￼<span class="number">4</span>--></code></pre>
</li>
</ul>
</li>
<li><p>array</p>
<ul>
<li><pre><code class="typescript"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];
<span class="keyword">let</span> list: <span class="built_in">Array</span><<span class="built_in">number</span>> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];
<!--￼<span class="number">5</span>--></code></pre>
</li>
</ul>
</li>
<li><p>enum</p>
<ul>
<li><pre><code class="typescript"><span class="keyword">enum</span> Color {
  Red,
  Green,
  Blue,
}
<span class="keyword">let</span> c: Color = Color.Green;

<span class="keyword">enum</span> Color {
  Red = <span class="number">1</span>,
  Green,
  Blue,
}
<span class="keyword">let</span> c: Color = Color.Green;

<span class="keyword">enum</span> Color {
  Red = <span class="number">1</span>,
  Green = <span class="number">2</span>,
  Blue = <span class="number">4</span>,
}
<span class="keyword">let</span> c: Color = Color.Green;
<!--￼<span class="number">6</span>-->

- 第二种

  - <span class="string">``</span><span class="string">`typescript</span>
<span class="string">    let someValue: unknown = "this is a string";</span>
<span class="string">    let strLength: number = (<string>someValue).length;</span>
<span class="string">    <figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">## 3、编译选项</span><br><span class="line"></span><br><span class="line">- 自动编译文件</span><br><span class="line"></span><br><span class="line">  - 编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - ```powershell</span><br><span class="line">      tsc xxx.ts -w</span><br></pre></td></tr></tbody></table></figure></span></code></pre>
</li>
</ul>
</li>
<li><p>自动编译整个项目</p>
<ul>
<li><p>如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件。</p>
</li>
<li><p>但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 tsconfig.json</p>
</li>
<li><p>tsconfig.json是一个JSON文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译</p>
</li>
<li><p>配置选项：</p>
<ul>
<li><p>include</p>
<ul>
<li><p>定义希望被编译文件所在的目录</p>
</li>
<li><p>默认值：[“**/*“]</p>
</li>
<li><p>示例：</p>
<ul>
<li><pre><code class="json">"include":["src/**/*", "tests/**/*"]
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - 上述示例中，所有src目录和tests目录下的文件都会被编译</span><br><span class="line"></span><br><span class="line">- exclude</span><br><span class="line"></span><br><span class="line">  - 定义需要排除在外的目录</span><br><span class="line"></span><br><span class="line">  - 默认值：["node_modules", "bower_components", "jspm_packages"]</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - ```json</span><br><span class="line">      "exclude": ["./src/hello/**/*"]</span><br></pre></td></tr></tbody></table></figure></code></pre>
</li>
<li><p>上述示例中，src下hello目录下的文件都不会被编译</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>extends</p>
<ul>
<li><p>定义被继承的配置文件</p>
</li>
<li><p>示例：</p>
<ul>
<li><pre><code class="json">"extends": "./configs/base"
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - 上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息</span><br><span class="line"></span><br><span class="line">- files</span><br><span class="line"></span><br><span class="line">  - 指定被编译文件的列表，只有需要编译的文件少时才会用到</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - ```json</span><br><span class="line">      "files": [</span><br><span class="line">          "core.ts",</span><br><span class="line">          "sys.ts",</span><br><span class="line">          "types.ts",</span><br><span class="line">          "scanner.ts",</span><br><span class="line">          "parser.ts",</span><br><span class="line">          "utilities.ts",</span><br><span class="line">          "binder.ts",</span><br><span class="line">          "checker.ts",</span><br><span class="line">          "tsc.ts"</span><br><span class="line">        ]</span><br></pre></td></tr></tbody></table></figure></code></pre>
</li>
<li><p>列表中的文件都会被TS编译器所编译</p>
</li>
</ul>
</li>
<li><p>compilerOptions</p>
<ul>
<li><p>编译选项是配置文件中非常重要也比较复杂的配置选项</p>
</li>
<li><p>在compilerOptions中包含多个子选项，用来完成对编译的配置</p>
<ul>
<li><p>项目选项</p>
<ul>
<li><p>target</p>
<ul>
<li><p>设置ts代码编译的目标版本</p>
</li>
<li><p>可选值：</p>
<ul>
<li>ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</li>
</ul>
</li>
<li><p>示例：</p>
<ul>
<li><pre><code class="json">"compilerOptions": {
    "target": "ES6"
}
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - 如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码</span><br><span class="line"></span><br><span class="line">- lib</span><br><span class="line"></span><br><span class="line">  - 指定代码运行时所包含的库（宿主环境）</span><br><span class="line"></span><br><span class="line">  - 可选值：</span><br><span class="line"></span><br><span class="line">    - ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ......</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - ```json</span><br><span class="line">      "compilerOptions": {</span><br><span class="line">          "target": "ES6",</span><br><span class="line">          "lib": ["ES6", "DOM"],</span><br><span class="line">          "outDir": "dist",</span><br><span class="line">          "outFile": "dist/aa.js"</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure></code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>module</p>
<ul>
<li><p>设置编译后代码使用的模块化系统</p>
</li>
<li><p>可选值：</p>
<ul>
<li>CommonJS、UMD、AMD、System、ES2020、ESNext、None</li>
</ul>
</li>
<li><p>示例：</p>
<ul>
<li><pre><code class="typescript"><span class="string">"compilerOptions"</span>: {
    <span class="string">"module"</span>: <span class="string">"CommonJS"</span>
}
<!--￼<span class="number">11</span>--></code></pre>
</li>
<li><p>设置后编译后的js文件将会生成到dist目录</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>outFile</p>
<ul>
<li><p>将所有的文件编译为一个js文件</p>
</li>
<li><p>默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中</p>
</li>
<li><p>示例：</p>
<ul>
<li><pre><code class="json">"compilerOptions": {
    "outFile": "dist/app.js"
}
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">- rootDir</span><br><span class="line"></span><br><span class="line">  - 指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录</span><br><span class="line"></span><br><span class="line">  - 示例：</span><br><span class="line"></span><br><span class="line">    - ```json</span><br><span class="line">      "compilerOptions": {</span><br><span class="line">          "rootDir": "./src"</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure></code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>allowJs</p>
<ul>
<li>是否对js文件编译</li>
</ul>
</li>
<li><p>checkJs</p>
<ul>
<li><p>是否对js文件进行检查</p>
</li>
<li><p>示例：</p>
<ul>
<li>```json<br>“compilerOptions”: {<pre><code>"allowJs": true,
"checkJs": true</code></pre>}<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">            - removeComments</span><br><span class="line"></span><br><span class="line">              - 是否删除注释</span><br><span class="line">              - 默认值：false</span><br><span class="line"></span><br><span class="line">            - noEmit</span><br><span class="line"></span><br><span class="line">              - 不对代码进行编译</span><br><span class="line">              - 默认值：false</span><br><span class="line"></span><br><span class="line">            - sourceMap</span><br><span class="line"></span><br><span class="line">              - 是否生成sourceMap</span><br><span class="line">              - 默认值：false</span><br><span class="line"></span><br><span class="line">              </span><br><span class="line"></span><br><span class="line">          - 严格检查</span><br><span class="line"></span><br><span class="line">            - strict</span><br><span class="line">              - 启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查</span><br><span class="line">            - alwaysStrict</span><br><span class="line">              - 总是以严格模式对代码进行编译</span><br><span class="line">            - noImplicitAny</span><br><span class="line">              - 禁止隐式的any类型</span><br><span class="line">            - noImplicitThis</span><br><span class="line">              - 禁止类型不明确的this</span><br><span class="line">            - strictBindCallApply</span><br><span class="line">              - 严格检查bind、call和apply的参数列表</span><br><span class="line">            - strictFunctionTypes</span><br><span class="line">              - 严格检查函数的类型</span><br><span class="line">            - strictNullChecks</span><br><span class="line">              - 严格的空值检查</span><br><span class="line">            - strictPropertyInitialization</span><br><span class="line">              - 严格检查属性是否初始化</span><br><span class="line"></span><br><span class="line">          - 额外检查</span><br><span class="line"></span><br><span class="line">            - noFallthroughCasesInSwitch</span><br><span class="line">              - 检查switch语句包含正确的break</span><br><span class="line">            - noImplicitReturns</span><br><span class="line">              - 检查函数没有隐式的返回值</span><br><span class="line">            - noUnusedLocals</span><br><span class="line">              - 检查未使用的局部变量</span><br><span class="line">            - noUnusedParameters</span><br><span class="line">              - 检查未使用的参数</span><br><span class="line"></span><br><span class="line">          - 高级</span><br><span class="line"></span><br><span class="line">            - allowUnreachableCode</span><br><span class="line">              - 检查不可达代码</span><br><span class="line">              - 可选值：</span><br><span class="line">                - true，忽略不可达代码</span><br><span class="line">                - false，不可达代码将引起错误</span><br><span class="line">            - noEmitOnError</span><br><span class="line">              - 有错误的情况下不进行编译</span><br><span class="line">              - 默认值：false</span><br><span class="line"></span><br><span class="line">## 4、webpack</span><br><span class="line"></span><br><span class="line">- 通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS。</span><br><span class="line"></span><br><span class="line">- 步骤：</span><br><span class="line"></span><br><span class="line">  1. 初始化项目</span><br><span class="line"></span><br><span class="line">     - 进入项目根目录，执行命令 ``` npm init -y</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>主要作用：创建package.json文件</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p>下载构建工具</p>
<ul>
<li><code>npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</code><ul>
<li>共安装了7个包<ul>
<li>webpack<ul>
<li>构建工具webpack</li>
</ul>
</li>
<li>webpack-cli<ul>
<li>webpack的命令行工具</li>
</ul>
</li>
<li>webpack-dev-server<ul>
<li>webpack的开发服务器</li>
</ul>
</li>
<li>typescript<ul>
<li>ts编译器</li>
</ul>
</li>
<li>ts-loader<ul>
<li>ts加载器，用于在webpack中编译ts文件</li>
</ul>
</li>
<li>html-webpack-plugin<ul>
<li>webpack中html插件，用来自动创建html文件</li>
</ul>
</li>
<li>clean-webpack-plugin<ul>
<li>webpack中的清除插件，每次构建都会先清除目录</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>根目录下创建webpack的配置文件webpack.config.js</p>
<ul>
<li><pre><code class="javascript"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);
<span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);
<span class="keyword">const</span> { CleanWebpackPlugin } = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);

<span class="built_in">module</span>.exports = {
    optimization:{
        minimize: <span class="literal">false</span> <span class="comment">// 关闭代码压缩，可选</span>
    },

    entry: <span class="string">"./src/index.ts"</span>,

    devtool: <span class="string">"inline-source-map"</span>,

    devServer: {
        contentBase: <span class="string">'./dist'</span>
    },

    output: {
        path: path.resolve(__dirname, <span class="string">"dist"</span>),
        filename: <span class="string">"bundle.js"</span>,
        environment: {
            arrowFunction: <span class="literal">false</span> <span class="comment">// 关闭webpack的箭头函数，可选</span>
        }
    },

    resolve: {
        extensions: [<span class="string">".ts"</span>, <span class="string">".js"</span>]
    },

    <span class="built_in">module</span>: {
        rules: [
            {
                test: <span class="regexp">/\.ts$/</span>,
                use: {
                   loader: <span class="string">"ts-loader"</span>     
                },
                exclude: <span class="regexp">/node_modules/</span>
            }
        ]
    },

    plugins: [
        <span class="keyword">new</span> CleanWebpackPlugin(),
        <span class="keyword">new</span> HtmlWebpackPlugin({
            title:<span class="string">'TS测试'</span>
        }),
    ]

}
<!--￼<span class="number">14</span>--></code></pre>
</li>
</ul>
</li>
<li><p>修改package.json添加如下配置</p>
<ul>
<li>```json<br>{<br>  …略…<br>  “scripts”: {<pre><code>"test": "echo \"Error: no test specified\" && exit 1",
"build": "webpack",
"start": "webpack serve --open chrome.exe"</code></pre>  },<br>  …略…<br>}<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">  6. 在src下创建ts文件，并在并命令行执行```npm run build```对代码进行编译，或者执行```npm start```来启动开发服务器</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">## 5、Babel</span><br><span class="line"></span><br><span class="line">- 经过一系列的配置，使得TS和webpack已经结合到了一起，除了webpack，开发中还经常需要结合babel来对代码进行转换以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中。</span><br><span class="line"></span><br><span class="line">  1. 安装依赖包：</span><br><span class="line">     - ```npm i -D @babel/core @babel/preset-env babel-loader core-js</span><br></pre></td></tr></tbody></table></figure></li>
<li>共安装了4个包，分别是：<ul>
<li>@babel/core<ul>
<li>babel的核心工具</li>
</ul>
</li>
<li>@babel/preset-env<ul>
<li>babel的预定义环境</li>
</ul>
</li>
<li>@babel-loader<ul>
<li>babel在webpack中的加载器</li>
</ul>
</li>
<li>core-js<ul>
<li>core-js用来使老版本的浏览器支持新版ES语法</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>修改webpack.config.js配置文件</p>
<ul>
<li><pre><code class="javascript">...略...
<span class="built_in">module</span>: {
    rules: [
        {
            test: <span class="regexp">/\.ts$/</span>,
            use: [
                {
                    loader: <span class="string">"babel-loader"</span>,
                    options:{
                        presets: [
                            [
                                <span class="string">"@babel/preset-env"</span>,
                                {
                                    <span class="string">"targets"</span>:{
                                        <span class="string">"chrome"</span>: <span class="string">"58"</span>,
                                        <span class="string">"ie"</span>: <span class="string">"11"</span>
                                    },
                                    <span class="string">"corejs"</span>:<span class="string">"3"</span>,
                                    <span class="string">"useBuiltIns"</span>: <span class="string">"usage"</span>
                                }
                            ]
                        ]
                    }
                },
                {
                    loader: <span class="string">"ts-loader"</span>,

                }
            ],
            exclude: <span class="regexp">/node_modules/</span>
        }
    ]
}
...略...</code></pre>
</li>
<li><p>如此一来，使用ts编译后的文件将会再次被babel处理，使得代码可以在大部分浏览器中直接使用，可以在配置选项的targets中指定要兼容的浏览器版本。</p>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>久棋交互规范</title>
    <url>/2023/04/12/%E5%8D%9A%E5%BC%88/%E4%B9%85%E6%A3%8B%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<html><head></head><body><h3 id="久棋前后端交互规范，应用于人机对弈，机机对弈。"><a href="#久棋前后端交互规范，应用于人机对弈，机机对弈。" class="headerlink" title="久棋前后端交互规范，应用于人机对弈，机机对弈。"></a>久棋前后端交互规范，应用于人机对弈，机机对弈。</h3><h4 id="前后端均采用json数据格式，目的是为了后面的机机对弈能够更好交互。"><a href="#前后端均采用json数据格式，目的是为了后面的机机对弈能够更好交互。" class="headerlink" title="前后端均采用json数据格式，目的是为了后面的机机对弈能够更好交互。"></a>前后端均采用<code>json</code>数据格式，目的是为了后面的机机对弈能够更好交互。</h4><a id="more"></a>

<h5 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h5><h6 id="只看格式在这："><a href="#只看格式在这：" class="headerlink" title="只看格式在这："></a>只看格式在这：</h6><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="attr">"board_size"</span>:<span class="number">6</span>, <span class="comment">// 棋盘大小</span></span><br><span class="line"><span class="attr">"moves"</span>:[['A1'],...[['A1','A2'],['B1']]],<span class="comment">//每一步的步骤都包含，所有的历史记录.</span></span><br><span class="line"><span class="attr">"stage"</span>:<span class="number">0</span>, <span class="comment">// 由0开始表第一阶段</span></span><br><span class="line"><span class="attr">"move"</span>:[],<span class="comment">//['A1'] 表示布子阶段 [['A1','A2'],['B1']] 表示A1走到A2并且乘方吃了B1，[['A1','A2','A3'],['B1','D2']] 表示A1--->A2--->A3,并且乘方吃子B1,D2</span></span><br><span class="line"><span class="attr">"board"</span>:[] <span class="comment">// 棋盘，是一个二维数组，请求后端时会将棋盘数字化，0表示空，1表示黑棋，2表示白棋</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h6 id="详细版："><a href="#详细版：" class="headerlink" title="详细版："></a>详细版：</h6><p>前端请求将发送5个字段，</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">```moves```表示历史所有走子的数据，其数据格式为```[['A1'],[['A1','A2'],['B1']]]```，前面单括号为布子阶段的数据，后面一个大括号表示走子阶段(飞子阶段也适用)的数据格式，其包含两部分，第一部分为第二阶段的走子的路径，第二部分为乘方后得到的棋子坐标，注意若没有乘方，应表示为```[['A1','A2'],[]]```这种格式，用一个空的括号来占位，</span><br><span class="line"></span><br><span class="line">```stage``` 表示的是阶段，！！！注意```stage:0```表示第一阶段，</span><br><span class="line"></span><br><span class="line">```move``` 表示本次的走子路径or步子位置，```['A1']``` 表示布子阶段 ```[['A1','A2'],['B1']] ```表示```A1```走到```A2```并且乘方吃了```B1```，```[['A1','A2','A3'],['B1','D2']] ```表示```A1--->A2--->A3```,并且乘方吃子```B1```,```D2```.</span><br><span class="line"></span><br><span class="line">```board```表示棋盘，用二维数组表示并维护，请求时会附带，0表示空，1表示黑棋，2表示白棋。</span><br><span class="line"></span><br><span class="line">##### 后端返回：</span><br><span class="line"></span><br><span class="line">```json</span><br><span class="line">{</span><br><span class="line">    "board_size":6// 棋盘大小</span><br><span class="line">    "bot_move":[],// 本次返回的走子路径or布子位置</span><br><span class="line">    "board":[] // 二维数组，应与前端的请求棋盘位置和棋子类型一致。</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>注意！！！关于棋盘的交互：</p>
<p>历史原因，我的这个是按列排布的。请看：</p>
<p><img src="https://pb.nichi.co/whip-exercise-satisfy#pic_left)" alt="棋盘" style="zoom:50%;"><img src="https://pb.nichi.co/alcohol-document-current#pic_right" alt="数组"></p>
<p>因为人是黑色棋子，可以看到如果没有白色棋子，将数组的每一行看成棋盘的每一列，就能对上了。</p>
<p>故后端在进行返回时，也应该返回右图的格式。如我下了黑色，后端返回白色棋子，其在数组中的位置为：</p>
<p><img src="https://pb.nichi.co/hurdle-syrup-kid" alt="返回数组"></p>
<h3 id="对于只做算法的同学，还请自己提供后端接口和解析数据，若觉得自己的机器人厉害or写好接口了，可以让我来人机测试。"><a href="#对于只做算法的同学，还请自己提供后端接口和解析数据，若觉得自己的机器人厉害or写好接口了，可以让我来人机测试。" class="headerlink" title="对于只做算法的同学，还请自己提供后端接口和解析数据，若觉得自己的机器人厉害or写好接口了，可以让我来人机测试。"></a>对于只做算法的同学，还请自己提供后端接口和解析数据，若觉得自己的机器人厉害or写好接口了，可以让我来人机测试。</h3><p>！！！ 后续有补充可以再添加。尽量不要加啥字段，因为改代码很费时间。</p>
<p><img src="https://pb.nichi.co/cake-bus-company" alt></p>
<p>​                                                                                        </p>
<p>​                                                                ———————Powered by wangxu————</p>
</body></html>]]></content>
      <categories>
        <category>博弈</category>
      </categories>
      <tags>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title>框架快速入门</title>
    <url>/2020/04/29/python%E7%88%AC%E8%99%AB/17-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<html><head></head><body><h1 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2-快速入门"></a>2-快速入门</h1><h2 id="安装和文档："><a href="#安装和文档：" class="headerlink" title="安装和文档："></a>安装和文档：</h2><ol>
<li><p>安装：通过<code>pip install scrapy</code>即可安装。</p>
</li>
<li><p>Scrapy官方文档：<a href="http://doc.scrapy.org/en/latest" target="_blank" rel="noopener">http://doc.scrapy.org/en/latest</a></p>
</li>
<li><p>Scrapy中文文档：<a href="http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html</a></p>
<a id="more"></a>

</li>
</ol>
<blockquote>
<p>注意：</p>
<ol>
<li>在<code>ubuntu</code>上安装<code>scrapy</code>之前，需要先安装以下依赖：<br><code>sudo apt-get install python3-dev build-essential python3-pip libxml2-dev libxslt1-dev zlib1g-dev libffi-dev libssl-dev</code>，然后再通过<code>pip install scrapy</code>安装。</li>
<li>如果在<code>windows</code>系统下，提示这个错误<code>ModuleNotFoundError: No module named 'win32api'</code>，那么使用以下命令可以解决：<code>pip install pypiwin32</code>。</li>
</ol>
</blockquote>
<h2 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h2><h3 id="创建项目："><a href="#创建项目：" class="headerlink" title="创建项目："></a>创建项目：</h3><p>要使用<code>Scrapy</code>框架创建项目，需要通过命令来创建。首先进入到你想把这个项目存放的目录。然后使用以下命令创建：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">scrapy startproject [项目名称]</span><br></pre></td></tr></tbody></table></figure>

<h3 id="目录结构介绍："><a href="#目录结构介绍：" class="headerlink" title="目录结构介绍："></a>目录结构介绍：</h3><p><img src="/2020/04/29/python%E7%88%AC%E8%99%AB/17-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/assets/QQ%E6%88%AA%E5%9B%BE20171212213138.png" alt="img"><br>以下介绍下主要文件的作用：</p>
<ol>
<li>items.py：用来存放爬虫爬取下来数据的模型。</li>
<li>middlewares.py：用来存放各种中间件的文件。</li>
<li>pipelines.py：用来将<code>items</code>的模型存储到本地磁盘中。</li>
<li>settings.py：本爬虫的一些配置信息（比如请求头、多久发送一次请求、ip代理池等）。</li>
<li>scrapy.cfg：项目的配置文件。</li>
<li>spiders包：以后所有的爬虫，都是存放到这个里面。</li>
</ol>
<h3 id="使用Scrapy框架爬取糗事百科段子："><a href="#使用Scrapy框架爬取糗事百科段子：" class="headerlink" title="使用Scrapy框架爬取糗事百科段子："></a>使用Scrapy框架爬取糗事百科段子：</h3><h4 id="使用命令创建一个爬虫："><a href="#使用命令创建一个爬虫：" class="headerlink" title="使用命令创建一个爬虫："></a>使用命令创建一个爬虫：</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">scrapy gensipder qsbk "qiushibaike.com"</span><br></pre></td></tr></tbody></table></figure>

<p>创建了一个名字叫做<code>qsbk</code>的爬虫，并且能爬取的网页只会限制在<code>qiushibaike.com</code>这个域名下。</p>
<h4 id="爬虫代码解析："><a href="#爬虫代码解析：" class="headerlink" title="爬虫代码解析："></a>爬虫代码解析：</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'qsbk'</span></span><br><span class="line">    allowed_domains = [<span class="string">'qiushibaike.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://qiushibaike.com/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure>

<p>其实这些代码我们完全可以自己手动去写，而不用命令。只不过是不用命令，自己写这些代码比较麻烦。<br>要创建一个Spider，那么必须自定义一个类，继承自<code>scrapy.Spider</code>，然后在这个类中定义三个属性和一个方法。</p>
<ol>
<li>name：这个爬虫的名字，名字必须是唯一的。</li>
<li>allow_domains：允许的域名。爬虫只会爬取这个域名下的网页，其他不是这个域名下的网页会被自动忽略。</li>
<li>start_urls：爬虫从这个变量中的url开始。</li>
<li>parse：引擎会把下载器下载回来的数据扔给爬虫解析，爬虫再把数据传给这个<code>parse</code>方法。这个是个固定的写法。这个方法的作用有两个，第一个是提取想要的数据。第二个是生成下一个请求的url。</li>
</ol>
<h4 id="修改settings-py代码："><a href="#修改settings-py代码：" class="headerlink" title="修改settings.py代码："></a>修改<code>settings.py</code>代码：</h4><p>在做一个爬虫之前，一定要记得修改<code>setttings.py</code>中的设置。两个地方是强烈建议设置的。</p>
<ol>
<li><code>ROBOTSTXT_OBEY</code>设置为False。默认是True。即遵守机器协议，那么在爬虫的时候，scrapy首先去找robots.txt文件，如果没有找到。则直接停止爬取。</li>
<li><code>DEFAULT_REQUEST_HEADERS</code>添加<code>User-Agent</code>。这个也是告诉服务器，我这个请求是一个正常的请求，不是一个爬虫。</li>
</ol>
<h4 id="完成的爬虫代码："><a href="#完成的爬虫代码：" class="headerlink" title="完成的爬虫代码："></a>完成的爬虫代码：</h4><ol>
<li><p>爬虫部分代码：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> abcspider.items <span class="keyword">import</span> QsbkItem</span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'qsbk'</span></span><br><span class="line">    allowed_domains = [<span class="string">'qiushibaike.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'https://www.qiushibaike.com/text/'</span>]</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        outerbox = response.xpath(<span class="string">"//div[@id='content-left']/div"</span>)</span><br><span class="line">        items = []</span><br><span class="line">        <span class="keyword">for</span> box <span class="keyword">in</span> outerbox:</span><br><span class="line">            author = box.xpath(<span class="string">".//div[contains(@class,'author')]//h2/text()"</span>).extract_first().strip()</span><br><span class="line">            content = box.xpath(<span class="string">".//div[@class='content']/span/text()"</span>).extract_first().strip()</span><br><span class="line">            item = QsbkItem()</span><br><span class="line">            item[<span class="string">"author"</span>] = author</span><br><span class="line">            item[<span class="string">"content"</span>] = content</span><br><span class="line">            items.append(item)</span><br><span class="line">        <span class="keyword">return</span> items</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>items.py部分代码：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    author = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>pipeline部分代码：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbcspiderPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">   </span><br><span class="line">        self.items = []</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.items.append(dict(item))</span><br><span class="line">        print(<span class="string">"="</span>*<span class="number">40</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self,spider)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'qsbk.json'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            json.dump(self.items,fp,ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h4 id="运行scrapy项目："><a href="#运行scrapy项目：" class="headerlink" title="运行scrapy项目："></a>运行scrapy项目：</h4><p>运行scrapy项目。需要在终端，进入项目所在的路径，然后<code>scrapy crawl [爬虫名字]</code>即可运行指定的爬虫。如果不想每次都在命令行中运行，那么可以把这个命令写在一个文件中。以后就在pycharm中执行运行这个文件就可以了。比如现在新创建一个文件叫做<code>start.py</code>，然后在这个文件中填入以下代码：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line"></span><br><span class="line">cmdline.execute(<span class="string">"scrapy cra</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>框架架构</title>
    <url>/2020/04/25/python%E7%88%AC%E8%99%AB/16-%E6%A1%86%E6%9E%B6%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<html><head></head><body><h1 id="框架架构"><a href="#框架架构" class="headerlink" title="框架架构"></a>框架架构</h1><h2 id="Scrapy框架介绍："><a href="#Scrapy框架介绍：" class="headerlink" title="Scrapy框架介绍："></a>Scrapy框架介绍：</h2><p>写一个爬虫，需要做很多的事情。比如：发送网络请求、数据解析、数据存储、反反爬虫机制（更换ip代理、设置请求头等）、异步请求等。这些工作如果每次都要自己从零开始写的话，比较浪费时间.<a id="more"></a>因此<code>Scrapy</code>把一些基础的东西封装好了，在他上面写爬虫可以变的更加的高效（爬取效率和开发效率）。因此真正在公司里，一些上了量的爬虫，都是使用<code>Scrapy</code>框架来解决。</p>
<h2 id="Scrapy架构图："><a href="#Scrapy架构图：" class="headerlink" title="Scrapy架构图："></a>Scrapy架构图：</h2><ol>
<li>流程图（1）：<br><img src="/2020/04/25/python%E7%88%AC%E8%99%AB/16-%E6%A1%86%E6%9E%B6%E6%9E%B6%E6%9E%84/assets/scrapy_all.png" alt="img"></li>
<li>流程图（2）：<br><img src="/2020/04/25/python%E7%88%AC%E8%99%AB/16-%E6%A1%86%E6%9E%B6%E6%9E%B6%E6%9E%84/assets/884863172-5985e0b48edf9.png" alt="img"></li>
</ol>
<h2 id="Scrapy框架模块功能："><a href="#Scrapy框架模块功能：" class="headerlink" title="Scrapy框架模块功能："></a>Scrapy框架模块功能：</h2><ol>
<li><code>Scrapy Engine（引擎）</code>：<code>Scrapy</code>框架的核心部分。负责在<code>Spider</code>和<code>ItemPipeline</code>、<code>Downloader</code>、<code>Scheduler</code>中间通信、传递数据等。</li>
<li><code>Spider（爬虫）</code>：发送需要爬取的链接给引擎，最后引擎把其他模块请求回来的数据再发送给爬虫，爬虫就去解析想要的数据。这个部分是我们开发者自己写的，因为要爬取哪些链接，页面中的哪些数据是我们需要的，都是由程序员自己决定。</li>
<li><code>Scheduler（调度器）</code>：负责接收引擎发送过来的请求，并按照一定的方式进行排列和整理，负责调度请求的顺序等。</li>
<li><code>Downloader（下载器）</code>：负责接收引擎传过来的下载请求，然后去网络上下载对应的数据再交还给引擎。</li>
<li><code>Item Pipeline（管道）</code>：负责将<code>Spider（爬虫）</code>传递过来的数据进行保存。具体保存在哪里，应该看开发者自己的需求。</li>
<li><code>Downloader Middlewares（下载中间件）</code>：可以扩展下载器和引擎之间通信功能的中间件。</li>
<li><code>Spider Middlewares（Spider中间件）</code>：可以扩展引擎和爬虫之间通信功能的中间件。</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>图形验证码识别</title>
    <url>/2020/04/22/python%E7%88%AC%E8%99%AB/15-%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<html><head></head><body><h1 id="图形验证码识别"><a href="#图形验证码识别" class="headerlink" title="图形验证码识别"></a>图形验证码识别</h1><p>阻碍我们爬虫的。有时候正是在登录或者请求一些数据时候的图形验证码。因此这里我们讲解一种能将图片翻译成文字的技术。将图片翻译成文字一般被成为光学文字识别（Optical Character Recognition），简写为<code>OCR</code>。<a id="more"></a>实现<code>OCR</code>的库不是很多，特别是开源的。因为这块存在一定的技术壁垒（需要大量的数据、算法、机器学习、深度学习知识等），并且如果做好了具有很高的商业价值。因此开源的比较少。这里介绍一个比较优秀的图像识别开源库：Tesseract。</p>
<h2 id="Tesseract："><a href="#Tesseract：" class="headerlink" title="Tesseract："></a>Tesseract：</h2><p>Tesseract是一个OCR库，目前由谷歌赞助。Tesseract是目前公认最优秀、最准确的开源OCR库。Tesseract具有很高的识别度，也具有很高的灵活性，他可以通过训练识别任何字体。</p>
<h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><h4 id="Windows系统："><a href="#Windows系统：" class="headerlink" title="Windows系统："></a>Windows系统：</h4><p>在以下链接下载可执行文件，然后一顿点击下一步安装即可（放在不需要权限的纯英文路径下）：<br><a href="https://github.com/tesseract-ocr/" target="_blank" rel="noopener">https://github.com/tesseract-ocr/</a></p>
<h4 id="Linux系统："><a href="#Linux系统：" class="headerlink" title="Linux系统："></a>Linux系统：</h4><p>可以在以下链接下载源码自行编译。<br><a href="https://github.com/tesseract-ocr/tesseract/wiki/Compiling" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract/wiki/Compiling</a><br>或者在<code>ubuntu</code>下通过以下命令进行安装：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt install tesseract-ocr</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Mac系统："><a href="#Mac系统：" class="headerlink" title="Mac系统："></a>Mac系统：</h4><p>用<code>Homebrew</code>即可方便安装：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">brew install tesseract</span><br></pre></td></tr></tbody></table></figure>

<h4 id="设置环境变量："><a href="#设置环境变量：" class="headerlink" title="设置环境变量："></a>设置环境变量：</h4><p>安装完成后，如果想要在命令行中使用<code>Tesseract</code>，那么应该设置环境变量。<code>Mac</code>和<code>Linux</code>在安装的时候就默认已经设置好了。在<code>Windows</code>下把<code>tesseract.exe</code>所在的路径添加到<code>PATH</code>环境变量中。</p>
<p>还有一个环境变量需要设置的是，要把训练的数据文件路径也放到环境变量中。<br>在环境变量中，添加一个<code>TESSDATA_PREFIX=C:\path_to_tesseractdata\teseractdata</code>。</p>
<h3 id="在命令行中使用tesseract识别图像："><a href="#在命令行中使用tesseract识别图像：" class="headerlink" title="在命令行中使用tesseract识别图像："></a>在命令行中使用tesseract识别图像：</h3><p>如果想要在<code>cmd</code>下能够使用<code>tesseract</code>命令，那么需要把<code>tesseract.exe</code>所在的目录放到<code>PATH</code>环境变量中。然后使用命令：<code>tesseract 图片路径 文件路径</code>。<br>示例：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">tesseract a.png a</span><br></pre></td></tr></tbody></table></figure>

<p>那么就会识别出<code>a.png</code>中的图片，并且把文字写入到<code>a.txt</code>中。如果不想写入文件直接想显示在终端，那么不要加文件名就可以了。</p>
<h3 id="在代码中使用tesseract识别图像："><a href="#在代码中使用tesseract识别图像：" class="headerlink" title="在代码中使用tesseract识别图像："></a>在代码中使用tesseract识别图像：</h3><p>在<code>Python</code>代码中操作<code>tesseract</code>。需要安装一个库，叫做<code>pytesseract</code>。通过<code>pip</code>的方式即可安装：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install pytesseract</span><br></pre></td></tr></tbody></table></figure>

<p>并且，需要读取图片，需要借助一个第三方库叫做<code>PIL</code>。通过<code>pip list</code>看下是否安装。如果没有安装，通过<code>pip</code>的方式安装：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install PIL</span><br></pre></td></tr></tbody></table></figure>

<p>使用<code>pytesseract</code>将图片上的文字转换为文本文字的示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 导入pytesseract库</span></span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="comment"># 导入Image库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定tesseract.exe所在的路径</span></span><br><span class="line">pytesseract.pytesseract.tesseract_cmd = <span class="string">r'D:\ProgramApp\TesseractOCR\tesseract.exe'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开图片</span></span><br><span class="line">image = Image.open(<span class="string">"a.png"</span>)</span><br><span class="line"><span class="comment"># 调用image_to_string将图片转换为文字</span></span><br><span class="line">text = pytesseract.image_to_string(image)</span><br><span class="line">print(text)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="用pytesseract处理拉勾网图形验证码："><a href="#用pytesseract处理拉勾网图形验证码：" class="headerlink" title="用pytesseract处理拉勾网图形验证码："></a>用<code>pytesseract</code>处理拉勾网图形验证码：</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pytesseract.pytesseract.tesseract_cmd = <span class="string">r"D:\ProgramApp\TesseractOCR\tesseract.exe"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    captchaUrl = <span class="string">"https://passport.lagou.com/vcode/create?from=register&refresh=1513081451891"</span></span><br><span class="line">    request.urlretrieve(captchaUrl,<span class="string">'captcha.png'</span>)</span><br><span class="line">    image = Image.open(<span class="string">'captcha.png'</span>)</span><br><span class="line">    text = pytesseract.image_to_string(image,lang=<span class="string">'eng'</span>)</span><br><span class="line">    print(text)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>动态网页爬虫</title>
    <url>/2020/04/17/python%E7%88%AC%E8%99%AB/14-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<html><head></head><body><h1 id="动态网页爬虫"><a href="#动态网页爬虫" class="headerlink" title="动态网页爬虫"></a>动态网页爬虫</h1><h2 id="什么是AJAX："><a href="#什么是AJAX：" class="headerlink" title="什么是AJAX："></a>什么是AJAX：</h2><p>AJAX（Asynchronouse JavaScript And XML）异步JavaScript和XML。过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用Ajax）如果需要更新内容，必须重载整个网页页面。<a id="more"></a>因为传统的在传输数据格式方面，使用的是<code>XML</code>语法。因此叫做<code>AJAX</code>，其实现在数据交互基本上都是使用<code>JSON</code>。使用AJAX加载的数据，即使使用了JS，将数据渲染到了浏览器中，在<code>右键->查看网页源代码</code>还是不能看到通过ajax加载的数据，只能看到使用这个url加载的html代码。</p>
<h2 id="获取ajax数据的方式："><a href="#获取ajax数据的方式：" class="headerlink" title="获取ajax数据的方式："></a>获取ajax数据的方式：</h2><ol>
<li>直接分析ajax调用的接口。然后通过代码请求这个接口。</li>
<li>使用Selenium+chromedriver模拟浏览器行为获取数据。</li>
</ol>
<table>
<thead>
<tr>
<th>方式</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>分析接口</td>
<td>直接可以请求到数据。不需要做一些解析工作。代码量少，性能高。</td>
<td>分析接口比较复杂，特别是一些通过js混淆的接口，要有一定的js功底。容易被发现是爬虫。</td>
</tr>
<tr>
<td>selenium</td>
<td>直接模拟浏览器的行为。浏览器能请求到的，使用selenium也能请求到。爬虫更稳定。</td>
<td>代码量多。性能低。</td>
</tr>
</tbody></table>
<h2 id="Selenium-chromedriver获取动态数据："><a href="#Selenium-chromedriver获取动态数据：" class="headerlink" title="Selenium+chromedriver获取动态数据："></a>Selenium+chromedriver获取动态数据：</h2><p><code>Selenium</code>相当于是一个机器人。可以模拟人类在浏览器上的一些行为，自动处理浏览器上的一些行为，比如点击，填充数据，删除cookie等。<code>chromedriver</code>是一个驱动<code>Chrome</code>浏览器的驱动程序，使用他才可以驱动浏览器。当然针对不同的浏览器有不同的driver。以下列出了不同浏览器及其对应的driver：</p>
<ol>
<li>Chrome：<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="noopener">https://sites.google.com/a/chromium.org/chromedriver/downloads</a></li>
<li>Firefox：<a href="https://github.com/mozilla/geckodriver/releases" target="_blank" rel="noopener">https://github.com/mozilla/geckodriver/releases</a></li>
<li>Edge：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/" target="_blank" rel="noopener">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</a></li>
<li>Safari：<a href="https://webkit.org/blog/6900/webdriver-support-in-safari-10/" target="_blank" rel="noopener">https://webkit.org/blog/6900/webdriver-support-in-safari-10/</a></li>
</ol>
<h2 id="安装Selenium和chromedriver："><a href="#安装Selenium和chromedriver：" class="headerlink" title="安装Selenium和chromedriver："></a>安装Selenium和chromedriver：</h2><ol>
<li><p>安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Selenium</span><br></pre></td></tr></tbody></table></figure>

<p>：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Selenium</span><br></pre></td></tr></tbody></table></figure>

<p>有很多语言的版本，有java、ruby、python等。我们下载python版本的就可以了。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>安装<code>chromedriver</code>：下载完成后，放到不需要权限的纯英文目录下就可以了。</p>
</li>
</ol>
<h3 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h3><p>现在以一个简单的获取百度首页的例子来讲下<code>Selenium</code>和<code>chromedriver</code>如何快速入门：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment"># chromedriver的绝对路径</span></span><br><span class="line">driver_path = <span class="string">r'D:\ProgramApp\chromedriver\chromedriver.exe'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化一个driver，并且指定chromedriver的路径</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line"><span class="comment"># 请求网页</span></span><br><span class="line">driver.get(<span class="string">"https://www.baidu.com/"</span>)</span><br><span class="line"><span class="comment"># 通过page_source获取网页源代码</span></span><br><span class="line">print(driver.page_source)</span><br></pre></td></tr></tbody></table></figure>

<h3 id="selenium常用操作："><a href="#selenium常用操作：" class="headerlink" title="selenium常用操作："></a>selenium常用操作：</h3><p>更多教程请参考：<a href="http://selenium-python.readthedocs.io/installation.html#introduction" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/installation.html#introduction</a></p>
<h4 id="关闭页面："><a href="#关闭页面：" class="headerlink" title="关闭页面："></a>关闭页面：</h4><ol>
<li><code>driver.close()</code>：关闭当前页面。</li>
<li><code>driver.quit()</code>：退出整个浏览器。</li>
</ol>
<h4 id="定位元素："><a href="#定位元素：" class="headerlink" title="定位元素："></a>定位元素：</h4><ol>
<li><pre><code>find_element_by_id
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">：根据id来查找某个元素。等价于：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> submitTag = driver.find_element_by_id('su')</span><br><span class="line"> submitTag1 = driver.find_element(By.ID,'su')</span><br></pre></td></tr></tbody></table></figure></code></pre></li>
<li><pre><code>find_element_by_class_name
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">：根据类名查找元素。 等价于：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> submitTag = driver.find_element_by_class_name('su')</span><br><span class="line"> submitTag1 = driver.find_element(By.CLASS_NAME,'su')</span><br></pre></td></tr></tbody></table></figure></code></pre></li>
<li><pre><code>find_element_by_name
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">：根据name属性的值来查找元素。等价于：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> submitTag = driver.find_element_by_name('email')</span><br><span class="line"> submitTag1 = driver.find_element(By.NAME,'email')</span><br></pre></td></tr></tbody></table></figure></code></pre></li>
<li><pre><code>find_element_by_tag_name
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">：根据标签名来查找元素。等价于：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> submitTag = driver.find_element_by_tag_name('div')</span><br><span class="line"> submitTag1 = driver.find_element(By.TAG_NAME,'div')</span><br></pre></td></tr></tbody></table></figure></code></pre></li>
<li><pre><code>find_element_by_xpath
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">：根据xpath语法来获取元素。等价于：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> submitTag = driver.find_element_by_xpath('//div')</span><br><span class="line"> submitTag1 = driver.find_element(By.XPATH,'//div')</span><br></pre></td></tr></tbody></table></figure></code></pre></li>
<li><p><code>find_element_by_css_selector</code>：根据css选择器选择元素。等价于：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">submitTag = driver.find_element_by_css_selector(<span class="string">'//div'</span>)</span><br><span class="line">submitTag1 = driver.find_element(By.CSS_SELECTOR,<span class="string">'//div'</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>要注意，<code>find_element</code>是获取第一个满足条件的元素。<code>find_elements</code>是获取所有满足条件的元素。</p>
</li>
</ol>
<h4 id="操作表单元素："><a href="#操作表单元素：" class="headerlink" title="操作表单元素："></a>操作表单元素：</h4><ol>
<li><p>操作输入框：分为两步。第一步：找到这个元素。第二步：使用<code>send_keys(value)</code>，将数据填充进去。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">inputTag = driver.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line">inputTag.send_keys(<span class="string">'python'</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>使用<code>clear</code>方法可以清除输入框中的内容。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">inputTag.clear()</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>操作checkbox：因为要选中<code>checkbox</code>标签，在网页中是通过鼠标点击的。因此想要选中<code>checkbox</code>标签，那么先选中这个标签，然后执行<code>click</code>事件。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">rememberTag = driver.find_element_by_name(<span class="string">"rememberMe"</span>)</span><br><span class="line">rememberTag.click()</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>选择select：select元素不能直接点击。因为点击后还需要选中元素。这时候selenium就专门为select标签提供了一个类<code>selenium.webdriver.support.ui.Select</code>。将获取到的元素当成参数传到这个类中，创建这个对象。以后就可以使用这个对象进行选择了。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"><span class="comment"># 选中这个标签，然后使用Select创建对象</span></span><br><span class="line">selectTag = Select(driver.find_element_by_name(<span class="string">"jumpMenu"</span>))</span><br><span class="line"><span class="comment"># 根据索引选择</span></span><br><span class="line">selectTag.select_by_index(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 根据值选择</span></span><br><span class="line">selectTag.select_by_value(<span class="string">"http://www.95yueba.com"</span>)</span><br><span class="line"><span class="comment"># 根据可视的文本选择</span></span><br><span class="line">selectTag.select_by_visible_text(<span class="string">"95秀客户端"</span>)</span><br><span class="line"><span class="comment"># 取消选中所有选项</span></span><br><span class="line">selectTag.deselect_all()</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>操作按钮：操作按钮有很多种方式。比如单击、右击、双击等。这里讲一个最常用的。就是点击。直接调用<code>click</code>函数就可以了。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">inputTag = driver.find_element_by_id(<span class="string">'su'</span>)</span><br><span class="line">inputTag.click()</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h4 id="行为链："><a href="#行为链：" class="headerlink" title="行为链："></a>行为链：</h4><p>有时候在页面中的操作可能要有很多步，那么这时候可以使用鼠标行为链类<code>ActionChains</code>来完成。比如现在要将鼠标移动到某个元素上并执行点击事件。那么示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">inputTag = driver.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line">submitTag = driver.find_element_by_id(<span class="string">'su'</span>)</span><br><span class="line"></span><br><span class="line">actions = ActionChains(driver)</span><br><span class="line">actions.move_to_element(inputTag)</span><br><span class="line">actions.send_keys_to_element(inputTag,<span class="string">'python'</span>)</span><br><span class="line">actions.move_to_element(submitTag)</span><br><span class="line">actions.click(submitTag)</span><br><span class="line">actions.perform()</span><br></pre></td></tr></tbody></table></figure>

<p>还有更多的鼠标相关的操作。</p>
<ul>
<li>click_and_hold(element)：点击但不松开鼠标。</li>
<li>context_click(element)：右键点击。</li>
<li>double_click(element)：双击。 更多方法请参考：<a href="http://selenium-python.readthedocs.io/api.html" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/api.html</a></li>
</ul>
<h4 id="Cookie操作："><a href="#Cookie操作：" class="headerlink" title="Cookie操作："></a>Cookie操作：</h4><ol>
<li><p>获取所有的</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cookie</span><br></pre></td></tr></tbody></table></figure>

<p>：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> driver.get_cookies():</span><br><span class="line">    print(cookie)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>根据cookie的key获取value：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">value = driver.get_cookie(key)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>删除所有的cookie：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">driver.delete_all_cookies()</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>删除某个</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">cookie</span><br></pre></td></tr></tbody></table></figure>

<p>：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">driver.delete_cookie(key)</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h4 id="页面等待："><a href="#页面等待：" class="headerlink" title="页面等待："></a>页面等待：</h4><p>现在的网页越来越多采用了 Ajax 技术，这样程序便不能确定何时某个元素完全加载出来了。如果实际页面等待时间过长导致某个dom元素还没出来，但是你的代码直接使用了这个WebElement，那么就会抛出NullPointer的异常。为了解决这个问题。所以 Selenium 提供了两种等待方式：一种是隐式等待、一种是显式等待。</p>
<ol>
<li><p>隐式等待：调用<code>driver.implicitly_wait</code>。那么在获取不可用的元素之前，会先等待10秒中的时间。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 请求网页</span></span><br><span class="line">driver.get(<span class="string">"https://www.douban.com/"</span>)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>显示等待：显示等待是表明某个条件成立后才执行获取元素的操作。也可以在等待的时候指定一个最大的时间，如果超过这个时间那么就抛出一个异常。显示等待应该使用<code>selenium.webdriver.support.excepted_conditions</code>期望的条件和<code>selenium.webdriver.support.ui.WebDriverWait</code>来配合完成。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line">   </span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">"http://somedomain/url_that_delays_loading"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    element = WebDriverWait(driver, <span class="number">10</span>).until(</span><br><span class="line">        EC.presence_of_element_located((By.ID, <span class="string">"myDynamicElement"</span>))</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>一些其他的等待条件：</p>
<ul>
<li><p>presence_of_element_located：某个元素已经加载完毕了。</p>
</li>
<li><p>presence_of_all_emement_located：网页中所有满足条件的元素都加载完毕了。</p>
</li>
<li><p>element_to_be_cliable：某个元素是可以点击了。</p>
<p>更多条件请参考：<a href="http://selenium-python.readthedocs.io/waits.html" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/waits.html</a></p>
</li>
</ul>
</li>
</ol>
<h4 id="切换页面："><a href="#切换页面：" class="headerlink" title="切换页面："></a>切换页面：</h4><p>有时候窗口中有很多子tab页面。这时候肯定是需要进行切换的。<code>selenium</code>提供了一个叫做<code>switch_to_window</code>来进行切换，具体切换到哪个页面，可以从<code>driver.window_handles</code>中找到。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 打开一个新的页面</span></span><br><span class="line">self.driver.execute_script(<span class="string">"window.open('"</span>+url+<span class="string">"')"</span>)</span><br><span class="line"><span class="comment"># 切换到这个新的页面中</span></span><br><span class="line">self.driver.switch_to_window(self.driver.window_handles[<span class="number">1</span>])</span><br></pre></td></tr></tbody></table></figure>

<h4 id="设置代理ip："><a href="#设置代理ip：" class="headerlink" title="设置代理ip："></a>设置代理ip：</h4><p>有时候频繁爬取一些网页。服务器发现你是爬虫后会封掉你的ip地址。这时候我们可以更改代理ip。更改代理ip，不同的浏览器有不同的实现方式。这里以<code>Chrome</code>浏览器为例来讲解：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">"--proxy-server=http://110.73.2.248:8123"</span>)</span><br><span class="line">driver_path = <span class="string">r"D:\ProgramApp\chromedriver\chromedriver.exe"</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path,chrome_options=options)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">'http://httpbin.org/ip'</span>)</span><br></pre></td></tr></tbody></table></figure>

<h4 id="WebElement元素："><a href="#WebElement元素：" class="headerlink" title="WebElement元素："></a><code>WebElement</code>元素：</h4><p><code>from selenium.webdriver.remote.webelement import WebElement</code>类是每个获取出来的元素的所属类。<br>有一些常用的属性：</p>
<ol>
<li>get_attribute：这个标签的某个属性的值。</li>
<li>screentshot：获取当前页面的截图。这个方法只能在<code>driver</code>上使用。<br><code>driver</code>的对象类，也是继承自<code>WebElement</code>。<br>更多请阅读相关源代码。</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程爬虫</title>
    <url>/2020/04/13/python%E7%88%AC%E8%99%AB/13-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<html><head></head><body><h1 id="多线程爬虫"><a href="#多线程爬虫" class="headerlink" title="多线程爬虫"></a>多线程爬虫</h1><p>有些时候，比如下载图片，因为下载图片是一个耗时的操作。如果采用之前那种同步的方式下载。那效率肯会特别慢。这时候我们就可以考虑使用多线程的方式来下载图片。</p>
<a id="more"></a>

<h2 id="多线程介绍："><a href="#多线程介绍：" class="headerlink" title="多线程介绍："></a>多线程介绍：</h2><p>多线程是为了同步完成多项任务，通过提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。<br>最简单的比喻多线程就像火车的每一节车厢，而进程则是火车。车厢离开火车是无法跑动的，同理火车也可以有多节车厢。多线程的出现就是为了提高效率。同时它的出现也带来了一些问题。更多介绍请参考：<a href="https://baike.baidu.com/item/多线程/1190404?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/多线程/1190404?fr=aladdin</a></p>
<h2 id="threading模块介绍："><a href="#threading模块介绍：" class="headerlink" title="threading模块介绍："></a>threading模块介绍：</h2><p><code>threading</code>模块是<code>python</code>中专门提供用来做多线程编程的模块。<code>threading</code>模块中最常用的类是<code>Thread</code>。以下看一个简单的多线程程序：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coding</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">'%s正在写代码'</span> % x)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">'%s正在画图'</span> % x)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_thread</span><span class="params">()</span>:</span></span><br><span class="line">    coding()</span><br><span class="line">    drawing()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_thread</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = threading.Thread(target=coding)</span><br><span class="line">    t2 = threading.Thread(target=drawing)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    multi_thread()</span><br></pre></td></tr></tbody></table></figure>

<h3 id="查看线程数："><a href="#查看线程数：" class="headerlink" title="查看线程数："></a>查看线程数：</h3><p>使用<code>threading.enumerate()</code>函数便可以看到当前线程的数量。</p>
<h3 id="查看当前线程的名字："><a href="#查看当前线程的名字：" class="headerlink" title="查看当前线程的名字："></a>查看当前线程的名字：</h3><p>使用<code>threading.current_thread()</code>可以看到当前线程的信息。</p>
<h3 id="继承自threading-Thread类："><a href="#继承自threading-Thread类：" class="headerlink" title="继承自threading.Thread类："></a>继承自<code>threading.Thread</code>类：</h3><p>为了让线程代码更好的封装。可以使用<code>threading</code>模块下的<code>Thread</code>类，继承自这个类，然后实现<code>run</code>方法，线程就会自动运行<code>run</code>方法中的代码。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodingThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            print(<span class="string">'%s正在写代码'</span> % threading.current_thread())</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawingThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            print(<span class="string">'%s正在画图'</span> % threading.current_thread())</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_thread</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = CodingThread()</span><br><span class="line">    t2 = DrawingThread()</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    multi_thread()</span><br></pre></td></tr></tbody></table></figure>

<h3 id="多线程共享全局变量的问题："><a href="#多线程共享全局变量的问题：" class="headerlink" title="多线程共享全局变量的问题："></a>多线程共享全局变量的问题：</h3><p>多线程都是在同一个进程中运行的。因此在进程中的全局变量所有线程都是可共享的。这就造成了一个问题，因为线程执行的顺序是无序的。有可能会造成数据错误。比如以下代码：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">tickets = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ticket</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> tickets</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        tickets += <span class="number">1</span></span><br><span class="line">    print(<span class="string">'tickets:%d'</span>%tickets)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t = threading.Thread(target=get_ticket)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure>

<p>以上结果正常来讲应该是6，但是因为多线程运行的不确定性。因此最后的结果可能是随机的。</p>
<h3 id="锁机制："><a href="#锁机制：" class="headerlink" title="锁机制："></a>锁机制：</h3><p>为了解决以上使用共享全局变量的问题。<code>threading</code>提供了一个<code>Lock</code>类，这个类可以在某个线程访问某个变量的时候加锁，其他线程此时就不能进来，直到当前线程处理完后，把锁释放了，其他线程才能进来处理。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">VALUE = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">gLock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_value</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> VALUE</span><br><span class="line">    gLock.acquire()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        VALUE += <span class="number">1</span></span><br><span class="line">    gLock.release()</span><br><span class="line">    print(<span class="string">'value：%d'</span>%VALUE)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t = threading.Thread(target=add_value)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Lock版本生产者和消费者模式："><a href="#Lock版本生产者和消费者模式：" class="headerlink" title="Lock版本生产者和消费者模式："></a>Lock版本生产者和消费者模式：</h2><p>生产者和消费者模式是多线程开发中经常见到的一种模式。生产者的线程专门用来生产一些数据，然后存放到一个中间的变量中。消费者再从这个中间的变量中取出数据进行消费。但是因为要使用中间变量，中间变量经常是一些全局变量，因此需要使用锁来保证数据完整性。以下是使用<code>threading.Lock</code>锁实现的“生产者与消费者模式”的一个例子：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">1000</span></span><br><span class="line">gLock = threading.Lock()</span><br><span class="line"><span class="comment"># 记录生产者生产的次数，达到10次就不再生产</span></span><br><span class="line">gTimes = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gLock</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            <span class="comment"># 如果已经达到10次了，就不再生产了</span></span><br><span class="line">            <span class="keyword">if</span> gTimes >= <span class="number">10</span>:</span><br><span class="line">                gLock.release()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            gMoney += money</span><br><span class="line">            print(<span class="string">'%s当前存入%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            gLock.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gLock</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">500</span>)</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            <span class="keyword">if</span> gMoney > money:</span><br><span class="line">                gMoney -= money</span><br><span class="line">                print(<span class="string">'%s当前取出%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">                time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 如果钱不够了，有可能是已经超过了次数，这时候就判断一下</span></span><br><span class="line">                <span class="keyword">if</span> gTimes >= <span class="number">10</span>:</span><br><span class="line">                    gLock.release()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                print(<span class="string">"%s当前想取%s元钱，剩余%s元钱，不足！"</span> % (threading.current_thread(),money,gMoney))</span><br><span class="line">            gLock.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Consumer(name=<span class="string">'消费者线程%d'</span>%x).start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Producer(name=<span class="string">'生产者线程%d'</span>%x).start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Condition版的生产者与消费者模式："><a href="#Condition版的生产者与消费者模式：" class="headerlink" title="Condition版的生产者与消费者模式："></a>Condition版的生产者与消费者模式：</h2><p><code>Lock</code>版本的生产者与消费者模式可以正常的运行。但是存在一个不足，在消费者中，总是通过<code>while True</code>死循环并且上锁的方式去判断钱够不够。上锁是一个很耗费CPU资源的行为。因此这种方式不是最好的。还有一种更好的方式便是使用<code>threading.Condition</code>来实现。<code>threading.Condition</code>可以在没有数据的时候处于阻塞等待状态。一旦有合适的数据了，还可以使用<code>notify</code>相关的函数来通知其他处于等待状态的线程。这样就可以不用做一些无用的上锁和解锁的操作。可以提高程序的性能。首先对<code>threading.Condition</code>相关的函数做个介绍，<code>threading.Condition</code>类似<code>threading.Lock</code>，可以在修改全局数据的时候进行上锁，也可以在修改完毕后进行解锁。以下将一些常用的函数做个简单的介绍：</p>
<ol>
<li><code>acquire</code>：上锁。</li>
<li><code>release</code>：解锁。</li>
<li><code>wait</code>：将当前线程处于等待状态，并且会释放锁。可以被其他线程使用<code>notify</code>和<code>notify_all</code>函数唤醒。被唤醒后会继续等待上锁，上锁后继续执行下面的代码。</li>
<li><code>notify</code>：通知某个正在等待的线程，默认是第1个等待的线程。</li>
<li><code>notify_all</code>：通知所有正在等待的线程。<code>notify</code>和<code>notify_all</code>不会释放锁。并且需要在<code>release</code>之前调用。</li>
</ol>
<p><code>Condition</code>版的生产者与消费者模式代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">1000</span></span><br><span class="line">gCondition = threading.Condition()</span><br><span class="line">gTimes = <span class="number">0</span></span><br><span class="line">gTotalTimes = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gCondition</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            <span class="keyword">if</span> gTimes >= gTotalTimes:</span><br><span class="line">                gCondition.release()</span><br><span class="line">                print(<span class="string">'当前生产者总共生产了%s次'</span>%gTimes)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            gMoney += money</span><br><span class="line">            print(<span class="string">'%s当前存入%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            gCondition.notify_all()</span><br><span class="line">            gCondition.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gCondition</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">500</span>)</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            <span class="comment"># 这里要给个while循环判断，因为等轮到这个线程的时候</span></span><br><span class="line">            <span class="comment"># 条件有可能又不满足了</span></span><br><span class="line">            <span class="keyword">while</span> gMoney < money:</span><br><span class="line">                <span class="keyword">if</span> gTimes >= gTotalTimes:</span><br><span class="line">                    gCondition.release()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                print(<span class="string">'%s准备取%s元钱，剩余%s元钱，不足！'</span>%(threading.current_thread(),money,gMoney))</span><br><span class="line">                gCondition.wait()</span><br><span class="line">            gMoney -= money</span><br><span class="line">            print(<span class="string">'%s当前取出%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            gCondition.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Consumer(name=<span class="string">'消费者线程%d'</span>%x).start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        Producer(name=<span class="string">'生产者线程%d'</span>%x).start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Queue线程安全队列："><a href="#Queue线程安全队列：" class="headerlink" title="Queue线程安全队列："></a>Queue线程安全队列：</h2><p>在线程中，访问一些全局变量，加锁是一个经常的过程。如果你是想把一些数据存储到某个队列中，那么Python内置了一个线程安全的模块叫做<code>queue</code>模块。Python中的queue模块中提供了同步的、线程安全的队列类，包括FIFO（先进先出）队列Queue，LIFO（后入先出）队列LifoQueue。这些队列都实现了锁原语（可以理解为原子操作，即要么不做，要么都做完），能够在多线程中直接使用。可以使用队列来实现线程间的同步。相关的函数如下：</p>
<ol>
<li>初始化Queue(maxsize)：创建一个先进先出的队列。</li>
<li>qsize()：返回队列的大小。</li>
<li>empty()：判断队列是否为空。</li>
<li>full()：判断队列是否满了。</li>
<li>get()：从队列中取最后一个数据。</li>
<li>put()：将一个数据放到队列中。</li>
</ol>
<h2 id="使用生产者与消费者模式多线程下载表情包："><a href="#使用生产者与消费者模式多线程下载表情包：" class="headerlink" title="使用生产者与消费者模式多线程下载表情包："></a>使用生产者与消费者模式多线程下载表情包：</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    headers = {</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page_queue,img_queue,*args,**kwargs)</span>:</span></span><br><span class="line">        super(Producer, self).__init__(*args,**kwargs)</span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        self.img_queue = img_queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.page_queue.empty():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            url = self.page_queue.get()</span><br><span class="line">            self.parse_page(url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        response = requests.get(url,headers=self.headers)</span><br><span class="line">        text = response.text</span><br><span class="line">        html = etree.HTML(text)</span><br><span class="line">        imgs = html.xpath(<span class="string">"//div[@class='page-content text-center']//a//img"</span>)</span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> imgs:</span><br><span class="line">            <span class="keyword">if</span> img.get(<span class="string">'class'</span>) == <span class="string">'gif'</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            img_url = img.xpath(<span class="string">".//@data-original"</span>)[<span class="number">0</span>]</span><br><span class="line">            suffix = os.path.splitext(img_url)[<span class="number">1</span>]</span><br><span class="line">            alt = img.xpath(<span class="string">".//@alt"</span>)[<span class="number">0</span>]</span><br><span class="line">            alt = re.sub(<span class="string">r'[，。？?,/\\·]'</span>,<span class="string">''</span>,alt)</span><br><span class="line">            img_name = alt + suffix</span><br><span class="line">            self.img_queue.put((img_url,img_name))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page_queue,img_queue,*args,**kwargs)</span>:</span></span><br><span class="line">        super(Consumer, self).__init__(*args,**kwargs)</span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        self.img_queue = img_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.img_queue.empty():</span><br><span class="line">                <span class="keyword">if</span> self.page_queue.empty():</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            img = self.img_queue.get(block=<span class="literal">True</span>)</span><br><span class="line">            url,filename = img</span><br><span class="line">            request.urlretrieve(url,<span class="string">'images/'</span>+filename)</span><br><span class="line">            print(filename+<span class="string">'  下载完成！'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    page_queue = Queue(<span class="number">100</span>)</span><br><span class="line">    img_queue = Queue(<span class="number">500</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">        url = <span class="string">"http://www.doutula.com/photo/list/?page=%d"</span> % x</span><br><span class="line">        page_queue.put(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = Producer(page_queue,img_queue)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = Consumer(page_queue,img_queue)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure>

<h2 id="GIL全局解释器锁："><a href="#GIL全局解释器锁：" class="headerlink" title="GIL全局解释器锁："></a>GIL全局解释器锁：</h2><p>Python自带的解释器是<code>CPython</code>。<code>CPython</code>解释器的多线程实际上是一个假的多线程（在多核CPU中，只能利用一核，不能利用多核）。同一时刻只有一个线程在执行，为了保证同一时刻只有一个线程在执行，在<code>CPython</code>解释器中有一个东西叫做<code>GIL（Global Intepreter Lock）</code>，叫做全局解释器锁。这个解释器锁是有必要的。因为<code>CPython</code>解释器的内存管理不是线程安全的。当然除了<code>CPython</code>解释器，还有其他的解释器，有些解释器是没有<code>GIL</code>锁的，见下面：</p>
<ol>
<li><code>Jython</code>：用Java实现的Python解释器。不存在GIL锁。更多详情请见：<a href="https://zh.wikipedia.org/wiki/Jython" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Jython</a></li>
<li><code>IronPython</code>：用<code>.net</code>实现的Python解释器。不存在GIL锁。更多详情请见：<a href="https://zh.wikipedia.org/wiki/IronPython" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/IronPython</a></li>
<li><code>PyPy</code>：用<code>Python</code>实现的Python解释器。存在GIL锁。更多详情请见：<a href="https://zh.wikipedia.org/wiki/PyPy" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/PyPy</a><br>GIL虽然是一个假的多线程。但是在处理一些IO操作（比如文件读写和网络请求）还是可以在很大程度上提高效率的。在IO操作上建议使用多线程提高效率。在一些CPU计算操作上不建议使用多线程，而建议使用多进程。</li>
</ol>
<h2 id="多线程下载百思不得姐段子作业："><a href="#多线程下载百思不得姐段子作业：" class="headerlink" title="多线程下载百思不得姐段子作业："></a>多线程下载百思不得姐段子作业：</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSSpider</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    headers = {</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page_queue,joke_queue,*args,**kwargs)</span>:</span></span><br><span class="line">        super(BSSpider, self).__init__(*args,**kwargs)</span><br><span class="line">        self.base_domain = <span class="string">'http://www.budejie.com'</span></span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        self.joke_queue = joke_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.page_queue.empty():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            url = self.page_queue.get()</span><br><span class="line">            response = requests.get(url, headers=self.headers)</span><br><span class="line">            text = response.text</span><br><span class="line">            html = etree.HTML(text)</span><br><span class="line">            descs = html.xpath(<span class="string">"//div[@class='j-r-list-c-desc']"</span>)</span><br><span class="line">            <span class="keyword">for</span> desc <span class="keyword">in</span> descs:</span><br><span class="line">                jokes = desc.xpath(<span class="string">".//text()"</span>)</span><br><span class="line">                joke = <span class="string">"\n"</span>.join(jokes).strip()</span><br><span class="line">                link = self.base_domain+desc.xpath(<span class="string">".//a/@href"</span>)[<span class="number">0</span>]</span><br><span class="line">                self.joke_queue.put((joke,link))</span><br><span class="line">            print(<span class="string">'='</span>*<span class="number">30</span>+<span class="string">"第%s页下载完成！"</span>%url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]+<span class="string">"="</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSWriter</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    headers = {</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, joke_queue, writer,gLock, *args, **kwargs)</span>:</span></span><br><span class="line">        super(BSWriter, self).__init__(*args, **kwargs)</span><br><span class="line">        self.joke_queue = joke_queue</span><br><span class="line">        self.writer = writer</span><br><span class="line">        self.lock = gLock</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                joke_info = self.joke_queue.get(timeout=<span class="number">40</span>)</span><br><span class="line">                joke,link = joke_info</span><br><span class="line">                self.lock.acquire()</span><br><span class="line">                self.writer.writerow((joke,link))</span><br><span class="line">                self.lock.release()</span><br><span class="line">                print(<span class="string">'保存一条'</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    page_queue = Queue(<span class="number">10</span>)</span><br><span class="line">    joke_queue = Queue(<span class="number">500</span>)</span><br><span class="line">    gLock = threading.Lock()</span><br><span class="line">    fp = open(<span class="string">'bsbdj.csv'</span>, <span class="string">'a'</span>,newline=<span class="string">''</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    writer = csv.writer(fp)</span><br><span class="line">    writer.writerow((<span class="string">'content'</span>, <span class="string">'link'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">        url = <span class="string">'http://www.budejie.com/text/%d'</span> % x</span><br><span class="line">        page_queue.put(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = BSSpider(page_queue,joke_queue)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = BSWriter(joke_queue,writer,gLock)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>csv文件处理</title>
    <url>/2020/04/11/python%E7%88%AC%E8%99%AB/12-csv%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<html><head></head><body><h1 id="csv文件处理"><a href="#csv文件处理" class="headerlink" title="csv文件处理"></a>csv文件处理</h1><h2 id="读取csv文件："><a href="#读取csv文件：" class="headerlink" title="读取csv文件："></a>读取csv文件：</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'stock.csv'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    reader = csv.reader(fp)</span><br><span class="line">    titles = next(reader)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> reader:</span><br><span class="line">        print(x)</span><br></pre></td></tr></tbody></table></figure>

<a id="more"></a>

<p>这样操作，以后获取数据的时候，就要通过下表来获取数据。如果想要在获取数据的时候通过标题来获取。那么可以使用<code>DictReader</code>。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'stock.csv'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    reader = csv.DictReader(fp)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> reader:</span><br><span class="line">        print(x[<span class="string">'turnoverVol'</span>])</span><br></pre></td></tr></tbody></table></figure>

<h2 id="写入数据到csv文件："><a href="#写入数据到csv文件：" class="headerlink" title="写入数据到csv文件："></a>写入数据到csv文件：</h2><p>写入数据到csv文件，需要创建一个<code>writer</code>对象，主要用到两个方法。一个是<code>writerow</code>，这个是写入一行。一个是<code>writerows</code>，这个是写入多行。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">headers = [<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'classroom'</span>]</span><br><span class="line">values = [</span><br><span class="line">    (<span class="string">'zhiliao'</span>,<span class="number">18</span>,<span class="string">'111'</span>),</span><br><span class="line">    (<span class="string">'wena'</span>,<span class="number">20</span>,<span class="string">'222'</span>),</span><br><span class="line">    (<span class="string">'bbc'</span>,<span class="number">21</span>,<span class="string">'111'</span>)</span><br><span class="line">]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.csv'</span>,<span class="string">'w'</span>,newline=<span class="string">''</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    writer = csv.writer(fp)</span><br><span class="line">    writer.writerow(headers)</span><br><span class="line">    writer.writerows(values)</span><br></pre></td></tr></tbody></table></figure>

<p>也可以使用字典的方式把数据写入进去。这时候就需要使用<code>DictWriter</code>了。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">headers = [<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'classroom'</span>]</span><br><span class="line">values = [</span><br><span class="line">    {<span class="string">"name"</span>:<span class="string">'wenn'</span>,<span class="string">"age"</span>:<span class="number">20</span>,<span class="string">"classroom"</span>:<span class="string">'222'</span>},</span><br><span class="line">    {<span class="string">"name"</span>:<span class="string">'abc'</span>,<span class="string">"age"</span>:<span class="number">30</span>,<span class="string">"classroom"</span>:<span class="string">'333'</span>}</span><br><span class="line">]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.csv'</span>,<span class="string">'w'</span>,newline=<span class="string">''</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    writer = csv.DictWriter(fp,headers)</span><br><span class="line">    writer = csv.writeheader()</span><br><span class="line">    writer.writerow({<span class="string">'name'</span>:<span class="string">'zhiliao'</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"classroom"</span>:<span class="string">'111'</span>})</span><br><span class="line">    writer.writerows(values</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>json文件处理</title>
    <url>/2020/04/10/python%E7%88%AC%E8%99%AB/11-json%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<html><head></head><body><h1 id="json文件处理"><a href="#json文件处理" class="headerlink" title="json文件处理"></a>json文件处理</h1><h2 id="什么是json："><a href="#什么是json：" class="headerlink" title="什么是json："></a>什么是json：</h2><p>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript (w3c制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。更多解释请见：<a href="https://baike.baidu.com/item/JSON/2462549?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/JSON/2462549?fr=aladdin</a></p>
<a id="more"></a>

<h2 id="JSON支持数据格式："><a href="#JSON支持数据格式：" class="headerlink" title="JSON支持数据格式："></a>JSON支持数据格式：</h2><ol>
<li>对象（字典）。使用花括号。</li>
<li>数组（列表）。使用方括号。</li>
<li>整形、浮点型、布尔类型还有null类型。</li>
<li>字符串类型（字符串必须要用双引号，不能用单引号）。</li>
</ol>
<p>多个数据之间使用逗号分开。<br><strong>注意：json本质上就是一个字符串。</strong></p>
<h2 id="字典和列表转JSON："><a href="#字典和列表转JSON：" class="headerlink" title="字典和列表转JSON："></a>字典和列表转JSON：</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">books = [</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'钢铁是怎样练成的'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">9.8</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'红楼梦'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">9.9</span></span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">json_str = json.dumps(books,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">print(json_str)</span><br></pre></td></tr></tbody></table></figure>

<p>因为<code>json</code>在<code>dump</code>的时候，只能存放<code>ascii</code>的字符，因此会将中文进行转义，这时候我们可以使用<code>ensure_ascii=False</code>关闭这个特性。<br>在<code>Python</code>中。只有基本数据类型才能转换成<code>JSON</code>格式的字符串。也即：<code>int</code>、<code>float</code>、<code>str</code>、<code>list</code>、<code>dict</code>、<code>tuple</code>。</p>
<h3 id="将json数据直接dump到文件中："><a href="#将json数据直接dump到文件中：" class="headerlink" title="将json数据直接dump到文件中："></a>将json数据直接<code>dump</code>到文件中：</h3><p><code>json</code>模块中除了<code>dumps</code>函数，还有一个<code>dump</code>函数，这个函数可以传入一个文件指针，直接将字符串<code>dump</code>到文件中。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">books = [</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'钢铁是怎样练成的'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">9.8</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'红楼梦'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">9.9</span></span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.json'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json.dump(books,fp)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="将一个json字符串load成Python对象："><a href="#将一个json字符串load成Python对象：" class="headerlink" title="将一个json字符串load成Python对象："></a>将一个json字符串load成Python对象：</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">json_str = <span class="string">'[{"title": "钢铁是怎样练成的", "price": 9.8}, {"title": "红楼梦", "price": 9.9}]'</span></span><br><span class="line">books = json.loads(json_str,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(type(books))</span><br><span class="line">print(books)</span><br></pre></td></tr></tbody></table></figure>

<h3 id="直接从文件中读取json："><a href="#直接从文件中读取json：" class="headerlink" title="直接从文件中读取json："></a>直接从文件中读取json：</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.json'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json_str = json.load(fp)</span><br><span class="line">    print(json_str)</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy-Redis组件介绍</title>
    <url>/2022/06/15/python%E7%88%AC%E8%99%AB/26-Scrapy-Redis%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<html><head></head><body><h1 id="2-Scrapy-Redis组件介绍"><a href="#2-Scrapy-Redis组件介绍" class="headerlink" title="2-Scrapy-Redis组件介绍"></a>2-Scrapy-Redis组件介绍</h1><a id="more"></a>

<p><code>Scrapy</code>是一个框架，他本身是不支持分布式的。如果我们想要做分布式的爬虫，就需要借助一个组件叫做<code>Scrapy-Redis</code>，这个组件正是利用了<code>Redis</code>可以分布式的功能，集成到<code>Scrapy</code>框架中，使得爬虫可以进行分布式。可以充分的利用资源（多个ip、更多带宽、同步爬取）来提高爬虫的爬行效率。</p>
<h2 id="分布式爬虫的优点："><a href="#分布式爬虫的优点：" class="headerlink" title="分布式爬虫的优点："></a>分布式爬虫的优点：</h2><ol>
<li>可以充分利用多台机器的带宽。</li>
<li>可以充分利用多台机器的ip地址。</li>
<li>多台机器做，爬取效率更高。</li>
</ol>
<h2 id="分布式爬虫必须要解决的问题："><a href="#分布式爬虫必须要解决的问题：" class="headerlink" title="分布式爬虫必须要解决的问题："></a>分布式爬虫必须要解决的问题：</h2><ol>
<li>分布式爬虫是好几台机器在同时运行，如何保证不同的机器爬取页面的时候不会出现重复爬取的问题。</li>
<li>同样，分布式爬虫在不同的机器上运行，在把数据爬完后如何保证保存在同一个地方。</li>
</ol>
<h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><p>通过<code>pip install scrapy-redis</code>即可安装。</p>
<h2 id="编写Scrapy-Redis分布式爬虫："><a href="#编写Scrapy-Redis分布式爬虫：" class="headerlink" title="编写Scrapy-Redis分布式爬虫："></a>编写Scrapy-Redis分布式爬虫：</h2><p>要将一个<code>Scrapy</code>项目变成一个<code>Scrapy-redis</code>项目只需修改以下三点就可以了：</p>
<ol>
<li>将爬虫的类从<code>scrapy.Spider</code>变成<code>scrapy_redis.spiders.RedisSpider</code>；或者是从<code>scrapy.CrawlSpider</code>变成<code>scrapy_redis.spiders.RedisCrawlSpider</code>。</li>
<li>将爬虫中的<code>start_urls</code>删掉。增加一个<code>redis_key="xxx"</code>。这个<code>redis_key</code>是为了以后在<code>redis</code>中控制爬虫启动的。爬虫的第一个url，就是在redis中通过这个发送出去的。</li>
<li>在配置文件中增加如下配置：</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Scrapy-Redis相关配置</span></span><br><span class="line"><span class="comment"># 确保request存储到redis中</span></span><br><span class="line">SCHEDULER = <span class="string">"scrapy_redis.scheduler.Scheduler"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保所有爬虫共享相同的去重指纹</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">"scrapy_redis.dupefilter.RFPDupeFilter"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置redis为item pipeline</span></span><br><span class="line">ITEM_PIPELINES = {</span><br><span class="line">    <span class="string">'scrapy_redis.pipelines.RedisPipeline'</span>: <span class="number">300</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在redis中保持scrapy-redis用到的队列，不会清理redis中的队列，从而可以实现暂停和恢复的功能。</span></span><br><span class="line">SCHEDULER_PERSIST = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置连接redis信息</span></span><br><span class="line">REDIS_HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span></span><br></pre></td></tr></tbody></table></figure>

<ol>
<li>运行爬虫：<ol>
<li>在爬虫服务器上。进入爬虫文件所在的路径，然后输入命令：<code>scrapy runspider [爬虫名字]</code>。</li>
<li>在<code>Redis</code>服务器上，推入一个开始的url</li>
</ol>
</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB数据库</title>
    <url>/2020/04/08/python%E7%88%AC%E8%99%AB/10-MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<html><head></head><body><h1 id="MongoDB数据库"><a href="#MongoDB数据库" class="headerlink" title="MongoDB数据库"></a>MongoDB数据库</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>官方文档：<a href="http://www.mongoing.com/docs/" target="_blank" rel="noopener">http://www.mongoing.com/docs/</a></p>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>MongoDB是一个面向文档的数据库<br> 举例：{“foo”:3, “greeting”:“Hello,world!”}<br> 区分大小写，且key唯一，不可重复，文档可嵌套</p>
<a id="more"></a>

<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合就是一组文档<br> 文档类似于关系型数据库里的行<br> 集合类似于关系型数据库里的表<br> 集合中的文档无需固定额结构（与关系型数据库的区别）</p>
<h3 id="集合的命名"><a href="#集合的命名" class="headerlink" title="集合的命名"></a>集合的命名</h3><ol>
<li>不能有空字符串（” “）</li>
<li>不能包含\0字符（空字符）</li>
<li>不能使用system.的前缀（系统保留）</li>
<li>建议不包含保留字 “$”</li>
<li>用 .  分割不懂命名空间的子集合（如：blog.users， blog.posts）</li>
</ol>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ol>
<li>多个文档组成集合，多个集合组成数据库</li>
<li>一个实例可以承载多个数据库</li>
<li>每个数据库都有独立的权限</li>
<li>保留的数据名称（admin,local,config）</li>
</ol>
<h2 id="MongoDB安装启动"><a href="#MongoDB安装启动" class="headerlink" title="MongoDB安装启动"></a>MongoDB安装启动</h2><p>下载mis包，安装在根目录下MongoDB文件夹里就OK，例如：D：\MongDB……。切记一开始安装不要选择附带安装compass图形工具，这个下载很慢可能直接卡死。</p>
<p>启动：<br> 配置数据路径<br> 在目录D:\MongoDB\Server\4.0的bin文件使用’Shift’+’右键’选择在此处打开cmd，然后再cmd中输入：monogod –dbpath D:\MongoDB\Server\4.0\data<br> 回车，来到NETWORK  [thread1] waiting for connections on port 27017<br> 此时，在bin里打开另一个cmd，输入mongo，回车，就OK啦<br> 可以使用 show databases 试一试</p>
<h3 id="使用命令行操作数据库（CRUD）"><a href="#使用命令行操作数据库（CRUD）" class="headerlink" title="使用命令行操作数据库（CRUD）"></a>使用命令行操作数据库（CRUD）</h3><p>新增数据（Create）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 进入数据库，如果没有该数据库，会自动创建</span></span><br><span class="line">use students； </span><br><span class="line"><span class="comment"># 新增数据</span></span><br><span class="line">stu = {</span><br><span class="line">  name:<span class="string">'Jhon'</span>,</span><br><span class="line">  age:21}</span><br><span class="line"><span class="comment"># 插入数据到数据库</span></span><br><span class="line">db.students.insert(stu)</span><br></pre></td></tr></tbody></table></figure>
<p>查询数据（Read）</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"># 查询<span class="selector-tag">students</span>中的所有数据</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.find</span>()</span><br><span class="line"># 查询<span class="selector-tag">students</span>中的一条数据</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.findOne</span>()</span><br></pre></td></tr></tbody></table></figure>
<p>修改数据（Update）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 需要先查询这条数据</span></span><br><span class="line">s = db.students.findOne()</span><br><span class="line"><span class="comment"># 修改数据=替换数据，替换后的数据没有年龄</span></span><br><span class="line">db.students.update({name: <span class="string">'Jhon'</span>}, {name: <span class="string">'JhonC'</span>})</span><br></pre></td></tr></tbody></table></figure>

<p>删除数据（Delete）</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"># 删除该属性的数据</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.remove</span>({<span class="attribute">name</span>: <span class="string">'JhonC'</span>})</span><br><span class="line"># 删除<span class="selector-tag">students</span>中的所有数据</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.remove</span>(())</span><br></pre></td></tr></tbody></table></figure>
<p>练习：</p>
<figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta"># 新建并进入数据库</span></span><br><span class="line">use students</span><br><span class="line"><span class="meta"># 查看当前数据库</span></span><br><span class="line">db.log</span><br><span class="line"><span class="meta">#插入多条数据</span></span><br><span class="line">db.students.insertMany(</span><br><span class="line">    [<span class="meta"></span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"bob"</span>, age:16, sex: <span class="meta-string">"male"</span>, grade:95},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"ahn"</span>, age:18, sex: <span class="meta-string">"female"</span>, grade:45},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"xi"</span>, age:15, sex: <span class="meta-string">"male"</span>, grade:75},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"bob1"</span>, age:16, sex: <span class="meta-string">"male"</span>, grade:95},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"ahn1"</span>, age:18, sex: <span class="meta-string">"male"</span>, grade:45},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"xi1"</span>, age:15, sex: <span class="meta-string">"female"</span>, grade:55},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"bob2"</span>, age:16, sex: <span class="meta-string">"female"</span>, grade:95},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"ahn2"</span>, age:18, sex: <span class="meta-string">"male"</span>, grade:60},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"xi2"</span>, age:15, sex: <span class="meta-string">"male"</span>, grade:75},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"bob3"</span>, age:16, sex: <span class="meta-string">"male"</span>, grade:95},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"ahn3"</span>, age:18, sex: <span class="meta-string">"female"</span>, grade:45},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"xi3"</span>, age:15, sex: <span class="meta-string">"male"</span>, grade:85},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"bob4"</span>, age:16, sex: <span class="meta-string">"female"</span>, grade:95},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"ahn4"</span>, age:18, sex: <span class="meta-string">"male"</span>, grade:45},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"xi4"</span>, age:15, sex: <span class="meta-string">"male"</span>, grade:75}</span></span><br><span class="line"><span class="meta">    </span>]</span><br><span class="line">)</span><br><span class="line"><span class="meta"># 查看所有数据</span></span><br><span class="line">db.students.find()</span><br><span class="line"><span class="meta"># 查看数据数量</span></span><br><span class="line">db.students.count()</span><br><span class="line"><span class="meta"># cls 清屏</span></span><br><span class="line"><span class="meta"># 查询所有男生数据</span></span><br><span class="line">db.students.find({sex: <span class="string">'male'</span>})</span><br><span class="line"><span class="meta"># 查询所有及格学生信息</span></span><br><span class="line">db.students.find({grade:{<span class="string">'$gte'</span>:<span class="number">60</span>}})</span><br><span class="line"><span class="meta"># 查询所有18岁男生和16岁女生的数据</span></span><br><span class="line">db.students.find({<span class="string">'$or'</span>:[{sex:<span class="string">'male'</span>, age:<span class="number">18</span>}, {sex: <span class="string">'female'</span>, age:<span class="number">16</span>}]})</span><br><span class="line"><span class="meta"># 按照学生的年龄进行排序（1代表升序，-1代表降序）</span></span><br><span class="line">db.students.find().sort({age: <span class="number">1</span>})</span><br><span class="line"><span class="meta"># 给所有学生都加一个地址=china的字段属性（修改器操作）</span></span><br><span class="line">db.students.update({}, {<span class="string">'$set'</span>:{adress:<span class="string">'china'</span>}}, {multi:<span class="literal">true</span>})</span><br><span class="line"><span class="meta"># 给所有女学生都加一岁（修改器操作）</span></span><br><span class="line">db.students.update({sex:<span class="string">'female'</span>}, {<span class="string">'$inc'</span>:{age:<span class="number">1</span>}}, {multi: <span class="literal">true</span>})</span><br></pre></td></tr></tbody></table></figure>

<h2 id="使用Python连接MongoDB"><a href="#使用Python连接MongoDB" class="headerlink" title="使用Python连接MongoDB"></a>使用Python连接MongoDB</h2><p>手动启动MongoDB<br> 在MongoDB的bin目录打开cmd 输入 monogod –dbpath D:\MongoDB\Server\4.0\data</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 建立客户端连接的三种方法</span></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">client = MongoClient()</span><br><span class="line"><span class="comment"># client2 = MongoClient('localhost', 27017)</span></span><br><span class="line"><span class="comment"># client3 = MongoClient('mongodb://localhost:27017')</span></span><br><span class="line"><span class="comment"># 显示数据库</span></span><br><span class="line">dbs = client.list_database_names()</span><br><span class="line">print(dbs)</span><br><span class="line"><span class="comment"># 进入某个数据库</span></span><br><span class="line">db = client.blog</span><br></pre></td></tr></tbody></table></figure>

<h3 id="curd完整示例代码"><a href="#curd完整示例代码" class="headerlink" title="curd完整示例代码"></a>curd完整示例代码</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">from</span> bson.objectid <span class="keyword">import</span> ObjectId</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMongo</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.client = MongoClient()</span><br><span class="line">        self.db = self.client[<span class="string">'students'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''新增数据'''</span></span><br><span class="line">        post ={</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'ben'</span>,</span><br><span class="line">            <span class="string">'age'</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="string">'sex'</span>: <span class="string">"male"</span>,</span><br><span class="line">            <span class="string">'grade'</span>: <span class="number">80</span>,</span><br><span class="line">            <span class="string">'adress'</span>: <span class="string">"china"</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> self.db.students.insert_one(post)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_many</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''新增多条数据'''</span></span><br><span class="line">        infos = [</span><br><span class="line">            {<span class="string">'name'</span>: <span class="string">'ben'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">"male"</span>, <span class="string">'grade'</span>: <span class="number">80</span>, <span class="string">'adress'</span>: <span class="string">"china"</span>},</span><br><span class="line">            {<span class="string">'name'</span>: <span class="string">'sum'</span>, <span class="string">'age'</span>: <span class="number">19</span>, <span class="string">'sex'</span>: <span class="string">"male"</span>, <span class="string">'grade'</span>: <span class="number">75</span>, <span class="string">'adress'</span>: <span class="string">"china"</span>},</span><br><span class="line">            {<span class="string">'name'</span>: <span class="string">'lily'</span>, <span class="string">'age'</span>: <span class="number">16</span>, <span class="string">'sex'</span>: <span class="string">"female"</span>, <span class="string">'grade'</span>: <span class="number">90</span>, <span class="string">'adress'</span>: <span class="string">"china"</span>},</span><br><span class="line">            {<span class="string">'name'</span>: <span class="string">'teddy'</span>, <span class="string">'age'</span>: <span class="number">19</span>, <span class="string">'sex'</span>: <span class="string">"male"</span>, <span class="string">'grade'</span>: <span class="number">65</span>, <span class="string">'adress'</span>: <span class="string">"china"</span>},</span><br><span class="line">            {<span class="string">'name'</span>: <span class="string">'fluence'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">"female"</span>, <span class="string">'grade'</span>: <span class="number">80</span>, <span class="string">'adress'</span>: <span class="string">"china"</span>}</span><br><span class="line">            ]</span><br><span class="line">        <span class="keyword">return</span> self.db.students.insert_many(infos)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''查询一条数据'''</span></span><br><span class="line">        <span class="keyword">return</span> self.db.students.find_one()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_more</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''查询多条数据'''</span></span><br><span class="line">        <span class="keyword">return</span> self.db.students.find({<span class="string">'age'</span>: <span class="number">18</span>})</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_one_from_oid</span><span class="params">(self, oid)</span>:</span></span><br><span class="line">        <span class="string">'''查询指定ID的数据'''</span></span><br><span class="line">        obj = ObjectId(oid)</span><br><span class="line">        <span class="keyword">return</span> self.db.students.find_one({<span class="string">'_id'</span>: obj})</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''修改一条数据'''</span></span><br><span class="line">        <span class="keyword">return</span> self.db.students.update_one({<span class="string">'age'</span>: <span class="number">20</span>}, {<span class="string">'$inc'</span>: {<span class="string">'x'</span>: <span class="number">10</span>}})</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_many</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''修改多条数据'''</span></span><br><span class="line">        <span class="keyword">return</span> self.db.students.update_many({}, {<span class="string">'$inc'</span>: {<span class="string">'age'</span>: <span class="number">5</span>}})</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dalete_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''删除一条数据'''</span></span><br><span class="line">        <span class="keyword">return</span> self.db.students.delete_one({<span class="string">'name'</span>: <span class="string">'ben'</span>})</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_many</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''删除多条数据'''</span></span><br><span class="line">        <span class="keyword">return</span> self.db.students.delete_many({<span class="string">'age'</span>: <span class="number">24</span>})</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    obj = TestMongo()</span><br><span class="line">    <span class="comment"># rest = obj.add_one()</span></span><br><span class="line">    <span class="comment"># print(rest)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># rest = obj.add_many()</span></span><br><span class="line">    <span class="comment"># print(rest)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># rest = obj.get_one()</span></span><br><span class="line">    <span class="comment"># print(rest)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># rest = obj.get_more()</span></span><br><span class="line">    <span class="comment"># for i in rest:</span></span><br><span class="line">    <span class="comment">#     print(i['_id'])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># rest = obj.get_one_from_oid('5c68b5cb5a49891b40b8a18e')</span></span><br><span class="line">    <span class="comment"># print(rest)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># rest = obj.update_one()</span></span><br><span class="line">    <span class="comment"># print(rest)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># rest = obj.update_many()</span></span><br><span class="line">    <span class="comment"># print(rest)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># rest = obj.delete_one()</span></span><br><span class="line">    <span class="comment"># print(rest.delete_count)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># rest = obj.delete_many()</span></span><br><span class="line">    <span class="comment"># print(rest.delete_count)</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库</title>
    <url>/2020/04/08/python%E7%88%AC%E8%99%AB/9-MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<html><head></head><body><h1 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h1><h2 id="安装mysql："><a href="#安装mysql：" class="headerlink" title="安装mysql："></a>安装mysql：</h2><ol>
<li>在官网：<a href="https://dev.mysql.com/downloads/windows/installer/5.7.html" target="_blank" rel="noopener">https://dev.mysql.com/downloads/windows/installer/5.7.html</a></li>
<li>如果提示没有<code>.NET Framework</code>框架。那么就在提示框中找到下载链接，下载一个就可以了。</li>
<li>如果提示没有<code>Microsoft Virtual C++ x64(x86)</code>，那么百度或者谷歌这个软件安装即可。</li>
</ol>
<a id="more"></a>

<p>​    4. 如果没有找到。那么私聊我。</p>
<h2 id="navicat："><a href="#navicat：" class="headerlink" title="navicat："></a>navicat：</h2><p>navicat是一个操作mysql数据库非常方便的软件。使用他操作数据库，就跟使用excel操作数据是一样的。</p>
<h2 id="安装驱动程序："><a href="#安装驱动程序：" class="headerlink" title="安装驱动程序："></a>安装驱动程序：</h2><p>Python要想操作MySQL。必须要有一个中间件，或者叫做驱动程序。驱动程序有很多。比如有<code>mysqldb</code>、<code>mysqlclient</code>、<code>pymysql</code>等。在这里，我们选择用<code>pymysql</code>。安装方式也是非常简单，通过命令<code>pip install pymysql</code>即可安装。</p>
<h2 id="数据库连接："><a href="#数据库连接：" class="headerlink" title="数据库连接："></a>数据库连接：</h2><p>数据库连接之前。首先先确认以下工作完成，这里我们以一个<code>pymysql_test</code>数据库.以下将介绍连接<code>mysql</code>的示例代码：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(</span><br><span class="line">    host=<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    user=<span class="string">'root'</span>,</span><br><span class="line">    password=<span class="string">'root'</span>,</span><br><span class="line">    database=<span class="string">'pymysql_test'</span>,</span><br><span class="line">    port=<span class="number">3306</span></span><br><span class="line">)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">cursor.execute(<span class="string">"select 1"</span>)</span><br><span class="line">data = cursor.fetchone()</span><br><span class="line">print(data)</span><br><span class="line">db.close()</span><br></pre></td></tr></tbody></table></figure>

<h2 id="插入数据："><a href="#插入数据：" class="headerlink" title="插入数据："></a>插入数据：</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(</span><br><span class="line">    host=<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    user=<span class="string">'root'</span>,</span><br><span class="line">    password=<span class="string">'root'</span>,</span><br><span class="line">    database=<span class="string">'pymysql_test'</span>,</span><br><span class="line">    port=<span class="number">3306</span></span><br><span class="line">)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">insert into user(</span></span><br><span class="line"><span class="string">    id,username,gender,age,password</span></span><br><span class="line"><span class="string">  ) </span></span><br><span class="line"><span class="string">  values(null,'abc',1,18,'111111');</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.commit()</span><br><span class="line">db.close()</span><br></pre></td></tr></tbody></table></figure>

<p>如果在数据还不能保证的情况下，可以使用以下方式来插入数据：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">insert into user(</span></span><br><span class="line"><span class="string">    id,username,gender,age,password</span></span><br><span class="line"><span class="string">  ) </span></span><br><span class="line"><span class="string">  values(null,%s,%s,%s,%s);</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql,(<span class="string">'spider'</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="string">'222222'</span>))</span><br></pre></td></tr></tbody></table></figure>

<h2 id="查找数据："><a href="#查找数据：" class="headerlink" title="查找数据："></a>查找数据：</h2><p>使用<code>pymysql</code>查询数据。可以使用<code>fetch*</code>方法。</p>
<ol>
<li><code>fetchone()</code>：这个方法每次之获取一条数据。</li>
<li><code>fetchall()</code>：这个方法接收全部的返回结果。</li>
<li><code>fetchmany(size)</code>：可以获取指定条数的数据。<br>示例代码如下：</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">select * from user</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    result = cursor.fetchone()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(result)</span><br><span class="line">db.close()</span><br></pre></td></tr></tbody></table></figure>

<p>或者是直接使用<code>fetchall</code>，一次性可以把所有满足条件的数据都取出来：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">select * from user</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">results = cursor.fetchall()</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br><span class="line">db.close()</span><br></pre></td></tr></tbody></table></figure>

<p>或者是使用<code>fetchmany</code>，指定获取多少条数据：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">select * from user</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">results = cursor.fetchmany(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br><span class="line">db.close()</span><br></pre></td></tr></tbody></table></figure>

<h2 id="删除数据："><a href="#删除数据：" class="headerlink" title="删除数据："></a>删除数据：</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">delete from user where id=1</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.commit()</span><br><span class="line">db.close()</span><br></pre></td></tr></tbody></table></figure>

<h2 id="更新数据："><a href="#更新数据：" class="headerlink" title="更新数据："></a>更新数据：</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">conn = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">'root'</span>,database=<span class="string">'pymysql_demo'</span>,port=<span class="number">3306</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">update user set username='aaa' where id=1</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">conn.close()</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>excel文件处理</title>
    <url>/2020/04/06/python%E7%88%AC%E8%99%AB/8-excel%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<html><head></head><body><h1 id="excel文件处理"><a href="#excel文件处理" class="headerlink" title="excel文件处理"></a>excel文件处理</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ol>
<li>pandas依赖处理Excel的xlrd模块，所以我们需要提前安装这个，安装命令是：pip install xlrd</li>
<li>安装pandas模块还需要一定的编码环境，所以我们自己在安装的时候，确保你的电脑有这些环境：Net.4 、VC-Compiler以及winsdk_web，如果大家没有这些软件~可以咨询我们的辅导员索要相关安装工具。</li>
<li>步骤1和2 准备好了之后，我们就可以开始安装pandas了，安装命令是：pip install pandas</li>
</ol>
<a id="more"></a>

<h2 id="pandas操作Excel表单"><a href="#pandas操作Excel表单" class="headerlink" title="pandas操作Excel表单"></a>pandas操作Excel表单</h2><p> 数据准备，有一个Excel文件：lemon.xlsx有两个表单，表单名分别为：Python 以及student，</p>
<p>Python的表单数据如下所示：</p>
<p><img src="/2020/04/06/python%E7%88%AC%E8%99%AB/8-excel%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/pandas-01.png" alt></p>
<p>student的表单数据如下所示：</p>
<p><img src="/2020/04/06/python%E7%88%AC%E8%99%AB/8-excel%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/pandas-02.png" alt></p>
<p> 1：在利用pandas模块进行操作前，可以先引入这个模块，如下：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">import  pandas  as pd</span><br></pre></td></tr></tbody></table></figure>

<p>   2:读取Excel文件的两种方式：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#方法一：默认读取第一个表单df=pd.read_excel('lemon.xlsx')#这个会直接默认读取到这个Excel的第一个表单</span><br><span class="line">data=df.head()#默认读取前5行的数据</span><br><span class="line">print("获取到所有的值:\n{0}".format(data))#格式化输出</span><br></pre></td></tr></tbody></table></figure>

<p>得到的结果是一个二维矩阵，如下所示：</p>
<p><img src="/2020/04/06/python%E7%88%AC%E8%99%AB/8-excel%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/pandas-03.png" alt></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#方法二：通过指定表单名的方式来读取</span><br><span class="line">df=pd.read_excel('lemon.xlsx',sheet_name='student')#可以通过sheet_name来指定读取的表单</span><br><span class="line">data=df.head()#默认读取前5行的数据</span><br><span class="line">print("获取到所有的值:\n{0}".format(data))#格式化输出</span><br></pre></td></tr></tbody></table></figure>
<p>得到的结果如下所示，也是一个二维矩阵：<br><img src="/2020/04/06/python%E7%88%AC%E8%99%AB/8-excel%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/pandas-04.png" alt></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">方法三：通过表单索引来指定要访问的表单，0表示第一个表单</span></span><br><span class="line"><span class="meta">#</span><span class="bash">也可以采用表单名和索引的双重方式来定位表单</span></span><br><span class="line"><span class="meta">#</span><span class="bash">也可以同时定位多个表单，方式都罗列如下所示</span></span><br><span class="line">df=pd.read_excel('lemon.xlsx',sheet_name=['python','student'])#可以通过表单名同时指定多个</span><br><span class="line"><span class="meta">#</span><span class="bash"> df=pd.read_excel(<span class="string">'lemon.xlsx'</span>,sheet_name=0)<span class="comment">#可以通过表单索引来指定读取的表单</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> df=pd.read_excel(<span class="string">'lemon.xlsx'</span>,sheet_name=[<span class="string">'python'</span>,1])<span class="comment">#可以混合的方式来指定</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> df=pd.read_excel(<span class="string">'lemon.xlsx'</span>,sheet_name=[1,2])<span class="comment">#可以通过索引 同时指定多个</span></span></span><br><span class="line">data=df.values#获取所有的数据，注意这里不能用head()方法哦~</span><br><span class="line">print("获取到所有的值:\n{0}".format(data))#格式化输出</span><br></pre></td></tr></tbody></table></figure>

<h2 id="pandas操作Excel的行列"><a href="#pandas操作Excel的行列" class="headerlink" title="pandas操作Excel的行列"></a>pandas操作Excel的行列</h2><p><strong>1：读取指定的单行，数据会存在列表里面</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">#1：读取指定行df=pd.read_excel('lemon.xlsx')#这个会直接默认读取到这个Excel的第一个表单</span><br><span class="line">data=df.ix[0].values#0表示第一行 这里读取数据并不包含表头，要注意哦！</span><br><span class="line">print("读取指定行的数据：\n{0}".format(data))</span><br></pre></td></tr></tbody></table></figure>

<p>得到的结果如下所示:</p>
<p><img src="/2020/04/06/python%E7%88%AC%E8%99%AB/8-excel%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/pandas-05.png" alt></p>
<p><strong>2：读取指定的多行，数据会存在嵌套的列表里面：</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">data=df.ix[[1,2]].values#读取指定多行的话，就要在ix[]里面嵌套列表指定行数</span><br><span class="line">print("读取指定行的数据：\n{0}".format(data))</span><br></pre></td></tr></tbody></table></figure>

<p><strong>3：读取指定的行列：</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">data=df.ix[1,2]#读取第一行第二列的值，这里不需要嵌套列表</span><br><span class="line">print("读取指定行的数据：\n{0}".format(data))</span><br></pre></td></tr></tbody></table></figure>

<p><strong>4：读取指定的多行多列值：</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">data=df.ix[[1,2],['title','data']].values#读取第一行第二行的title以及data列的值，这里需要嵌套列表</span><br><span class="line">print("读取指定行的数据：\n{0}".format(data))</span><br></pre></td></tr></tbody></table></figure>

<p><strong>5：获取所有行的指定列</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">data=df.ix[:,['title','data']].values#读所有行的title以及data列的值，这里需要嵌套列表</span><br><span class="line">print("读取指定行的数据：\n{0}".format(data))</span><br></pre></td></tr></tbody></table></figure>

<p><strong>6：获取行号并打印输出</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">print("输出行号列表",df.index.values)</span><br><span class="line"></span><br><span class="line">输出结果是：</span><br><span class="line">输出行号列表 [0 1 2 3]</span><br></pre></td></tr></tbody></table></figure>

<p><strong>7：获取列名并打印输出</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">print("输出列标题",df.columns.values)</span><br><span class="line"></span><br><span class="line">运行结果如下所示：</span><br><span class="line">输出列标题 ['case_id' 'title' 'data']</span><br></pre></td></tr></tbody></table></figure>

<p><strong>8：获取指定行数的值：</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">print("输出值",df.sample(3).values)#这个方法类似于head()方法以及df.values方法</span><br><span class="line"></span><br><span class="line">输出值</span><br><span class="line"> [[2 '输入错误的密码' '{"mobilephone":"18688773467","pwd":"12345678"}']</span><br><span class="line"> [3 '正常充值' '{"mobilephone":"18688773467","amount":"1000"}']</span><br><span class="line"> [1 '正常登录' '{"mobilephone":"18688773467","pwd":"123456"}']]</span><br></pre></td></tr></tbody></table></figure>

<p><strong>9：获取指定列的值：</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">print("输出值\n",df['data'].values)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="pandas处理Excel数据成为字典"><a href="#pandas处理Excel数据成为字典" class="headerlink" title="pandas处理Excel数据成为字典"></a>pandas处理Excel数据成为字典</h2><p> 有如下的数据，处理成列表嵌套字典，且字典的key为表头名。</p>
<h2 id><a href="#" class="headerlink" title></a><img src="8-excel%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86//pandas-06.png" alt></h2><p>实现的代码如下所示：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">test_data=[]</span><br><span class="line">for i in df.index.values:#获取行号的索引，并对其进行遍历：</span><br><span class="line">    #根据i来获取每一行指定的数据 并利用to_dict转成字典</span><br><span class="line">    row_data=df.ix[i,['case_id','module','title','http_method','url','data','expected']].to_dict()</span><br><span class="line">    test_data.append(row_data)</span><br><span class="line">print("最终获取到的数据是：{0}".format(test_data))</span><br></pre></td></tr></tbody></table></figure>

<p>最后得到的结果是：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">最终获取到的数据是：</span><br><span class="line">[{'title': '正常登录', 'case_id': 1, 'data': '{"mobilephone":"18688773467","pwd":"123456"}'}, </span><br><span class="line">{'title': '输入错误的密码', 'case_id': 2, 'data': '{"mobilephone":"18688773467","pwd":"12345678"}'}, </span><br><span class="line">{'title': '正常充值', 'case_id': 3, 'data': '{"mobilephone":"18688773467","amount":"1000"}'}, </span><br><span class="line">{'title': '充值输入负数', 'case_id': 4, 'data': '{"mobilephone":"18688773467","amount":"-100"}'}]</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>BeautifulSoup4库</title>
    <url>/2020/04/04/python%E7%88%AC%E8%99%AB/7-BeautifulSoup4%E5%BA%93/</url>
    <content><![CDATA[<html><head></head><body><h1 id="BeautifulSoup4库"><a href="#BeautifulSoup4库" class="headerlink" title="BeautifulSoup4库"></a>BeautifulSoup4库</h1><p>和 lxml 一样，Beautiful Soup 也是一个HTML/XML的解析器，主要的功能也是如何解析和提取 HTML/XML 数据。<br>lxml 只会局部遍历，而Beautiful Soup 是基于HTML DOM（Document Object Model）的，会载入整个文档，解析整个DOM树，因此时间和内存开销都会大很多，所以性能要低于lxml。<br>BeautifulSoup 用来解析 HTML 比较简单，API非常人性化，支持CSS选择器、Python标准库中的HTML解析器，也支持 lxml 的 XML解析器。<br>Beautiful Soup 3 目前已经停止开发，推荐现在的项目使用Beautiful Soup 4。</p>
<a id="more"></a>

<h2 id="安装和文档："><a href="#安装和文档：" class="headerlink" title="安装和文档："></a>安装和文档：</h2><ol>
<li>安装：<code>pip install bs4</code>。</li>
<li>中文文档：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></li>
</ol>
<h2 id="几大解析工具对比："><a href="#几大解析工具对比：" class="headerlink" title="几大解析工具对比："></a>几大解析工具对比：</h2><table>
<thead>
<tr>
<th>解析工具</th>
<th>解析速度</th>
<th>使用难度</th>
</tr>
</thead>
<tbody><tr>
<td>BeautifulSoup</td>
<td>最慢</td>
<td>最简单</td>
</tr>
<tr>
<td>lxml</td>
<td>快</td>
<td>简单</td>
</tr>
<tr>
<td>正则</td>
<td>最快</td>
<td>最难</td>
</tr>
</tbody></table>
<h2 id="简单使用："><a href="#简单使用：" class="headerlink" title="简单使用："></a>简单使用：</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string"><html><head><title>The Dormouse's story</title></head></span></span><br><span class="line"><span class="string"><body></span></span><br><span class="line"><span class="string"><p class="title" name="dromouse"><b>The Dormouse's story</b></p></span></span><br><span class="line"><span class="string"><p class="story">Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string"><a href="http://example.com/elsie" class="sister" id="link1"><!-- Elsie --></a>,</span></span><br><span class="line"><span class="string"><a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and</span></span><br><span class="line"><span class="string"><a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.</p></span></span><br><span class="line"><span class="string"><p class="story">...</p></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建 Beautiful Soup 对象</span></span><br><span class="line"><span class="comment"># 使用lxml来进行解析</span></span><br><span class="line">soup = BeautifulSoup(html,<span class="string">"lxml"</span>)</span><br><span class="line"></span><br><span class="line">print(soup.prettify())</span><br></pre></td></tr></tbody></table></figure>

<h2 id="四个常用的对象："><a href="#四个常用的对象：" class="headerlink" title="四个常用的对象："></a>四个常用的对象：</h2><p>Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种:</p>
<ol>
<li>Tag</li>
<li>NavigatableString</li>
<li>BeautifulSoup</li>
<li>Comment</li>
</ol>
<h3 id="1-Tag："><a href="#1-Tag：" class="headerlink" title="1. Tag："></a>1. Tag：</h3><p>Tag 通俗点讲就是 HTML 中的一个个标签。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">(<span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup)</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string"><html><head><title>The Dormouse's story</title></head></span></span><br><span class="line"><span class="string"><body></span></span><br><span class="line"><span class="string"><p class="title" name="dromouse"><b>The Dormouse's story</b></p></span></span><br><span class="line"><span class="string"><p class="story">Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string"><a href="http://example.com/elsie" class="sister" id="link1"><!-- Elsie --></a>,</span></span><br><span class="line"><span class="string"><a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and</span></span><br><span class="line"><span class="string"><a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.</p></span></span><br><span class="line"><span class="string"><p class="story">...</p></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建 Beautiful Soup 对象</span></span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (soup.title)</span><br><span class="line"><span class="comment"># <title>The Dormouse's story</title></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (soup.head)</span><br><span class="line"><span class="comment"># <head><title>The Dormouse's story</title></head></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (soup.a)</span><br><span class="line"><span class="comment"># <a class="sister" href="http://example.com/elsie" id="link1"><!-- Elsie --></a></span></span><br><span class="line"></span><br><span class="line">print( soup.p)</span><br><span class="line"><span class="comment"># <p class="title" name="dromouse"><b>The Dormouse's story</b></p></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (type(soup.p))</span><br><span class="line"><span class="comment"># <class 'bs4.element.Tag'></span></span><br></pre></td></tr></tbody></table></figure>

<p>我们可以利用 soup 加标签名轻松地获取这些标签的内容，这些对象的类型是bs4.element.Tag。但是注意，它查找的是在所有内容中的第一个符合要求的标签。如果要查询所有的标签，后面会进行介绍。<br>对于Tag，它有两个重要的属性，分别是name和attrs。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> soup.name</span><br><span class="line"><span class="comment"># [document] #soup 对象本身比较特殊，它的 name 即为 [document]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> soup.head.name</span><br><span class="line"><span class="comment"># head #对于其他内部标签，输出的值便为标签本身的名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> soup.p.attrs</span><br><span class="line"><span class="comment"># {'class': ['title'], 'name': 'dromouse'}</span></span><br><span class="line"><span class="comment"># 在这里，我们把 p 标签的所有属性打印输出了出来，得到的类型是一个字典。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> soup.p[<span class="string">'class'</span>] <span class="comment"># soup.p.get('class')</span></span><br><span class="line"><span class="comment"># ['title'] #还可以利用get方法，传入属性的名称，二者是等价的</span></span><br><span class="line"></span><br><span class="line">soup.p[<span class="string">'class'</span>] = <span class="string">"newClass"</span></span><br><span class="line"><span class="keyword">print</span> soup.p <span class="comment"># 可以对这些属性和内容等等进行修改</span></span><br><span class="line"><span class="comment"># <p class="newClass" name="dromouse"><b>The Dormouse's story</b></p></span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-NavigableString："><a href="#2-NavigableString：" class="headerlink" title="2. NavigableString："></a>2. NavigableString：</h3><p>如果拿到标签后，还想获取标签中的内容。那么可以通过<code>tag.string</code>获取标签中的文字。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> (soup.p.string)</span><br><span class="line"><span class="comment"># The Dormouse's story</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (type(soup.p.string))</span><br><span class="line"><span class="comment"># <class 'bs4.element.NavigableString'>thon</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-BeautifulSoup："><a href="#3-BeautifulSoup：" class="headerlink" title="3. BeautifulSoup："></a>3. BeautifulSoup：</h3><p>BeautifulSoup 对象表示的是一个文档的全部内容.大部分时候,可以把它当作 Tag 对象,它支持 遍历文档树 和 搜索文档树 中描述的大部分的方法.<br>因为 BeautifulSoup 对象并不是真正的HTML或XML的tag,所以它没有name和attribute属性.但有时查看它的 .name 属性是很方便的,所以 BeautifulSoup 对象包含了一个值为 “[document]” 的特殊属性 .name</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">soup.name</span><br><span class="line"><span class="comment"># '[document]'</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="4-Comment："><a href="#4-Comment：" class="headerlink" title="4. Comment："></a>4. Comment：</h3><p>Tag , NavigableString , BeautifulSoup 几乎覆盖了html和xml中的所有内容,但是还有一些特殊对象.容易让人担心的内容是文档的注释部分:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">markup = <span class="string">"<b><!--Hey, buddy. Want to buy a used parser?--></b>"</span></span><br><span class="line">soup = BeautifulSoup(markup)</span><br><span class="line">comment = soup.b.string</span><br><span class="line">type(comment)</span><br><span class="line"><span class="comment"># <class 'bs4.element.Comment'></span></span><br></pre></td></tr></tbody></table></figure>

<p>Comment 对象是一个特殊类型的 NavigableString 对象:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">comment</span><br><span class="line"><span class="comment"># 'Hey, buddy. Want to buy a used parser'</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="遍历文档树："><a href="#遍历文档树：" class="headerlink" title="遍历文档树："></a>遍历文档树：</h2><h3 id="1-contents和children："><a href="#1-contents和children：" class="headerlink" title="1. contents和children："></a>1. contents和children：</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">html_doc = <span class="string">"""</span></span><br><span class="line"><span class="string"><html><head><title>The Dormouse's story</title></head></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><p class="title"><b>The Dormouse's story</b></p></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><p class="story">Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string"><a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>,</span></span><br><span class="line"><span class="string"><a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and</span></span><br><span class="line"><span class="string"><a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.</p></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><p class="story">...</p></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc,<span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">head_tag = soup.head</span><br><span class="line"><span class="comment"># 返回所有子节点的列表</span></span><br><span class="line">print(head_tag.contents)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回所有子节点的迭代器</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> head_tag.children:</span><br><span class="line">    print(child)</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-strings-和-stripped-strings"><a href="#2-strings-和-stripped-strings" class="headerlink" title="2. strings 和 stripped_strings"></a>2. strings 和 stripped_strings</h3><p>如果tag中包含多个字符串 [2] ,可以使用 .strings 来循环获取：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> soup.strings:</span><br><span class="line">    print(repr(string))</span><br><span class="line">    <span class="comment"># u"The Dormouse's story"</span></span><br><span class="line">    <span class="comment"># u'\n\n'</span></span><br><span class="line">    <span class="comment"># u"The Dormouse's story"</span></span><br><span class="line">    <span class="comment"># u'\n\n'</span></span><br><span class="line">    <span class="comment"># u'Once upon a time there were three little sisters; and their names were\n'</span></span><br><span class="line">    <span class="comment"># u'Elsie'</span></span><br><span class="line">    <span class="comment"># u',\n'</span></span><br><span class="line">    <span class="comment"># u'Lacie'</span></span><br><span class="line">    <span class="comment"># u' and\n'</span></span><br><span class="line">    <span class="comment"># u'Tillie'</span></span><br><span class="line">    <span class="comment"># u';\nand they lived at the bottom of a well.'</span></span><br><span class="line">    <span class="comment"># u'\n\n'</span></span><br><span class="line">    <span class="comment"># u'...'</span></span><br><span class="line">    <span class="comment"># u'\n'</span></span><br></pre></td></tr></tbody></table></figure>

<p>输出的字符串中可能包含了很多空格或空行,使用 .stripped_strings 可以去除多余空白内容：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> soup.stripped_strings:</span><br><span class="line">    print(repr(string))</span><br><span class="line">    <span class="comment"># u"The Dormouse's story"</span></span><br><span class="line">    <span class="comment"># u"The Dormouse's story"</span></span><br><span class="line">    <span class="comment"># u'Once upon a time there were three little sisters; and their names were'</span></span><br><span class="line">    <span class="comment"># u'Elsie'</span></span><br><span class="line">    <span class="comment"># u','</span></span><br><span class="line">    <span class="comment"># u'Lacie'</span></span><br><span class="line">    <span class="comment"># u'and'</span></span><br><span class="line">    <span class="comment"># u'Tillie'</span></span><br><span class="line">    <span class="comment"># u';\nand they lived at the bottom of a well.'</span></span><br><span class="line">    <span class="comment"># u'...'</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="获取标签属性"><a href="#获取标签属性" class="headerlink" title="获取标签属性"></a>获取标签属性</h3><p>1.通过下标获取</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">href = a[<span class="string">'href'</span>]</span><br></pre></td></tr></tbody></table></figure>

<p>2.通过attrs属性获取</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">href=a.attrs[<span class="string">'href'</span>]</span><br></pre></td></tr></tbody></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li>string: 获取某个标签下的非标签字符串。返回来的是个字符串。</li>
<li>strings: 获取某个标签下的子孙非标签字符串。返回来的是个生成器。</li>
<li>stripped_strings:获取某个标签下的子孙非标签字符串，会去掉空白字符。返回来的<br>是个生成器。</li>
<li>get_ _text:获取某个标签下的子孙非标签字符串。不是以列表的形式返回，是以普通字<br>符串返回。</li>
</ol>
<h2 id="搜索文档树："><a href="#搜索文档树：" class="headerlink" title="搜索文档树："></a>搜索文档树：</h2><h3 id="1-find和find-all方法："><a href="#1-find和find-all方法：" class="headerlink" title="1. find和find_all方法："></a>1. find和find_all方法：</h3><p>搜索文档树，一般用得比较多的就是两个方法，一个是<code>find</code>，一个是<code>find_all</code>。<code>find</code>方法是找到第一个满足条件的标签后就立即返回，只返回一个元素。<code>find_all</code>方法是把所有满足条件的标签都选到，然后返回回去。使用这两个方法，最常用的用法是出入<code>name</code>以及<code>attr</code>参数找出符合要求的标签。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">soup.find_all(<span class="string">"a"</span>,attrs={<span class="string">"id"</span>:<span class="string">"link2"</span>})</span><br></pre></td></tr></tbody></table></figure>

<p>或者是直接传入属性的的名字作为关键字参数：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">soup.find_all(<span class="string">"a"</span>,id=<span class="string">'link2'</span>)</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-select方法："><a href="#2-select方法：" class="headerlink" title="2. select方法："></a>2. select方法：</h3><p>使用以上方法可以方便的找出元素。但有时候使用<code>css</code>选择器的方式可以更加的方便。使用<code>css</code>选择器的语法，应该使用<code>select</code>方法。以下列出几种常用的<code>css</code>选择器方法：</p>
<h4 id="（1）通过标签名查找："><a href="#（1）通过标签名查找：" class="headerlink" title="（1）通过标签名查找："></a>（1）通过标签名查找：</h4><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">print(soup.select(<span class="string">'a'</span>))</span><br></pre></td></tr></tbody></table></figure>

<h4 id="（2）通过类名查找："><a href="#（2）通过类名查找：" class="headerlink" title="（2）通过类名查找："></a>（2）通过类名查找：</h4><p>通过类名，则应该在类的前面加一个<code>.</code>。比如要查找<code>class=sister</code>的标签。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">print(soup.select(<span class="string">'.sister'</span>))</span><br></pre></td></tr></tbody></table></figure>

<h4 id="（3）通过id查找："><a href="#（3）通过id查找：" class="headerlink" title="（3）通过id查找："></a>（3）通过id查找：</h4><p>通过id查找，应该在id的名字前面加一个＃号。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">print(soup.select(<span class="string">"#link1"</span>))</span><br></pre></td></tr></tbody></table></figure>

<h4 id="（4）组合查找："><a href="#（4）组合查找：" class="headerlink" title="（4）组合查找："></a>（4）组合查找：</h4><p>组合查找即和写 class 文件时，标签名与类名、id名进行的组合原理是一样的，例如查找 p 标签中，id 等于 link1的内容，二者需要用空格分开：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">print(soup.select(<span class="string">"p #link1"</span>))</span><br></pre></td></tr></tbody></table></figure>

<p>直接子标签查找，则使用 > 分隔：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">print(soup.select(<span class="string">"head > title"</span>))</span><br></pre></td></tr></tbody></table></figure>

<h4 id="（5）通过属性查找："><a href="#（5）通过属性查找：" class="headerlink" title="（5）通过属性查找："></a>（5）通过属性查找：</h4><p>查找时还可以加入属性元素，属性需要用中括号括起来，注意属性和标签属于同一节点，所以中间不能加空格，否则会无法匹配到。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">print(soup.select(<span class="string">'a[href="http://example.com/elsie"]'</span>))</span><br></pre></td></tr></tbody></table></figure>

<h4 id="（6）获取内容"><a href="#（6）获取内容" class="headerlink" title="（6）获取内容"></a>（6）获取内容</h4><p>以上的 select 方法返回的结果都是列表形式，可以遍历形式输出，然后用 get_text() 方法来获取它的内容。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="keyword">print</span> type(soup.select(<span class="string">'title'</span>))</span><br><span class="line"><span class="keyword">print</span> soup.select(<span class="string">'title'</span>)[<span class="number">0</span>].get_text()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> title <span class="keyword">in</span> soup.select(<span class="string">'title'</span>):</span><br><span class="line">    <span class="keyword">print</span> title.get_text()</span><br></pre></td></tr></tbody></table></figure>

<p>祝祖国繁荣昌盛……</p>
</body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式和re模块</title>
    <url>/2020/03/24/python%E7%88%AC%E8%99%AB/6-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8Cre%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<html><head></head><body><h1 id="3-正则表达式和re模块"><a href="#3-正则表达式和re模块" class="headerlink" title="3-正则表达式和re模块"></a>3-正则表达式和re模块</h1><h2 id="什么是正则表达式："><a href="#什么是正则表达式：" class="headerlink" title="什么是正则表达式："></a>什么是正则表达式：</h2><p>通俗理解：按照一定的规则，从某个字符串中匹配出想要的数据。这个规则就是正则表达式。<br>标准答案：<a href="https://baike.baidu.com/item/正则表达式/1700215?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/正则表达式/1700215?fr=aladdin</a></p>
<h2 id="一个段子："><a href="#一个段子：" class="headerlink" title="一个段子："></a>一个段子：</h2><p>世界是分为两种人，一种是懂正则表达式的，一种是不懂正则表达式的.</p>
<a id="more"></a>
<h2 id="正则表达式常用匹配规则："><a href="#正则表达式常用匹配规则：" class="headerlink" title="正则表达式常用匹配规则："></a>正则表达式常用匹配规则：</h2><h3 id="匹配某个字符串："><a href="#匹配某个字符串：" class="headerlink" title="匹配某个字符串："></a>匹配某个字符串：</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">'hello'</span></span><br><span class="line">ret = re.match(<span class="string">'he'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> he</span><br></pre></td></tr></tbody></table></figure>

<p>以上便可以在<code>hello</code>中，匹配出<code>he</code>。</p>
<h3 id="点（-）匹配任意的字符："><a href="#点（-）匹配任意的字符：" class="headerlink" title="点（.）匹配任意的字符："></a>点（.）匹配任意的字符：</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"ab"</span></span><br><span class="line">ret = re.match(<span class="string">'.'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> a</span><br></pre></td></tr></tbody></table></figure>

<p>但是点（.）不能匹配不到换行符。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"ab"</span></span><br><span class="line">ret = re.match(<span class="string">'.'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="d匹配任意的数字："><a href="#d匹配任意的数字：" class="headerlink" title="\d匹配任意的数字："></a>\d匹配任意的数字：</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"123"</span></span><br><span class="line">ret = re.match(<span class="string">'\d'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="D匹配任意的非数字："><a href="#D匹配任意的非数字：" class="headerlink" title="\D匹配任意的非数字："></a>\D匹配任意的非数字：</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"a"</span></span><br><span class="line">ret = re.match(<span class="string">'\D'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> a</span><br></pre></td></tr></tbody></table></figure>

<p>而如果text是等于一个数字，那么就匹配不成功了。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"1"</span></span><br><span class="line">ret = re.match(<span class="string">'\D'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="s匹配的是空白字符（包括：-n，-t，-r和空格）："><a href="#s匹配的是空白字符（包括：-n，-t，-r和空格）：" class="headerlink" title="\s匹配的是空白字符（包括：\n，\t，\r和空格）："></a>\s匹配的是空白字符（包括：\n，\t，\r和空格）：</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"\t"</span></span><br><span class="line">ret = re.match(<span class="string">'\s'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> 空白</span><br></pre></td></tr></tbody></table></figure>

<h3 id="w匹配的是a-z和A-Z以及数字和下划线："><a href="#w匹配的是a-z和A-Z以及数字和下划线：" class="headerlink" title="\w匹配的是a-z和A-Z以及数字和下划线："></a>\w匹配的是<code>a-z</code>和<code>A-Z</code>以及数字和下划线：</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"_"</span></span><br><span class="line">ret = re.match(<span class="string">'\w'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> _</span><br></pre></td></tr></tbody></table></figure>

<p>而如果要匹配一个其他的字符，那么就匹配不到。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"+"</span></span><br><span class="line">ret = re.match(<span class="string">'\w'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> AttributeError: <span class="string">'NoneType'</span> object has no attribute</span><br></pre></td></tr></tbody></table></figure>

<h3 id="W匹配的是和-w相反的："><a href="#W匹配的是和-w相反的：" class="headerlink" title="\W匹配的是和\w相反的："></a>\W匹配的是和\w相反的：</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"+"</span></span><br><span class="line">ret = re.match(<span class="string">'\W'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> +</span><br></pre></td></tr></tbody></table></figure>

<p>而如果你的text是一个下划线或者英文字符，那么就匹配不到了。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"_"</span></span><br><span class="line">ret = re.match(<span class="string">'\W'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> AttributeError: <span class="string">'NoneType'</span> object has no attribute</span><br></pre></td></tr></tbody></table></figure>

<h3 id="组合的方式，只要满足中括号中的某一项都算匹配成功："><a href="#组合的方式，只要满足中括号中的某一项都算匹配成功：" class="headerlink" title="[]组合的方式，只要满足中括号中的某一项都算匹配成功："></a>[]组合的方式，只要满足中括号中的某一项都算匹配成功：</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"0731-88888888"</span></span><br><span class="line">ret = re.match(<span class="string">'[\d\-]+'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> <span class="number">0731</span><span class="number">-88888888</span></span><br></pre></td></tr></tbody></table></figure>

<p>之前讲到的几种匹配规则，其实可以使用中括号的形式来进行替代：</p>
<ul>
<li>\d：[0-9]</li>
<li>\D：<a href="#fn_0-9">0-9</a></li>
<li>\w：[0-9a-zA-Z_]</li>
<li>\W：[^0-9a-zA-Z_]</li>
</ul>
<h3 id="匹配多个字符："><a href="#匹配多个字符：" class="headerlink" title="匹配多个字符："></a>匹配多个字符：</h3><ol>
<li><p><code>*</code>：可以匹配0或者任意多个字符。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"0731"</span></span><br><span class="line">ret = re.match(<span class="string">'\d*'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> <span class="number">0731</span></span><br></pre></td></tr></tbody></table></figure>

<p>以上因为匹配的要求是<code>\d</code>，那么就要求是数字，后面跟了一个星号，就可以匹配到0731这四个字符。</p>
</li>
<li><p><code>+</code>：可以匹配1个或者多个字符。最少一个。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"abc"</span></span><br><span class="line">ret = re.match(<span class="string">'\w+'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> abc</span><br></pre></td></tr></tbody></table></figure>

<p>因为匹配的是<code>\w</code>，那么就要求是英文字符，后面跟了一个加号，意味着最少要有一个满足<code>\w</code>的字符才能够匹配到。如果text是一个空白字符或者是一个不满足\w的字符，那么就会报错。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">""</span></span><br><span class="line">ret = re.match(<span class="string">'\w+'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> AttributeError: <span class="string">'NoneType'</span> object has no attribute</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p><code>?</code>：匹配的字符可以出现一次或者不出现（0或者1）。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"123"</span></span><br><span class="line">ret = re.match(<span class="string">'\d?'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p><code>{m}</code>：匹配m个字符。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"123"</span></span><br><span class="line">ret = re.match(<span class="string">'\d{2}'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> <span class="number">12</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p><code>{m,n}</code>：匹配m-n个字符。在这中间的字符都可以匹配到。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"123"</span></span><br><span class="line">ret = re.match(<span class="string">'\d{1,2}'</span>,text)</span><br><span class="line">prit(ret.group())</span><br><span class="line">>> <span class="number">12</span></span><br></pre></td></tr></tbody></table></figure>

<p>如果text只有一个字符，那么也可以匹配出来。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"1"</span></span><br><span class="line">ret = re.match(<span class="string">'\d{1,2}'</span>,text)</span><br><span class="line">prit(ret.group())</span><br><span class="line">>> <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h3 id="小案例："><a href="#小案例：" class="headerlink" title="小案例："></a>小案例：</h3><ol>
<li><p>验证手机号码：手机号码的规则是以<code>1</code>开头，第二位可以是<code>34587</code>，后面那9位就可以随意了。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"18570631587"</span></span><br><span class="line">ret = re.match(<span class="string">'1[34587]\d{9}'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> <span class="number">18570631587</span></span><br></pre></td></tr></tbody></table></figure>

<p>而如果是个不满足条件的手机号码。那么就匹配不到了。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"1857063158"</span></span><br><span class="line">ret = re.match(<span class="string">'1[34587]\d{9}'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> AttributeError: <span class="string">'NoneType'</span> object has no attribute</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>验证邮箱：邮箱的规则是邮箱名称是用<code>数字、数字、下划线</code>组成的，然后是<code>@</code>符号，后面就是域名了。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"hynever@163.com"</span></span><br><span class="line">ret = re.match(<span class="string">'\w+@\w+\.[a-zA-Z\.]+'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>验证URL：URL的规则是前面是<code>http</code>或者<code>https</code>或者是<code>ftp</code>然后再加上一个冒号，再加上一个斜杠，再后面就是可以出现任意非空白字符了。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"http://www.baidu.com/"</span></span><br><span class="line">ret = re.match(<span class="string">'(http|https|ftp)://[^\s]+'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>验证身份证：身份证的规则是，总共有18位，前面17位都是数字，后面一位可以是数字，也可以是小写的x，也可以是大写的X。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"3113111890812323X"</span></span><br><span class="line">ret = re.match(<span class="string">'\d{17}[\dxX]'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h3 id="（脱字号）：表示以…开始："><a href="#（脱字号）：表示以…开始：" class="headerlink" title="^（脱字号）：表示以…开始："></a>^（脱字号）：表示以…开始：</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"hello"</span></span><br><span class="line">ret = re.match(<span class="string">'^h'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure>

<p>如果是在中括号中，那么代表的是取反操作.</p>
<h3 id="：表示以…结束："><a href="#：表示以…结束：" class="headerlink" title="$：表示以…结束："></a>$：表示以…结束：</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配163.com的邮箱</span></span><br><span class="line">text = <span class="string">"xxx@163.com"</span></span><br><span class="line">ret = re.search(<span class="string">'\w+@163\.com$'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> xxx@<span class="number">163.</span>com</span><br></pre></td></tr></tbody></table></figure>

<h3 id="：匹配多个表达式或者字符串："><a href="#：匹配多个表达式或者字符串：" class="headerlink" title="|：匹配多个表达式或者字符串："></a>|：匹配多个表达式或者字符串：</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"hello|world"</span></span><br><span class="line">ret = re.search(<span class="string">'hello'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> hello</span><br></pre></td></tr></tbody></table></figure>

<h3 id="贪婪模式和非贪婪模式："><a href="#贪婪模式和非贪婪模式：" class="headerlink" title="贪婪模式和非贪婪模式："></a>贪婪模式和非贪婪模式：</h3><p>贪婪模式：正则表达式会匹配尽量多的字符。默认是贪婪模式。<br>非贪婪模式：正则表达式会尽量少的匹配字符。<br>示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"0123456"</span></span><br><span class="line">ret = re.match(<span class="string">'\d+'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"><span class="comment"># 因为默认采用贪婪模式，所以会输出0123456</span></span><br><span class="line">>> <span class="number">0123456</span></span><br></pre></td></tr></tbody></table></figure>

<p>可以改成非贪婪模式，那么就只会匹配到0。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"0123456"</span></span><br><span class="line">ret = re.match(<span class="string">'\d+?'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure>

<h3 id="案例：匹配0-100之间的数字："><a href="#案例：匹配0-100之间的数字：" class="headerlink" title="案例：匹配0-100之间的数字："></a>案例：匹配<code>0-100</code>之间的数字：</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">'99'</span></span><br><span class="line">ret = re.match(<span class="string">'[1-9]?\d$|100$'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> <span class="number">99</span></span><br></pre></td></tr></tbody></table></figure>

<p>而如果<code>text=101</code>，那么就会抛出一个异常。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">'101'</span></span><br><span class="line">ret = re.match(<span class="string">'[1-9]?\d$|100$'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="转义字符和原生字符串："><a href="#转义字符和原生字符串：" class="headerlink" title="转义字符和原生字符串："></a>转义字符和原生字符串：</h3><p>在正则表达式中，有些字符是有特殊意义的字符。因此如果想要匹配这些字符，那么就必须使用反斜杠进行转义。比如<code>$</code>代表的是以…结尾，如果想要匹配<code>$</code>，那么就必须使用<code>\$</code>。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"apple price is \$99,orange paice is $88"</span></span><br><span class="line">ret = re.search(<span class="string">'\$(\d+)'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> $<span class="number">99</span></span><br></pre></td></tr></tbody></table></figure>

<p>原生字符串：<br>在正则表达式中，<code>\</code>是专门用来做转义的。在Python中<code>\</code>也是用来做转义的。因此如果想要在普通的字符串中匹配出<code>\</code>，那么要给出四个<code>\</code>。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"apple \c"</span></span><br><span class="line">ret = re.search(<span class="string">'\\\\c'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure>

<p>因此要使用原生字符串就可以解决这个问题：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"apple \c"</span></span><br><span class="line">ret = re.search(<span class="string">r'\\c'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure>

<hr>
<h2 id="re模块中常用函数："><a href="#re模块中常用函数：" class="headerlink" title="re模块中常用函数："></a>re模块中常用函数：</h2><h3 id="match："><a href="#match：" class="headerlink" title="match："></a>match：</h3><p>从开始的位置进行匹配。如果开始的位置没有匹配到。就直接失败了。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">'hello'</span></span><br><span class="line">ret = re.match(<span class="string">'h'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> h</span><br></pre></td></tr></tbody></table></figure>

<p>如果第一个字母不是<code>h</code>，那么就会失败。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">'ahello'</span></span><br><span class="line">ret = re.match(<span class="string">'h'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></tbody></table></figure>

<p>如果想要匹配换行的数据，那么就要传入一个<code>flag=re.DOTALL</code>，就可以匹配换行符了。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"abc\nabc"</span></span><br><span class="line">ret = re.match(<span class="string">'abc.*abc'</span>,text,re.DOTALL)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure>

<h3 id="search："><a href="#search：" class="headerlink" title="search："></a>search：</h3><p>在字符串中找满足条件的字符。如果找到，就返回。说白了，就是只会找到第一个满足条件的。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">'apple price $99 orange price $88'</span></span><br><span class="line">ret = re.search(<span class="string">'\d+'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> <span class="number">99</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="分组："><a href="#分组：" class="headerlink" title="分组："></a>分组：</h3><p>在正则表达式中，可以对过滤到的字符串进行分组。分组使用圆括号的方式。</p>
<ol>
<li><code>group</code>：和<code>group(0)</code>是等价的，返回的是整个满足条件的字符串。</li>
<li><code>groups</code>：返回的是里面的子组。索引从1开始。</li>
<li><code>group(1)</code>：返回的是第一个子组，可以传入多个。<br>示例代码如下：</li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"apple price is $99,orange price is $10"</span></span><br><span class="line">ret = re.search(<span class="string">r".*(\$\d+).*(\$\d+)"</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">print(ret.group(<span class="number">0</span>))</span><br><span class="line">print(ret.group(<span class="number">1</span>))</span><br><span class="line">print(ret.group(<span class="number">2</span>))</span><br><span class="line">print(ret.groups())</span><br></pre></td></tr></tbody></table></figure>

<h3 id="findall："><a href="#findall：" class="headerlink" title="findall："></a>findall：</h3><p>找出所有满足条件的，返回的是一个列表。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">'apple price $99 orange price $88'</span></span><br><span class="line">ret = re.findall(<span class="string">'\d+'</span>,text)</span><br><span class="line">print(ret)</span><br><span class="line">>> [<span class="string">'99'</span>, <span class="string">'88'</span>]</span><br></pre></td></tr></tbody></table></figure>

<h3 id="sub："><a href="#sub：" class="headerlink" title="sub："></a>sub：</h3><p>用来替换字符串。将匹配到的字符串替换为其他字符串。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">'apple price $99 orange price $88'</span></span><br><span class="line">ret = re.sub(<span class="string">'\d+'</span>,<span class="string">'0'</span>,text)</span><br><span class="line">print(ret)</span><br><span class="line">>> apple price $<span class="number">0</span> orange price $<span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>

<p><code>sub</code>函数的案例，获取拉勾网中的数据：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string"><div></span></span><br><span class="line"><span class="string"><p>基本要求：</p></span></span><br><span class="line"><span class="string"><p>1、精通HTML5、CSS3、 JavaScript等Web前端开发技术，对html5页面适配充分了解，熟悉不同浏览器间的差异，熟练写出兼容各种浏览器的代码；</p></span></span><br><span class="line"><span class="string"><p>2、熟悉运用常见JS开发框架，如JQuery、vue、angular，能快速高效实现各种交互效果；</p></span></span><br><span class="line"><span class="string"><p>3、熟悉编写能够自动适应HTML5界面，能让网页格式自动适应各款各大小的手机；</p></span></span><br><span class="line"><span class="string"><p>4、利用HTML5相关技术开发移动平台、PC终端的前端页面，实现HTML5模板化；</p></span></span><br><span class="line"><span class="string"><p>5、熟悉手机端和PC端web实现的差异，有移动平台web前端开发经验，了解移动互联网产品和行业，有在Android,iOS等平台下HTML5+CSS+JavaScript（或移动JS框架）开发经验者优先考虑；6、良好的沟通能力和团队协作精神，对移动互联网行业有浓厚兴趣，有较强的研究能力和学习能力；</p></span></span><br><span class="line"><span class="string"><p>7、能够承担公司前端培训工作，对公司各业务线的前端（HTML5\CSS3）工作进行支撑和指导。</p></span></span><br><span class="line"><span class="string"><p><br></p></span></span><br><span class="line"><span class="string"><p>岗位职责：</p></span></span><br><span class="line"><span class="string"><p>1、利用html5及相关技术开发移动平台、微信、APP等前端页面，各类交互的实现；</p></span></span><br><span class="line"><span class="string"><p>2、持续的优化前端体验和页面响应速度，并保证兼容性和执行效率；</p></span></span><br><span class="line"><span class="string"><p>3、根据产品需求，分析并给出最优的页面前端结构解决方案；</p></span></span><br><span class="line"><span class="string"><p>4、协助后台及客户端开发人员完成功能开发和调试；</p></span></span><br><span class="line"><span class="string"><p>5、移动端主流浏览器的适配、移动端界面自适应研发。</p></span></span><br><span class="line"><span class="string"></div></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">ret = re.sub(<span class="string">'</?[a-zA-Z0-9]+>'</span>,<span class="string">""</span>,html)</span><br><span class="line">print(ret)</span><br></pre></td></tr></tbody></table></figure>

<h3 id="split："><a href="#split：" class="headerlink" title="split："></a>split：</h3><p>使用正则表达式来分割字符串。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"hello world ni hao"</span></span><br><span class="line">ret = re.split(<span class="string">'\W'</span>,text)</span><br><span class="line">print(ret)</span><br><span class="line">>> [<span class="string">"hello"</span>,<span class="string">"world"</span>,<span class="string">"ni"</span>,<span class="string">"hao"</span>]</span><br></pre></td></tr></tbody></table></figure>

<h3 id="compile："><a href="#compile：" class="headerlink" title="compile："></a>compile：</h3><p>对于一些经常要用到的正则表达式，可以使用<code>compile</code>进行编译，后期再使用的时候可以直接拿过来用，执行效率会更快。而且<code>compile</code>还可以指定<code>flag=re.VERBOSE</code>，在写正则表达式的时候可以做好注释。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">text = <span class="string">"the number is 20.50"</span></span><br><span class="line">r = re.compile(<span class="string">r"""</span></span><br><span class="line"><span class="string">                \d+ # 小数点前面的数字</span></span><br><span class="line"><span class="string">                \.? # 小数点</span></span><br><span class="line"><span class="string">                \d* # 小数点后面的数字</span></span><br><span class="line"><span class="string">                """</span>,re.VERBOSE)</span><br><span class="line">ret = re.search(r,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>requests库</title>
    <url>/2020/03/21/python%E7%88%AC%E8%99%AB/4-requests%E5%BA%93/</url>
    <content><![CDATA[<html><head></head><body><h1 id="4-requests库"><a href="#4-requests库" class="headerlink" title="4-requests库"></a>4-requests库</h1><p>虽然Python的标准库中 urllib模块已经包含了平常我们使用的大多数功能，但是它的 API 使用起来让人感觉不太好，而 Requests宣传是 “HTTP for Humans”，说明使用更简洁方便。</p>
<a id="more"></a>

<h2 id="安装和文档地址："><a href="#安装和文档地址：" class="headerlink" title="安装和文档地址："></a>安装和文档地址：</h2><p>利用<code>pip</code>可以非常方便的安装：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></tbody></table></figure>

<p>中文文档：<a href="http://docs.python-requests.org/zh_CN/latest/index.html" target="_blank" rel="noopener">http://docs.python-requests.org/zh_CN/latest/index.html</a><br>github地址：<a href="https://github.com/requests/requests" target="_blank" rel="noopener">https://github.com/requests/requests</a></p>
<h2 id="发送GET请求："><a href="#发送GET请求：" class="headerlink" title="发送GET请求："></a>发送GET请求：</h2><ol>
<li><p>最简单的发送<code>get</code>请求就是通过<code>requests.get</code>来调用：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">response = requests.get(<span class="string">"http://www.baidu.com/"</span>)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>添加headers和查询参数：<br>如果想添加 headers，可以传入headers参数来增加请求头中的headers信息。如果要将参数放在url中传递，可以利用 params 参数。相关示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">   </span><br><span class="line">kw = {<span class="string">'wd'</span>:<span class="string">'中国'</span>}</span><br><span class="line">   </span><br><span class="line">headers = {<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span>}</span><br><span class="line">   </span><br><span class="line"><span class="comment"># params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()</span></span><br><span class="line">response = requests.get(<span class="string">"http://www.baidu.com/s"</span>, params = kw, headers = headers)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查看响应内容，response.text 返回的是Unicode格式的数据</span></span><br><span class="line">print(response.text)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查看响应内容，response.content返回的字节流数据</span></span><br><span class="line">print(response.content)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查看完整url地址</span></span><br><span class="line">print(response.url)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查看响应头部字符编码</span></span><br><span class="line">print(response.encoding)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查看响应码</span></span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h2 id="发送POST请求："><a href="#发送POST请求：" class="headerlink" title="发送POST请求："></a>发送POST请求：</h2><ol>
<li><p>最基本的POST请求可以使用<code>post</code>方法：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">response = requests.post(<span class="string">"http://www.baidu.com/"</span>,data=data)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>传入data数据：<br>这时候就不要再使用<code>urlencode</code>进行编码了，直接传入一个字典进去就可以了。比如请求拉勾网的数据的代码：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">   </span><br><span class="line">url = <span class="string">"https://www.lagou.com/jobs/positionAjax.json?city=%E6%B7%B1%E5%9C%B3&needAddtionalResult=false&isSchoolJob=0"</span></span><br><span class="line">   </span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'https://www.lagou.com/jobs/list_python?labelWords=&fromSearch=true&suginput='</span></span><br><span class="line">}</span><br><span class="line">   </span><br><span class="line">data = {</span><br><span class="line">    <span class="string">'first'</span>: <span class="string">'true'</span>,</span><br><span class="line">    <span class="string">'pn'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'kd'</span>: <span class="string">'python'</span></span><br><span class="line">}</span><br><span class="line">   </span><br><span class="line">resp = requests.post(url,headers=headers,data=data)</span><br><span class="line"><span class="comment"># 如果是json数据，直接可以调用json方法</span></span><br><span class="line">print(resp.json())</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h2 id="使用代理："><a href="#使用代理：" class="headerlink" title="使用代理："></a>使用代理：</h2><p>使用<code>requests</code>添加代理也非常简单，只要在请求的方法中（比如<code>get</code>或者<code>post</code>）传递<code>proxies</code>参数就可以了。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://httpbin.org/get"</span></span><br><span class="line"></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">proxy = {</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'171.14.209.180:27829'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">resp = requests.get(url,headers=headers,proxies=proxy)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xx.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(resp.text)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="cookie："><a href="#cookie：" class="headerlink" title="cookie："></a>cookie：</h2><p>如果在一个响应中包含了<code>cookie</code>，那么可以利用<code>cookies</code>属性拿到这个返回的<code>cookie</code>值：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">data = {<span class="string">"email"</span>:<span class="string">"970138074@qq.com"</span>,<span class="string">'password'</span>:<span class="string">"pythonspider"</span>}</span><br><span class="line">resp = requests.get(<span class="string">'http://www.baidu.com/'</span>)</span><br><span class="line">print(resp.cookies)</span><br><span class="line">print(resp.cookies.get_dict())</span><br></pre></td></tr></tbody></table></figure>

<h2 id="session："><a href="#session：" class="headerlink" title="session："></a>session：</h2><p>之前使用<code>urllib</code>库，是可以使用<code>opener</code>发送多个请求，多个请求之间是可以共享<code>cookie</code>的。那么如果使用<code>requests</code>，也要达到共享<code>cookie</code>的目的，那么可以使用<code>requests</code>库给我们提供的<code>session</code>对象。注意，这里的<code>session</code>不是web开发中的那个session，这个地方只是一个会话的对象而已。还是以登录人人网为例，使用<code>requests</code>来实现。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">data = {<span class="string">"email"</span>:<span class="string">"970138074@qq.com"</span>,<span class="string">'password'</span>:<span class="string">"pythonspider"</span>}</span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">session = requests.session()</span><br><span class="line">session.post(url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问大鹏个人中心</span></span><br><span class="line">resp = session.get(<span class="string">'http://www.renren.com/880151247/profile'</span>)</span><br><span class="line"></span><br><span class="line">print(resp.text)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="处理不信任的SSL证书："><a href="#处理不信任的SSL证书：" class="headerlink" title="处理不信任的SSL证书："></a>处理不信任的SSL证书：</h2><p>对于那些已经被信任的SSL整数的网站，比如<code>https://www.baidu.com/</code>，那么使用<code>requests</code>直接就可以正常的返回响应。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">resp = requests.get(<span class="string">'http://www.12306.cn/mormhweb/'</span>,verify=<span class="literal">False</span>)</span><br><span class="line">print(resp.content.decode())</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>urllib库</title>
    <url>/2020/03/20/python%E7%88%AC%E8%99%AB/3-urllib%E5%BA%93/</url>
    <content><![CDATA[<html><head></head><body><h1 id="3-urllib库"><a href="#3-urllib库" class="headerlink" title="3-urllib库"></a>3-urllib库</h1><p><code>urllib</code>库是<code>Python</code>中一个最基本的网络请求库。可以模拟浏览器的行为，向指定的服务器发送一个请求，并可以保存服务器返回的数据。</p>
<a id="more"></a>

<h3 id="urlopen函数："><a href="#urlopen函数：" class="headerlink" title="urlopen函数："></a>urlopen函数：</h3><p>在<code>Python3</code>的<code>urllib</code>库中，所有和网络请求相关的方法，都被集到<code>urllib.request</code>模块下面了，以先来看下<code>urlopen</code>函数基本的使用：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">resp = request.urlopen(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></tbody></table></figure>

<p>实际上，使用浏览器访问百度，右键查看源代码。你会发现，跟我们刚才打印出来的数据是一模一样的。也就是说，上面的三行代码就已经帮我们把百度的首页的全部代码爬下来了。一个基本的url请求对应的python代码真的非常简单。<br>以下对<code>urlopen</code>函数的进行详细讲解：</p>
<ol>
<li><code>url</code>：请求的url。</li>
<li><code>data</code>：请求的<code>data</code>，如果设置了这个值，那么将变成<code>post</code>请求。</li>
<li>返回值：返回值是一个<code>http.client.HTTPResponse</code>对象，这个对象是一个类文件句柄对象。有<code>read(size)</code>、<code>readline</code>、<code>readlines</code>以及<code>getcode</code>等方法。</li>
</ol>
<h3 id="urlretrieve函数："><a href="#urlretrieve函数：" class="headerlink" title="urlretrieve函数："></a>urlretrieve函数：</h3><p>这个函数可以方便的将网页上的一个文件保存到本地。以下代码可以非常方便的将百度的首页下载到本地：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">request.urlretrieve(<span class="string">'http://www.baidu.com/'</span>,<span class="string">'baidu.html'</span>)</span><br></pre></td></tr></tbody></table></figure>

<h3 id="urlencode函数："><a href="#urlencode函数：" class="headerlink" title="urlencode函数："></a>urlencode函数：</h3><p>用浏览器发送请求的时候，如果url中包含了中文或者其他特殊字符，那么浏览器会自动的给我们进行编码。而如果使用代码发送请求，那么就必须手动的进行编码，这时候就应该使用<code>urlencode</code>函数来实现。<code>urlencode</code>可以把字典数据转换为<code>URL</code>编码的数据。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">data = {<span class="string">'name'</span>:<span class="string">'爬虫基础'</span>,<span class="string">'greet'</span>:<span class="string">'hello world'</span>,<span class="string">'age'</span>:<span class="number">100</span>}</span><br><span class="line">qs = parse.urlencode(data)</span><br><span class="line">print(qs)</span><br></pre></td></tr></tbody></table></figure>

<h3 id="parse-qs函数："><a href="#parse-qs函数：" class="headerlink" title="parse_qs函数："></a>parse_qs函数：</h3><p>可以将经过编码后的url参数进行解码。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">qs = <span class="string">"name=%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80&greet=hello+world&age=100"</span></span><br><span class="line">print(parse.parse_qs(qs))</span><br></pre></td></tr></tbody></table></figure>

<h3 id="urlparse和urlsplit："><a href="#urlparse和urlsplit：" class="headerlink" title="urlparse和urlsplit："></a>urlparse和urlsplit：</h3><p>有时候拿到一个url，想要对这个url中的各个组成部分进行分割，那么这时候就可以使用<code>urlparse</code>或者是<code>urlsplit</code>来进行分割。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com/s?username=python'</span></span><br><span class="line"></span><br><span class="line">result = parse.urlsplit(url)</span><br><span class="line"><span class="comment"># result = parse.urlparse(url)</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'scheme:'</span>,result.scheme)</span><br><span class="line">print(<span class="string">'netloc:'</span>,result.netloc)</span><br><span class="line">print(<span class="string">'path:'</span>,result.path)</span><br><span class="line">print(<span class="string">'query:'</span>,result.query)</span><br></pre></td></tr></tbody></table></figure>

<p><code>urlparse</code>和<code>urlsplit</code>基本上是一模一样的。唯一不一样的地方是，<code>urlparse</code>里面多了一个<code>params</code>属性，而<code>urlsplit</code>没有这个<code>params</code>属性。比如有一个<code>url</code>为：<code>url = 'http://www.baidu.com/s;hello?wd=python&username=abc#1'</code>，<br>那么<code>urlparse</code>可以获取到<code>hello</code>，而<code>urlsplit</code>不可以获取到。<code>url</code>中的<code>params</code>也用得比较少。</p>
<h3 id="request-Request类："><a href="#request-Request类：" class="headerlink" title="request.Request类："></a>request.Request类：</h3><p>如果想要在请求的时候增加一些请求头，那么就必须使用<code>request.Request</code>类来实现。比如要增加一个<code>User-Agent</code>，示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">headers = {</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">}</span><br><span class="line">req = request.Request(<span class="string">"http://www.baidu.com/"</span>,headers=headers)</span><br><span class="line">resp = request.urlopen(req)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></tbody></table></figure>

<h3 id="内涵段子爬虫实战作业："><a href="#内涵段子爬虫实战作业：" class="headerlink" title="内涵段子爬虫实战作业："></a>内涵段子爬虫实战作业：</h3><ol>
<li>url链接：<a href="http://neihanshequ.com/bar/1/" target="_blank" rel="noopener">http://neihanshequ.com/bar/1/</a></li>
<li>要求：能爬取一页的数据就可以了。</li>
</ol>
<h3 id="ProxyHandler处理器（代理设置）"><a href="#ProxyHandler处理器（代理设置）" class="headerlink" title="ProxyHandler处理器（代理设置）"></a>ProxyHandler处理器（代理设置）</h3><p>很多网站会检测某一段时间某个IP的访问次数(通过流量统计，系统日志等)，如果访问次数多的不像正常人，它会禁止这个IP的访问。<br>所以我们可以设置一些代理服务器，每隔一段时间换一个代理，就算IP被禁止，依然可以换个IP继续爬取。<br>urllib中通过ProxyHandler来设置使用代理服务器，下面代码说明如何使用自定义opener来使用代理：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是没有使用代理的</span></span><br><span class="line"><span class="comment"># resp = request.urlopen('http://httpbin.org/get')</span></span><br><span class="line"><span class="comment"># print(resp.read().decode("utf-8"))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是使用了代理的</span></span><br><span class="line">handler = request.ProxyHandler({<span class="string">"http"</span>:<span class="string">"218.66.161.88:31769"</span>})</span><br><span class="line"></span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line">req = request.Request(<span class="string">"http://httpbin.org/ip"</span>)</span><br><span class="line">resp = opener.open(req)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></tbody></table></figure>

<p>常用的代理有：</p>
<ul>
<li>西刺免费代理IP：<a href="http://www.xicidaili.com/" target="_blank" rel="noopener">http://www.xicidaili.com/</a></li>
<li>快代理：<a href="http://www.kuaidaili.com/" target="_blank" rel="noopener">http://www.kuaidaili.com/</a></li>
<li>代理云：<a href="http://www.dailiyun.com/" target="_blank" rel="noopener">http://www.dailiyun.com/</a></li>
</ul>
<h3 id="什么是cookie："><a href="#什么是cookie：" class="headerlink" title="什么是cookie："></a>什么是cookie：</h3><p>在网站中，http请求是无状态的。也就是说即使第一次和服务器连接后并且登录成功后，第二次请求服务器依然不能知道当前请求是哪个用户。<code>cookie</code>的出现就是为了解决这个问题，第一次登录后服务器返回一些数据（cookie）给浏览器，然后浏览器保存在本地，当该用户发送第二次请求的时候，就会自动的把上次请求存储的<code>cookie</code>数据自动的携带给服务器，服务器通过浏览器携带的数据就能判断当前用户是哪个了。<code>cookie</code>存储的数据量有限，不同的浏览器有不同的存储大小，但一般不超过4KB。因此使用<code>cookie</code>只能存储一些小量的数据。</p>
<h4 id="cookie的格式："><a href="#cookie的格式：" class="headerlink" title="cookie的格式："></a>cookie的格式：</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Set-Cookie: NAME=VALUE；Expires/Max-age=DATE；Path=PATH；Domain=DOMAIN_NAME；SECURE</span><br></pre></td></tr></tbody></table></figure>

<p>参数意义：</p>
<ul>
<li>NAME：cookie的名字。</li>
<li>VALUE：cookie的值。</li>
<li>Expires：cookie的过期时间。</li>
<li>Path：cookie作用的路径。</li>
<li>Domain：cookie作用的域名。</li>
<li>SECURE：是否只在https协议下起作用。</li>
</ul>
<h3 id="使用cookielib库和HTTPCookieProcessor模拟登录："><a href="#使用cookielib库和HTTPCookieProcessor模拟登录：" class="headerlink" title="使用cookielib库和HTTPCookieProcessor模拟登录："></a>使用cookielib库和HTTPCookieProcessor模拟登录：</h3><p>Cookie 是指网站服务器为了辨别用户身份和进行Session跟踪，而储存在用户浏览器上的文本文件，Cookie可以保持登录信息到用户下次与服务器的会话。<br>这里以人人网为例。人人网中，要访问某个人的主页，必须先登录才能访问，登录说白了就是要有cookie信息。那么如果我们想要用代码的方式访问，就必须要有正确的cookie信息才能访问。解决方案有两种，第一种是使用浏览器访问，然后将cookie信息复制下来，放到headers中。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'anonymid=jacdwz2x-8bjldx; depovince=GW; _r01_=1; _ga=GA1.2.1455063316.1511436360; _gid=GA1.2.862627163.1511436360; wp=1; JSESSIONID=abczwY8ecd4xz8RJcyP-v; jebecookies=d4497791-9d41-4269-9e2b-3858d4989785|||||; ick_login=884e75d4-f361-4cff-94bb-81fe6c42b220; _de=EA5778F44555C091303554EBBEB4676C696BF75400CE19CC; p=61a3c7d0d4b2d1e991095353f83fa2141; first_login_flag=1; ln_uact=970138074@qq.com; ln_hurl=http://hdn.xnimg.cn/photos/hdn121/20170428/1700/main_nhiB_aebd0000854a1986.jpg; t=3dd84a3117737e819dd2c32f1cdb91d01; societyguester=3dd84a3117737e819dd2c32f1cdb91d01; id=443362311; xnsid=169efdc0; loginfrom=syshome; ch_id=10016; jebe_key=9c062f5a-4335-4a91-bf7a-970f8b86a64e%7Ca022c303305d1b2ab6b5089643e4b5de%7C1511449232839%7C1; wp_fold=0'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.renren.com/880151247/profile'</span></span><br><span class="line"></span><br><span class="line">req = request.Request(url,headers=headers)</span><br><span class="line">resp = request.urlopen(req)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'renren.html'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(resp.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></tbody></table></figure>

<p>但是每次在访问需要cookie的页面都要从浏览器中复制cookie比较麻烦。在Python处理Cookie，一般是通过<code>http.cookiejar</code>模块和<code>urllib模块的HTTPCookieProcessor</code>处理器类一起使用。<code>http.cookiejar</code>模块主要作用是提供用于存储cookie的对象。而<code>HTTPCookieProcessor</code>处理器主要作用是处理这些cookie对象，并构建handler对象。</p>
<h4 id="http-cookiejar模块："><a href="#http-cookiejar模块：" class="headerlink" title="http.cookiejar模块："></a>http.cookiejar模块：</h4><p>该模块主要的类有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。这四个类的作用分别如下：</p>
<ol>
<li>CookieJar：管理HTTP cookie值、存储HTTP请求生成的cookie、向传出的HTTP请求添加cookie的对象。整个cookie都存储在内存中，对CookieJar实例进行垃圾回收后cookie也将丢失。</li>
<li>FileCookieJar (filename,delayload=None,policy=None)：从CookieJar派生而来，用来创建FileCookieJar实例，检索cookie信息并将cookie存储到文件中。filename是存储cookie的文件名。delayload为True时支持延迟访问访问文件，即只有在需要时才读取文件或在文件中存储数据。</li>
<li>MozillaCookieJar (filename,delayload=None,policy=None)：从FileCookieJar派生而来，创建与Mozilla浏览器 cookies.txt兼容的FileCookieJar实例。</li>
<li>LWPCookieJar (filename,delayload=None,policy=None)：从FileCookieJar派生而来，创建与libwww-perl标准的 Set-Cookie3 文件格式兼容的FileCookieJar实例。</li>
</ol>
<h4 id="登录人人网："><a href="#登录人人网：" class="headerlink" title="登录人人网："></a>登录人人网：</h4><p>利用<code>http.cookiejar</code>和<code>request.HTTPCookieProcessor</code>登录人人网。相关示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,parse</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> CookieJar</span><br><span class="line"></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_opener</span><span class="params">()</span>:</span></span><br><span class="line">    cookiejar = CookieJar()</span><br><span class="line">    handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">    opener = request.build_opener(handler)</span><br><span class="line">    <span class="keyword">return</span> opener</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_renren</span><span class="params">(opener)</span>:</span></span><br><span class="line">    data = {<span class="string">"email"</span>: <span class="string">"970138074@qq.com"</span>, <span class="string">"password"</span>: <span class="string">"pythonspider"</span>}</span><br><span class="line">    data = parse.urlencode(data).encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    login_url = <span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">    req = request.Request(login_url, headers=headers, data=data)</span><br><span class="line">    opener.open(req)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit_profile</span><span class="params">(opener)</span>:</span></span><br><span class="line">    url = <span class="string">'http://www.renren.com/880151247/profile'</span></span><br><span class="line">    req = request.Request(url,headers=headers)</span><br><span class="line">    resp = opener.open(req)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'renren.html'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(resp.read().decode(<span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    opener = get_opener()</span><br><span class="line">    login_renren(opener)</span><br><span class="line">    visit_profile(opener)</span><br></pre></td></tr></tbody></table></figure>

<h4 id="保存cookie到本地："><a href="#保存cookie到本地：" class="headerlink" title="保存cookie到本地："></a>保存cookie到本地：</h4><p>保存<code>cookie</code>到本地，可以使用<code>cookiejar</code>的<code>save</code>方法，并且需要指定一个文件名：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookiejar = MozillaCookieJar(<span class="string">"cookie.txt"</span>)</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">}</span><br><span class="line">req = request.Request(<span class="string">'http://httpbin.org/cookies'</span>,headers=headers)</span><br><span class="line"></span><br><span class="line">resp = opener.open(req)</span><br><span class="line">print(resp.read())</span><br><span class="line">cookiejar.save(ignore_discard=<span class="literal">True</span>,ignore_expires=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure>

<h4 id="从本地加载cookie："><a href="#从本地加载cookie：" class="headerlink" title="从本地加载cookie："></a>从本地加载cookie：</h4><p>从本地加载<code>cookie</code>，需要使用<code>cookiejar</code>的<code>load</code>方法，并且也需要指定方法：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookiejar = MozillaCookieJar(<span class="string">"cookie.txt"</span>)</span><br><span class="line">cookiejar.load(ignore_expires=<span class="literal">True</span>,ignore_discard=<span class="literal">True</span>)</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">}</span><br><span class="line">req = request.Request(<span class="string">'http://httpbin.org/cookies'</span>,headers=headers)</span><br><span class="line"></span><br><span class="line">resp = opener.open(req)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>http协议和Chrome抓包工具</title>
    <url>/2020/03/19/python%E7%88%AC%E8%99%AB/2-http%E5%8D%8F%E8%AE%AE%E5%92%8CChrome%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<html><head></head><body><h1 id="2-http协议和Chrome抓包工具"><a href="#2-http协议和Chrome抓包工具" class="headerlink" title="2-http协议和Chrome抓包工具"></a>2-http协议和Chrome抓包工具</h1><h2 id="什么是http和https协议："><a href="#什么是http和https协议：" class="headerlink" title="什么是http和https协议："></a>什么是http和https协议：</h2><p>HTTP协议：全称是<code>HyperText Transfer Protocol</code>，中文意思是超文本传输协议，是一种发布和接收HTML页面的方法。服务器端口号是<code>80</code>端口。 HTTPS协议：是HTTP协议的加密版本，在HTTP下加入了SSL层。服务器端口号是<code>443</code>端口。</p>
<a id="more"></a>

<h2 id="在浏览器中发送一个http请求的过程："><a href="#在浏览器中发送一个http请求的过程：" class="headerlink" title="在浏览器中发送一个http请求的过程："></a>在浏览器中发送一个http请求的过程：</h2><ol>
<li>当用户在浏览器的地址栏中输入一个URL并按回车键之后，浏览器会向HTTP服务器发送HTTP请求。HTTP请求主要分为“Get”和“Post”两种方法。</li>
<li>当我们在浏览器输入URL <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a> 的时候，浏览器发送一个Request请求去获取 <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a> 的html文件，服务器把Response文件对象发送回给浏览器。</li>
<li>浏览器分析Response中的 HTML，发现其中引用了很多其他文件，比如Images文件，CSS文件，JS文件。 浏览器会自动再次发送Request去获取图片，CSS文件，或者JS文件。</li>
<li>当所有的文件都下载成功后，网页会根据HTML语法结构，完整的显示出来了。</li>
</ol>
<h2 id="url详解："><a href="#url详解：" class="headerlink" title="url详解："></a>url详解：</h2><p><code>URL</code>是<code>Uniform Resource Locator</code>的简写，统一资源定位符。 一个<code>URL</code>由以下几部分组成：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">scheme://host:port/path/?query-string=xxx#anchor</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><strong>scheme</strong>：代表的是访问的协议，一般为<code>http</code>或者<code>https</code>以及<code>ftp</code>等。</li>
<li><strong>host</strong>：主机名，域名，比如<code>www.baidu.com</code>。</li>
<li><strong>port</strong>：端口号。当你访问一个网站的时候，浏览器默认使用80端口。</li>
<li><strong>path</strong>：查找路径。比如：<code>www.jianshu.com/trending/now</code>，后面的<code>trending/now</code>就是<code>path</code>。</li>
<li><strong>query-string</strong>：查询字符串，比如：<code>www.baidu.com/s?wd=python</code>，后面的<code>wd=python</code>就是查询字符串。</li>
<li><strong>anchor</strong>：锚点，后台一般不用管，前端用来做页面定位的。</li>
</ul>
<p>在浏览器中请求一个<code>url</code>，浏览器会对这个url进行一个编码。除英文字母，数字和部分符号外，其他的全部使用百分号+十六进制码值进行编码。</p>
<h2 id="常用的请求方法："><a href="#常用的请求方法：" class="headerlink" title="常用的请求方法："></a>常用的请求方法：</h2><p>在<code>Http</code>协议中，定义了八种请求方法。这里介绍两种常用的请求方法，分别是<code>get</code>请求和<code>post</code>请求。</p>
<ol>
<li><code>get</code>请求：一般情况下，只从服务器获取数据下来，并不会对服务器资源产生任何影响的时候会使用<code>get</code>请求。</li>
<li><code>post</code>请求：向服务器发送数据（登录）、上传文件等，会对服务器资源产生影响的时候会使用<code>post</code>请求。 以上是在网站开发中常用的两种方法。并且一般情况下都会遵循使用的原则。但是有的网站和服务器为了做反爬虫机制，也经常会不按常理出牌，有可能一个应该使用<code>get</code>方法的请求就一定要改成<code>post</code>请求，这个要视情况而定。</li>
</ol>
<h2 id="请求头常见参数："><a href="#请求头常见参数：" class="headerlink" title="请求头常见参数："></a>请求头常见参数：</h2><p>在<code>http</code>协议中，向服务器发送一个请求，数据分为三部分，第一个是把数据放在url中，第二个是把数据放在<code>body</code>中（在<code>post</code>请求中），第三个就是把数据放在<code>head</code>中。这里介绍在网络爬虫中经常会用到的一些请求头参数：</p>
<ol>
<li><code>User-Agent</code>：浏览器名称。这个在网络爬虫中经常会被使用到。请求一个网页的时候，服务器通过这个参数就可以知道这个请求是由哪种浏览器发送的。如果我们是通过爬虫发送请求，那么我们的<code>User-Agent</code>就是<code>Python</code>，这对于那些有反爬虫机制的网站来说，可以轻易的判断你这个请求是爬虫。因此我们要经常设置这个值为一些浏览器的值，来伪装我们的爬虫。</li>
<li><code>Referer</code>：表明当前这个请求是从哪个<code>url</code>过来的。这个一般也可以用来做反爬虫技术。如果不是从指定页面过来的，那么就不做相关的响应。</li>
<li><code>Cookie</code>：<code>http</code>协议是无状态的。也就是同一个人发送了两次请求，服务器没有能力知道这两个请求是否来自同一个人。因此这时候就用<code>cookie</code>来做标识。一般如果想要做登录后才能访问的网站，那么就需要发送<code>cookie</code>信息了。</li>
</ol>
<h2 id="常见响应状态码："><a href="#常见响应状态码：" class="headerlink" title="常见响应状态码："></a>常见响应状态码：</h2><ol>
<li><code>200</code>：请求正常，服务器正常的返回数据。</li>
<li><code>301</code>：永久重定向。比如在访问<code>www.jingdong.com</code>的时候会重定向到<code>www.jd.com</code>。</li>
<li><code>302</code>：临时重定向。比如在访问一个需要登录的页面的时候，而此时没有登录，那么就会重定向到登录页面。</li>
<li><code>400</code>：请求的<code>url</code>在服务器上找不到。换句话说就是请求<code>url</code>错误。</li>
<li><code>403</code>：服务器拒绝访问，权限不够。</li>
<li><code>500</code>：服务器内部错误。可能是服务器出现<code>bug</code>了。</li>
</ol>
<h2 id="Chrome抓包工具："><a href="#Chrome抓包工具：" class="headerlink" title="Chrome抓包工具："></a>Chrome抓包工具：</h2><p><code>Chrome</code>浏览器是一个非常亲近开发者的浏览器。可以方便的查看网络请求以及发送的参数。对着网页<code>右键->检查</code>。然后就可以打开开发者选项。</p>
</body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫基础续</title>
    <url>/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB%E7%BB%AD/</url>
    <content><![CDATA[<html><head></head><body><p>下载器中间件middleware主要有两个类</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">process_request(spider,request)</span><br><span class="line">process_response()</span><br></pre></td></tr></tbody></table></figure>

<a id="more"></a>

<p>使用随机请求头请求url</p>
<p><img src="/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB%E7%BB%AD/image-20200315185902579.png" alt="image-20200315185902579"></p>
<p>使用随机ip代理</p>
<p><img src="/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB%E7%BB%AD/image-20200315190017859.png" alt="image-20200315190017859"></p>
<p>使用独享代理ip访问</p>
<p><img src="/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB%E7%BB%AD/image-20200315185421927.png" alt="使用随机ip代理"></p>
<p>创建爬取boss直聘网的项目使用crawl模板</p>
<p><img src="/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB%E7%BB%AD/image-20200315191040143.png" alt="image-20200315191040143"></p>
<p>全站爬取简书网</p>
<p>爬取规则</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">rules = (</span><br><span class="line">    Rule(LinkExtractor(allow=<span class="string">r'.*/p/[0-9a-z]{12}.*'</span>), callback=<span class="string">'parse_detail'</span>, follow=<span class="literal">True</span>),</span><br><span class="line">)</span><br><span class="line"><span class="comment"># allow 采用正则表达式的方式 .*表示可有可无</span></span><br></pre></td></tr></tbody></table></figure>



<p>采用scrapy shell 检验我们的xpath语法是否准确</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 进入项目根目录</span></span><br><span class="line">E:\pycharm project\py爬虫\jianshu_spider>scrapy shell https://www.jianshu.com/p/<span class="number">2904e60</span>b8e50</span><br></pre></td></tr></tbody></table></figure>

<p>用xpath解析页面</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">In [<span class="number">3</span>]: title = response.xpath(<span class="string">"//h1[@class='_1RuRku']//text()"</span>).get()</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: title</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'一位加拿大奶爸教育“熊孩子”的札记'</span></span><br></pre></td></tr></tbody></table></figure>

<p>采用selenium和webdriver和scrapy和mysql的方式爬取信息</p>
<p>项目结构</p>
<p><img src="/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB%E7%BB%AD/image-20200317022109645.png" alt="image-20200317022109645"></p>
<p>jianshu.py</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> jianshu_spider.items <span class="keyword">import</span> ArticleItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JianshuSpider</span><span class="params">(CrawlSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'jianshu'</span></span><br><span class="line">    allowed_domains = [<span class="string">'jianshu.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'https://www.jianshu.com/'</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r'.*/p/[0-9a-z]{12}.*'</span>), callback=<span class="string">'parse_detail'</span>, follow=<span class="literal">True</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># item['domain_id'] = response.xpath('//input[@id="sid"]/@value').get()</span></span><br><span class="line">        <span class="comment"># item['name'] = response.xpath('//div[@id="name"]').get()</span></span><br><span class="line">        <span class="comment"># item['description'] = response.xpath('//div[@id="description"]').get()</span></span><br><span class="line">        title = response.xpath(<span class="string">"//h1[@class='_1RuRku']//text()"</span>).get()</span><br><span class="line">        author = response.xpath(<span class="string">"//span[@class='_22gUMi']/text()"</span>).get()</span><br><span class="line">        pub_time = response.xpath(<span class="string">"//div[@class='s-dsoj']//time/text()"</span>).get()</span><br><span class="line">        article_id = response.url.split(<span class="string">"/"</span>)[<span class="number">-1</span>]</span><br><span class="line">        origin_url = response.url</span><br><span class="line">        content = response.xpath(<span class="string">"//article[@class='_2rhmJa']"</span>).get()</span><br><span class="line">        item = ArticleItem(</span><br><span class="line">            title=title,</span><br><span class="line">            article_id=article_id, origin_url=origin_url, author=author, content=content, pub_time=pub_time</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></tbody></table></figure>

<p>items</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define here the models for your scraped items</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># https://docs.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br><span class="line">    article_id = scrapy.Field()</span><br><span class="line">    origin_url = scrapy.Field()</span><br><span class="line">    author = scrapy.Field()</span><br><span class="line">    pub_time = scrapy.Field()</span><br></pre></td></tr></tbody></table></figure>

<p>middlewares.py 中间件</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define here the models for your spider middleware</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># https://docs.scrapy.org/en/latest/topics/spider-middleware.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> signals</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> scrapy.http.response.html <span class="keyword">import</span> HtmlResponse</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JianshuSpiderSpiderMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># Not all methods need to be defined. If a method is not defined,</span></span><br><span class="line">    <span class="comment"># scrapy acts as if the spider middleware does not modify the</span></span><br><span class="line">    <span class="comment"># passed objects.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">        <span class="comment"># This method is used by Scrapy to create your spiders.</span></span><br><span class="line">        s = cls()</span><br><span class="line">        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_spider_input</span><span class="params">(self, response, spider)</span>:</span></span><br><span class="line">        <span class="comment"># Called for each response that goes through the spider</span></span><br><span class="line">        <span class="comment"># middleware and into the spider.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Should return None or raise an exception.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_spider_output</span><span class="params">(self, response, result, spider)</span>:</span></span><br><span class="line">        <span class="comment"># Called with the results returned from the Spider, after</span></span><br><span class="line">        <span class="comment"># it has processed the response.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Must return an iterable of Request, dict or Item objects.</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">            <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_spider_exception</span><span class="params">(self, response, exception, spider)</span>:</span></span><br><span class="line">        <span class="comment"># Called when a spider or process_spider_input() method</span></span><br><span class="line">        <span class="comment"># (from other spider middleware) raises an exception.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Should return either None or an iterable of Request, dict</span></span><br><span class="line">        <span class="comment"># or Item objects.</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_start_requests</span><span class="params">(self, start_requests, spider)</span>:</span></span><br><span class="line">        <span class="comment"># Called with the start requests of the spider, and works</span></span><br><span class="line">        <span class="comment"># similarly to the process_spider_output() method, except</span></span><br><span class="line">        <span class="comment"># that it doesn’t have a response associated.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Must return only requests (not items).</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> start_requests:</span><br><span class="line">            <span class="keyword">yield</span> r</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spider_opened</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        spider.logger.info(<span class="string">'Spider opened: %s'</span> % spider.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JianshuSpiderDownloaderMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># Not all methods need to be defined. If a method is not defined,</span></span><br><span class="line">    <span class="comment"># scrapy acts as if the downloader middleware does not modify the</span></span><br><span class="line">    <span class="comment"># passed objects.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建driver使用selenium</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.driver = webdriver.Chrome(executable_path=<span class="string">"E:\Program Files\chromedriver\chromedriver.exe"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">        <span class="comment"># This method is used by Scrapy to create your spiders.</span></span><br><span class="line">        s = cls()</span><br><span class="line">        crawler.signals.connect(s.spider_opened, signal=signals.spider_opened)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        <span class="comment"># Called for each request that goes through the downloader</span></span><br><span class="line">        <span class="comment"># middleware.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Must either:</span></span><br><span class="line">        <span class="comment"># - return None: continue processing this request</span></span><br><span class="line">        <span class="comment"># - or return a Response object</span></span><br><span class="line">        <span class="comment"># - or return a Request object</span></span><br><span class="line">        <span class="comment"># - or raise IgnoreRequest: process_exception() methods of</span></span><br><span class="line">        <span class="comment">#   installed downloader middleware will be called</span></span><br><span class="line">        <span class="comment"># 将pagesource返回解析</span></span><br><span class="line">        <span class="comment"># 返回response对象</span></span><br><span class="line">        self.driver.get(request.url)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        source = self.driver.page_source</span><br><span class="line">        response = HtmlResponse(url=self.driver.current_url, body=source, request=request, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response, spider)</span>:</span></span><br><span class="line">        <span class="comment"># Called with the response returned from the downloader.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Must either;</span></span><br><span class="line">        <span class="comment"># - return a Response object</span></span><br><span class="line">        <span class="comment"># - return a Request object</span></span><br><span class="line">        <span class="comment"># - or raise IgnoreRequest</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self, request, exception, spider)</span>:</span></span><br><span class="line">        <span class="comment"># Called when a download handler or a process_request()</span></span><br><span class="line">        <span class="comment"># (from other downloader middleware) raises an exception.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Must either:</span></span><br><span class="line">        <span class="comment"># - return None: continue processing this exception</span></span><br><span class="line">        <span class="comment"># - return a Response object: stops process_exception() chain</span></span><br><span class="line">        <span class="comment"># - return a Request object: stops process_exception() chain</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spider_opened</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        spider.logger.info(<span class="string">'Spider opened: %s'</span> % spider.name)</span><br></pre></td></tr></tbody></table></figure>

<p>pipelines.py 下载器,采用我们自己写的下载器</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JianshuTwistedPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        dbparams = {</span><br><span class="line">            <span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">            <span class="string">'port'</span>: <span class="number">3306</span>,</span><br><span class="line">            <span class="string">'user'</span>: <span class="string">'root'</span>,</span><br><span class="line">            <span class="string">'password'</span>: <span class="string">'root'</span>,</span><br><span class="line">            <span class="string">'database'</span>: <span class="string">'jianshu_article'</span>,</span><br><span class="line">            <span class="string">'charset'</span>: <span class="string">'utf8'</span>,</span><br><span class="line">            <span class="string">'cursorclass'</span>: cursors.DictCursor <span class="comment"># 游标</span></span><br><span class="line">        }</span><br><span class="line">        <span class="comment"># 使用scrapy的Twiste创建池</span></span><br><span class="line">        self.dbpool = adbapi.ConnectionPool(<span class="string">'pymysql'</span>, **dbparams)</span><br><span class="line">        self._sql = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sql</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._sql:</span><br><span class="line">            self._sql = <span class="string">'''</span></span><br><span class="line"><span class="string">                insert into article values(null,%s,%s,%s,%s,%s,%s)</span></span><br><span class="line"><span class="string">            '''</span></span><br><span class="line">            <span class="keyword">return</span> self._sql</span><br><span class="line">        <span class="keyword">return</span> self._sql</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        defer = self.dbpool.runInteraction(self.insert_item, item)</span><br><span class="line">		<span class="comment"># </span></span><br><span class="line">        defer.addErrback(self.handle_error, item, spider)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_item</span><span class="params">(self, cursor, item)</span>:</span></span><br><span class="line">        <span class="comment"># 执行sql语句</span></span><br><span class="line">        cursor.execute(self.sql,</span><br><span class="line">                            (item[<span class="string">'title'</span>], item[<span class="string">'author'</span>], item[<span class="string">'pub_time'</span>], item[<span class="string">'article_id'</span>], item[<span class="string">'origin_url'</span>], item[<span class="string">'content'</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_error</span><span class="params">(self, error, item, spider)</span>:</span></span><br><span class="line">        print(<span class="string">"="</span>*<span class="number">10</span>+<span class="string">"error"</span>+<span class="string">"="</span>*<span class="number">10</span>)</span><br><span class="line">        print(error)</span><br><span class="line">        print(<span class="string">"="</span>*<span class="number">10</span>+<span class="string">"error"</span>+<span class="string">"="</span>*<span class="number">10</span>)</span><br></pre></td></tr></tbody></table></figure>



</body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>蒙特卡洛树搜索MCTS实现五子棋</title>
    <url>/2022/10/10/%E5%8D%9A%E5%BC%88/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A0%91%E6%90%9C%E7%B4%A2MCTS/</url>
    <content><![CDATA[<html><head></head><body><h1 id="蒙特卡洛树"><a href="#蒙特卡洛树" class="headerlink" title="蒙特卡洛树"></a>蒙特卡洛树</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>1 蒙特卡洛树搜索是一类树搜索算法的统称,称为MCTS,是一种启发式搜索算法,在搜索空间极大的游戏中比较有效,它的目标是给定一个游戏状态,选择最佳的一步,如Alpha Go.</p>
<a id="more"></a>

<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1 选择: 选择能够最大化UCB值的节点</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">UCB = Vi+c*sqot(lnN/ni) c=2</span><br></pre></td></tr></tbody></table></figure>

<p>2 扩展: 创建一个或多个子节点</p>
<p>3 仿真: 在某一结点用随机策略进行游戏</p>
<p>4 反向传播: 使用随机搜索的结果更新整个搜索树</p>
<p>5 在棋类游戏中应用mcts，本例将用五子棋应用mcts实现，实现五子棋的文件目录如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">---gomoku</span><br><span class="line">	--board.py</span><br><span class="line">	--mcts.py</span><br><span class="line">	--node.py</span><br><span class="line">	--play.py</span><br></pre></td></tr></tbody></table></figure>

<p> 然后就可以一个一个实现了，首先是board，我们需要首先实现board类其需要一些属性</p>
<figure class="highlight plain"><figcaption><span>```表示棋盘大小</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">```board ```传入一个board，若为空，则用numpy初始化一个</span><br><span class="line"></span><br><span class="line">```cur_player``` 当前游戏玩家</span><br><span class="line"></span><br><span class="line">其代码如下：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">class Board():</span><br><span class="line">    def __init__(self, board=None, size=8, cur_player=-1):</span><br><span class="line">        self.size = size</span><br><span class="line">        self.board = np.zeros((self.size, self.size), int) if board is None else board</span><br><span class="line">        self.cur_player = cur_player</span><br></pre></td></tr></tbody></table></figure>

<p>然后需要实现几个函数：</p>
<figure class="highlight plain"><figcaption><span>判断棋子是否合法</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">```get_legal_pos``` 返回列表，得到棋盘位置为0点返回</span><br><span class="line"></span><br><span class="line">```move```  落子操作，先判断棋子是否合法，则新生成一个Board对象，并将当前的move位置添加到棋盘上返回</span><br><span class="line"></span><br><span class="line">```board_result``` 判断哪方赢。</span><br><span class="line"></span><br><span class="line">```game_over``` 判定游戏是否结束</span><br><span class="line"></span><br><span class="line">接下来一一实现，其代码如下：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">    def is_move_legal(self, move_pos):</span><br><span class="line">        """</span><br><span class="line">        :param move_pos: 元组得到位置</span><br><span class="line">        :return: true or false</span><br><span class="line">        """</span><br><span class="line">        x, y = -100, -100</span><br><span class="line">        if move_pos is not None:</span><br><span class="line">            x, y = move_pos[0], move_pos[1]</span><br><span class="line">        if x < 0 or x > self.size or y < 0 or y > self.size:  # 判断是否溢出棋盘边界</span><br><span class="line">            return False</span><br><span class="line">        if self.board[x, y] != 0:  # 判断是否下在已经有棋子的位置上</span><br><span class="line">            return False</span><br><span class="line">        return True</span><br><span class="line"></span><br><span class="line">    def get_legal_pos(self):</span><br><span class="line">        """</span><br><span class="line">        :return: 返回列表</span><br><span class="line">        """</span><br><span class="line">        pos_list = []</span><br><span class="line">        for i in range(0, self.size):</span><br><span class="line">            for j in range(0, self.size):</span><br><span class="line">                if self.board[i][j] == 0:</span><br><span class="line">                    pos_list.append((i, j))</span><br><span class="line">        return pos_list</span><br><span class="line"></span><br><span class="line">    def move(self, move_pos):</span><br><span class="line">        """</span><br><span class="line">        走子</span><br><span class="line">        :param move_pos:</span><br><span class="line">        :return: board</span><br><span class="line">        """</span><br><span class="line">        if not self.is_move_legal(move_pos):  # 不合法</span><br><span class="line">            return '棋子不合法'</span><br><span class="line">        new_board = Board(np.copy(self.board), cur_player=-self.cur_player)</span><br><span class="line">        new_board.board[move_pos[0]][move_pos[1]] = self.cur_player</span><br><span class="line">        return new_board</span><br><span class="line"></span><br><span class="line">    def board_result(self, move_pos):</span><br><span class="line">        """</span><br><span class="line">        :param move_pos:</span><br><span class="line">        :return: 判断哪方赢</span><br><span class="line">        """</span><br><span class="line"></span><br><span class="line">        x, y = move_pos[0], move_pos[1]</span><br><span class="line">        # print(x,y)</span><br><span class="line">        player = self.board[x,y]</span><br><span class="line">        direction = list([[self.board[i][y] for i in range(self.size)]])  # 纵向是否有五颗连子</span><br><span class="line">        direction.append([self.board[x][j] for j in range(self.size)])  # 横向是否有五颗连子</span><br><span class="line">        direction.append(self.board.diagonal(y - x))  # 该点正对角是否有五颗连子</span><br><span class="line">        direction.append(np.fliplr(self.board).diagonal(self.size - 1 - y - x))  # 该点反对角是否有五颗连子</span><br><span class="line">        for i in direction:</span><br><span class="line">            count = 0</span><br><span class="line">            for v in i:</span><br><span class="line">                if v == player:</span><br><span class="line">                    count += 1</span><br><span class="line">                    if count == 5:</span><br><span class="line">                        return True</span><br><span class="line">                else:</span><br><span class="line">                    count = 0</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    def game_over(self, move_pos):</span><br><span class="line">        """</span><br><span class="line">        判断游戏是否结束，</span><br><span class="line">        :param move_pos:</span><br><span class="line">        :return:</span><br><span class="line">        """</span><br><span class="line">        if self.board_result(move_pos):</span><br><span class="line">            return "win"</span><br><span class="line">        elif len(self.get_legal_pos()) == 0:</span><br><span class="line">            return 'tie'</span><br><span class="line">        else:</span><br><span class="line">            return None</span><br></pre></td></tr></tbody></table></figure>

<p>实现完棋盘后，还需要实现游戏树节点，也就是<code>node</code>文件，其包含判定游戏树节点的一些操作，定义<code>Node</code>其属性具体如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, board=None, parent=None, pre_pos=None)</span>:</span></span><br><span class="line">    self.pre_pos = pre_pos <span class="comment"># 最后一次落子位置</span></span><br><span class="line">    self.board = board  <span class="comment"># 棋盘</span></span><br><span class="line">    self.parent = parent  <span class="comment"># 父节点</span></span><br><span class="line">    self.children = list()</span><br><span class="line">    self.not_visit_pos = <span class="literal">None</span>  <span class="comment"># 未访问节点</span></span><br><span class="line">    self.num_of_visit = <span class="number">0</span>  <span class="comment"># 该节点访问次数</span></span><br><span class="line">    self.num_of_wins = defaultdict(int)  <span class="comment"># 该节点胜利次数</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plain"><figcaption><span>判断节点是否完全展开</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">```non_terminal```   是否为终端节点，即该节点对应的格局是否已分出胜负</span><br><span class="line"></span><br><span class="line">```pick_unvisited```  选择一个未访问的节点并加入当前节点的孩子中</span><br><span class="line"></span><br><span class="line">```pick_random```  随机选择该节点的一个孩子扩展</span><br><span class="line"></span><br><span class="line">```num_of_win ```  判断该节点的胜负情况，利用一个实数即可代表黑白二子的胜负差值</span><br><span class="line"></span><br><span class="line">```best_uct```  根据uct公式计算最优的孩子节点</span><br><span class="line"></span><br><span class="line">具体实现如下：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">    def fully_expended(self):</span><br><span class="line">        """</span><br><span class="line">        判断节点是否完全展开</span><br><span class="line">        :return: TRUE FALSE</span><br><span class="line">        """</span><br><span class="line">        if self.not_visit_pos is None:</span><br><span class="line">            self.not_visit_pos = self.board.get_legal_pos()</span><br><span class="line">        return True if len(self.not_visit_pos) == 0 and len(self.children) != 0 else False</span><br><span class="line"></span><br><span class="line">    def non_terminal(self):</span><br><span class="line">        """</span><br><span class="line">        是否为终端节点，即该节点对应的格局是否已分出胜负</span><br><span class="line">        :return:</span><br><span class="line">        """</span><br><span class="line">        game_result = self.board.game_over(self.pre_pos)</span><br><span class="line">        return game_result</span><br><span class="line"></span><br><span class="line">    def pick_unvisited(self):</span><br><span class="line">        """</span><br><span class="line">        选择一个未访问的节点并加入当前节点的孩子中</span><br><span class="line">        :return:</span><br><span class="line">        """</span><br><span class="line">        random_index = random.randint(0, len(self.not_visit_pos) - 1)</span><br><span class="line">        move_pos = self.not_visit_pos.pop(random_index)</span><br><span class="line">        new_board = self.board.move(move_pos)</span><br><span class="line">        new_node = Node(new_board, self, move_pos)</span><br><span class="line">        self.children.append(new_node)</span><br><span class="line">        return new_node</span><br><span class="line"></span><br><span class="line">    def pick_random(self):</span><br><span class="line">        """</span><br><span class="line">        随即选择该节点的一个孩子扩展</span><br><span class="line">        :return:</span><br><span class="line">        """</span><br><span class="line">        possible_moves = self.board.get_legal_pos()</span><br><span class="line">        random_index = random.randint(0,len(possible_moves) - 1)</span><br><span class="line">        new_board = self.board.move(possible_moves[random_index])</span><br><span class="line">        new_node = Node(new_board, self, possible_moves[random_index])</span><br><span class="line">        return new_node</span><br><span class="line"></span><br><span class="line">    def num_of_win(self):</span><br><span class="line">        """</span><br><span class="line">        判断该节点的胜负情况，利用一个实数即可代表黑白二子的胜负差值</span><br><span class="line">        :return:</span><br><span class="line">        """</span><br><span class="line">        win = self.num_of_wins[-self.board.cur_player]</span><br><span class="line">        lose = self.num_of_wins[self.board.cur_player]</span><br><span class="line"></span><br><span class="line">        return win - lose</span><br><span class="line"></span><br><span class="line">    def best_uct(self, c_param=1.98):</span><br><span class="line">        uct_of_child = np.array(list(</span><br><span class="line">            [child.num_of_win() / child.num_of_visit + c_param * np.sqrt(self.num_of_visit) / child.num_of_visit for</span><br><span class="line">             child in self.children]))</span><br><span class="line">        best_index = np.argmax(uct_of_child)</span><br><span class="line">        return self.children[best_index]</span><br></pre></td></tr></tbody></table></figure>

<p>接下来是mcts实现，mcts其具体包含四个步骤，开篇已经提到了，接下来我们将具体实现</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 到达叶结点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">traverse</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> node.fully_expended():</span><br><span class="line">        node = node.best_uct()</span><br><span class="line">    <span class="keyword">if</span> node.non_terminal() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: <span class="comment">#</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> node.pick_unvisited()</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 然后进行随机模拟</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rollout</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        game_result = node.non_terminal()</span><br><span class="line">        <span class="keyword">if</span> game_result <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            node = node.pick_random()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> game_result == <span class="string">'win'</span> <span class="keyword">and</span> -node.board.cur_player == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> game_result == <span class="string">'win'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"> <span class="comment"># 回溯，将模拟的值依次回溯至父节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backpropagate</span><span class="params">(node, result)</span>:</span></span><br><span class="line">    node.num_of_visit += <span class="number">1</span></span><br><span class="line">    node.num_of_wins[result] += <span class="number">1</span></span><br><span class="line">    <span class="comment"># print("backpropagate run")</span></span><br><span class="line">    <span class="keyword">if</span> node.parent:</span><br><span class="line">        backpropagate(node.parent, result)</span><br><span class="line">        <span class="comment"># print("backpropagate run")</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"> <span class="comment"># 根据uct公式选择最好的下一步</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_child</span><span class="params">(node)</span>:</span></span><br><span class="line">    visit_num_of_children = np.array(list([child.num_of_visit <span class="keyword">for</span> child <span class="keyword">in</span> node.children]))</span><br><span class="line">    <span class="comment"># print(visit_num_of_children)</span></span><br><span class="line">    best_index = np.argmax(visit_num_of_children)</span><br><span class="line">    node = node.children[best_index]</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mcts 可以循环很多次，进而促进多的模拟对局，才能选出更好的下一步</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mcts</span><span class="params">(board, pre_pos)</span>:</span></span><br><span class="line">    root = Node(board=board, pre_pos=pre_pos)  <span class="comment"># 根节点作为第一个node</span></span><br><span class="line">    <span class="comment"># print('mcts pre_pos:{}'.format(root.pre_pos))</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, mcts_times): <span class="comment"># 循环 mcts_times为你要模拟多少次</span></span><br><span class="line">        leaf = traverse(root)  <span class="comment"># 到达叶结点</span></span><br><span class="line">        <span class="comment"># print("----------traverse run")</span></span><br><span class="line">        simulation_result = rollout(leaf) <span class="comment"># 随机模拟</span></span><br><span class="line">        <span class="comment"># print(simulation_result)</span></span><br><span class="line">        backpropagate(leaf, simulation_result) <span class="comment"># 回溯</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> best_child(root).pre_pos <span class="comment"># 返回最好的下一步</span></span><br></pre></td></tr></tbody></table></figure>

<p>定义完成之后接下来就可以进行对局了，也就是<code>play</code>文件，其具体实现如下：</p>
<p>定义<code>play</code>,其属性包含<code>board</code>,然后实现<code>print_board</code>打印棋盘,<code>startplay</code> 开始对局，依次实现，代码如下</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> board <span class="keyword">import</span> Board</span><br><span class="line"><span class="keyword">from</span> board <span class="keyword">import</span> Human</span><br><span class="line"><span class="keyword">from</span> board <span class="keyword">import</span> AI</span><br><span class="line">ALPHABET = <span class="string">'A B C D E F G H I J K L M N O'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">play</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.board = Board()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_board</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># width, height = self.board.size, self.board.size  # 棋盘大小</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">"黑子(-1) 用 X 表示\t白子(1) 用 O 表示"</span>)</span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># for x in range(width):  # 打印行坐标</span></span><br><span class="line">        <span class="comment">#     print("{0:8}".format(x), end='')</span></span><br><span class="line">        board_str = <span class="string">'\n   '</span> + ALPHABET[:self.board.size * <span class="number">2</span> - <span class="number">1</span>] + <span class="string">'\n'</span></span><br><span class="line">        board = self.board</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.board.size):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.board.size):</span><br><span class="line">                <span class="keyword">if</span> j == <span class="number">0</span>:</span><br><span class="line">                    board_str += <span class="string">'{:2}'</span>.format(i + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> board.board[i, j] == <span class="number">-1</span>:</span><br><span class="line">                    board_str += <span class="string">' X'</span></span><br><span class="line">                <span class="keyword">elif</span> board.board[i, j] == <span class="number">1</span>:</span><br><span class="line">                    board_str += <span class="string">' O'</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    board_str += <span class="string">' .'</span></span><br><span class="line">                <span class="keyword">if</span> j == self.board.size - <span class="number">1</span>:</span><br><span class="line">                    board_str += <span class="string">'\n'</span></span><br><span class="line">        <span class="comment"># board_str += '  '</span></span><br><span class="line">        print(board_str)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startplay</span><span class="params">(self)</span>:</span></span><br><span class="line">        human,ai = Human(),AI()</span><br><span class="line">        self.print_board()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.board,move_pos = human.action(self.board)</span><br><span class="line">            game_result = self.board.game_over(move_pos)</span><br><span class="line">            self.print_board()</span><br><span class="line">            <span class="keyword">if</span> game_result == <span class="string">'win'</span> <span class="keyword">or</span> game_result==<span class="string">'tie'</span>:</span><br><span class="line">                print(<span class="string">'黑子落棋:{},(-1)胜利，game over\n'</span>.format(move_pos)) <span class="keyword">if</span> game_result == <span class="string">'win'</span> <span class="keyword">else</span> print(<span class="string">'黑子落棋:{}, 平局\n'</span>.format(move_pos))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'黑子落棋:{},未分胜利\n'</span>.format(move_pos))</span><br><span class="line">            start = time.time()</span><br><span class="line">            self.board, move_pos = ai.action(self.board,move_pos)</span><br><span class="line">            finish = time.time()-start</span><br><span class="line">            <span class="comment"># print('ai')</span></span><br><span class="line">            <span class="comment"># print(move_pos)</span></span><br><span class="line">            game_result = self.board.game_over(move_pos)</span><br><span class="line">            self.print_board()</span><br><span class="line">            <span class="keyword">if</span> game_result == <span class="string">'win'</span> <span class="keyword">or</span> game_result==<span class="string">'tie'</span>:</span><br><span class="line">                print(<span class="string">'白子落棋:{},(1)胜利，time:{:0.0f}s game over\n'</span>.format(move_pos,finish)) <span class="keyword">if</span> game_result == <span class="string">'win'</span> <span class="keyword">else</span> print(<span class="string">'白子落棋:{}, time:{:0.0f}s 平局\n'</span>.format(move_pos,finish))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'白子落棋:{}, time:{:0.0f}s 未分胜利\n'</span>.format(move_pos,finish))</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plain"><figcaption><span>中包含两个角色，所以在```board```中定义两个角色，分别实现```action```的动作，也就是先通过```mcts```找到最好的```move```  ,然后走子，返回棋盘和当前的走子位置。</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">定义```human```类:</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">class Human():</span><br><span class="line">    def __init__(self, player=-1):</span><br><span class="line">        self.player = player</span><br><span class="line"></span><br><span class="line">    def get_action_pos(self, board):</span><br><span class="line">        """</span><br><span class="line">        读取用户输入的数据</span><br><span class="line">        :param board:</span><br><span class="line">        :return:</span><br><span class="line">        """</span><br><span class="line">        try:</span><br><span class="line">            location = input("输入坐标x,y:")</span><br><span class="line">            if isinstance(location, str) and len(location.split(",")) == 2:</span><br><span class="line">                move_pos = tuple([int(i) for i in location.split(',')])</span><br><span class="line">            else:</span><br><span class="line">                move_pos = -1</span><br><span class="line">        except:</span><br><span class="line">            move_pos = -1</span><br><span class="line"></span><br><span class="line">        if move_pos == -1 or move_pos not in board.get_legal_pos():</span><br><span class="line">            print('落子位置错误')</span><br><span class="line">            move_pos = self.get_action_pos(board)</span><br><span class="line"></span><br><span class="line">        # print('get_action_pos----{}'.format(move_pos))</span><br><span class="line">        return move_pos</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    def action(self, board):</span><br><span class="line">        """</span><br><span class="line">        获得用户落子后的棋盘格局</span><br><span class="line">        :param board:</span><br><span class="line">        :return:board,move_pos</span><br><span class="line">        """</span><br><span class="line">        move_pos = self.get_action_pos(board)</span><br><span class="line">        board = board.move(move_pos)</span><br><span class="line">        return board, move_pos</span><br></pre></td></tr></tbody></table></figure>

<p>定义<code>AI</code>：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AI</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, player=<span class="number">1</span>)</span>:</span></span><br><span class="line">        self.player = player</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(self,board,pre_pos)</span>:</span></span><br><span class="line">        move_pos = mcts(board,pre_pos)</span><br><span class="line">        board = board.move(move_pos)</span><br><span class="line">        <span class="keyword">return</span> board,move_pos</span><br></pre></td></tr></tbody></table></figure>

<p>至此，一个以mcts实现的五子棋实现完毕！！！。</p>
</body></html>]]></content>
      <categories>
        <category>博弈</category>
      </categories>
      <tags>
        <tag>博弈</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql连表查询</title>
    <url>/2020/03/08/mysql/mysql1/</url>
    <content><![CDATA[<html><head></head><body><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>作者: philxling</p>
<p>通过多个表,然后用log记录的方式记录知识:</p>
<a id="more"></a>

<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">create table goods (</span><br><span class="line">  goods_id mediumint(8) unsigned primary key auto_increment,</span><br><span class="line">  goods_name varchar(120) not null default '',</span><br><span class="line">  cat_id smallint(5) unsigned not null default '0',</span><br><span class="line">  brand_id smallint(5) unsigned not null default '0',</span><br><span class="line">  goods_sn char(15) not null default '',</span><br><span class="line">  goods_number smallint(5) unsigned not null default '0',</span><br><span class="line">  shop_price decimal(10,2) unsigned not null default '0.00',</span><br><span class="line">  market_price decimal(10,2) unsigned not null default '0.00',</span><br><span class="line">  click_count int(10) unsigned not null default '0'</span><br><span class="line">) engine=myisam default charset=utf8;</span><br><span class="line">insert into `goods` values (1,'kd876',4,8,'ecs000000',1,1388.00,1665.60,9),</span><br><span class="line">(4,'诺基亚n85原装充电器',8,1,'ecs000004',17,58.00,69.60,0),</span><br><span class="line">(3,'诺基亚原装5800耳机',8,1,'ecs000002',24,68.00,81.60,3),</span><br><span class="line">(5,'索爱原装m2卡读卡器',11,7,'ecs000005',8,20.00,24.00,3),</span><br><span class="line">(6,'胜创kingmax内存卡',11,0,'ecs000006',15,42.00,50.40,0),</span><br><span class="line">(7,'诺基亚n85原装立体声耳机hs-82',8,1,'ecs000007',20,100.00,120.00,0),</span><br><span class="line">(8,'飞利浦9@9v',3,4,'ecs000008',1,399.00,478.79,10),</span><br><span class="line">(9,'诺基亚e66',3,1,'ecs000009',4,2298.00,2757.60,20),</span><br><span class="line">(10,'索爱c702c',3,7,'ecs000010',7,1328.00,1593.60,11),</span><br><span class="line">(11,'索爱c702c',3,7,'ecs000011',1,1300.00,0.00,0),</span><br><span class="line">(12,'摩托罗拉a810',3,2,'ecs000012',8,983.00,1179.60,13),</span><br><span class="line">(13,'诺基亚5320 xpressmusic',3,1,'ecs000013',8,1311.00,1573.20,13),</span><br><span class="line">(14,'诺基亚5800xm',4,1,'ecs000014',1,2625.00,3150.00,6),</span><br><span class="line">(15,'摩托罗拉a810',3,2,'ecs000015',3,788.00,945.60,8),</span><br><span class="line">(16,'恒基伟业g101',2,11,'ecs000016',0,823.33,988.00,3),</span><br><span class="line">(17,'夏新n7',3,5,'ecs000017',1,2300.00,2760.00,2),</span><br><span class="line">(18,'夏新t5',4,5,'ecs000018',1,2878.00,3453.60,0),</span><br><span class="line">(19,'三星sgh-f258',3,6,'ecs000019',12,858.00,1029.60,7),</span><br><span class="line">(20,'三星bc01',3,6,'ecs000020',12,280.00,336.00,14),</span><br><span class="line">(21,'金立 a30',3,10,'ecs000021',40,2000.00,2400.00,4),</span><br><span class="line">(22,'多普达touch hd',3,3,'ecs000022',1,5999.00,7198.80,16),</span><br><span class="line">(23,'诺基亚n96',5,1,'ecs000023',8,3700.00,4440.00,17),</span><br><span class="line">(24,'p806',3,9,'ecs000024',100,2000.00,2400.00,35),</span><br><span class="line">(25,'小灵通/固话50元充值卡',13,0,'ecs000025',2,48.00,57.59,0),</span><br><span class="line">(26,'小灵通/固话20元充值卡',13,0,'ecs000026',2,19.00,22.80,0),</span><br><span class="line">(27,'联通100元充值卡',15,0,'ecs000027',2,95.00,100.00,0),</span><br><span class="line">(28,'联通50元充值卡',15,0,'ecs000028',0,45.00,50.00,0),</span><br><span class="line">(29,'移动100元充值卡',14,0,'ecs000029',0,90.00,0.00,0),</span><br><span class="line">(30,'移动20元充值卡',14,0,'ecs000030',9,18.00,21.00,1),</span><br><span class="line">(31,'摩托罗拉e8 ',3,2,'ecs000031',1,1337.00,1604.39,5),</span><br><span class="line">(32,'诺基亚n85',3,1,'ecs000032',4,3010.00,3612.00,9);</span><br><span class="line">create table category (</span><br><span class="line">cat_id smallint unsigned auto_increment primary key,</span><br><span class="line">cat_name varchar(90) not null default '',</span><br><span class="line">parent_id smallint unsigned</span><br><span class="line">)engine myisam charset utf8;</span><br><span class="line">INSERT INTO `category` VALUES</span><br><span class="line">(1,'手机类型',0),</span><br><span class="line">(2,'CDMA手机',1),</span><br><span class="line">(3,'GSM手机',1),</span><br><span class="line">(4,'3G手机',1),</span><br><span class="line">(5,'双模手机',1),</span><br><span class="line">(6,'手机配件',0),</span><br><span class="line">(7,'充电器',6),</span><br><span class="line">(8,'耳机',6),</span><br><span class="line">(9,'电池',6),</span><br><span class="line">(11,'读卡器和内存卡',6),</span><br><span class="line">(12,'充值卡',0),</span><br><span class="line">(13,'小灵通/固话充值卡',12),</span><br><span class="line">(14,'移动手机充值卡',12),</span><br><span class="line">(15,'联通手机充值卡',12);</span><br><span class="line">CREATE TABLE `result` (</span><br><span class="line">  `name` varchar(20) DEFAULT NULL,</span><br><span class="line">  `subject` varchar(20) DEFAULT NULL,</span><br><span class="line">  `score` tinyint(4) DEFAULT NULL</span><br><span class="line">) ENGINE=MyISAM DEFAULT CHARSET=utf8;</span><br><span class="line">insert into result</span><br><span class="line">values</span><br><span class="line">('张三','数学',90),</span><br><span class="line">('张三','语文',50),</span><br><span class="line">('张三','地理',40),</span><br><span class="line">('李四','语文',55),</span><br><span class="line">('李四','政治',45),</span><br><span class="line">('王五','政治',30);</span><br><span class="line">create table a (</span><br><span class="line">id char(1),</span><br><span class="line">num int</span><br><span class="line">)engine myisam charset utf8;</span><br><span class="line">insert into a values ('a',5),('b',10),('c',15),('d',10);</span><br><span class="line">create table b (</span><br><span class="line">id char(1),</span><br><span class="line">num int</span><br><span class="line">)engine myisam charset utf8;</span><br><span class="line">insert into b values ('b',5),('c',15),('d',20),('e',99);</span><br><span class="line">create table m(</span><br><span class="line">     mid int,</span><br><span class="line">     hid int,</span><br><span class="line">     gid int,</span><br><span class="line">     mres varchar(10),</span><br><span class="line">     matime date</span><br><span class="line">)engine myisam charset utf8;</span><br><span class="line">create table t (</span><br><span class="line">     tid int,</span><br><span class="line">     tname varchar(20)</span><br><span class="line">)engine myisam charset utf8;</span><br><span class="line">insert into m</span><br><span class="line">     values</span><br><span class="line">     (1,1,2,'2:0','2006-05-21'),</span><br><span class="line">     (2,2,3,'1:2','2006-06-21'),</span><br><span class="line">     (3,3,1,'2:5','2006-06-25'),</span><br><span class="line">     (4,2,1,'3:2','2006-07-21');</span><br><span class="line">insert into t</span><br><span class="line">     values</span><br><span class="line">     (1,'国安'),</span><br><span class="line">     (2,'申花'),</span><br><span class="line">     (3,'布尔联队');</span><br><span class="line">create table mian ( num int) engine myisam;</span><br><span class="line">insert into mian values</span><br><span class="line">(3),</span><br><span class="line">(12),</span><br><span class="line">(15),</span><br><span class="line">(25),</span><br><span class="line">(23),</span><br><span class="line">(29),</span><br><span class="line">(34),</span><br><span class="line">(37),</span><br><span class="line">(32);</span><br><span class="line">create table user (</span><br><span class="line">uid int primary key auto_increment,</span><br><span class="line">name varchar(20) not null default '',</span><br><span class="line">age smallint unsigned not null default 0</span><br><span class="line">) engine myisam charset utf8;</span><br><span class="line">create table boy (</span><br><span class="line">    hid char(1),</span><br><span class="line">     bname varchar(20)</span><br><span class="line">)engine myisam charset utf8;</span><br><span class="line">insert into boy (bname,hid)</span><br><span class="line">     values</span><br><span class="line">     ('屌丝','A'),</span><br><span class="line">     ('杨过','B'),</span><br><span class="line">     ('陈冠希','C');</span><br><span class="line">create table girl (</span><br><span class="line">    hid char(1),</span><br><span class="line">     gname varchar(20)</span><br><span class="line">     )engine myisam charset utf8;</span><br><span class="line">insert into girl(gname,hid)</span><br><span class="line">     values</span><br><span class="line">     ('小龙女','B'),</span><br><span class="line">     ('张柏芝','C'),</span><br><span class="line">     ('死宅女','D');</span><br></pre></td></tr></tbody></table></figure>



<p>mysql> select goods_name,goods_id, concat(“HTC”,substring(goods_name,4)) as name from goods where goods_name like “诺基亚%”;<br>+—————————————-+———-+———————————-+<br>| goods_name                             | goods_id | name                             |<br>+—————————————-+———-+———————————-+<br>| 诺基亚n85原装充电器                    |        4 | HTCn85原装充电器                 |<br>| 诺基亚原装5800耳机                     |        3 | HTC原装5800耳机                  |<br>| 诺基亚n85原装立体声耳机hs-82           |        7 | HTCn85原装立体声耳机hs-82        |<br>| 诺基亚e66                              |        9 | HTCe66                           |<br>| 诺基亚5320 xpressmusic                 |       13 | HTC5320 xpressmusic              |<br>| 诺基亚5800xm                           |       14 | HTC5800xm                        |<br>| 诺基亚n96                              |       23 | HTCn96                           |<br>| 诺基亚n85                              |       32 | HTCn85                           |<br>+—————————————-+———-+———————————-+<br>8 rows in set (0.00 sec)</p>
<p>mysql> select * from mian<br>    -> ;<br>+——+<br>| num  |<br>+——+<br>|    3 |<br>|   12 |<br>|   15 |<br>|   20 |<br>|   20 |<br>|   20 |<br>|   30 |<br>|   30 |<br>|   30 |<br>+——+<br>9 rows in set (0.00 sec)</p>
<p>mysql> #取出第三个栏目下价格小于1000或者大于3000 同时点击量大于5的商品<br>mysql> select goods_id ,goods_name, shop_price,cat_id,click_count from goods where cat_id=3 and (shop_price<1000 || shop_price>3000) and click_count >=5 ;<br>+———-+——————-+————+——–+————-+<br>| goods_id | goods_name        | shop_price | cat_id | click_count |<br>+———-+——————-+————+——–+————-+<br>|        8 | 飞利浦9@9v        |     399.00 |      3 |          10 |<br>|       12 | 摩托罗拉a810      |     983.00 |      3 |          13 |<br>|       15 | 摩托罗拉a810      |     788.00 |      3 |           8 |<br>|       19 | 三星sgh-f258      |     858.00 |      3 |           7 |<br>|       20 | 三星bc01          |     280.00 |      3 |          14 |<br>|       22 | 多普达touch hd    |    5999.00 |      3 |          16 |<br>|       32 | 诺基亚n85         |    3010.00 |      3 |           9 |<br>+———-+——————-+————+——–+————-+<br>7 rows in set (0.00 sec)</p>
<p>mysql> #最贵的商品的价格<br>mysql> select max(shop_price) from goods;<br>+—————–+<br>| max(shop_price) |<br>+—————–+<br>|         5999.00 |<br>+—————–+<br>1 row in set (0.06 sec)</p>
<p>mysql> #查询最便宜的商品的价格<br>mysql> select min(shop_price) from goods ;<br>+—————–+<br>| min(shop_price) |<br>+—————–+<br>|           18.00 |<br>+—————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #查出最旧的商品<br>mysql> select min(goods_id) from goods;<br>+—————+<br>| min(goods_id) |<br>+—————+<br>|             1 |<br>+—————+<br>1 row in set (0.10 sec)</p>
<p>mysql> #goods_number是库存量<br>mysql> select sum(goods_number) from goods<br>    -> ;<br>+——————-+<br>| sum(goods_number) |<br>+——————-+<br>|               313 |<br>+——————-+<br>1 row in set (0.00 sec)</p>
<p>mysql> #查看自己店里的商品的平均价格</p>
<p>mysql> select avg(shop_price) from goods;<br>+—————–+<br>| avg(shop_price) |<br>+—————–+<br>|     1232.526774 |<br>+—————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #统计多少种商品<br>mysql> select count(<em>) from goods;<br>+———-+<br>| count(</em>) |<br>+———-+<br>|       31 |<br>+———-+<br>1 row in set (0.00 sec)</p>
<p>mysql> show tables;<br>+——————+<br>| Tables_in_test01 |<br>+——————+<br>| a                |<br>| b                |<br>| boy              |<br>| category         |<br>| girl             |<br>| goods            |<br>| m                |<br>| mian             |<br>| result           |<br>| t                |<br>| user             |<br>+——————+<br>11 rows in set (0.17 sec)</p>
<p>mysql> select * from t;<br>+——+————–+<br>| tid  | tname        |<br>+——+————–+<br>|    1 | 国安         |<br>|    2 | 申花         |<br>|    3 | 布尔联队     |<br>+——+————–+<br>3 rows in set (0.06 sec)</p>
<p>mysql> #select count(<em>) from 表名,表示查询的是绝对的行数,哪怕某一行所有字段全为null的时候也能计算在内,<br>mysql> #而select count(字段) from 表名 查询的是该列不为null的所有行的行数<br>mysql> #用count(</em>)和count(1) 那个好,对于myisamm的表咩有区别,这种引擎计数器在维护,innodb的用count(*))直接读行数,效率很低<br>mysql> #计算第三个栏目下所有商品的库存量之和<br>mysql> select sum(goods_number) from goods where cat_id =3;<br>+——————-+<br>| sum(goods_number) |<br>+——————-+<br>|               203 |<br>+——————-+<br>1 row in set (0.00 sec)</p>
<p>mysql> #计算每个栏目下的库存量之和<br>mysql> select cat_id, sum(goods_number) from goods  group by cat_id ;<br>+——–+——————-+<br>| cat_id | sum(goods_number) |<br>+——–+——————-+<br>|      4 |                 3 |<br>|      8 |                61 |<br>|     11 |                23 |<br>|      3 |               203 |<br>|      2 |                 0 |<br>|      5 |                 8 |<br>|     13 |                 4 |<br>|     15 |                 2 |<br>|     14 |                 9 |<br>+——–+——————-+<br>9 rows in set (0.05 sec)</p>
<p>mysql> #having 筛选<br>mysql> #查询每种商品积压的货款<br>mysql> show databases;<br>+——————–+<br>| Database           |<br>+——————–+<br>| bookstore          |<br>| clouddb01          |<br>| clouddb02          |<br>| clouddb03          |<br>| information_schema |<br>| mydb               |<br>| mysql              |<br>| performance_schema |<br>| shop               |<br>| ssm_crud           |<br>| struts             |<br>| student            |<br>| sys                |<br>| test               |<br>| test01             |<br>+——————–+<br>15 rows in set (0.00 sec)</p>
<p>mysql> #查询每种商品积压的货款<br>mysql> select market_price,shop_price, market_price-shop_price as discount from goods where 1 having discount >200;<br>ERROR 1046 (3D000): No database selected<br>mysql> use test01;<br>Database changed</p>
<p>mysql> #查询每种商品积压的货款<br>mysql> #提示: 商品的库存量*价格</p>
<p>mysql> select goods_id ,shop_price,goods_number*shop_price as hk from goods;<br>+———-+————+———–+<br>| goods_id | shop_price | hk        |<br>+———-+————+———–+<br>|        1 |    1388.00 |   1388.00 |<br>|        4 |      58.00 |    986.00 |<br>|        3 |      68.00 |   1632.00 |<br>|        5 |      20.00 |    160.00 |<br>|        6 |      42.00 |    630.00 |<br>|        7 |     100.00 |   2000.00 |<br>|        8 |     399.00 |    399.00 |<br>|        9 |    2298.00 |   9192.00 |<br>|       10 |    1328.00 |   9296.00 |<br>|       11 |    1300.00 |   1300.00 |<br>|       12 |     983.00 |   7864.00 |<br>|       13 |    1311.00 |  10488.00 |<br>|       14 |    2625.00 |   2625.00 |<br>|       15 |     788.00 |   2364.00 |<br>|       16 |     823.33 |      0.00 |<br>|       17 |    2300.00 |   2300.00 |<br>|       18 |    2878.00 |   2878.00 |<br>|       19 |     858.00 |  10296.00 |<br>|       20 |     280.00 |   3360.00 |<br>|       21 |    2000.00 |  80000.00 |<br>|       22 |    5999.00 |   5999.00 |<br>|       23 |    3700.00 |  29600.00 |<br>|       24 |    2000.00 | 200000.00 |<br>|       25 |      48.00 |     96.00 |<br>|       26 |      19.00 |     38.00 |<br>|       27 |      95.00 |    190.00 |<br>|       28 |      45.00 |      0.00 |<br>|       29 |      90.00 |      0.00 |<br>|       30 |      18.00 |    162.00 |<br>|       31 |    1337.00 |   1337.00 |<br>|       32 |    3010.00 |  12040.00 |<br>+———-+————+———–+<br>31 rows in set (0.00 sec)</p>
<p>mysql> #查询该店积压的总货款<br>mysql> select goods_number ,sum(goods_number*shop_price) as sum from goods;<br>+————–+———–+<br>| goods_number | sum       |<br>+————–+———–+<br>|            1 | 398620.00 |<br>+————–+———–+<br>1 row in set (0.07 sec)</p>
<p>mysql> select sum(goods_number*shop_price) as sum from goods;<br>+———–+<br>| sum       |<br>+———–+<br>| 398620.00 |<br>+———–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #查询每个栏目下积压的k货款<br>mysql> select cat_id, sum(goods_number*shop_price) as sum from goods group by cat_id;<br>+——–+———–+<br>| cat_id | sum       |<br>+——–+———–+<br>|      4 |   6891.00 |<br>|      8 |   4618.00 |<br>|     11 |    790.00 |<br>|      3 | 356235.00 |<br>|      2 |      0.00 |<br>|      5 |  29600.00 |<br>|     13 |    134.00 |<br>|     15 |    190.00 |<br>|     14 |    162.00 |<br>+——–+———–+<br>9 rows in set (0.03 sec)</p>
<p>mysql> #查询栏目的积压货款金额,且查出挤压金额超出20000的货款<br>mysql> select cat_id, sum(goods_number*shop_price) as sum from goods  group by cat_id having sum>20000;<br>+——–+———–+<br>| cat_id | sum       |<br>+——–+———–+<br>|      3 | 356235.00 |<br>|      5 |  29600.00 |<br>+——–+———–+<br>2 rows in set (0.00 sec)</p>
<p>mysql> #查询本店市场价与本店价省的钱,且筛选出省钱200以上的商品<br>mysql> select goods_name, market_price-shop_price as discount from goods having discount>200;<br>ERROR 1690 (22003): DECIMAL UNSIGNED value is out of range in ‘(<code>test01</code>.<code>goods</code>.<code>market_price</code> - <code>test01</code>.<code>goods</code>.<code>shop_price</code>)’<br>mysql> show tables;<br>+——————+<br>| Tables_in_test01 |<br>+——————+<br>| a                |<br>| b                |<br>| boy              |<br>| category         |<br>| girl             |<br>| goods            |<br>| m                |<br>| mian             |<br>| result           |<br>| t                |<br>| user             |<br>+——————+<br>11 rows in set (0.14 sec)</p>
<p>mysql> select * from result;<br>+——–+———+——-+<br>| name   | subject | score |<br>+——–+———+——-+<br>| 张三   | 数学    |    90 |<br>| 张三   | 语文    |    50 |<br>| 张三   | 地理    |    40 |<br>| 李四   | 语文    |    55 |<br>| 李四   | 政治    |    45 |<br>| 王五   | 政治    |    30 |<br>+——–+———+——-+<br>6 rows in set (0.07 sec)</p>
<p>mysql> #查询出两门及两门以上不及格者的平均成绩<br>mysql> select avg(score) as average ,subject from result where subject>=2  group by name having average<60;<br>Empty set, 6 warnings (0.00 sec)</p>
<p>mysql> select avg(score) as average ,subject from result group by name;<br>+———+———+<br>| average | subject |<br>+———+———+<br>| 60.0000 | 数学    |<br>| 50.0000 | 语文    |<br>| 30.0000 | 政治    |<br>+———+———+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name from result group by name;<br>+———+——–+<br>| average | name   |<br>+———+——–+<br>| 60.0000 | 张三   |<br>| 50.0000 | 李四   |<br>| 30.0000 | 王五   |<br>+———+——–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name from result where 1  group by name;<br>+———+——–+<br>| average | name   |<br>+———+——–+<br>| 60.0000 | 张三   |<br>| 50.0000 | 李四   |<br>| 30.0000 | 王五   |<br>+———+——–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name from result where 1  group by name having average<60 ;<br>+———+——–+<br>| average | name   |<br>+———+——–+<br>| 50.0000 | 李四   |<br>| 30.0000 | 王五   |<br>+———+——–+<br>2 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name from result where score<60  group by name having avg(average) ;<br>Empty set (0.00 sec)</p>
<p>mysql> select avg(score<60) as average ,name from result where 1  group by name having avg(average) ;<br>Empty set (0.00 sec)</p>
<p>mysql> select avg(score<60) as average ,name from result where 1  group by name ;<br>+———+——–+<br>| average | name   |<br>+———+——–+<br>|  0.6667 | 张三   |<br>|  1.0000 | 李四   |<br>|  1.0000 | 王五   |<br>+———+——–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name from result where score<60  group by name ;<br>+———+——–+<br>| average | name   |<br>+———+——–+<br>| 45.0000 | 张三   |<br>| 50.0000 | 李四   |<br>| 30.0000 | 王五   |<br>+———+——–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name from result where subject>=2  group by name ;<br>Empty set, 6 warnings (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject) from result where score<60  group by name ;<br>+———+——–+—————-+<br>| average | name   | count(subject) |<br>+———+——–+—————-+<br>| 45.0000 | 张三   |              2 |<br>| 50.0000 | 李四   |              2 |<br>| 30.0000 | 王五   |              1 |<br>+———+——–+—————-+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject) as subject from result where score<60   group by name having subject>=2  ;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 45.0000 | 张三   |       2 |<br>| 50.0000 | 李四   |       2 |<br>+———+——–+———+<br>2 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject) as subject from result where score<60   group by name having subject>=2 and avg(average);<br>Empty set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject)>=2 as subject from result where score<60   group by name having avg(average);<br>Empty set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject) as subject from result where score<60   group by name having subject>=2;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 45.0000 | 张三   |       2 |<br>| 50.0000 | 李四   |       2 |<br>+———+——–+———+<br>2 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name from result where score<60  group by name ;<br>+———+——–+<br>| average | name   |<br>+———+——–+<br>| 45.0000 | 张三   |<br>| 50.0000 | 李四   |<br>| 30.0000 | 王五   |<br>+———+——–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject) from result where score<60  group by name ;<br>+———+——–+—————-+<br>| average | name   | count(subject) |<br>+———+——–+—————-+<br>| 45.0000 | 张三   |              2 |<br>| 50.0000 | 李四   |              2 |<br>| 30.0000 | 王五   |              1 |<br>+———+——–+—————-+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject)>=2 from result where score<60  group by name ;<br>+———+——–+——————-+<br>| average | name   | count(subject)>=2 |<br>+———+——–+——————-+<br>| 45.0000 | 张三   |                 1 |<br>| 50.0000 | 李四   |                 1 |<br>| 30.0000 | 王五   |                 0 |<br>+———+——–+——————-+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject)>=2 from result where score<60  group by name ;<br>+———+——–+——————-+<br>| average | name   | count(subject)>=2 |<br>+———+——–+——————-+<br>| 45.0000 | 张三   |                 1 |<br>| 50.0000 | 李四   |                 1 |<br>| 30.0000 | 王五   |                 0 |<br>+———+——–+——————-+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject) from result where score<60  group by name ;<br>+———+——–+—————-+<br>| average | name   | count(subject) |<br>+———+——–+—————-+<br>| 45.0000 | 张三   |              2 |<br>| 50.0000 | 李四   |              2 |<br>| 30.0000 | 王五   |              1 |<br>+———+——–+—————-+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name from result where score<60 and subject>=2   group by name ;<br>Empty set, 5 warnings (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name, count(subject) from result where score<60 and subject>=2   group by name ;<br>Empty set, 5 warnings (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name, count(subject) from result where score<60    group by name ;<br>+———+——–+—————-+<br>| average | name   | count(subject) |<br>+———+——–+—————-+<br>| 45.0000 | 张三   |              2 |<br>| 50.0000 | 李四   |              2 |<br>| 30.0000 | 王五   |              1 |<br>+———+——–+—————-+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name, count(subject) as subject from result where score<60    group by name having subject>=2  ;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 45.0000 | 张三   |       2 |<br>| 50.0000 | 李四   |       2 |<br>+———+——–+———+<br>2 rows in set (0.00 sec)</p>
<p>mysql> use test01<br>Database changed<br>mysql> show tables;<br>+——————+<br>| Tables_in_test01 |<br>+——————+<br>| a                |<br>| b                |<br>| boy              |<br>| category         |<br>| girl             |<br>| goods            |<br>| m                |<br>| mian             |<br>| result           |<br>| t                |<br>| user             |<br>+——————+<br>11 rows in set (0.42 sec)</p>
<p>mysql> select avg(score) as average ,name, count(subject) as subject from result where score<60    group by name having subject>=2  ;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 45.0000 | 张三   |       2 |<br>| 50.0000 | 李四   |       2 |<br>+———+——–+———+<br>2 rows in set (0.14 sec)</p>
<p>mysql> insert into resule values(“赵六”,”语文”,100),<br>    -> (“赵六”,”数学”,99),<br>    -> (“赵六”,”英语”,98);<br>ERROR 1146 (42S02): Table ‘test01.resule’ doesn’t exist<br>mysql> insert into result values(“赵六”,”语文”,100),<br>    -> (“赵六”,”数学”,99),<br>    -> (“赵六”,”英语”,98);<br>Query OK, 3 rows affected (0.19 sec)<br>Records: 3  Duplicates: 0  Warnings: 0</p>
<p>mysql> select * from result;<br>+——–+———+——-+<br>| name   | subject | score |<br>+——–+———+——-+<br>| 张三   | 数学    |    90 |<br>| 张三   | 语文    |    50 |<br>| 张三   | 地理    |    40 |<br>| 李四   | 语文    |    55 |<br>| 李四   | 政治    |    45 |<br>| 王五   | 政治    |    30 |<br>| 赵六   | 语文    |   100 |<br>| 赵六   | 数学    |    99 |<br>| 赵六   | 英语    |    98 |<br>+——–+———+——-+<br>9 rows in set (0.00 sec)</p>
<p>mysql>  select avg(score) as average ,name, count(subject) as subject from result where score<60    group by name having subject>=2;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 45.0000 | 张三   |       2 |<br>| 50.0000 | 李四   |       2 |<br>+———+——–+———+<br>2 rows in set (0.00 sec)</p>
<p>mysql> insert into result values(“张三”,”英语”,34);<br>Query OK, 1 row affected (0.05 sec)</p>
<p>mysql>  select avg(score) as average ,name, count(subject) as subject from result where score<60    group by name having subject>=2;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 41.3333 | 张三   |       3 |<br>| 50.0000 | 李四   |       2 |<br>+———+——–+———+<br>2 rows in set (0.00 sec)</p>
<p>mysql>  select avg(score) as average ,name, sum(score<60) as subject from result   group by name having subject>=2;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 53.5000 | 张三   |       3 |<br>| 50.0000 | 李四   |       2 |<br>+———+——–+———+<br>2 rows in set (0.00 sec)</p>
<p>mysql>  select avg(score) as average ,name, sum(score<60) as subject from result   group by name having subject>=2 order by average;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 50.0000 | 李四   |       2 |<br>| 53.5000 | 张三   |       3 |<br>+———+——–+———+<br>2 rows in set (0.00 sec)</p>
<p>mysql>  select avg(score) as average ,name, sum(score<60) as subject from result   group by name having subject>=2 order by desc average;<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘desc average’ at line 1<br>mysql>  select avg(score) as average ,name, sum(score<60) as subject from result   group by name having subject>=2 order by  average desc;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 53.5000 | 张三   |       3 |<br>| 50.0000 | 李四   |       2 |<br>+———+——–+———+<br>2 rows in set (0.00 sec)</p>
<p>mysql> #降序排 order by 列名 desc 降序/asc升序<br>mysql>  select avg(score) as average ,name, sum(score<60) as subject from result   group by name having subject>=2 order by  add_time asc;<br>ERROR 1054 (42S22): Unknown column ‘add_time’ in ‘order clause’<br>mysql> desc goods;<br>+————–+————————+——+—–+———+—————-+<br>| Field        | Type                   | Null | Key | Default | Extra          |<br>+————–+————————+——+—–+———+—————-+<br>| goods_id     | mediumint(8) unsigned  | NO   | PRI | NULL    | auto_increment |<br>| goods_name   | varchar(120)           | NO   |     |         |                |<br>| cat_id       | smallint(5) unsigned   | NO   |     | 0       |                |<br>| brand_id     | smallint(5) unsigned   | NO   |     | 0       |                |<br>| goods_sn     | char(15)               | NO   |     |         |                |<br>| goods_number | smallint(5) unsigned   | NO   |     | 0       |                |<br>| shop_price   | decimal(10,2) unsigned | NO   |     | 0.00    |                |<br>| market_price | decimal(10,2) unsigned | NO   |     | 0.00    |                |<br>| click_count  | int(10) unsigned       | NO   |     | 0       |                |<br>+————–+————————+——+—–+———+—————-+<br>9 rows in set (0.20 sec)</p>
<p>mysql> select goods_name ,cat_id,goods_id,shop_price from goods order by asc cat_id ,shop_price desc;<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘asc cat_id ,shop_price desc’ at line 1<br>mysql> select goods_name ,cat_id,goods_id,shop_price from goods order by  cat_id asc ,shop_price desc;<br>+—————————————-+——–+———-+————+<br>| goods_name                             | cat_id | goods_id | shop_price |<br>+—————————————-+——–+———-+————+<br>| 恒基伟业g101                           |      2 |       16 |     823.33 |<br>| 多普达touch hd                         |      3 |       22 |    5999.00 |<br>| 诺基亚n85                              |      3 |       32 |    3010.00 |<br>| 夏新n7                                 |      3 |       17 |    2300.00 |<br>| 诺基亚e66                              |      3 |        9 |    2298.00 |<br>| 金立 a30                               |      3 |       21 |    2000.00 |<br>| p806                                   |      3 |       24 |    2000.00 |<br>| 摩托罗拉e8                             |      3 |       31 |    1337.00 |<br>| 索爱c702c                              |      3 |       10 |    1328.00 |<br>| 诺基亚5320 xpressmusic                 |      3 |       13 |    1311.00 |<br>| 索爱c702c                              |      3 |       11 |    1300.00 |<br>| 摩托罗拉a810                           |      3 |       12 |     983.00 |<br>| 三星sgh-f258                           |      3 |       19 |     858.00 |<br>| 摩托罗拉a810                           |      3 |       15 |     788.00 |<br>| 飞利浦9@9v                             |      3 |        8 |     399.00 |<br>| 三星bc01                               |      3 |       20 |     280.00 |<br>| 夏新t5                                 |      4 |       18 |    2878.00 |<br>| 诺基亚5800xm                           |      4 |       14 |    2625.00 |<br>| kd876                                  |      4 |        1 |    1388.00 |<br>| 诺基亚n96                              |      5 |       23 |    3700.00 |<br>| 诺基亚n85原装立体声耳机hs-82           |      8 |        7 |     100.00 |<br>| 诺基亚原装5800耳机                     |      8 |        3 |      68.00 |<br>| 诺基亚n85原装充电器                    |      8 |        4 |      58.00 |<br>| 胜创kingmax内存卡                      |     11 |        6 |      42.00 |<br>| 索爱原装m2卡读卡器                     |     11 |        5 |      20.00 |<br>| 小灵通/固话50元充值卡                  |     13 |       25 |      48.00 |<br>| 小灵通/固话20元充值卡                  |     13 |       26 |      19.00 |<br>| 移动100元充值卡                        |     14 |       29 |      90.00 |<br>| 移动20元充值卡                         |     14 |       30 |      18.00 |<br>| 联通100元充值卡                        |     15 |       27 |      95.00 |<br>| 联通50元充值卡                         |     15 |       28 |      45.00 |<br>+—————————————-+——–+———-+————+<br>31 rows in set (0.26 sec)</p>
<p>mysql> #多排 用,隔开 order by cat_id asc ,shop_price desc<br>mysql> exit<br>mysql> use test01;<br>Database changed<br>mysql> #limit 限制条目<br>mysql> select goods_id,cat_id,goods_name,shop_price from goods where cat_id=3 order by shop_price desc limit 0,3;<br>+———-+——–+——————-+————+<br>| goods_id | cat_id | goods_name        | shop_price |<br>+———-+——–+——————-+————+<br>|       22 |      3 | 多普达touch hd    |    5999.00 |<br>|       32 |      3 | 诺基亚n85         |    3010.00 |<br>|       17 |      3 | 夏新n7            |    2300.00 |<br>+———-+——–+——————-+————+<br>3 rows in set (0.01 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name,shop_price from goods where cat_id=3 order by shop_price desc limit 2,2;<br>+———-+——–+————–+————+<br>| goods_id | cat_id | goods_name   | shop_price |<br>+———-+——–+————–+————+<br>|       17 |      3 | 夏新n7       |    2300.00 |<br>|        9 |      3 | 诺基亚e66    |    2298.00 |<br>+———-+——–+————–+————+<br>2 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name,shop_price from goods where cat_id=3 order by shop_price desc limit 2,3;<br>+———-+——–+————–+————+<br>| goods_id | cat_id | goods_name   | shop_price |<br>+———-+——–+————–+————+<br>|       17 |      3 | 夏新n7       |    2300.00 |<br>|        9 |      3 | 诺基亚e66    |    2298.00 |<br>|       21 |      3 | 金立 a30     |    2000.00 |<br>+———-+——–+————–+————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> #limit 第一个参数为0可以不写<br>mysql> #查询出每个栏目下id号最大的一条商品<br>mysql> select goods_id,cat_id,goods_name,shop_price from goods where 1 group by cat_id order by goods_id desc limit 1;<br>+———-+——–+———————–+————+<br>| goods_id | cat_id | goods_name            | shop_price |<br>+———-+——–+———————–+————+<br>|       29 |     14 | 移动100元充值卡       |      90.00 |<br>+———-+——–+———————–+————+<br>1 row in set (0.06 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name,shop_price from goods where 1 group by cat_id ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|        1 |      4 | kd876                          |    1388.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name,shop_price from goods  group by cat_id ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|        1 |      4 | kd876                          |    1388.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select cat_id,goods_name,shop_price from goods  group by cat_id ;<br>+——–+——————————–+————+<br>| cat_id | goods_name                     | shop_price |<br>+——–+——————————–+————+<br>|      4 | kd876                          |    1388.00 |<br>|      8 | 诺基亚n85原装充电器            |      58.00 |<br>|     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|      3 | 飞利浦9@9v                     |     399.00 |<br>|      2 | 恒基伟业g101                   |     823.33 |<br>|      5 | 诺基亚n96                      |    3700.00 |<br>|     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|     15 | 联通100元充值卡                |      95.00 |<br>|     14 | 移动100元充值卡                |      90.00 |<br>+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods   group by cat_id=3  ;<br>+———-+——–+—————+————+<br>| goods_id | cat_id | goods_name    | shop_price |<br>+———-+——–+—————+————+<br>|        1 |      4 | kd876         |    1388.00 |<br>|        8 |      3 | 飞利浦9@9v    |     399.00 |<br>+———-+——–+—————+————+<br>2 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|        1 |      4 | kd876                                  |    1388.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods group by cat_id ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|        1 |      4 | kd876                          |    1388.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>|        1 |      4 | kd876                                  |    1388.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc ;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|        1 |      4 | kd876                                  |    1388.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods group by cat_id  order by cat_id asc ,goods_id desc ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|        1 |      4 | kd876                          |    1388.00 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc ;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|        1 |      4 | kd876                                  |    1388.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select * from (select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc) as tem group by cat_id  ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|        1 |      4 | kd876                          |    1388.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.04 sec)</p>
<p>mysql> select * from (select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc) as tem group by cat_id  order by cat_id asc ,goods_id desc limit 1  ;<br>+———-+——–+——————+————+<br>| goods_id | cat_id | goods_name       | shop_price |<br>+———-+——–+——————+————+<br>|       16 |      2 | 恒基伟业g101     |     823.33 |<br>+———-+——–+——————+————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select * from (select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc) as tem group by cat_id  order by cat_id asc ,goods_id desc ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|        1 |      4 | kd876                          |    1388.00 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc ;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|        1 |      4 | kd876                                  |    1388.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select * from (select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc) as temp order by cat_id asc ;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>|        1 |      4 | kd876                                  |    1388.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select * from (select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc) as temp group by cat_id order by cat_id asc ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|        1 |      4 | kd876                          |    1388.00 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select * from (select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc) as temp group by cat_id  ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|        1 |      4 | kd876                          |    1388.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods where cat_id=3 order by goods_id desc limit 1 ;<br>+———-+——–+————–+————+<br>| goods_id | cat_id | goods_name   | shop_price |<br>+———-+——–+————–+————+<br>|       32 |      3 | 诺基亚n85    |    3010.00 |<br>+———-+——–+————–+————+<br>1 row in set (0.07 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods  order by goods_id desc limit 1 ;<br>+———-+——–+————–+————+<br>| goods_id | cat_id | goods_name   | shop_price |<br>+———-+——–+————–+————+<br>|       32 |      3 | 诺基亚n85    |    3010.00 |<br>+———-+——–+————–+————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods  order by goods_id desc limit 1 ;<br>+———-+——–+————–+————+<br>| goods_id | cat_id | goods_name   | shop_price |<br>+———-+——–+————–+————+<br>|       32 |      3 | 诺基亚n85    |    3010.00 |<br>+———-+——–+————–+————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods  order by goods_id desc  ;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|        1 |      4 | kd876                                  |    1388.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods group by cat_id  order by goods_id desc  ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        1 |      4 | kd876                          |    1388.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods group by cat_id  ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|        1 |      4 | kd876                          |    1388.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods group by cat_id  order by goods_id desc  ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        1 |      4 | kd876                          |    1388.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods  order by goods_id desc limit 1 ;<br>+———-+——–+————–+————+<br>| goods_id | cat_id | goods_name   | shop_price |<br>+———-+——–+————–+————+<br>|       32 |      3 | 诺基亚n85    |    3010.00 |<br>+———-+——–+————–+————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select max(goods_id), cat_id,goods_name,shop_price from goods  order by goods_id desc ;<br>+—————+——–+————+————+<br>| max(goods_id) | cat_id | goods_name | shop_price |<br>+—————+——–+————+————+<br>|            32 |      4 | kd876      |    1388.00 |<br>+—————+——–+————+————+<br>1 row in set (0.06 sec)</p>
<p>mysql> select goods_id ,cat_id ,goods_name from goods<br>    -> ;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|        1 |      4 | kd876                                  |<br>|        4 |      8 | 诺基亚n85原装充电器                    |<br>|        3 |      8 | 诺基亚原装5800耳机                     |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        8 |      3 | 飞利浦9@9v                             |<br>|        9 |      3 | 诺基亚e66                              |<br>|       10 |      3 | 索爱c702c                              |<br>|       11 |      3 | 索爱c702c                              |<br>|       12 |      3 | 摩托罗拉a810                           |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |<br>|       14 |      4 | 诺基亚5800xm                           |<br>|       15 |      3 | 摩托罗拉a810                           |<br>|       16 |      2 | 恒基伟业g101                           |<br>|       17 |      3 | 夏新n7                                 |<br>|       18 |      4 | 夏新t5                                 |<br>|       19 |      3 | 三星sgh-f258                           |<br>|       20 |      3 | 三星bc01                               |<br>|       21 |      3 | 金立 a30                               |<br>|       22 |      3 | 多普达touch hd                         |<br>|       23 |      5 | 诺基亚n96                              |<br>|       24 |      3 | p806                                   |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       27 |     15 | 联通100元充值卡                        |<br>|       28 |     15 | 联通50元充值卡                         |<br>|       29 |     14 | 移动100元充值卡                        |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       31 |      3 | 摩托罗拉e8                             |<br>|       32 |      3 | 诺基亚n85                              |<br>+———-+——–+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select max(goods_id), cat_id,goods_name,shop_price from goods group by cat_id ;<br>+—————+——–+——————————–+————+<br>| max(goods_id) | cat_id | goods_name                     | shop_price |<br>+—————+——–+——————————–+————+<br>|            18 |      4 | kd876                          |    1388.00 |<br>|             7 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|             6 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|            32 |      3 | 飞利浦9@9v                     |     399.00 |<br>|            16 |      2 | 恒基伟业g101                   |     823.33 |<br>|            23 |      5 | 诺基亚n96                      |    3700.00 |<br>|            26 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|            28 |     15 | 联通100元充值卡                |      95.00 |<br>|            30 |     14 | 移动100元充值卡                |      90.00 |<br>+—————+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select max(goods_id), cat_id from goods group by cat_id ;<br>+—————+——–+<br>| max(goods_id) | cat_id |<br>+—————+——–+<br>|            18 |      4 |<br>|             7 |      8 |<br>|             6 |     11 |<br>|            32 |      3 |<br>|            16 |      2 |<br>|            23 |      5 |<br>|            26 |     13 |<br>|            28 |     15 |<br>|            30 |     14 |<br>+—————+——–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select * from (select max(goods_id) as goods_id, cat_id from goods group by cat_id ) as temp where cat_id=cat_id ;<br>+———-+——–+<br>| goods_id | cat_id |<br>+———-+——–+<br>|       18 |      4 |<br>|        7 |      8 |<br>|        6 |     11 |<br>|       32 |      3 |<br>|       16 |      2 |<br>|       23 |      5 |<br>|       26 |     13 |<br>|       28 |     15 |<br>|       30 |     14 |<br>+———-+——–+<br>9 rows in set (0.06 sec)</p>
<p>mysql> select cat_id ,count(goods_name) from goods group by cat_id;<br>+——–+——————-+<br>| cat_id | count(goods_name) |<br>+——–+——————-+<br>|      4 |                 3 |<br>|      8 |                 3 |<br>|     11 |                 2 |<br>|      3 |                15 |<br>|      2 |                 1 |<br>|      5 |                 1 |<br>|     13 |                 2 |<br>|     15 |                 2 |<br>|     14 |                 2 |<br>+——–+——————-+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select cat_id ,max(goods_id) from goods group by cat_id;<br>+——–+—————+<br>| cat_id | max(goods_id) |<br>+——–+—————+<br>|      4 |            18 |<br>|      8 |             7 |<br>|     11 |             6 |<br>|      3 |            32 |<br>|      2 |            16 |<br>|      5 |            23 |<br>|     13 |            26 |<br>|     15 |            28 |<br>|     14 |            30 |<br>+——–+—————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select cat_id ,max(goods_id),max(goods_name) from goods group by cat_id;<br>+——–+—————+——————————–+<br>| cat_id | max(goods_id) | max(goods_name)                |<br>+——–+—————+——————————–+<br>|      4 |            18 | 诺基亚5800xm                   |<br>|      8 |             7 | 诺基亚原装5800耳机             |<br>|     11 |             6 | 胜创kingmax内存卡              |<br>|      3 |            32 | 飞利浦9@9v                     |<br>|      2 |            16 | 恒基伟业g101                   |<br>|      5 |            23 | 诺基亚n96                      |<br>|     13 |            26 | 小灵通/固话50元充值卡          |<br>|     15 |            28 | 联通50元充值卡                 |<br>|     14 |            30 | 移动20元充值卡                 |<br>+——–+—————+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select cat_id ,max(goods_id) from goods ;<br>+——–+—————+<br>| cat_id | max(goods_id) |<br>+——–+—————+<br>|      4 |            32 |<br>+——–+—————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select cat_id, goods_id,goods_name from goods order by goods_id desc ;<br>+——–+———-+—————————————-+<br>| cat_id | goods_id | goods_name                             |<br>+——–+———-+—————————————-+<br>|      3 |       32 | 诺基亚n85                              |<br>|      3 |       31 | 摩托罗拉e8                             |<br>|     14 |       30 | 移动20元充值卡                         |<br>|     14 |       29 | 移动100元充值卡                        |<br>|     15 |       28 | 联通50元充值卡                         |<br>|     15 |       27 | 联通100元充值卡                        |<br>|     13 |       26 | 小灵通/固话20元充值卡                  |<br>|     13 |       25 | 小灵通/固话50元充值卡                  |<br>|      3 |       24 | p806                                   |<br>|      5 |       23 | 诺基亚n96                              |<br>|      3 |       22 | 多普达touch hd                         |<br>|      3 |       21 | 金立 a30                               |<br>|      3 |       20 | 三星bc01                               |<br>|      3 |       19 | 三星sgh-f258                           |<br>|      4 |       18 | 夏新t5                                 |<br>|      3 |       17 | 夏新n7                                 |<br>|      2 |       16 | 恒基伟业g101                           |<br>|      3 |       15 | 摩托罗拉a810                           |<br>|      4 |       14 | 诺基亚5800xm                           |<br>|      3 |       13 | 诺基亚5320 xpressmusic                 |<br>|      3 |       12 | 摩托罗拉a810                           |<br>|      3 |       11 | 索爱c702c                              |<br>|      3 |       10 | 索爱c702c                              |<br>|      3 |        9 | 诺基亚e66                              |<br>|      3 |        8 | 飞利浦9@9v                             |<br>|      8 |        7 | 诺基亚n85原装立体声耳机hs-82           |<br>|     11 |        6 | 胜创kingmax内存卡                      |<br>|     11 |        5 | 索爱原装m2卡读卡器                     |<br>|      8 |        4 | 诺基亚n85原装充电器                    |<br>|      8 |        3 | 诺基亚原装5800耳机                     |<br>|      4 |        1 | kd876                                  |<br>+——–+———-+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select cat_id ,max(goods_id) from goods ;<br>+——–+—————+<br>| cat_id | max(goods_id) |<br>+——–+—————+<br>|      4 |            32 |<br>+——–+—————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select cat_id, goods_id,goods_name from goods order by goods_id desc ;<br>+——–+———-+—————————————-+<br>| cat_id | goods_id | goods_name                             |<br>+——–+———-+—————————————-+<br>|      3 |       32 | 诺基亚n85                              |<br>|      3 |       31 | 摩托罗拉e8                             |<br>|     14 |       30 | 移动20元充值卡                         |<br>|     14 |       29 | 移动100元充值卡                        |<br>|     15 |       28 | 联通50元充值卡                         |<br>|     15 |       27 | 联通100元充值卡                        |<br>|     13 |       26 | 小灵通/固话20元充值卡                  |<br>|     13 |       25 | 小灵通/固话50元充值卡                  |<br>|      3 |       24 | p806                                   |<br>|      5 |       23 | 诺基亚n96                              |<br>|      3 |       22 | 多普达touch hd                         |<br>|      3 |       21 | 金立 a30                               |<br>|      3 |       20 | 三星bc01                               |<br>|      3 |       19 | 三星sgh-f258                           |<br>|      4 |       18 | 夏新t5                                 |<br>|      3 |       17 | 夏新n7                                 |<br>|      2 |       16 | 恒基伟业g101                           |<br>|      3 |       15 | 摩托罗拉a810                           |<br>|      4 |       14 | 诺基亚5800xm                           |<br>|      3 |       13 | 诺基亚5320 xpressmusic                 |<br>|      3 |       12 | 摩托罗拉a810                           |<br>|      3 |       11 | 索爱c702c                              |<br>|      3 |       10 | 索爱c702c                              |<br>|      3 |        9 | 诺基亚e66                              |<br>|      3 |        8 | 飞利浦9@9v                             |<br>|      8 |        7 | 诺基亚n85原装立体声耳机hs-82           |<br>|     11 |        6 | 胜创kingmax内存卡                      |<br>|     11 |        5 | 索爱原装m2卡读卡器                     |<br>|      8 |        4 | 诺基亚n85原装充电器                    |<br>|      8 |        3 | 诺基亚原装5800耳机                     |<br>|      4 |        1 | kd876                                  |<br>+——–+———-+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select cat_id ,max(goods_id) from goods ;<br>+——–+—————+<br>| cat_id | max(goods_id) |<br>+——–+—————+<br>|      4 |            32 |<br>+——–+—————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select cat_id ,max(goods_id) from goods group by cat_id;<br>+——–+—————+<br>| cat_id | max(goods_id) |<br>+——–+—————+<br>|      4 |            18 |<br>|      8 |             7 |<br>|     11 |             6 |<br>|      3 |            32 |<br>|      2 |            16 |<br>|      5 |            23 |<br>|     13 |            26 |<br>|     15 |            28 |<br>|     14 |            30 |<br>+——–+—————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id ,goods_name,cat_id from goods where goods_id in(select max(goods_id) from goods group by cat_id) ;<br>+———-+—————————————-+——–+<br>| goods_id | goods_name                             | cat_id |<br>+———-+—————————————-+——–+<br>|        6 | 胜创kingmax内存卡                      |     11 |<br>|        7 | 诺基亚n85原装立体声耳机hs-82           |      8 |<br>|       16 | 恒基伟业g101                           |      2 |<br>|       18 | 夏新t5                                 |      4 |<br>|       23 | 诺基亚n96                              |      5 |<br>|       26 | 小灵通/固话20元充值卡                  |     13 |<br>|       28 | 联通50元充值卡                         |     15 |<br>|       30 | 移动20元充值卡                         |     14 |<br>|       32 | 诺基亚n85                              |      3 |<br>+———-+—————————————-+——–+<br>9 rows in set (0.06 sec)</p>
<p>mysql> select * from(select goods_id,cat_id ,goods_name from goods order by goods_id desc ) as temp  group by cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|        1 |      4 | kd876                          |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|       16 |      2 | 恒基伟业g101                   |<br>|       23 |      5 | 诺基亚n96                      |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       27 |     15 | 联通100元充值卡                |<br>|       29 |     14 | 移动100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select * from(select goods_id,cat_id ,goods_name from goods order by goods_id desc)  as temp  group by temp.cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|        1 |      4 | kd876                          |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|       16 |      2 | 恒基伟业g101                   |<br>|       23 |      5 | 诺基亚n96                      |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       27 |     15 | 联通100元充值卡                |<br>|       29 |     14 | 移动100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id ,goods_name from goods order by goods_id desc;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       32 |      3 | 诺基亚n85                              |<br>|       31 |      3 | 摩托罗拉e8                             |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       29 |     14 | 移动100元充值卡                        |<br>|       28 |     15 | 联通50元充值卡                         |<br>|       27 |     15 | 联通100元充值卡                        |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |<br>|       24 |      3 | p806                                   |<br>|       23 |      5 | 诺基亚n96                              |<br>|       22 |      3 | 多普达touch hd                         |<br>|       21 |      3 | 金立 a30                               |<br>|       20 |      3 | 三星bc01                               |<br>|       19 |      3 | 三星sgh-f258                           |<br>|       18 |      4 | 夏新t5                                 |<br>|       17 |      3 | 夏新n7                                 |<br>|       16 |      2 | 恒基伟业g101                           |<br>|       15 |      3 | 摩托罗拉a810                           |<br>|       14 |      4 | 诺基亚5800xm                           |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |<br>|       12 |      3 | 摩托罗拉a810                           |<br>|       11 |      3 | 索爱c702c                              |<br>|       10 |      3 | 索爱c702c                              |<br>|        9 |      3 | 诺基亚e66                              |<br>|        8 |      3 | 飞利浦9@9v                             |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |<br>|        4 |      8 | 诺基亚n85原装充电器                    |<br>|        3 |      8 | 诺基亚原装5800耳机                     |<br>|        1 |      4 | kd876                                  |<br>+———-+——–+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select cat_id,goods_name from (select goods_id,cat_id ,goods_name from goods order by goods_id desc) as temp group by cat_id;<br>+——–+——————————–+<br>| cat_id | goods_name                     |<br>+——–+——————————–+<br>|      4 | kd876                          |<br>|      8 | 诺基亚n85原装充电器            |<br>|     11 | 索爱原装m2卡读卡器             |<br>|      3 | 飞利浦9@9v                     |<br>|      2 | 恒基伟业g101                   |<br>|      5 | 诺基亚n96                      |<br>|     13 | 小灵通/固话50元充值卡          |<br>|     15 | 联通100元充值卡                |<br>|     14 | 移动100元充值卡                |<br>+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select temp.cat_id,goods_name from (select goods_id,cat_id ,goods_name from goods order by goods_id desc) as temp group by temp.cat_id;<br>+——–+——————————–+<br>| cat_id | goods_name                     |<br>+——–+——————————–+<br>|      4 | kd876                          |<br>|      8 | 诺基亚n85原装充电器            |<br>|     11 | 索爱原装m2卡读卡器             |<br>|      3 | 飞利浦9@9v                     |<br>|      2 | 恒基伟业g101                   |<br>|      5 | 诺基亚n96                      |<br>|     13 | 小灵通/固话50元充值卡          |<br>|     15 | 联通100元充值卡                |<br>|     14 | 移动100元充值卡                |<br>+——–+——————————–+<br>9 rows in set (0.05 sec)</p>
<p>mysql> #子查询<br>mysql> #查询商品id最大的商品不用排序<br>mysql> select goods_id ,cat_id ,goods_name from goods where goods_id=(select max(goods_id) from goods);<br>+———-+——–+————–+<br>| goods_id | cat_id | goods_name   |<br>+———-+——–+————–+<br>|       32 |      3 | 诺基亚n85    |<br>+———-+——–+————–+<br>1 row in set (0.05 sec)</p>
<p>mysql> #如果where型子查询 即where 列=(内层sql 返回的是必是单行单列单个值,) 若where 列 in(内层sql)只能是单列多行<br>mysql> #from型子查询,内部查询的结果当作外部查询的表s<br>mysql> select goods_id ,cat_id ,goods_name from (select goods_id ,cat_id ,goods_name from goods order by cat_id asc,goods_id desc) as temp group by cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|        1 |      4 | kd876                          |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|       16 |      2 | 恒基伟业g101                   |<br>|       23 |      5 | 诺基亚n96                      |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       27 |     15 | 联通100元充值卡                |<br>|       29 |     14 | 移动100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id ,cat_id ,goods_name from goods order by cat_id asc,goods_id desc;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       16 |      2 | 恒基伟业g101                           |<br>|       32 |      3 | 诺基亚n85                              |<br>|       31 |      3 | 摩托罗拉e8                             |<br>|       24 |      3 | p806                                   |<br>|       22 |      3 | 多普达touch hd                         |<br>|       21 |      3 | 金立 a30                               |<br>|       20 |      3 | 三星bc01                               |<br>|       19 |      3 | 三星sgh-f258                           |<br>|       17 |      3 | 夏新n7                                 |<br>|       15 |      3 | 摩托罗拉a810                           |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |<br>|       12 |      3 | 摩托罗拉a810                           |<br>|       11 |      3 | 索爱c702c                              |<br>|       10 |      3 | 索爱c702c                              |<br>|        9 |      3 | 诺基亚e66                              |<br>|        8 |      3 | 飞利浦9@9v                             |<br>|       18 |      4 | 夏新t5                                 |<br>|       14 |      4 | 诺基亚5800xm                           |<br>|        1 |      4 | kd876                                  |<br>|       23 |      5 | 诺基亚n96                              |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        4 |      8 | 诺基亚n85原装充电器                    |<br>|        3 |      8 | 诺基亚原装5800耳机                     |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       29 |     14 | 移动100元充值卡                        |<br>|       28 |     15 | 联通50元充值卡                         |<br>|       27 |     15 | 联通100元充值卡                        |<br>+———-+——–+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select * from (select goods_id ,cat_id ,goods_name from goods order by cat_id asc,goods_id desc) as temp group by cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|        1 |      4 | kd876                          |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|       16 |      2 | 恒基伟业g101                   |<br>|       23 |      5 | 诺基亚n96                      |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       27 |     15 | 联通100元充值卡                |<br>|       29 |     14 | 移动100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select * from (select goods_id ,cat_id ,goods_name from goods order by cat_id asc,goods_id desc) as temp group by temp.cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|        1 |      4 | kd876                          |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|       16 |      2 | 恒基伟业g101                   |<br>|       23 |      5 | 诺基亚n96                      |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       27 |     15 | 联通100元充值卡                |<br>|       29 |     14 | 移动100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name from (select goods_id as goods_id ,cat_id as cat_id ,goods_name as goods_name from goods order by cat_id asc,goods_id desc) as temp group by temp.cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|        1 |      4 | kd876                          |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|       16 |      2 | 恒基伟业g101                   |<br>|       23 |      5 | 诺基亚n96                      |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       27 |     15 | 联通100元充值卡                |<br>|       29 |     14 | 移动100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id, goods_name from (select goods_id, goods_name, cat_id from goods order by cat_id asc, goods_id desc) as tmp group by cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|        1 |      4 | kd876                          |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|       16 |      2 | 恒基伟业g101                   |<br>|       23 |      5 | 诺基亚n96                      |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       27 |     15 | 联通100元充值卡                |<br>|       29 |     14 | 移动100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> exit<br>mysql> show databases;<br>+——————–+<br>| Database           |<br>+——————–+<br>| bookstore          |<br>| clouddb01          |<br>| clouddb02          |<br>| clouddb03          |<br>| information_schema |<br>| mydb               |<br>| mysql              |<br>| performance_schema |<br>| shop               |<br>| ssm_crud           |<br>| struts             |<br>| student            |<br>| sys                |<br>| test               |<br>| test01             |<br>+——————–+<br>15 rows in set (0.35 sec)</p>
<p>mysql> use test01;<br>Database changed<br>mysql> select goods_id,cat_id,goods_name from goods order by goods_id desc ,cat_id asc;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       32 |      3 | 诺基亚n85                              |<br>|       31 |      3 | 摩托罗拉e8                             |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       29 |     14 | 移动100元充值卡                        |<br>|       28 |     15 | 联通50元充值卡                         |<br>|       27 |     15 | 联通100元充值卡                        |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |<br>|       24 |      3 | p806                                   |<br>|       23 |      5 | 诺基亚n96                              |<br>|       22 |      3 | 多普达touch hd                         |<br>|       21 |      3 | 金立 a30                               |<br>|       20 |      3 | 三星bc01                               |<br>|       19 |      3 | 三星sgh-f258                           |<br>|       18 |      4 | 夏新t5                                 |<br>|       17 |      3 | 夏新n7                                 |<br>|       16 |      2 | 恒基伟业g101                           |<br>|       15 |      3 | 摩托罗拉a810                           |<br>|       14 |      4 | 诺基亚5800xm                           |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |<br>|       12 |      3 | 摩托罗拉a810                           |<br>|       11 |      3 | 索爱c702c                              |<br>|       10 |      3 | 索爱c702c                              |<br>|        9 |      3 | 诺基亚e66                              |<br>|        8 |      3 | 飞利浦9@9v                             |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |<br>|        4 |      8 | 诺基亚n85原装充电器                    |<br>|        3 |      8 | 诺基亚原装5800耳机                     |<br>|        1 |      4 | kd876                                  |<br>+———-+——–+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name from  goods order by cat_id  desc ;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       27 |     15 | 联通100元充值卡                        |<br>|       28 |     15 | 联通50元充值卡                         |<br>|       29 |     14 | 移动100元充值卡                        |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|        4 |      8 | 诺基亚n85原装充电器                    |<br>|        3 |      8 | 诺基亚原装5800耳机                     |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|       23 |      5 | 诺基亚n96                              |<br>|        1 |      4 | kd876                                  |<br>|       14 |      4 | 诺基亚5800xm                           |<br>|       18 |      4 | 夏新t5                                 |<br>|        8 |      3 | 飞利浦9@9v                             |<br>|        9 |      3 | 诺基亚e66                              |<br>|       10 |      3 | 索爱c702c                              |<br>|       11 |      3 | 索爱c702c                              |<br>|       12 |      3 | 摩托罗拉a810                           |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |<br>|       15 |      3 | 摩托罗拉a810                           |<br>|       17 |      3 | 夏新n7                                 |<br>|       19 |      3 | 三星sgh-f258                           |<br>|       20 |      3 | 三星bc01                               |<br>|       21 |      3 | 金立 a30                               |<br>|       22 |      3 | 多普达touch hd                         |<br>|       24 |      3 | p806                                   |<br>|       31 |      3 | 摩托罗拉e8                             |<br>|       32 |      3 | 诺基亚n85                              |<br>|       16 |      2 | 恒基伟业g101                           |<br>+———-+——–+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name from(select goods_id,cat_id,goods_name from goods order by cat_id,goods_id desc) as tmp;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       16 |      2 | 恒基伟业g101                           |<br>|       32 |      3 | 诺基亚n85                              |<br>|       31 |      3 | 摩托罗拉e8                             |<br>|       24 |      3 | p806                                   |<br>|       22 |      3 | 多普达touch hd                         |<br>|       21 |      3 | 金立 a30                               |<br>|       20 |      3 | 三星bc01                               |<br>|       19 |      3 | 三星sgh-f258                           |<br>|       17 |      3 | 夏新n7                                 |<br>|       15 |      3 | 摩托罗拉a810                           |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |<br>|       12 |      3 | 摩托罗拉a810                           |<br>|       11 |      3 | 索爱c702c                              |<br>|       10 |      3 | 索爱c702c                              |<br>|        9 |      3 | 诺基亚e66                              |<br>|        8 |      3 | 飞利浦9@9v                             |<br>|       18 |      4 | 夏新t5                                 |<br>|       14 |      4 | 诺基亚5800xm                           |<br>|        1 |      4 | kd876                                  |<br>|       23 |      5 | 诺基亚n96                              |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        4 |      8 | 诺基亚n85原装充电器                    |<br>|        3 |      8 | 诺基亚原装5800耳机                     |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       29 |     14 | 移动100元充值卡                        |<br>|       28 |     15 | 联通50元充值卡                         |<br>|       27 |     15 | 联通100元充值卡                        |<br>+———-+——–+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name from(select goods_id,cat_id,goods_name from goods order by cat_id,goods_id desc) as tmp group by cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|        1 |      4 | kd876                          |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|       16 |      2 | 恒基伟业g101                   |<br>|       23 |      5 | 诺基亚n96                      |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       27 |     15 | 联通100元充值卡                |<br>|       29 |     14 | 移动100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> desc goods;<br>+————–+————————+——+—–+———+—————-+<br>| Field        | Type                   | Null | Key | Default | Extra          |<br>+————–+————————+——+—–+———+—————-+<br>| goods_id     | mediumint(8) unsigned  | NO   | PRI | NULL    | auto_increment |<br>| goods_name   | varchar(120)           | NO   |     |         |                |<br>| cat_id       | smallint(5) unsigned   | NO   |     | 0       |                |<br>| brand_id     | smallint(5) unsigned   | NO   |     | 0       |                |<br>| goods_sn     | char(15)               | NO   |     |         |                |<br>| goods_number | smallint(5) unsigned   | NO   |     | 0       |                |<br>| shop_price   | decimal(10,2) unsigned | NO   |     | 0.00    |                |<br>| market_price | decimal(10,2) unsigned | NO   |     | 0.00    |                |<br>| click_count  | int(10) unsigned       | NO   |     | 0       |                |<br>+————–+————————+——+—–+———+—————-+<br>9 rows in set (0.18 sec)</p>
<p>mysql> alter table goods add index cat(cat_id);<br>Query OK, 31 rows affected (1.05 sec)<br>Records: 31  Duplicates: 0  Warnings: 0</p>
<p>mysql> select goods_id,cat_id,goods_name from(select goods_id,cat_id,goods_name from goods order by cat_id,goods_id desc) as tmp group by cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|       16 |      2 | 恒基伟业g101                   |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|        1 |      4 | kd876                          |<br>|       23 |      5 | 诺基亚n96                      |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       29 |     14 | 移动100元充值卡                |<br>|       27 |     15 | 联通100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name from(select goods_id,cat_id,goods_name from goods order by cat_id,goods_id desc limit 1000) as tmp group by cat_id;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       16 |      2 | 恒基伟业g101                           |<br>|       32 |      3 | 诺基亚n85                              |<br>|       18 |      4 | 夏新t5                                 |<br>|       23 |      5 | 诺基亚n96                              |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       28 |     15 | 联通50元充值卡                         |<br>+———-+——–+—————————————-+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name from goods where goods_id in(select max(goods_id) from goods group by cat_id) group by cat_id;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       16 |      2 | 恒基伟业g101                           |<br>|       32 |      3 | 诺基亚n85                              |<br>|       18 |      4 | 夏新t5                                 |<br>|       23 |      5 | 诺基亚n96                              |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       28 |     15 | 联通50元充值卡                         |<br>+———-+——–+—————————————-+<br>9 rows in set (0.04 sec)</p>
<p>mysql> #exits子查询<br>mysql> #from子查询的排序要加limit<br>mysql> #exists 存在,exists 子查询<br>mysql> #查出有商品的栏目<br>mysql> show tables;<br>+——————+<br>| Tables_in_test01 |<br>+——————+<br>| a                |<br>| b                |<br>| boy              |<br>| category         |<br>| girl             |<br>| goods            |<br>| m                |<br>| mian             |<br>| result           |<br>| t                |<br>| user             |<br>+——————+<br>11 rows in set (0.06 sec)</p>
<p>mysql> desc category;<br>+———–+———————-+——+—–+———+—————-+<br>| Field     | Type                 | Null | Key | Default | Extra          |<br>+———–+———————-+——+—–+———+—————-+<br>| cat_id    | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |<br>| cat_name  | varchar(90)          | NO   |     |         |                |<br>| parent_id | smallint(5) unsigned | YES  |     | NULL    |                |<br>+———–+———————-+——+—–+———+—————-+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select * from  category;<br>+——–+—————————+———–+<br>| cat_id | cat_name                  | parent_id |<br>+——–+—————————+———–+<br>|      1 | 手机类型                  |         0 |<br>|      2 | CDMA手机                  |         1 |<br>|      3 | GSM手机                   |         1 |<br>|      4 | 3G手机                    |         1 |<br>|      5 | 双模手机                  |         1 |<br>|      6 | 手机配件                  |         0 |<br>|      7 | 充电器                    |         6 |<br>|      8 | 耳机                      |         6 |<br>|      9 | 电池                      |         6 |<br>|     11 | 读卡器和内存卡            |         6 |<br>|     12 | 充值卡                    |         0 |<br>|     13 | 小灵通/固话充值卡         |        12 |<br>|     14 | 移动手机充值卡            |        12 |<br>|     15 | 联通手机充值卡            |        12 |<br>+——–+—————————+———–+<br>14 rows in set (0.07 sec)</p>
<p>mysql> desc goods;<br>+————–+————————+——+—–+———+—————-+<br>| Field        | Type                   | Null | Key | Default | Extra          |<br>+————–+————————+——+—–+———+—————-+<br>| goods_id     | mediumint(8) unsigned  | NO   | PRI | NULL    | auto_increment |<br>| goods_name   | varchar(120)           | NO   |     |         |                |<br>| cat_id       | smallint(5) unsigned   | NO   | MUL | 0       |                |<br>| brand_id     | smallint(5) unsigned   | NO   |     | 0       |                |<br>| goods_sn     | char(15)               | NO   |     |         |                |<br>| goods_number | smallint(5) unsigned   | NO   |     | 0       |                |<br>| shop_price   | decimal(10,2) unsigned | NO   |     | 0.00    |                |<br>| market_price | decimal(10,2) unsigned | NO   |     | 0.00    |                |<br>| click_count  | int(10) unsigned       | NO   |     | 0       |                |<br>+————–+————————+——+—–+———+—————-+<br>9 rows in set (0.00 sec)</p>
<p>mysql> show index from goods;<br>+——-+————+———-+————–+————-+———–+————-+———-+——–+——+————+———+—————+———+<br>| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible |<br>+——-+————+———-+————–+————-+———–+————-+———-+——–+——+————+———+—————+———+<br>| goods |          0 | PRIMARY  |            1 | goods_id    | A         |          31 |     NULL |   NULL |      | BTREE      |         |               | YES     |<br>| goods |          1 | cat      |            1 | cat_id      | A         |        NULL |     NULL |   NULL |      | BTREE      |         |               | YES     |<br>+——-+————+———-+————–+————-+———–+————-+———-+——–+——+————+———+—————+———+<br>2 rows in set (0.17 sec)</p>
<p>mysql> drop index cat on goods;<br>Query OK, 31 rows affected (0.55 sec)<br>Records: 31  Duplicates: 0  Warnings: 0</p>
<p>mysql> show index from goods;<br>+——-+————+———-+————–+————-+———–+————-+———-+——–+——+————+———+—————+———+<br>| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible |<br>+——-+————+———-+————–+————-+———–+————-+———-+——–+——+————+———+—————+———+<br>| goods |          0 | PRIMARY  |            1 | goods_id    | A         |          31 |     NULL |   NULL |      | BTREE      |         |               | YES     |<br>+——-+————+———-+————–+————-+———–+————-+———-+——–+——+————+———+—————+———+<br>1 row in set (0.00 sec)</p>
<p>mysql> desc goods;<br>+————–+————————+——+—–+———+—————-+<br>| Field        | Type                   | Null | Key | Default | Extra          |<br>+————–+————————+——+—–+———+—————-+<br>| goods_id     | mediumint(8) unsigned  | NO   | PRI | NULL    | auto_increment |<br>| goods_name   | varchar(120)           | NO   |     |         |                |<br>| cat_id       | smallint(5) unsigned   | NO   |     | 0       |                |<br>| brand_id     | smallint(5) unsigned   | NO   |     | 0       |                |<br>| goods_sn     | char(15)               | NO   |     |         |                |<br>| goods_number | smallint(5) unsigned   | NO   |     | 0       |                |<br>| shop_price   | decimal(10,2) unsigned | NO   |     | 0.00    |                |<br>| market_price | decimal(10,2) unsigned | NO   |     | 0.00    |                |<br>| click_count  | int(10) unsigned       | NO   |     | 0       |                |<br>+————–+————————+——+—–+———+—————-+<br>9 rows in set (0.00 sec)</p>
<p>mysql> desc category;<br>+———–+———————-+——+—–+———+—————-+<br>| Field     | Type                 | Null | Key | Default | Extra          |<br>+———–+———————-+——+—–+———+—————-+<br>| cat_id    | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |<br>| cat_name  | varchar(90)          | NO   |     |         |                |<br>| parent_id | smallint(5) unsigned | YES  |     | NULL    |                |<br>+———–+———————-+——+—–+———+—————-+<br>3 rows in set (0.03 sec)</p>
<p>mysql> select cat_name from category;<br>+—————————+<br>| cat_name                  |<br>+—————————+<br>| 手机类型                  |<br>| CDMA手机                  |<br>| GSM手机                   |<br>| 3G手机                    |<br>| 双模手机                  |<br>| 手机配件                  |<br>| 充电器                    |<br>| 耳机                      |<br>| 电池                      |<br>| 读卡器和内存卡            |<br>| 充值卡                    |<br>| 小灵通/固话充值卡         |<br>| 移动手机充值卡            |<br>| 联通手机充值卡            |<br>+—————————+<br>14 rows in set (0.00 sec)</p>
<p>mysql> select cat_id,cat_name from category where exists(select * from goods where category.cat_id=goods_id);<br>+——–+—————————+<br>| cat_id | cat_name                  |<br>+——–+—————————+<br>|      1 | 手机类型                  |<br>|      3 | GSM手机                   |<br>|      4 | 3G手机                    |<br>|      5 | 双模手机                  |<br>|      6 | 手机配件                  |<br>|      7 | 充电器                    |<br>|      8 | 耳机                      |<br>|      9 | 电池                      |<br>|     11 | 读卡器和内存卡            |<br>|     12 | 充值卡                    |<br>|     13 | 小灵通/固话充值卡         |<br>|     14 | 移动手机充值卡            |<br>|     15 | 联通手机充值卡            |<br>+——–+—————————+<br>13 rows in set (0.00 sec)</p>
<p>mysql> select cat_id,cat_name from category where exists(select * from goods where category.cat_id=goods.cat_id);<br>+——–+—————————+<br>| cat_id | cat_name                  |<br>+——–+—————————+<br>|      2 | CDMA手机                  |<br>|      3 | GSM手机                   |<br>|      4 | 3G手机                    |<br>|      5 | 双模手机                  |<br>|      8 | 耳机                      |<br>|     11 | 读卡器和内存卡            |<br>|     13 | 小灵通/固话充值卡         |<br>|     14 | 移动手机充值卡            |<br>|     15 | 联通手机充值卡            |<br>+——–+—————————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> #为什么建表时加not null或default 0  ,不想出现null值<br>mysql> #null判断只能用 is null 或is not nul<br>mysql><br>mysql> #效率不高,影响索引效率<br>mysql> select 100000<em>232344242<br>    -> ;<br>+——————+<br>| 100000</em>232344242 |<br>+——————+<br>|   23234424200000 |<br>+——————+<br>1 row in set (0.00 sec)</p>
<p>mysql> #左连接的语法<br>mysql> a表不动,b表在右边滑动<br>    -> #<br>    -> \n<br>ERROR:<br>Unknown command ‘\n’.<br>    -> ;<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘a表不动,b表在右边滑动</p>
<p>\n’ at line 1<br>mysql> #a表与b表通过什么关联行<br>mysql> # a 表left join b on 条件 条件为真,则b表对应的行取出<br>mysql> # a left join b on<br>mysql> #将a left join b on 条件 设为c 表<br>mysql> #可以对c表进行查询,可以查询a和b的列<br>mysql> select  goods_id,cat_id,cat_name from goods left join category on goods.cat_id=category.cat_id;<br>ERROR 1052 (23000): Column ‘cat_id’ in field list is ambiguous<br>mysql> select  goods_id,goods.cat_id,cat_name from goods left join category on goods.cat_id=category.cat_id;<br>+———-+——–+—————————+<br>| goods_id | cat_id | cat_name                  |<br>+———-+——–+—————————+<br>|        1 |      4 | 3G手机                    |<br>|        4 |      8 | 耳机                      |<br>|        3 |      8 | 耳机                      |<br>|        5 |     11 | 读卡器和内存卡            |<br>|        6 |     11 | 读卡器和内存卡            |<br>|        7 |      8 | 耳机                      |<br>|        8 |      3 | GSM手机                   |<br>|        9 |      3 | GSM手机                   |<br>|       10 |      3 | GSM手机                   |<br>|       11 |      3 | GSM手机                   |<br>|       12 |      3 | GSM手机                   |<br>|       13 |      3 | GSM手机                   |<br>|       14 |      4 | 3G手机                    |<br>|       15 |      3 | GSM手机                   |<br>|       16 |      2 | CDMA手机                  |<br>|       17 |      3 | GSM手机                   |<br>|       18 |      4 | 3G手机                    |<br>|       19 |      3 | GSM手机                   |<br>|       20 |      3 | GSM手机                   |<br>|       21 |      3 | GSM手机                   |<br>|       22 |      3 | GSM手机                   |<br>|       23 |      5 | 双模手机                  |<br>|       24 |      3 | GSM手机                   |<br>|       25 |     13 | 小灵通/固话充值卡         |<br>|       26 |     13 | 小灵通/固话充值卡         |<br>|       27 |     15 | 联通手机充值卡            |<br>|       28 |     15 | 联通手机充值卡            |<br>|       29 |     14 | 移动手机充值卡            |<br>|       30 |     14 | 移动手机充值卡            |<br>|       31 |      3 | GSM手机                   |<br>|       32 |      3 | GSM手机                   |<br>+———-+——–+—————————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select  goods_id,goods.cat_id,cat_name,goods_name from goods left join category on goods.cat_id=category.cat_id;<br>+———-+——–+—————————+—————————————-+<br>| goods_id | cat_id | cat_name                  | goods_name                             |<br>+———-+——–+—————————+—————————————-+<br>|        1 |      4 | 3G手机                    | kd876                                  |<br>|        4 |      8 | 耳机                      | 诺基亚n85原装充电器                    |<br>|        3 |      8 | 耳机                      | 诺基亚原装5800耳机                     |<br>|        5 |     11 | 读卡器和内存卡            | 索爱原装m2卡读卡器                     |<br>|        6 |     11 | 读卡器和内存卡            | 胜创kingmax内存卡                      |<br>|        7 |      8 | 耳机                      | 诺基亚n85原装立体声耳机hs-82           |<br>|        8 |      3 | GSM手机                   | 飞利浦9@9v                             |<br>|        9 |      3 | GSM手机                   | 诺基亚e66                              |<br>|       10 |      3 | GSM手机                   | 索爱c702c                              |<br>|       11 |      3 | GSM手机                   | 索爱c702c                              |<br>|       12 |      3 | GSM手机                   | 摩托罗拉a810                           |<br>|       13 |      3 | GSM手机                   | 诺基亚5320 xpressmusic                 |<br>|       14 |      4 | 3G手机                    | 诺基亚5800xm                           |<br>|       15 |      3 | GSM手机                   | 摩托罗拉a810                           |<br>|       16 |      2 | CDMA手机                  | 恒基伟业g101                           |<br>|       17 |      3 | GSM手机                   | 夏新n7                                 |<br>|       18 |      4 | 3G手机                    | 夏新t5                                 |<br>|       19 |      3 | GSM手机                   | 三星sgh-f258                           |<br>|       20 |      3 | GSM手机                   | 三星bc01                               |<br>|       21 |      3 | GSM手机                   | 金立 a30                               |<br>|       22 |      3 | GSM手机                   | 多普达touch hd                         |<br>|       23 |      5 | 双模手机                  | 诺基亚n96                              |<br>|       24 |      3 | GSM手机                   | p806                                   |<br>|       25 |     13 | 小灵通/固话充值卡         | 小灵通/固话50元充值卡                  |<br>|       26 |     13 | 小灵通/固话充值卡         | 小灵通/固话20元充值卡                  |<br>|       27 |     15 | 联通手机充值卡            | 联通100元充值卡                        |<br>|       28 |     15 | 联通手机充值卡            | 联通50元充值卡                         |<br>|       29 |     14 | 移动手机充值卡            | 移动100元充值卡                        |<br>|       30 |     14 | 移动手机充值卡            | 移动20元充值卡                         |<br>|       31 |      3 | GSM手机                   | 摩托罗拉e8                             |<br>|       32 |      3 | GSM手机                   | 诺基亚n85                              |<br>+———-+——–+—————————+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select  goods_id,goods.cat_id,goods_name,cat_name from goods left join category on goods.cat_id=category.cat_id;<br>+———-+——–+—————————————-+—————————+<br>| goods_id | cat_id | goods_name                             | cat_name                  |<br>+———-+——–+—————————————-+—————————+<br>|        1 |      4 | kd876                                  | 3G手机                    |<br>|        4 |      8 | 诺基亚n85原装充电器                    | 耳机                      |<br>|        3 |      8 | 诺基亚原装5800耳机                     | 耳机                      |<br>|        5 |     11 | 索爱原装m2卡读卡器                     | 读卡器和内存卡            |<br>|        6 |     11 | 胜创kingmax内存卡                      | 读卡器和内存卡            |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           | 耳机                      |<br>|        8 |      3 | 飞利浦9@9v                             | GSM手机                   |<br>|        9 |      3 | 诺基亚e66                              | GSM手机                   |<br>|       10 |      3 | 索爱c702c                              | GSM手机                   |<br>|       11 |      3 | 索爱c702c                              | GSM手机                   |<br>|       12 |      3 | 摩托罗拉a810                           | GSM手机                   |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 | GSM手机                   |<br>|       14 |      4 | 诺基亚5800xm                           | 3G手机                    |<br>|       15 |      3 | 摩托罗拉a810                           | GSM手机                   |<br>|       16 |      2 | 恒基伟业g101                           | CDMA手机                  |<br>|       17 |      3 | 夏新n7                                 | GSM手机                   |<br>|       18 |      4 | 夏新t5                                 | 3G手机                    |<br>|       19 |      3 | 三星sgh-f258                           | GSM手机                   |<br>|       20 |      3 | 三星bc01                               | GSM手机                   |<br>|       21 |      3 | 金立 a30                               | GSM手机                   |<br>|       22 |      3 | 多普达touch hd                         | GSM手机                   |<br>|       23 |      5 | 诺基亚n96                              | 双模手机                  |<br>|       24 |      3 | p806                                   | GSM手机                   |<br>|       25 |     13 | 小灵通/固话50元充值卡                  | 小灵通/固话充值卡         |<br>|       26 |     13 | 小灵通/固话20元充值卡                  | 小灵通/固话充值卡         |<br>|       27 |     15 | 联通100元充值卡                        | 联通手机充值卡            |<br>|       28 |     15 | 联通50元充值卡                         | 联通手机充值卡            |<br>|       29 |     14 | 移动100元充值卡                        | 移动手机充值卡            |<br>|       30 |     14 | 移动20元充值卡                         | 移动手机充值卡            |<br>|       31 |      3 | 摩托罗拉e8                             | GSM手机                   |<br>|       32 |      3 | 诺基亚n85                              | GSM手机                   |<br>+———-+——–+—————————————-+—————————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> #取出第四个栏目的商品以及商品的栏目名称<br>mysql> select  goods_id,goods.cat_id,goods_name,cat_name from goods left join category on goods.cat_id=category.cat_id where goods.cat_id=4;<br>+———-+——–+—————–+———-+<br>| goods_id | cat_id | goods_name      | cat_name |<br>+———-+——–+—————–+———-+<br>|        1 |      4 | kd876           | 3G手机   |<br>|       14 |      4 | 诺基亚5800xm    | 3G手机   |<br>|       18 |      4 | 夏新t5          | 3G手机   |<br>+———-+——–+—————–+———-+<br>3 rows in set (0.07 sec)</p>
<p>mysql> #左右连接,左连接即左表不动,<br>mysql> #a left join b 并不是说 a 一定是在b的左边<br>mysql> #左右连接可以互换, a left join b =b right join a<br>mysql> # 内链接 特点 所有有配偶的男生/女生 走到舞台上来, 其 左表和右表不匹配的不能出现<br>mysql> # 集合的角度看,内链接是左右连接的交集;<br>mysql> # 外连接,求的是并集,但是在mysql中不支持<br>mysql> #左连接<br>mysql> show tables;<br>+——————+<br>| Tables_in_test01 |<br>+——————+<br>| a                |<br>| b                |<br>| boy              |<br>| category         |<br>| girl             |<br>| goods            |<br>| m                |<br>| mian             |<br>| result           |<br>| t                |<br>| user             |<br>+——————+<br>11 rows in set (0.60 sec)</p>
<p>mysql> select * from t;<br>+——+————–+<br>| tid  | tname        |<br>+——+————–+<br>|    1 | 国安         |<br>|    2 | 申花         |<br>|    3 | 布尔联队     |<br>+——+————–+<br>3 rows in set (0.40 sec)</p>
<p>mysql> select * from m;<br>+——+——+——+——+————+<br>| mid  | hid  | gid  | mres | matime     |<br>+——+——+——+——+————+<br>|    1 |    1 |    2 | 2:0  | 2006-05-21 |<br>|    2 |    2 |    3 | 1:2  | 2006-06-21 |<br>|    3 |    3 |    1 | 2:5  | 2006-06-25 |<br>|    4 |    2 |    1 | 3:2  | 2006-07-21 |<br>+——+——+——+——+————+<br>4 rows in set (0.10 sec)</p>
<p>mysql> select m.mid,m.hid,t.tname,m.gid,t.tname from m left join t on m.hid=t.tid;<br>+——+——+————–+——+————–+<br>| mid  | hid  | tname        | gid  | tname        |<br>+——+——+————–+——+————–+<br>|    1 |    1 | 国安         |    2 | 国安         |<br>|    2 |    2 | 申花         |    3 | 申花         |<br>|    4 |    2 | 申花         |    1 | 申花         |<br>|    3 |    3 | 布尔联队     |    1 | 布尔联队     |<br>+——+——+————–+——+————–+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select m.mid,m.hid,t.tname,m.gid from m left join t on m.hid=t.tid;<br>+——+——+————–+——+<br>| mid  | hid  | tname        | gid  |<br>+——+——+————–+——+<br>|    1 |    1 | 国安         |    2 |<br>|    2 |    2 | 申花         |    3 |<br>|    4 |    2 | 申花         |    1 |<br>|    3 |    3 | 布尔联队     |    1 |<br>+——+——+————–+——+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select tem.mid,tem.hid,t.tname,tem.gid,t.tname from (select m.mid,m.hid,t.tname,m.gid from m left join t on m.hid=t.tid) as tem  left join t on t.tid=tem.gid;<br>+——+——+————–+——+————–+<br>| mid  | hid  | tname        | gid  | tname        |<br>+——+——+————–+——+————–+<br>|    4 |    2 | 国安         |    1 | 国安         |<br>|    3 |    3 | 国安         |    1 | 国安         |<br>|    1 |    1 | 申花         |    2 | 申花         |<br>|    2 |    2 | 布尔联队     |    3 | 布尔联队     |<br>+——+——+————–+——+————–+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select tem.mid,tem.hid,t.tname,tem.gid,t.tname from (select m.mid,m.hid,t.tname,m.gid from m left join t on m.hid=t.tid) as tem  left join t on t.tid=tem.gid order by tem.mid asc;<br>+——+——+————–+——+————–+<br>| mid  | hid  | tname        | gid  | tname        |<br>+——+——+————–+——+————–+<br>|    1 |    1 | 申花         |    2 | 申花         |<br>|    2 |    2 | 布尔联队     |    3 | 布尔联队     |<br>|    3 |    3 | 国安         |    1 | 国安         |<br>|    4 |    2 | 国安         |    1 | 国安         |<br>+——+——+————–+——+————–+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select tem.mid,tem.hid,t.tname,tem.gid,t.tname from (select m.mid,m.hid,t.tname,m.gid from m left join t on m.hid=t.tid) as tem  left join t on tem.gid=t.tid order by tem.mid asc;<br>+——+——+————–+——+————–+<br>| mid  | hid  | tname        | gid  | tname        |<br>+——+——+————–+——+————–+<br>|    1 |    1 | 申花         |    2 | 申花         |<br>|    2 |    2 | 布尔联队     |    3 | 布尔联队     |<br>|    3 |    3 | 国安         |    1 | 国安         |<br>|    4 |    2 | 国安         |    1 | 国安         |<br>+——+——+————–+——+————–+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select tem.mid,tem.hid,tem.tname,tem.gid,tem.tname from (select m.mid,m.hid,t.tname,m.gid from m left join t on m.hid=t.tid) as tem  left join t on tem.gid=t.tid order by tem.mid asc;<br>+——+——+————–+——+————–+<br>| mid  | hid  | tname        | gid  | tname        |<br>+——+——+————–+——+————–+<br>|    1 |    1 | 国安         |    2 | 国安         |<br>|    2 |    2 | 申花         |    3 | 申花         |<br>|    3 |    3 | 布尔联队     |    1 | 布尔联队     |<br>|    4 |    2 | 申花         |    1 | 申花         |<br>+——+——+————–+——+————–+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select m.* from m left join t on m.hid=t.tid;<br>+——+——+——+——+————+<br>| mid  | hid  | gid  | mres | matime     |<br>+——+——+——+——+————+<br>|    1 |    1 |    2 | 2:0  | 2006-05-21 |<br>|    2 |    2 |    3 | 1:2  | 2006-06-21 |<br>|    4 |    2 |    1 | 3:2  | 2006-07-21 |<br>|    3 |    3 |    1 | 2:5  | 2006-06-25 |<br>+——+——+——+——+————+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select m.*,t.tname from m left join t on m.hid=t.tid;<br>+——+——+——+——+————+————–+<br>| mid  | hid  | gid  | mres | matime     | tname        |<br>+——+——+——+——+————+————–+<br>|    1 |    1 |    2 | 2:0  | 2006-05-21 | 国安         |<br>|    2 |    2 |    3 | 1:2  | 2006-06-21 | 申花         |<br>|    4 |    2 |    1 | 3:2  | 2006-07-21 | 申花         |<br>|    3 |    3 |    1 | 2:5  | 2006-06-25 | 布尔联队     |<br>+——+——+——+——+————+————–+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select tem.<em>, t.tname  from (select m.</em>,t.tname from m left join t on m.hid=t.tid) as tem left join t on tem.gid=t.tid;<br>+——+——+——+——+————+————–+————–+<br>| mid  | hid  | gid  | mres | matime     | tname        | tname        |<br>+——+——+——+——+————+————–+————–+<br>|    4 |    2 |    1 | 3:2  | 2006-07-21 | 申花         | 国安         |<br>|    3 |    3 |    1 | 2:5  | 2006-06-25 | 布尔联队     | 国安         |<br>|    1 |    1 |    2 | 2:0  | 2006-05-21 | 国安         | 申花         |<br>|    2 |    2 |    3 | 1:2  | 2006-06-21 | 申花         | 布尔联队     |<br>+——+——+——+——+————+————–+————–+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select * from t;<br>+——+————–+<br>| tid  | tname        |<br>+——+————–+<br>|    1 | 国安         |<br>|    2 | 申花         |<br>|    3 | 布尔联队     |<br>+——+————–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select tem.mid,tem.hid,tem.tname,tem.gid,t.tname,tem.mres,tem.matime  from (select m.mid ,m.hid,t.tname,m.gid,m.mres,m.matime from m left join t on m.hid=t.tid) as tem left join t on tem.gid=t.tid;<br>+——+——+————–+——+————–+——+————+<br>| mid  | hid  | tname        | gid  | tname        | mres | matime     |<br>+——+——+————–+——+————–+——+————+<br>|    4 |    2 | 申花         |    1 | 国安         | 3:2  | 2006-07-21 |<br>|    3 |    3 | 布尔联队     |    1 | 国安         | 2:5  | 2006-06-25 |<br>|    1 |    1 | 国安         |    2 | 申花         | 2:0  | 2006-05-21 |<br>|    2 |    2 | 申花         |    3 | 布尔联队     | 1:2  | 2006-06-21 |<br>+——+——+————–+——+————–+——+————+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select tem.mid,tem.hid,tem.tname,tem.gid,t.tname,tem.mres,tem.matime  from (select m.mid ,m.hid,t.tname,m.gid,m.mres,m.matime from m left join t on m.hid=t.tid) as tem left join t on tem.gid=t.tid order by tem.mid;<br>+——+——+————–+——+————–+——+————+<br>| mid  | hid  | tname        | gid  | tname        | mres | matime     |<br>+——+——+————–+——+————–+——+————+<br>|    1 |    1 | 国安         |    2 | 申花         | 2:0  | 2006-05-21 |<br>|    2 |    2 | 申花         |    3 | 布尔联队     | 1:2  | 2006-06-21 |<br>|    3 |    3 | 布尔联队     |    1 | 国安         | 2:5  | 2006-06-25 |<br>|    4 |    2 | 申花         |    1 | 国安         | 3:2  | 2006-07-21 |<br>+——+——+————–+——+————–+——+————+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select * from m;<br>+——+——+——+——+————+<br>| mid  | hid  | gid  | mres | matime     |<br>+——+——+——+——+————+<br>|    1 |    1 |    2 | 2:0  | 2006-05-21 |<br>|    2 |    2 |    3 | 1:2  | 2006-06-21 |<br>|    3 |    3 |    1 | 2:5  | 2006-06-25 |<br>|    4 |    2 |    1 | 3:2  | 2006-07-21 |<br>+——+——+——+——+————+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select tem.mid,tem.hid,tem.tname,tem.gid,t.tname,tem.mres,tem.matime  from (select m.mid ,m.hid,t.tname,m.gid,m.mres,m.matime from m left join t on m.hid=t.tid) as tem left join t on tem.gid=t.tid where tem.matime between “2006-6-1” and “2006-7-1”  order by tem.mid;<br>+——+——+————–+——+————–+——+————+<br>| mid  | hid  | tname        | gid  | tname        | mres | matime     |<br>+——+——+————–+——+————–+——+————+<br>|    2 |    2 | 申花         |    3 | 布尔联队     | 1:2  | 2006-06-21 |<br>|    3 |    3 | 布尔联队     |    1 | 国安         | 2:5  | 2006-06-25 |<br>+——+——+————–+——+————–+——+————+<br>2 rows in set (0.06 sec)</p>
<p>mysql> select m.mid ,m.hid,t.tname,m.gid,tem.tname,m.mres,m.matime from m left join t on m.hid=t.tid  left join t  as tem on m.gid=tem.tid where m.matime between “2006-6-1” and “2006-7-1”  order by m.mid;<br>+——+——+————–+——+————–+——+————+<br>| mid  | hid  | tname        | gid  | tname        | mres | matime     |<br>+——+——+————–+——+————–+——+————+<br>|    2 |    2 | 申花         |    3 | 布尔联队     | 1:2  | 2006-06-21 |<br>|    3 |    3 | 布尔联队     |    1 | 国安         | 2:5  | 2006-06-25 |<br>+——+——+————–+——+————–+——+————+<br>2 rows in set (0.00 sec)</p>
<p>mysql> exit<br>mysql> use test01;<br>Database changed<br>mysql> select goods_id,goods_name,shop_price from goods where shop_price<50<br>    -> ;<br>+———-+——————————–+————+<br>| goods_id | goods_name                     | shop_price |<br>+———-+——————————–+————+<br>|        5 | 索爱原装m2卡读卡器             |      20.00 |<br>|        6 | 胜创kingmax内存卡              |      42.00 |<br>|       25 | 小灵通/固话50元充值卡          |      48.00 |<br>|       26 | 小灵通/固话20元充值卡          |      19.00 |<br>|       28 | 联通50元充值卡                 |      45.00 |<br>|       30 | 移动20元充值卡                 |      18.00 |<br>+———-+——————————–+————+<br>6 rows in set (0.14 sec)</p>
<p>mysql> #union 联合 语法 sql1 union sql2<br>mysql> select goods_id,goods_name,shop_price from goods where shop_price>4000;<br>+———-+——————-+————+<br>| goods_id | goods_name        | shop_price |<br>+———-+——————-+————+<br>|       22 | 多普达touch hd    |    5999.00 |<br>+———-+——————-+————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select goods_id,goods_name,shop_price from goods where shop_price>4000 union select goods_id,goods_name,shop_price from goods where shop_price<50;<br>+———-+——————————–+————+<br>| goods_id | goods_name                     | shop_price |<br>+———-+——————————–+————+<br>|       22 | 多普达touch hd                 |    5999.00 |<br>|        5 | 索爱原装m2卡读卡器             |      20.00 |<br>|        6 | 胜创kingmax内存卡              |      42.00 |<br>|       25 | 小灵通/固话50元充值卡          |      48.00 |<br>|       26 | 小灵通/固话20元充值卡          |      19.00 |<br>|       28 | 联通50元充值卡                 |      45.00 |<br>|       30 | 移动20元充值卡                 |      18.00 |<br>+———-+——————————–+————+<br>7 rows in set (0.10 sec)</p>
<p>mysql> #可以从两张表union联合查询<br>mysql> #两个列名不一致 以第一个列名为准<br>mysql> #union 满足的条件,只要结果集的列数一致就可以了<br>mysql> #union后的结果集可以排序<br>mysql> #格式: sql1 union sql2 order by<br>mysql> # 用nuion 取出第4个栏目和第5个栏目的商品m,并按价格升序排列<br>mysql> select goods_id ,cat_id, goods_name ,shop_price from goods union select goods_id ,cat_id ,goods_name ,shop_price from goods order by shop_price asc;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|        1 |      4 | kd876                                  |    1388.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.05 sec)</p>
<p>mysql> select goods_id ,cat_id, goods_name ,shop_price from goods where cat_id=4 union select goods_id ,cat_id ,goods_name ,shop_price from goods where cat_id=5 order by shop_price asc;<br>+———-+——–+—————–+————+<br>| goods_id | cat_id | goods_name      | shop_price |<br>+———-+——–+—————–+————+<br>|        1 |      4 | kd876           |    1388.00 |<br>|       14 |      4 | 诺基亚5800xm    |    2625.00 |<br>|       18 |      4 | 夏新t5          |    2878.00 |<br>|       23 |      5 | 诺基亚n96       |    3700.00 |<br>+———-+——–+—————–+————+<br>4 rows in set (0.00 sec)</p>
<p>mysql> #取出第3个下价格前三高 的商品,和第四个栏目下价格前两高的商品用union完成</p>
<p>mysql> select goods_id ,cat_id,goods_name ,shop_price from goods where cat_id=3 order by  shop_price desc limit 3;<br>+———-+——–+——————-+————+<br>| goods_id | cat_id | goods_name        | shop_price |<br>+———-+——–+——————-+————+<br>|       22 |      3 | 多普达touch hd    |    5999.00 |<br>|       32 |      3 | 诺基亚n85         |    3010.00 |<br>|       17 |      3 | 夏新n7            |    2300.00 |<br>+———-+——–+——————-+————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select goods_id ,cat_id ,goods_name ,shop_price from goods where cat_id=4 order by shop_price desc limit 2;<br>+———-+——–+—————–+————+<br>| goods_id | cat_id | goods_name      | shop_price |<br>+———-+——–+—————–+————+<br>|       18 |      4 | 夏新t5          |    2878.00 |<br>|       14 |      4 | 诺基亚5800xm    |    2625.00 |<br>+———-+——–+—————–+————+<br>2 rows in set (0.00 sec)</p>
<p>mysql> (select goods_id ,cat_id,goods_name ,shop_price from goods where cat_id=3 order by  shop_price desc limit 3) union (select goods_id ,cat_id,goods_name ,shop_price from goods where cat_id=4 order by shop_price desc limit 2);<br>+———-+——–+——————-+————+<br>| goods_id | cat_id | goods_name        | shop_price |<br>+———-+——–+——————-+————+<br>|       22 |      3 | 多普达touch hd    |    5999.00 |<br>|       32 |      3 | 诺基亚n85         |    3010.00 |<br>|       17 |      3 | 夏新n7            |    2300.00 |<br>|       18 |      4 | 夏新t5            |    2878.00 |<br>|       14 |      4 | 诺基亚5800xm      |    2625.00 |<br>+———-+——–+——————-+————+<br>5 rows in set (0.00 sec)</p>
<p>mysql> #这次内层的order by 不会失效是因为有limit,单纯的order by不会对结果集有影响,需要配合limit<br>mysql> #如果union后的结果有重复如何解决<br>mysql> #union会有去重的效果,不想去重可以用union all<br>mysql> show tables;<br>+——————+<br>| Tables_in_test01 |<br>+——————+<br>| a                |<br>| b                |<br>| boy              |<br>| category         |<br>| girl             |<br>| goods            |<br>| m                |<br>| mian             |<br>| result           |<br>| t                |<br>| user             |<br>+——————+<br>11 rows in set (0.08 sec)</p>
<p>mysql> select * from a;<br>+——+——+<br>| id   | num  |<br>+——+——+<br>| a    |    5 |<br>| b    |   10 |<br>| c    |   15 |<br>| d    |   10 |<br>+——+——+<br>4 rows in set (0.15 sec)</p>
<p>mysql> select  * from b;<br>+——+——+<br>| id   | num  |<br>+——+——+<br>| b    |    5 |<br>| c    |   15 |<br>| d    |   20 |<br>| e    |   99 |<br>+——+——+<br>4 rows in set (0.02 sec)</p>
<p>mysql> select * from a union select * from b;<br>+——+——+<br>| id   | num  |<br>+——+——+<br>| a    |    5 |<br>| b    |   10 |<br>| c    |   15 |<br>| d    |   10 |<br>| b    |    5 |<br>| d    |   20 |<br>| e    |   99 |<br>+——+——+<br>7 rows in set (0.00 sec)</p>
<p>mysql> select * from a union all select * from b;<br>+——+——+<br>| id   | num  |<br>+——+——+<br>| a    |    5 |<br>| b    |   10 |<br>| c    |   15 |<br>| d    |   10 |<br>| b    |    5 |<br>| c    |   15 |<br>| d    |   20 |<br>| e    |   99 |<br>+——+——+<br>8 rows in set (0.00 sec)</p>
<p>mysql> select * from a union all select * from b group by id;<br>+——+——+<br>| id   | num  |<br>+——+——+<br>| a    |    5 |<br>| b    |   10 |<br>| c    |   15 |<br>| d    |   10 |<br>| b    |    5 |<br>| c    |   15 |<br>| d    |   20 |<br>| e    |   99 |<br>+——+——+<br>8 rows in set (0.00 sec)</p>
<p>mysql> select tem.id,sum(tem.num) from(select a.id,a.num from a union all select b.id,b.num from b) as tem group by tem.id ;<br>+——+————–+<br>| id   | sum(tem.num) |<br>+——+————–+<br>| a    |            5 |<br>| b    |           15 |<br>| c    |           30 |<br>| d    |           30 |<br>| e    |           99 |<br>+——+————–+<br>5 rows in set (0.00 sec)</p>
<p>mysql> select a.* ,b.* from a left join b on a.id=b.id;<br>+——+——+——+——+<br>| id   | num  | id   | num  |<br>+——+——+——+——+<br>| b    |   10 | b    |    5 |<br>| c    |   15 | c    |   15 |<br>| d    |   10 | d    |   20 |<br>| a    |    5 | NULL | NULL |<br>+——+——+——+——+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select a.* ,b.* from a inner join b on a.id=b.id;<br>+——+——+——+——+<br>| id   | num  | id   | num  |<br>+——+——+——+——+<br>| b    |   10 | b    |    5 |<br>| c    |   15 | c    |   15 |<br>| d    |   10 | d    |   20 |<br>+——+——+——+——+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select a.* ,b.* from a left join b on a.id=b.id;<br>+——+——+——+——+<br>| id   | num  | id   | num  |<br>+——+——+——+——+<br>| b    |   10 | b    |    5 |<br>| c    |   15 | c    |   15 |<br>| d    |   10 | d    |   20 |<br>| a    |    5 | NULL | NULL |<br>+——+——+——+——+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select a.* ,b.* from a left join b on a.id=b.id union select a.* ,b.* from a right join b on a.id=b.id;<br>+——+——+——+——+<br>| id   | num  | id   | num  |<br>+——+——+——+——+<br>| b    |   10 | b    |    5 |<br>| c    |   15 | c    |   15 |<br>| d    |   10 | d    |   20 |<br>| a    |    5 | NULL | NULL |<br>| NULL | NULL | e    |   99 |<br>+——+——+——+——+<br>5 rows in set (0.00 sec)</p>
<p>mysql> #先左联再u右连然后子查询;<br>mysql><br>mysql> #函数<br>mysql> #取出第四个栏目的商品及打88折的会员价<br>mysql> select goods_id,cat_id,good_name,shop_price<em>0.88 from goods where cat_id=4<br>    -> ;<br>ERROR 1054 (42S22): Unknown column ‘good_name’ in ‘field list’<br>mysql> select goods_id,cat_id,goods_name,shop_price</em>0.88 from goods where cat_id=4<br>    -> ;<br>+———-+——–+—————–+—————–+<br>| goods_id | cat_id | goods_name      | shop_price*0.88 |<br>+———-+——–+—————–+—————–+<br>|        1 |      4 | kd876           |       1221.4400 |<br>|       14 |      4 | 诺基亚5800xm    |       2310.0000 |<br>|       18 |      4 | 夏新t5          |       2532.6400 |<br>+———-+——–+—————–+—————–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name,floor(shop_price<em>0.88) from goods where cat_id=4 ;<br>+———-+——–+—————–+————————+<br>| goods_id | cat_id | goods_name      | floor(shop_price</em>0.88) |<br>+———-+——–+—————–+————————+<br>|        1 |      4 | kd876           |                   1221 |<br>|       14 |      4 | 诺基亚5800xm    |                   2310 |<br>|       18 |      4 | 夏新t5          |                   2532 |<br>+———-+——–+—————–+————————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> #随机生成5-15之间的数字;</p>
<p>mysql> select floor(rand()<em>10+5);<br>+——————–+<br>| floor(rand()</em>10+5) |<br>+——————–+<br>|                  7 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select floor(rand()<em>10+5);<br>+——————–+<br>| floor(rand()</em>10+5) |<br>+——————–+<br>|                 13 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select floor(rand()<em>10+5);<br>+——————–+<br>| floor(rand()</em>10+5) |<br>+——————–+<br>|                  8 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select floor(rand()<em>10+5);<br>+——————–+<br>| floor(rand()</em>10+5) |<br>+——————–+<br>|                  9 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select floor(rand()<em>10+5);<br>+——————–+<br>| floor(rand()</em>10+5) |<br>+——————–+<br>|                  8 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select floor(rand()<em>10+5);<br>+——————–+<br>| floor(rand()</em>10+5) |<br>+——————–+<br>|                  5 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select floor(rand()<em>10+5);<br>+——————–+<br>| floor(rand()</em>10+5) |<br>+——————–+<br>|                  8 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select floor(rand()<em>10+5);<br>+——————–+<br>| floor(rand()</em>10+5) |<br>+——————–+<br>|                 11 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #ceiling 向上取整<br>mysql> #group concat 取出4栏目下goods_id拼接<br>mysql> select group_concat(goods_id) from goods where cat_id=4;<br>+————————+<br>| group_concat(goods_id) |<br>+————————+<br>| 1,14,18                |<br>+————————+<br>1 row in set (0.08 sec)</p>
<p>mysql> #计算字符的ascil码<br>mysql> select ascil(a);<br>ERROR 1305 (42000): FUNCTION test01.ascil does not exist<br>mysql> select ascii(a);<br>ERROR 1054 (42S22): Unknown column ‘a’ in ‘field list’<br>mysql> select ascii(‘a’);<br>+————+<br>| ascii(‘a’) |<br>+————+<br>|         97 |<br>+————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select length(“中华”);<br>+——————+<br>| length(“中华”)   |<br>+——————+<br>|                6 |<br>+——————+<br>1 row in set (0.06 sec)</p>
<p>mysql> #length 计算的字节场地<br>mysql> #length 计算的字符数<br>mysql> #char_length 计算的字符数<br>mysql> select char_length(‘中国’);<br>+———————–+<br>| char_length(‘中国’)   |<br>+———————–+<br>|                     2 |<br>+———————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #反转字符串<br>mysql> select reverse(‘zh’)<br>    -> ;<br>+—————+<br>| reverse(‘zh’) |<br>+—————+<br>| hz            |<br>+—————+<br>1 row in set (0.05 sec)</p>
<p>mysql> select reverse(‘zh中国’);<br>+———————+<br>| reverse(‘zh中国’)   |<br>+———————+<br>| 国中hz              |<br>+———————+<br>1 row in set (0.00 sec)</p>
<p>mysql> #position<br>mysql> select position(‘@’ in ‘abc@sina.com’);<br>+———————————+<br>| position(‘@’ in ‘abc@sina.com’) |<br>+———————————+<br>|                               4 |<br>+———————————+<br>1 row in set (0.05 sec)</p>
<p>mysql> select right(‘abc@sina.com’ ,2);<br>+————————–+<br>| right(‘abc@sina.com’ ,2) |<br>+————————–+<br>| om                       |<br>+————————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #某网站有email字段,有邮件地址,想调查163.qq.com的u邮箱的比例<br>mysql> show tables;<br>+——————+<br>| Tables_in_test01 |<br>+——————+<br>| a                |<br>| b                |<br>| boy              |<br>| category         |<br>| girl             |<br>| goods            |<br>| m                |<br>| mian             |<br>| result           |<br>| t                |<br>| user             |<br>+——————+<br>11 rows in set (0.01 sec)</p>
<p>mysql> #查询邮箱后缀,<br>mysql> create table email(uname char,email char);<br>Query OK, 0 rows affected (1.76 sec)</p>
<p>mysql> desc email;<br>+——-+———+——+—–+———+——-+<br>| Field | Type    | Null | Key | Default | Extra |<br>+——-+———+——+—–+———+——-+<br>| uname | char(1) | YES  |     | NULL    |       |<br>| email | char(1) | YES  |     | NULL    |       |<br>+——-+———+——+—–+———+——-+<br>2 rows in set (0.09 sec)</p>
<p>mysql> alter table email modify column uname char(50) ;<br>Query OK, 0 rows affected (1.96 sec)<br>Records: 0  Duplicates: 0  Warnings: 0</p>
<p>mysql> alter table email modify column email char(50) ;<br>Query OK, 0 rows affected (1.34 sec)<br>Records: 0  Duplicates: 0  Warnings: 0</p>
<p>mysql> desc eamil;<br>ERROR 1146 (42S02): Table ‘test01.eamil’ doesn’t exist<br>mysql> desc email;<br>+——-+———-+——+—–+———+——-+<br>| Field | Type     | Null | Key | Default | Extra |<br>+——-+———-+——+—–+———+——-+<br>| uname | char(50) | YES  |     | NULL    |       |<br>| email | char(50) | YES  |     | NULL    |       |<br>+——-+———-+——+—–+———+——-+<br>2 rows in set (0.00 sec)</p>
<p>mysql> insert into email values(‘zhangsan’,‘zhan@163.com’),(‘lilie’,‘li@qq.com’),(‘hanmeimei’,‘han@126.com’);<br>Query OK, 3 rows affected (0.28 sec)<br>Records: 3  Duplicates: 0  Warnings: 0</p>
<p>mysql> select * from email;<br>+———–+————–+<br>| uname     | email        |<br>+———–+————–+<br>| zhangsan  | <a href="mailto:zhan@163.com">zhan@163.com</a> |<br>| lilie     | <a href="mailto:li@qq.com">li@qq.com</a>    |<br>| hanmeimei | <a href="mailto:han@126.com">han@126.com</a>  |<br>+———–+————–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select uname ,position(‘@’ in email) from email;<br>+———–+————————+<br>| uname     | position(‘@’ in email) |<br>+———–+————————+<br>| zhangsan  |                      5 |<br>| lilie     |                      3 |<br>| hanmeimei |                      4 |<br>+———–+————————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select uname ,right(email,position(‘@’ in email)) from email;<br>+———–+————————————-+<br>| uname     | right(email,position(‘@’ in email)) |<br>+———–+————————————-+<br>| zhangsan  | 3.com                               |<br>| lilie     | com                                 |<br>| hanmeimei | .com                                |<br>+———–+————————————-+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select uname ,right(email,char_length(email)-position(‘@’ in email)) from email;<br>+———–+——————————————————–+<br>| uname     | right(email,char_length(email)-position(‘@’ in email)) |<br>+———–+——————————————————–+<br>| zhangsan  | 163.com                                                |<br>| lilie     | qq.com                                                 |<br>| hanmeimei | 126.com                                                |<br>+———–+——————————————————–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select uname ,right(email,length(email)-position(‘@’ in email)) from email;<br>+———–+—————————————————+<br>| uname     | right(email,length(email)-position(‘@’ in email)) |<br>+———–+—————————————————+<br>| zhangsan  | 163.com                                           |<br>| lilie     | qq.com                                            |<br>| hanmeimei | 126.com                                           |<br>+———–+—————————————————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> #截取邮箱<br>mysql> #截取邮箱后半部分;<br>mysql> select uname ,right(email,length(email)-position(‘@’ in email)) from email;<br>+———–+—————————————————+<br>| uname     | right(email,length(email)-position(‘@’ in email)) |<br>+———–+—————————————————+<br>| zhangsan  | 163.com                                           |<br>| lilie     | qq.com                                            |<br>| hanmeimei | 126.com                                           |<br>+———–+—————————————————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> #日期时间函数,取当前时间<br>mysql> select now;<br>ERROR 1054 (42S22): Unknown column ‘now’ in ‘field list’<br>mysql> select now();<br>+———————+<br>| now()               |<br>+———————+<br>| 2019-10-15 20:00:44 |<br>+———————+<br>1 row in set (0.05 sec)</p>
<p>mysql> select curdate();<br>+————+<br>| curdate()  |<br>+————+<br>| 2019-10-15 |<br>+————+<br>1 row in set (0.01 sec)</p>
<p>mysql> # now()返回datetime格式,curdate返回date格式<br>mysql> select curtime();<br>+———–+<br>| curtime() |<br>+———–+<br>| 20:02:19  |<br>+———–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #查看某一日是那一周的第几天<br>mysql> select dayofweek(‘2019-10-15’);<br>+————————-+<br>| dayofweek(‘2019-10-15’) |<br>+————————-+<br>|                       3 |<br>+————————-+<br>1 row in set (0.05 sec)</p>
<p>mysql> select week(‘2019-10-15’);<br>+——————–+<br>| week(‘2019-10-15’) |<br>+——————–+<br>|                 41 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select week(‘2019-12-30’);<br>+——————–+<br>| week(‘2019-12-30’) |<br>+——————–+<br>|                 52 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select week(curdate());<br>+—————–+<br>| week(curdate()) |<br>+—————–+<br>|              41 |<br>+—————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select week(‘2019-12-31’);<br>+——————–+<br>| week(‘2019-12-31’) |<br>+——————–+<br>|                 52 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #案例:name<br>mysql> # overtime 日期<br>mysql> # 5        2019-9-1<br>mysql> # 6        2019-9-2<br>mysql> # 3        2019-9-3<br>mysql> # 报表统计,按星期统计加班时间<br>mysql> create table jiaban(num int(10) ,time date);<br>Query OK, 0 rows affected (0.52 sec)</p>
<p>mysql> insert into jiaban values(3,”2019-9-1”),(4,’2019-9-2’),(5,”2019-9-3”),(6,’2019-9-10’),(19,’2019-9-18’);<br>Query OK, 5 rows affected (0.15 sec)<br>Records: 5  Duplicates: 0  Warnings: 0</p>
<p>mysql> select * from jiaban;<br>+——+————+<br>| num  | time       |<br>+——+————+<br>|    3 | 2019-09-01 |<br>|    4 | 2019-09-02 |<br>|    5 | 2019-09-03 |<br>|    6 | 2019-09-10 |<br>|   19 | 2019-09-18 |<br>+——+————+<br>5 rows in set (0.00 sec)</p>
<p>mysql> #按星期统计加班时间;<br>mysql> select sum(num), week(time) from jiaban ;<br>+———-+————+<br>| sum(num) | week(time) |<br>+———-+————+<br>|       37 |         35 |<br>+———-+————+<br>1 row in set (0.02 sec)</p>
<p>mysql> select sum(num), week(time) from jiaban group by week(time);<br>+———-+————+<br>| sum(num) | week(time) |<br>+———-+————+<br>|       12 |         35 |<br>|        6 |         36 |<br>|       19 |         37 |<br>+———-+————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select num, week(time) from jiaban group by week(time);<br>+——+————+<br>| num  | week(time) |<br>+——+————+<br>|    3 |         35 |<br>|    6 |         36 |<br>|   19 |         37 |<br>+——+————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select sum(num), week(time) from jiaban group by week(time);<br>+———-+————+<br>| sum(num) | week(time) |<br>+———-+————+<br>|       12 |         35 |<br>|        6 |         36 |<br>|       19 |         37 |<br>+———-+————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select *, week(time) from jiaban;<br>+——+————+————+<br>| num  | time       | week(time) |<br>+——+————+————+<br>|    3 | 2019-09-01 |         35 |<br>|    4 | 2019-09-02 |         35 |<br>|    5 | 2019-09-03 |         35 |<br>|    6 | 2019-09-10 |         36 |<br>|   19 | 2019-09-18 |         37 |<br>+——+————+————+<br>5 rows in set (0.00 sec)</p>
<p>mysql> #加密函数,码得<br>mysql> #md5加密函数;<br>mysql> select md5(‘1’);<br>+———————————-+<br>| md5(‘1’)                         |<br>+———————————-+<br>| c4ca4238a0b923820dcc509a6f75849b |<br>+———————————-+<br>1 row in set (0.07 sec)</p>
<p>mysql> select md5(‘1’);<br>+———————————-+<br>| md5(‘1’)                         |<br>+———————————-+<br>| c4ca4238a0b923820dcc509a6f75849b |<br>+———————————-+<br>1 row in set (0.00 sec)</p>
<p>mysql> #md5是不可逆的<br>mysql> #流程h控制函数<br>mysql> #case 变量<br>mysql> 2 when 值 then 语句；<br>    -> 3 when 值 then 语句；<br>    -> 4 else 语句；<br>    -> 5 end case；<br>    -> \c<br>mysql> #if(gender=0,’优先’,’等待’) as vip<br>mysql> ifnull<br>    -> \c<br>mysql> #ifnull的用法,判断第一个表达式是否为null 如果为null 返回第2 个表达式的值<br>mysql> #如果不为null 返回自身,即表达式1<br>mysql> select ifnull(‘’,a);<br>ERROR 1054 (42S22): Unknown column ‘a’ in ‘field list’<br>mysql> select ifnull(‘’,’a’);<br>+—————-+<br>| ifnull(‘’,’a’) |<br>+—————-+<br>|                |<br>+—————-+<br>1 row in set (0.00 sec)</p>
<p>mysql> select ifnull(null,’a’);<br>+——————+<br>| ifnull(null,’a’) |<br>+——————+<br>| a                |<br>+——————+<br>1 row in set (0.00 sec)</p>
<p>mysql> #系统调试函数<br>mysql><br>mysql><br>mysql> select user();<br>+—————-+<br>| user()         |<br>+—————-+<br>| root@localhost |<br>+—————-+<br>1 row in set (0.00 sec)</p>
<p>mysql> #user返回用户及主机,判断自己的身份<br>mysql> #database(),返回当前操作的数据库名<br>mysql> select database();<br>+————+<br>| database() |<br>+————+<br>| test01     |<br>+————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select version();<br>+———–+<br>| version() |<br>+———–+<br>| 8.0.12    |<br>+———–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #vension() 返回数据库的版本<br>mysql> #时间的h格式化,优先在业务逻辑上使用,<br>mysql> #总结: where 条件中,对某列使用了函数,由此列的索引不发挥作用<br>mysql> #视图 view<br>mysql> view 将查询表当作临时表使用,<br>    -> \c<br>mysql> # 查询每个栏目下商品的平均价格,并对平均价格取前三的栏目<br>mysql> select cat_id,avg(shop_price),count(goods_id) from goods group by cat_id;<br>+——–+—————–+—————–+<br>| cat_id | avg(shop_price) | count(goods_id) |<br>+——–+—————–+—————–+<br>|      4 |     2297.000000 |               3 |<br>|      8 |       75.333333 |               3 |<br>|     11 |       31.000000 |               2 |<br>|      3 |     1746.066667 |              15 |<br>|      2 |      823.330000 |               1 |<br>|      5 |     3700.000000 |               1 |<br>|     13 |       33.500000 |               2 |<br>|     15 |       70.000000 |               2 |<br>|     14 |       54.000000 |               2 |<br>+——–+—————–+—————–+<br>9 rows in set (0.10 sec)</p>
<p>mysql> select cat_id,avg(shop_price) as average,count(goods_id) from goods group by cat_id order by average desc limit 3 ;<br>+——–+————-+—————–+<br>| cat_id | average     | count(goods_id) |<br>+——–+————-+—————–+<br>|      5 | 3700.000000 |               1 |<br>|      4 | 2297.000000 |               3 |<br>|      3 | 1746.066667 |              15 |<br>+——–+————-+—————–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select cat_id,avg(shop_price) as average,count(goods_id) from goods group by cat_id order by average asc limit 3 ;<br>+——–+———–+—————–+<br>| cat_id | average   | count(goods_id) |<br>+——–+———–+—————–+<br>|     11 | 31.000000 |               2 |<br>|     13 | 33.500000 |               2 |<br>|     14 | 54.000000 |               2 |<br>+——–+———–+—————–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> #取平均价格由高到底第三到第5的栏目<br>mysql> select cat_id,avg(shop_price) as average,count(goods_id) from goods group by cat_id order by average asc  ;<br>+——–+————-+—————–+<br>| cat_id | average     | count(goods_id) |<br>+——–+————-+—————–+<br>|     11 |   31.000000 |               2 |<br>|     13 |   33.500000 |               2 |<br>|     14 |   54.000000 |               2 |<br>|     15 |   70.000000 |               2 |<br>|      8 |   75.333333 |               3 |<br>|      2 |  823.330000 |               1 |<br>|      3 | 1746.066667 |              15 |<br>|      4 | 2297.000000 |               3 |<br>|      5 | 3700.000000 |               1 |<br>+——–+————-+—————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select cat_id,avg(shop_price) as average,count(goods_id) from goods group by cat_id;<br>+——–+————-+—————–+<br>| cat_id | average     | count(goods_id) |<br>+——–+————-+—————–+<br>|      4 | 2297.000000 |               3 |<br>|      8 |   75.333333 |               3 |<br>|     11 |   31.000000 |               2 |<br>|      3 | 1746.066667 |              15 |<br>|      2 |  823.330000 |               1 |<br>|      5 | 3700.000000 |               1 |<br>|     13 |   33.500000 |               2 |<br>|     15 |   70.000000 |               2 |<br>|     14 |   54.000000 |               2 |<br>+——–+————-+—————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> # 将结果集设为a  a频繁用到,因此用到视图<br>mysql> # 表通过某种运算得到的影子<br>mysql> #如何创建视图,建视图的时候语法 create view 表名 as 查询语句;<br>mysql> create view state as select cat_id,avg(shop_price) as average,count(goods_id) from goods group by cat_id;<br>Query OK, 0 rows affected (0.27 sec)</p>
<p>mysql> show tables;<br>+——————+<br>| Tables_in_test01 |<br>+——————+<br>| a                |<br>| b                |<br>| boy              |<br>| category         |<br>| email            |<br>| girl             |<br>| goods            |<br>| jiaban           |<br>| m                |<br>| mian             |<br>| result           |<br>| state            |<br>| t                |<br>| user             |<br>+——————+<br>14 rows in set (0.01 sec)</p>
<p>mysql> #多了一张state表<br>mysql> select * from state;<br>+——–+————-+—————–+<br>| cat_id | average     | count(goods_id) |<br>+——–+————-+—————–+<br>|      4 | 2297.000000 |               3 |<br>|      8 |   75.333333 |               3 |<br>|     11 |   31.000000 |               2 |<br>|      3 | 1746.066667 |              15 |<br>|      2 |  823.330000 |               1 |<br>|      5 | 3700.000000 |               1 |<br>|     13 |   33.500000 |               2 |<br>|     15 |   70.000000 |               2 |<br>|     14 |   54.000000 |               2 |<br>+——–+————-+—————–+<br>9 rows in set (0.06 sec)</p>
<p>mysql> select * from state order by average limit 3;<br>+——–+———–+—————–+<br>| cat_id | average   | count(goods_id) |<br>+——–+———–+—————–+<br>|     11 | 31.000000 |               2 |<br>|     13 | 33.500000 |               2 |<br>|     14 | 54.000000 |               2 |<br>+——–+———–+—————–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> #视图一旦创建完毕,可以完全当表使用,<br>mysql> # 简化查询,复杂的统计,<br>mysql> #更清晰的权限控制<br>mysql> # 开放权限,但是不想开放密码字段,用视图<br>mysql> # 多表查询,分表时候用,将表头放在视图中;<br>mysql> #视图是表的影子,表与视图相互影响的关系<br>mysql> #表的数据变化,影响视图的变化,<br>mysql> #以此例,,此视图的数据不能更改,其数据来自shop_price的平均值<br>mysql> #视图是否能够增删改呢?<br>mysql> #某种情况下是可以删除的,11对应,即表的数据能够推出视图的数据,视图的数据能够推出表的数据<br>mysql> #删除视图即 drop table/view 表名/视图名<br>mysql> exit<br>mysql> show databases;<br>+——————–+<br>| Database           |<br>+——————–+<br>| bookstore          |<br>| clouddb01          |<br>| clouddb02          |<br>| clouddb03          |<br>| information_schema |<br>| mydb               |<br>| mysql              |<br>| performance_schema |<br>| shop               |<br>| ssm_crud           |<br>| struts             |<br>| student            |<br>| sys                |<br>| test               |<br>| test01             |<br>+——————–+<br>15 rows in set (0.18 sec)</p>
<p>mysql> use test01;<br>Database changed<br>mysql> #algorithm<br>mysql> # merge —合并查询语句<br>mysql> #tem<br>mysql> #temptable —临时表<br>mysql> #undefined –未定义,由系统判断<br>mysql> #建一张简单的查询视图,不同临时表,只用y条件合并<br>mysql> create view as select * from goods where shop_price>300;<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘as select * from goods where shop_price>300’ at line 1<br>mysql> create view v1  as  select * from goods where shop_price>300;<br>Query OK, 0 rows affected (0.52 sec)</p>
<p>mysql> #查询视图<br>mysql> select goods_id ,goods_name ,shop_price from v1 where shop_price<500;<br>+———-+—————+————+<br>| goods_id | goods_name    | shop_price |<br>+———-+—————+————+<br>|        8 | 飞利浦9@9v    |     399.00 |<br>+———-+—————+————+<br>1 row in set (0.01 sec)</p>
<p>mysql> #总的条件是>300 <500;<br>mysql> #这个简单的查询还建立临时表的话,开销有点大;<br>mysql> #这是我们可以指定algorithm为merge<br>mysql> create algorithm=merge view v2 as select * from goods where shop_price>300;<br>Query OK, 0 rows affected (0.21 sec)</p>
<p>mysql> select goods_id ,goods_name ,shop_price from v2 where shop_price<500;<br>+———-+—————+————+<br>| goods_id | goods_name    | shop_price |<br>+———-+—————+————+<br>|        8 | 飞利浦9@9v    |     399.00 |<br>+———-+—————+————+<br>1 row in set (0.00 sec)</p>
<p>mysql> #有的时候必须建临时表,<br>mysql> #比如,每个栏目的平均商品价格<br>mysql> #比如每个栏目下的最高d价格的商品<br>mysql> create algorithm=temptable view v3 as select goods_id,cat_id,goods_name from goods order by cat_id asc ,goods_id desc;<br>Query OK, 0 rows affected (0.21 sec)</p>
<p>mysql> select * from v3 group by cat_id;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       16 |      2 | 恒基伟业g101                           |<br>|       32 |      3 | 诺基亚n85                              |<br>|       18 |      4 | 夏新t5                                 |<br>|       23 |      5 | 诺基亚n96                              |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       28 |     15 | 联通50元充值卡                         |<br>+———-+——–+—————————————-+<br>9 rows in set (0.05 sec)</p>
<p>mysql> select * from v3;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       16 |      2 | 恒基伟业g101                           |<br>|       32 |      3 | 诺基亚n85                              |<br>|       31 |      3 | 摩托罗拉e8                             |<br>|       24 |      3 | p806                                   |<br>|       22 |      3 | 多普达touch hd                         |<br>|       21 |      3 | 金立 a30                               |<br>|       20 |      3 | 三星bc01                               |<br>|       19 |      3 | 三星sgh-f258                           |<br>|       17 |      3 | 夏新n7                                 |<br>|       15 |      3 | 摩托罗拉a810                           |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |<br>|       12 |      3 | 摩托罗拉a810                           |<br>|       11 |      3 | 索爱c702c                              |<br>|       10 |      3 | 索爱c702c                              |<br>|        9 |      3 | 诺基亚e66                              |<br>|        8 |      3 | 飞利浦9@9v                             |<br>|       18 |      4 | 夏新t5                                 |<br>|       14 |      4 | 诺基亚5800xm                           |<br>|        1 |      4 | kd876                                  |<br>|       23 |      5 | 诺基亚n96                              |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        4 |      8 | 诺基亚n85原装充电器                    |<br>|        3 |      8 | 诺基亚原装5800耳机                     |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       29 |     14 | 移动100元充值卡                        |<br>|       28 |     15 | 联通50元充值卡                         |<br>|       27 |     15 | 联通100元充值卡                        |<br>+———-+——–+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> drop view v3;<br>Query OK, 0 rows affected (0.27 sec)</p>
<p>mysql> create algorithm=temptable view v3 as select goods_id,cat_id,goods_name,shop_price from goods order by cat_id asc ,shop_price desc;<br>Query OK, 0 rows affected (0.31 sec)</p>
<p>mysql> slect * form v3 ;<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘slect * form v3’ at line 1<br>mysql> select * form v3 ;<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘form v3’ at line 1<br>mysql> select * from v3 ;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|        1 |      4 | kd876                                  |    1388.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select * from v3 group by cat_id;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>+———-+——–+—————————————-+————+<br>9 rows in set (0.03 sec)</p>
<p>mysql> #编码问题<br>mysql> #字符编码到字符集的映射<br>mysql> #gb2312,utf-8<br>mysql> #unicode 码表,—– utf-8 压缩文件的关系<br>mysql> #如何截取utf-8无乱码<br>mysql> #从头开始,取1个字节,<br>mysql> #通过位运算,计算连续的1的g个数<br>mysql> #如为0 截取1个<br>mysql> #如为n 则截取n个<br>mysql> gbk转为utf-8<br>    -> \c<br>mysql> #jbk<br>mysql> #jbk 转unicode 在转utf-8<br>mysql> #乱码是怎么形成,编码和解码不统一<br>mysql> #转码过程字节丢失<br>mysql> create table t(id int ,name varchar(50) not null default(“1244”));<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘(“1244”))’ at line 1<br>mysql> create table t(id int ,name varchar(50) not null default(1244));<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘(1244))’ at line 1<br>mysql> create table t(id int ,name varchar(50) not null default ‘1244’);<br>ERROR 1050 (42S01): Table ‘t’ already exists<br>mysql> create table tem(id int ,time datetime not null default now() );;<br>Query OK, 0 rows affected (0.95 sec)</p>
<p>ERROR:<br>No query specified</p>
<p>mysql> desc time;<br>ERROR 1146 (42S02): Table ‘test01.time’ doesn’t exist<br>mysql> desc tem;<br>+——-+———-+——+—–+——————-+——-+<br>| Field | Type     | Null | Key | Default           | Extra |<br>+——-+———-+——+—–+——————-+——-+<br>| id    | int(11)  | YES  |     | NULL              |       |<br>| time  | datetime | NO   |     | CURRENT_TIMESTAMP |       |<br>+——-+———-+——+—–+——————-+——-+<br>2 rows in set (0.13 sec)</p>
<p>mysql> drop tem;<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘tem’ at line 1<br>mysql> drop table tem;<br>Query OK, 0 rows affected (0.49 sec)</p>
<p>mysql> create table tem(id int(11) not null primary key ,name varchar(50) not null ,time datetime not null default now());<br>Query OK, 0 rows affected (0.39 sec)</p>
<p>mysql> insert into tem values(1,”lili”),(2,”韩梅梅”),(3,”笑话”),(4,”哈哈”);<br>ERROR 1136 (21S01): Column count doesn’t match value count at row 1<br>mysql> insert into tem values(1,”lili”,null),(2,”韩梅梅”,null),(3,”笑话”,null),(4,”哈哈”,null);<br>ERROR 1048 (23000): Column ‘time’ cannot be null<br>mysql> insert into tem(id,name) values(1,”lili”),(2,”韩梅梅”),(3,”笑话”),(4,”哈哈”);<br>Query OK, 4 rows affected (0.20 sec)<br>Records: 4  Duplicates: 0  Warnings: 0</p>
<p>mysql> select * from tem;<br>+—-+———–+———————+<br>| id | name      | time                |<br>+—-+———–+———————+<br>|  1 | lili      | 2019-10-16 19:45:54 |<br>|  2 | 韩梅梅    | 2019-10-16 19:45:54 |<br>|  3 | 笑话      | 2019-10-16 19:45:54 |<br>|  4 | 哈哈      | 2019-10-16 19:45:54 |<br>+—-+———–+———————+<br>4 rows in set (0.00 sec)</p>
<p>mysql> delete from tem order by id desc limit 2;<br>Query OK, 2 rows affected (0.33 sec)</p>
<p>mysql> select * from tem;<br>+—-+———–+———————+<br>| id | name      | time                |<br>+—-+———–+———————+<br>|  1 | lili      | 2019-10-16 19:45:54 |<br>|  2 | 韩梅梅    | 2019-10-16 19:45:54 |<br>+—-+———–+———————+<br>2 rows in set (0.00 sec)</p>
<p>mysql> select *,week(time) from tem;<br>+—-+———–+———————+————+<br>| id | name      | time                | week(time) |<br>+—-+———–+———————+————+<br>|  1 | lili      | 2019-10-16 19:45:54 |         41 |<br>|  2 | 韩梅梅    | 2019-10-16 19:45:54 |         41 |<br>+—-+———–+———————+————+<br>2 rows in set (0.01 sec)</p>
<p>mysql> #设置client 和connection的字符集<br>mysql> # set character_set_client=gbk;<br>mysql> # set character_set_connection=utf8<br>mysql> # set character_set_ressults=gbk;<br>mysql> # set character_set_results=gbk;<br>mysql> # 1366 字符编码问题<br>mysql> 大转小会丢失<br>    -> \c<br>mysql> #即 server> connection> client 编码范围<br>mysql> #client con results 都是hgbk<br>mysql> #client con results 都是gbk<br>mysql> #若三者都是gbk 则可以简写<br>mysql> # 即 set names gbk<br>mysql> #utf8中文截取无乱码<br>mysql> #存储引擎,<br>mysql> # innodb myisam  innodb支持事务,<br>mysql><br>mysql> #start transaction;<br>mysql> commit;<br>Query OK, 0 rows affected (0.00 sec)</p>
<p>mysql> #commit;<br>mysql> #rollback;<br>mysql> exit</p>
</body></html>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>/2020/10/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<html><head></head><body><p>有头节点的单链表的增删查</p>
<a id="more"></a>

<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 链表</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdlib.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>{</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">}LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LNode* <span class="title">initList</span><span class="params">()</span></span>{ <span class="comment">// 初始化</span></span><br><span class="line">	LNode *L = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	<span class="keyword">if</span>(L == <span class="literal">NULL</span>){</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	}	</span><br><span class="line">	L->next = <span class="literal">NULL</span>; <span class="comment">// 头节点没有数据</span></span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">}</span><br><span class="line"><span class="function">LNode* <span class="title">makeNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>{ <span class="comment">// 生成节点</span></span><br><span class="line">	LNode *Node = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	Node->next = <span class="literal">NULL</span>;</span><br><span class="line">	Node->data = data;</span><br><span class="line">	<span class="keyword">return</span> Node;</span><br><span class="line">}</span><br><span class="line"><span class="function">LNode * <span class="title">createList</span><span class="params">(struct LNode *L)</span></span>{ <span class="comment">// 创建单链表</span></span><br><span class="line">	<span class="keyword">int</span> a[] = {<span class="number">12</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">54</span>,<span class="number">6</span>,<span class="number">34</span>};</span><br><span class="line">	<span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">	LNode *tile = <span class="literal">NULL</span>;</span><br><span class="line">	LNode *head = <span class="literal">NULL</span>;</span><br><span class="line">	head = L;</span><br><span class="line">	<span class="keyword">for</span>(i =<span class="number">0</span>;i<=<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);i++){</span><br><span class="line">		LNode * temp = makeNode(a[i]);</span><br><span class="line">		<span class="keyword">if</span>(!head->next){</span><br><span class="line">			head->next = temp;</span><br><span class="line">			tile= temp;</span><br><span class="line">		}<span class="keyword">else</span>{</span><br><span class="line">			tile->next = temp;</span><br><span class="line">			tile = temp;</span><br><span class="line">		}</span><br><span class="line">		tile = temp;</span><br><span class="line">		tile->next = <span class="literal">NULL</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">	</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(LinkList L)</span></span>{ <span class="comment">// 打印链表</span></span><br><span class="line">	LNode *p = L->next;</span><br><span class="line">	<span class="keyword">while</span>(p->next != <span class="literal">NULL</span>){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%10d"</span>,p->data);</span><br><span class="line">		p = p->next;</span><br><span class="line">	} </span><br><span class="line">}</span><br><span class="line"><span class="function">LNode* <span class="title">search</span><span class="params">(struct LNode *L,<span class="keyword">int</span> data)</span></span>{ <span class="comment">// 查找</span></span><br><span class="line">	LNode *p = L->next;</span><br><span class="line">	<span class="keyword">while</span>(p->next != <span class="literal">NULL</span>){</span><br><span class="line">		<span class="keyword">if</span>(p && p->data == data){</span><br><span class="line">			<span class="keyword">return</span> p;</span><br><span class="line">		}<span class="keyword">else</span>{</span><br><span class="line">			p =p->next;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getListLength</span><span class="params">(LinkList L)</span></span>{ <span class="comment">// 计算链表的长度</span></span><br><span class="line">	<span class="keyword">int</span> length =<span class="number">0</span>,i;</span><br><span class="line">	LNode *p =L->next; </span><br><span class="line">	<span class="keyword">while</span>(p->next != <span class="literal">NULL</span>){</span><br><span class="line">		p = p->next;</span><br><span class="line">		length++; </span><br><span class="line">	} </span><br><span class="line">	<span class="keyword">return</span> length;</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertList</span><span class="params">(LinkList L,<span class="keyword">int</span> data,<span class="keyword">int</span> index)</span></span>{ <span class="comment">// 插入链表</span></span><br><span class="line">	LNode *p = L;</span><br><span class="line">	<span class="keyword">if</span>(index<<span class="number">0</span> || index >getListLength(L)){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"blunder\n"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">int</span> j =<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(p&& j<index){</span><br><span class="line">		p =p->next;</span><br><span class="line">		j++;</span><br><span class="line">	}</span><br><span class="line">	LNode *newNode = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	newNode->data = data;</span><br><span class="line">	newNode->next = <span class="literal">NULL</span>;</span><br><span class="line">	newNode->next = p->next;</span><br><span class="line">	p->next = newNode;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>   <span class="title">deleteList</span><span class="params">(LinkList L,<span class="keyword">int</span> data)</span></span>{　</span><br><span class="line">	LNode *p = L->next; <span class="comment">// p 要删除元素的指针 </span></span><br><span class="line">	LNode *temp = L->next; <span class="comment">//  删除元素的前一个位置 </span></span><br><span class="line">	<span class="keyword">int</span> length=<span class="number">0</span>;　　　　　　　</span><br><span class="line">	<span class="keyword">while</span>(p->next != <span class="literal">NULL</span>){　　　<span class="comment">// 查找元素位置</span></span><br><span class="line">		<span class="keyword">if</span>(p && p->data == data){</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		}<span class="keyword">else</span>{</span><br><span class="line">			p =p->next;</span><br><span class="line">			length++;</span><br><span class="line">		}</span><br><span class="line">	} </span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i<length<span class="number">-1</span>;i++){ <span class="comment">// 找到元素的前一个位置</span></span><br><span class="line">		temp = temp->next;</span><br><span class="line">	}</span><br><span class="line"><span class="comment">//	printf(" length %d\n",length);</span></span><br><span class="line"><span class="comment">//	printf("p 的位置 %d\n",p->data);</span></span><br><span class="line"><span class="comment">//	printf("q 的位置 %d\n",q->data);</span></span><br><span class="line"><span class="comment">//	printf("temp 的位置 %d\n",temp->data);</span></span><br><span class="line">	temp->next = p->next; <span class="comment">// 将此元素的前一个位置的指针指向此元素的后一个元素</span></span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	} </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	LNode *List;</span><br><span class="line">	List = initList();</span><br><span class="line">	List = createList(List); </span><br><span class="line">	printList(List);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"search %d\n"</span>,search(List,<span class="number">1</span>)->data);</span><br><span class="line">	printList(List);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	deleteList(List,<span class="number">34</span>);</span><br><span class="line">	deleteList(List,<span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	InsertList(List,<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"InsertList\n"</span>);</span><br><span class="line">	printList(List);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">// 链表: 适合很多次插入删除操作</span><br></pre></td></tr></tbody></table></figure>



</body></html>]]></content>
      <categories>
        <category>c</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发</title>
    <url>/2020/07/06/Android/Android/</url>
    <content><![CDATA[<html><head></head><body><pre><code>Even miracle take a moment 
Do what feels right to you</code></pre><h3 id="安卓开发功能"><a href="#安卓开发功能" class="headerlink" title="安卓开发功能"></a>安卓开发功能</h3><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">AlbumMainActivity(专辑主页面)，首先初始化页面，获取AlbumList，得到专辑id，onActivityResult用于页面传值。onResume和onPause调用友盟。</span><br></pre></td></tr></tbody></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">	<span class="comment">// NetHelper 解析，创建单例，用于调用，初始化检查设备在线的状态，如果是wifi，开始局域网扫描，扫描先shotdownNow()，然后通过广播地址（255.255.255.255）,通过定时执行0秒延时，隔3秒，执行线程池中执行发送信号（也就是url，DEVICE_DISCOVERY = "/discovery?param=xiaotingting&port=255.255.255.255";）线程执行sendBroadcast（数据，ip），通过DatagramPacket（就像通信的船），（DatagramSocket是两个港口），其中DatagramPacket会使用四个参数，字节，长度，广播地址（255...），端口号</span></span><br><span class="line">	<span class="comment">// 发送广播</span></span><br><span class="line">	        mSendSocket.setBroadcast(<span class="keyword">true</span>);</span><br><span class="line">            mSendSocket.setSoTimeout(<span class="number">5000</span>);</span><br><span class="line">            mSendSocket.send(sendPacket);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startVboxPoll</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (mPollExecutor != <span class="keyword">null</span> || mDeviceId == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> period = isSendLAN ? <span class="number">1</span> : <span class="number">3</span>; <span class="comment">//局域网1秒轮询，远程3秒轮询</span></span><br><span class="line">        mDateCheckOnline = <span class="keyword">new</span> Date();</span><br><span class="line">        mPollExecutor = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>);</span><br><span class="line">        mPollExecutor.scheduleAtFixedRate(<span class="keyword">this</span>::doPollRunnable, <span class="number">0</span>, period, TimeUnit.SECONDS);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"CheckResult"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDiscoverRunnable</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (isInWIFI && !isSendLAN) {</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送discovery命令</span></span><br><span class="line">            sendDeviceDiscovery();</span><br><span class="line">            <span class="comment">// 此方法用于轮询若是局域网，则1秒轮询，若是远程3秒执行轮询</span></span><br><span class="line">            startVboxPoll();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">        mPollExecutor = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>);</span><br><span class="line">        mPollExecutor.scheduleAtFixedRate(<span class="keyword">this</span>::doPollRunnable, <span class="number">0</span>, period, TimeUnit.SECONDS);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">long</span> userId)</span> </span>{</span><br><span class="line">        LogUtils.d(<span class="string">"NetHelper 初始化 userId:"</span> + userId);</span><br><span class="line">        <span class="keyword">if</span> (userId == <span class="number">0</span>) {</span><br><span class="line">            closeConnect();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (mLanBusiness == <span class="keyword">null</span>) mLanBusiness = <span class="keyword">new</span> LANBusiness();</span><br><span class="line">        <span class="keyword">if</span> (mNetDataHelper == <span class="keyword">null</span>) mNetDataHelper = <span class="keyword">new</span> NetDataHelper();</span><br><span class="line">        <span class="keyword">if</span> (mMQTTBusiness == <span class="keyword">null</span>) mMQTTBusiness = <span class="keyword">new</span> MQTTBusiness();</span><br><span class="line">        mDateRecData = <span class="keyword">null</span>;</span><br><span class="line">        mDateSendPoll = <span class="keyword">null</span>;</span><br><span class="line">        mDateCheckOnline = <span class="keyword">null</span>;</span><br><span class="line">        mNetDataHelper.init(userId);</span><br><span class="line">        mLanBusiness.startListen();</span><br><span class="line">        mMQTTBusiness.init(userId);</span><br><span class="line">        checkDeviceOnline();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置设备Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deviceId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeviceId</span><span class="params">(<span class="keyword">long</span> deviceId)</span> </span>{</span><br><span class="line">        mDeviceId = deviceId;</span><br><span class="line">        <span class="keyword">if</span> (mLanBusiness != <span class="keyword">null</span>) mLanBusiness.setDeviceId(deviceId);</span><br><span class="line">        <span class="keyword">if</span> (mMQTTBusiness != <span class="keyword">null</span>) mMQTTBusiness.setDeviceId(deviceId);</span><br><span class="line">        checkDeviceOnline();<span class="comment">//重新切换局域网设备发现</span></span><br><span class="line">        <span class="comment">// 切换设备的话需要重新链接</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	通过局域网的广播发送数据，同网段都能收到</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">play</span><br><span class="line"></span><br><span class="line"> 初始化</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVboxPoll</span><span class="params">(<span class="keyword">boolean</span> isVboxPoll)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.isVboxPoll = isVboxPoll;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isVboxPoll) {</span><br><span class="line">            startVboxPoll();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            stopVboxPoll();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//如果设备不是真待机的情况下就打开轮训开关</span></span><br><span class="line">    NetHelper.getInstance().setVboxPoll(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//处理子线程发送的信息</span></span><br><span class="line">    handleMessage() </span><br><span class="line">    <span class="comment">//其余是处理各种点击事件，但是真正的处理逻辑是在AppPlayControlManager里面</span></span><br><span class="line">    <span class="comment">//AppPlayControlManager用于处理真正的逻辑，创建单例，进度条监视器，播放监听，</span></span><br><span class="line"><span class="comment">// PlayManager.getInstance().setAppPlayState(state);设置播放状态为正常或者其他.</span></span><br><span class="line">    <span class="comment">// 初始化PhonePlayView()</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPhonePlayView</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 初始化界面信息</span></span><br><span class="line">        setAppPlayInfoAndUi(PlayManager.getInstance().getPhoneCurrentVoiceInfo());</span><br><span class="line">        <span class="comment">// 得到播放状态 播放状态可以分为normal playing，pause，error</span></span><br><span class="line">        setAppPlayStateAndUi(PlayManager.getInstance().getAppPlayState());</span><br><span class="line">        <span class="comment">// 得到播放顺序的模式</span></span><br><span class="line">        setAppPlayModeAndUi(PlayManager.getInstance().getPhonePlayMode());</span><br><span class="line">        <span class="comment">// 进度条</span></span><br><span class="line">        setAppUiPlayProgressUi(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//        initPhonePlayKeyView();</span></span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        playGifControlTop();</span><br><span class="line">        <span class="comment">//mPlayCoverTopGif.setImageDrawable(mGifDrawable);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(PlayManager.getInstance().getAppPlayState() == PlayData.APP_PLAY_STATE_PAUSE){</span><br><span class="line">            pauseGifControlTop();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="comment">// 其余为各种事件的处理</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="comment">//高斯模糊</span></span><br><span class="line"><span class="comment">//        Glide.with(mContext).load(voiceInfo.getCoverUrl()).apply(RequestOptions.bitmapTransform(new BlurTransformation(25,5))).into(new CustomTarget<Drawable>() {</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void onResourceReady(@NonNull Drawable resource, @Nullable Transition<? super Drawable> transition) {</span></span><br><span class="line"><span class="comment">//                Drawable drawable = resource.getCurrent();</span></span><br><span class="line"><span class="comment">//                drawable = DrawableCompat.wrap(drawable);</span></span><br><span class="line"><span class="comment">//                drawable.setColorFilter(Color.GRAY, PorterDuff.Mode.MULTIPLY);</span></span><br><span class="line"><span class="comment">//                mPlayMainLayout.setBackground(drawable);</span></span><br><span class="line"><span class="comment">//            }</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void onLoadCleared(@Nullable Drawable placeholder) {</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            }</span></span><br><span class="line"><span class="comment">//        });</span></span><br></pre></td></tr></tbody></table></figure>
<p>登陆接口采用jbush，采用rustful接口方式，对接后台比较方便，<br>绑定订阅到rxjava </p>
<p>rxjava的原理，被观察者产生一系列的事件，通过订阅者传递给观察者，观察者通过一些列的事件作出响应的模式（特点：链式调用）</p>
<p>Rxjava 的优雅实现</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe<Integer>() {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter<Integer> emitter)</span> </span>{</span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    }</span><br><span class="line">}).subscribe(<span class="keyword">new</span> Observer<Integer>() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>{</span><br><span class="line">        Log.e(<span class="string">"TAG"</span>,<span class="string">"onSubscribe"</span>+d);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull Integer integer)</span> </span>{</span><br><span class="line">        Log.e(<span class="string">"TAG"</span>,<span class="string">"onNext"</span>+integer);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable e)</span> </span>{</span><br><span class="line">        Log.e(<span class="string">"TAG"</span>,<span class="string">"onError"</span>+e);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>{</span><br><span class="line">        Log.e(<span class="string">"TAG"</span>,<span class="string">"onComplete"</span>);</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"><span class="comment">// 基本形式，被观察者.subscribe(观察者)，subscribe 有多个重载版本</span></span><br><span class="line"></span><br><span class="line">Disposable disposable <span class="comment">// 可切断观察者和被观察者的链接</span></span><br></pre></td></tr></tbody></table></figure>
<img src="/2020/07/06/Android/Android/Rxjava1.png">

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Observer<Integer>() {</span><br><span class="line">            <span class="keyword">private</span> Disposable disposable;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>{</span><br><span class="line">                Log.e(<span class="string">"TAG"</span>,<span class="string">"onSubscribe"</span>+d);</span><br><span class="line">                <span class="keyword">this</span>.disposable = d;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull Integer integer)</span> </span>{</span><br><span class="line">                Log.e(<span class="string">"TAG"</span>,<span class="string">"onNext"</span>+integer);</span><br><span class="line">                <span class="keyword">if</span> (integer == <span class="number">2</span>){</span><br><span class="line">                    disposable.dispose();</span><br><span class="line">                    Log.e(<span class="string">"TAG"</span>,<span class="string">"断开链接"</span>);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">            }</span><br></pre></td></tr></tbody></table></figure>
<img src="/2020/07/06/Android/Android/Rxjava2.png">

<h4 id="Rxjava创建操作符"><a href="#Rxjava创建操作符" class="headerlink" title="Rxjava创建操作符"></a>Rxjava创建操作符</h4><p>Rxjava 快速创建observable<code>just()</code>快速创建，最多发送10个参数</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>).subscribe(<span class="keyword">new</span> Observer<Integer>(){</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    ...</span><br></pre></td></tr></tbody></table></figure>

<p>​    <code>fromArray()</code>快速创建一个被观察者对象，发送10个以上事件数组形式</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Integer[] items = {<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>};</span><br><span class="line">Observable.fromArray(items).subscribe(...)</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">额外方法：</span><br><span class="line"></span><br><span class="line">![image-20200814151328887](/Users/philxling/Library/Application Support/typora-user-images/image-20200814151328887.png)</span><br><span class="line"></span><br><span class="line">延迟创建(经过x秒后，自动执行某操作或周期行任务)</span><br><span class="line"></span><br><span class="line">```defer```(直到有观察者时，才动态创建被观察者&发送事件)</span><br><span class="line"></span><br><span class="line">```timer``` 延迟后发送一个事件</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">        Observable.timer(2, TimeUnit.SECONDS).subscribe(new Observer<Long>() {</span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(@NonNull Disposable d) {</span><br><span class="line">                </span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(@NonNull Long aLong) {</span><br><span class="line"></span><br><span class="line">            }</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">//interval(第一次延迟时间，间隔时间数字，时间单位)</span><br><span class="line">Observable.interval(3,1,TimeUnit.SECONDS).subscribe(...)</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">// 参数1 事件序列起始点没，参数2 事件数量，参数3 第一次事件延迟发送时间，参数4 时间间隔，参数5 时间单位</span><br><span class="line">Observable.interval(3,10,2,1,TimeUnit.SECONDS).subscribe(...)</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">/**</span><br><span class="line">* 1 起始点</span><br><span class="line">* 2 事件数量</span><br><span class="line">*/</span><br><span class="line">Observable.range(3,10).subscribe(...)</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plain"><figcaption><span>支持long数据类型</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">Rxjava + Retrofit 轮询发送请求</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">implementation 'io.reactivex.rxjava3:rxjava:3.0.4'</span><br><span class="line">implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'</span><br><span class="line"></span><br><span class="line">    // Android 支持 Retrofit</span><br><span class="line">implementation'com.squareup.retrofit2:retrofit:2.1.0'</span><br><span class="line"></span><br><span class="line">    // 支持Gson解析</span><br><span class="line">implementation 'com.squareup.retrofit2:converter-gson:2.1.0'</span><br><span class="line"></span><br><span class="line">implementation 'com.squareup.retrofit2:adapter-rxjava3:2.9.0'</span><br><span class="line">// 添加Rxjava+Retrofit+adapter</span><br></pre></td></tr></tbody></table></figure>

<p>创建请求接口</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GetRequest_Interface</span> </span>{</span><br><span class="line">  <span class="meta">@GET</span>(<span class="string">"ajax.php?a=fy&f=auto&t=auto&w=hei%20world"</span>)</span><br><span class="line">  <span class="function">Observable<Translation> <span class="title">getCall</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 会自动封装url</span></span><br><span class="line">提供model</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Translation</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> content content;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">content</span></span>{</span><br><span class="line">      <span class="keyword">private</span> String from;</span><br><span class="line">      <span class="keyword">private</span> String to;</span><br><span class="line">      <span class="keyword">private</span> String vendor;</span><br><span class="line">      <span class="keyword">private</span> String out;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">int</span> errNo;     </span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>{</span><br><span class="line">      Log.e(<span class="string">"Rxjava"</span>,content.out);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"><span class="comment">// 执行请求 2 秒后执行吗，每隔一秒执行请求</span></span><br><span class="line">Observable.interval(<span class="number">2</span>,<span class="number">1</span>,TimeUnit.SECONDS).doOnNext(<span class="keyword">new</span> Consumer<Long>() {</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">    Log.e(<span class="string">"TAG"</span>,<span class="string">"第"</span> + aLong + <span class="string">"次轮询"</span>);</span><br><span class="line"></span><br><span class="line">    Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder().baseUrl(<span class="string">"https://fy.iciba.com/"</span>).addConverterFactory(GsonConverterFactory.create()).addCallAdapterFactory(RxJava3CallAdapterFactory.create()).build();</span><br><span class="line">    <span class="comment">// 创建网络请求接口</span></span><br><span class="line">    GetRequest_Interface request_interface = retrofit.create(GetRequest_Interface<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 封装</span></span><br><span class="line">    Observable<Translation> observable = request_interface.getCall();</span><br><span class="line">    <span class="comment">// 先在io线程执行，在mainThread处理结果</span></span><br><span class="line">    observable.subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(<span class="keyword">new</span> Observer<Translation>() {</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>{</span><br><span class="line"></span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull Translation translation)</span> </span>{</span><br><span class="line">        translation.show();</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable e)</span> </span>{</span><br><span class="line">        Log.e(<span class="string">"TAG"</span>,<span class="string">"请求失败"</span>+e);</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">      }</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line">}).subscribe(<span class="keyword">new</span> Observer<Long>() {</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>{</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull Long aLong)</span> </span>{</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable e)</span> </span>{</span><br><span class="line">    Log.e(<span class="string">"error"</span>,<span class="string">"处理error"</span>+e);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/944365-71eb569b296c1f18.png" alt></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">![](https://upload-images.jianshu.io/upload_images/944365-a6f852c071db2f15.png)</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">// 采用RxJava基于事件流的链式操作</span><br><span class="line">        Observable.create(new ObservableOnSubscribe<Integer>() {</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {</span><br><span class="line">                emitter.onNext(1);</span><br><span class="line">                emitter.onNext(2);</span><br><span class="line">                emitter.onNext(3);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            // 采用flatMap（）变换操作符</span><br><span class="line">        }).flatMap(new Function<Integer, ObservableSource<String>>() {</span><br><span class="line">            @Override</span><br><span class="line">            public ObservableSource<String> apply(Integer integer) throws Exception {</span><br><span class="line">                final List<String> list = new ArrayList<>();</span><br><span class="line">                for (int i = 0; i < 3; i++) {</span><br><span class="line">                    list.add("我是事件 " + integer + "拆分后的子事件" + i);</span><br><span class="line">                    // 通过flatMap中将被观察者生产的事件序列先进行拆分，再将每个事件转换为一个新的发送三个String事件</span><br><span class="line">                    // 最终合并，再发送给被观察者</span><br><span class="line">                }</span><br><span class="line">                return Observable.fromIterable(list);</span><br><span class="line">            }</span><br><span class="line">        }).subscribe(new Consumer<String>() {</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(String s) throws Exception {</span><br><span class="line">                Log.d(TAG, s);</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">![](https://upload-images.jianshu.io/upload_images/944365-f4340f283e5a954d.png)</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">.concatMap(new Function<Integer, ObservableSource<String>>() {</span><br><span class="line">            @Override</span><br><span class="line">            public ObservableSource<String> apply(Integer integer) throws Exception {</span><br><span class="line">                final List<String> list = new ArrayList<>();</span><br><span class="line">                for (int i = 0; i < 3; i++) {</span><br><span class="line">                    list.add("我是事件 " + integer + "拆分后的子事件" + i);</span><br><span class="line">                    // 通过concatMap中将被观察者生产的事件序列先进行拆分，再将每个事件转换为一个新的发送三个String事件</span><br><span class="line">                    // 最终合并，再发送给被观察者</span><br><span class="line">                }</span><br><span class="line">                return Observable.fromIterable(list);</span><br><span class="line">            }</span><br><span class="line">        }).</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">![](https://upload-images.jianshu.io/upload_images/944365-5278a339e4337494.png)</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">        Observable.just(1,2,3,4,5).buffer(3,1).subscribe(new Observer<List<Integer>>() {</span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(@NonNull Disposable d) {</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(@NonNull List<Integer> integers) {</span><br><span class="line">                Log.e("TAG","buffer"+integers);</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(@NonNull Throwable e) {</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() {</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/07/06/Android/Android/philxling/blog/source/_posts/Android/image-20200817110844146.png" alt="image-20200817110844146"></p>
<p>原理：一次接收3个事件，并且步长为一，所以每次指针向后移动一个。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/944365-33a49ffd2ec60794.png" alt></p>
<p><img src="https://upload-images.jianshu.io/upload_images/944365-dc0a7df673324e21.png" alt></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//组合多个观察者</span></span><br><span class="line">concat()/concatArray()<span class="comment">// 组合多个Observable对象 串行发送，concat组合被观察者数量<=4,而concatArray()则可>4</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        Observable.concat(Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">                           Observable.just(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">                           Observable.just(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>),</span><br><span class="line">                           Observable.just(<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>))</span><br><span class="line">          <span class="comment">// 注：串行执行</span></span><br><span class="line">        Observable.concatArray(Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">                           Observable.just(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">                           Observable.just(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>),</span><br><span class="line">                           Observable.just(<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>),</span><br><span class="line">                           Observable.just(<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>))</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// marge</span></span><br><span class="line">  merge()<span class="comment">// 数量< = 4</span></span><br><span class="line">  mergeArray() <span class="comment">//数量>4 组合被观察者并行执行</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// merge（）：组合多个被观察者（＜4个）一起发送数据</span></span><br><span class="line">        <span class="comment">// 注：合并后按照时间线并行执行</span></span><br><span class="line">        Observable.merge(</span><br><span class="line">                Observable.intervalRange(<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS), <span class="comment">// 从0开始发送、共发送3个数据、第1次事件延迟发送时间 = 1s、间隔时间 = 1s</span></span><br><span class="line">                Observable.intervalRange(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS)) <span class="comment">// 从2开始发送、共发送3个数据、第1次事件延迟发送时间 = 1s、间隔时间 = 1s</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plain"><figcaption><span>mergeDelayError()```</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"> ```java</span><br><span class="line">// 如果第一个事件发生error则会在后面的事发送完事件后再继续发送。</span><br><span class="line">Observable.concatArrayDelayError(</span><br><span class="line">                Observable.create(new ObservableOnSubscribe<Integer>() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {</span><br><span class="line"></span><br><span class="line">                        emitter.onNext(1);</span><br><span class="line">                        emitter.onNext(2);</span><br><span class="line">                        emitter.onNext(3);</span><br><span class="line">                        emitter.onError(new NullPointerException()); // 发送Error事件，因为使用了concatDelayError，所以第2个Observable将会发送事件，等发送完毕后，再发送错误事件</span><br><span class="line">                        emitter.onComplete();</span><br><span class="line">                    }</span><br><span class="line">                }),</span><br><span class="line">                Observable.just(4, 5, 6))</span><br></pre></td></tr></tbody></table></figure>

<p>Zip()合并多个事件</p>
<img src="https://upload-images.jianshu.io/upload_images/944365-3fa4b1fd4f561820.png" style="zoom:67%;">

<p>组合方式严格按照原先事件序列，进行对位合并，最终合并的事件数量等于多个被观察者中数量最少的数量。</p>
<p><img src="/2020/07/06/Android/Android/philxling/blog/source/_posts/Android/image-20200817121034116.png" alt="image-20200817121034116"></p>
<p>在rxjava3中，不会发送没有合并的事件。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Observable.zip(Observable.create(<span class="keyword">new</span> ObservableOnSubscribe<Integer>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter<Integer> emitter)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">                emitter.onNext(<span class="number">1</span>);</span><br><span class="line">                emitter.onNext(<span class="number">2</span>);</span><br><span class="line">                emitter.onNext(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }), Observable.create(<span class="keyword">new</span> ObservableOnSubscribe<String>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter<String> emitter)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">                emitter.onNext(<span class="string">"A"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                emitter.onNext(<span class="string">"B"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                emitter.onNext(<span class="string">"C"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                emitter.onNext(<span class="string">"D"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                emitter.onComplete();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }).subscribeOn(Schedulers.newThread()), <span class="keyword">new</span> BiFunction<Integer, String, String>() {</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Integer integer, String s)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">                <span class="keyword">return</span> integer+s;</span><br><span class="line">            }</span><br><span class="line">        }).subscribe(<span class="keyword">new</span> Consumer<String>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">                Log.e(<span class="string">"TAG"</span>,s);</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">```combineLatestDelayError（）```错误处理</span><br><span class="line"></span><br><span class="line">```reduce()```把被观察者发送的事件聚合成一个事件，聚合的逻辑自己写</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">        // reduce()</span><br><span class="line">        Observable.just(1,2,3,4).reduce(new BiFunction<Integer, Integer, Integer>() {</span><br><span class="line">            @Override</span><br><span class="line">            public Integer apply(Integer integer, Integer integer2) throws Throwable {</span><br><span class="line">                return integer * integer2;</span><br><span class="line">            }</span><br><span class="line">        }).subscribe(new Consumer<Integer>() {</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer integer) throws Throwable {</span><br><span class="line">                Log.e("TAG","reduce"+"------------"+integer);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">// E/TAG: reduce------------24</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">collect()  <span class="comment">//事件收集到一个数据结构中</span></span><br><span class="line"></span><br><span class="line">startWith() <span class="comment">//  发送事件前追加单个数据</span></span><br><span class="line"></span><br><span class="line">startWithArray() <span class="comment">// 追加多个数据</span></span><br><span class="line"></span><br><span class="line">count() <span class="comment">// 统计被观察者发送事件的数量</span></span><br></pre></td></tr></tbody></table></figure>

<p>常见的合并/组合操作符</p>
<p><img src="https://upload-images.jianshu.io/upload_images/944365-214478680237ffb8.png" alt></p>
<p>例：获取数据，若缓存中有则取缓存，否则取磁盘，否则在请求网络获取数据。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">String memoryCache = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">String diskCache = <span class="string">"磁盘缓存"</span>;</span><br><span class="line"></span><br><span class="line">Observable memory = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe<String>() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter<String> emitter)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        <span class="keyword">if</span>(memoryCache != <span class="keyword">null</span>){</span><br><span class="line">            emitter.onNext(memoryCache);</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            emitter.onComplete();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">Observable disk = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe<String>() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter<String> emitter)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        <span class="keyword">if</span>(diskCache != <span class="keyword">null</span>){</span><br><span class="line">            emitter.onNext(diskCache);</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            emitter.onComplete();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">Observable network = Observable.just(<span class="string">"从网络获取"</span>);</span><br><span class="line"></span><br><span class="line">Observable.concat(memory,disk,network).firstElement().subscribe(<span class="keyword">new</span> Consumer<String>() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        Log.e(<span class="string">"TAG"</span>,s);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<p>网络获取多个数据进行合并输出</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 创建retrofit</span></span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder().baseUrl(<span class="string">"https://fy.iciba.com/"</span>).addConverterFactory(GsonConverterFactory.create()).addCallAdapterFactory(RxJava3CallAdapterFactory.create()).build();</span><br><span class="line"><span class="comment">// 请求接口</span></span><br><span class="line">        GetRequest_Interface getRequest_interface = retrofit.create(GetRequest_Interface<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 新建线程调用</span></span><br><span class="line">        Observable<Translation>  observable = getRequest_interface.getCall().subscribeOn(Schedulers.io());</span><br><span class="line">        Observable<Translation1>  observable1 = getRequest_interface.getCall_2().subscribeOn(Schedulers.io());</span><br><span class="line"><span class="comment">// 合并输出</span></span><br><span class="line">        Observable.zip(observable1, observable, <span class="keyword">new</span> BiFunction<Translation1, Translation, String>() {</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Translation1 translation1, Translation translation)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">                <span class="keyword">return</span> translation1.show()+translation.show();</span><br><span class="line">            }</span><br><span class="line">        }).subscribe(<span class="keyword">new</span> Consumer<String>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">                Log.e(<span class="string">"TAG"</span>, <span class="string">"最终返回的数据"</span> + s);</span><br><span class="line">            }</span><br><span class="line">        }, <span class="keyword">new</span> Consumer<Throwable>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">                Log.e(<span class="string">"TAG"</span>,<span class="string">"登陆失败"</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/07/06/Android/Android/philxling/blog/source/_posts/Android/image-20200817171213846.png" alt="image-20200817171213846"></p>
<p> 利用<code>conbineLatest()</code>进行空值判断：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 步骤1：设置控件变量 & 绑定</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">EditText name,age,job;</span><br><span class="line">Button list;</span><br><span class="line"></span><br><span class="line">name = (EditText) findViewById(R.id.name);</span><br><span class="line">age = (EditText) findViewById(R.id.age);</span><br><span class="line">job = (EditText) findViewById(R.id.job);</span><br><span class="line">list = (Button) findViewById(R.id.list);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 步骤2：为每个EditText设置被观察者，用于发送监听事件</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> * 1. 此处采用了RxBinding：RxTextView.textChanges(name) = 对对控件数据变更进行监听（功能类似TextWatcher），需要引入依赖：compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'</span></span><br><span class="line"><span class="comment"> * 2. 传入EditText控件，点击任1个EditText撰写时，都会发送数据事件 = Function3（）的返回值（下面会详细说明）</span></span><br><span class="line"><span class="comment"> * 3. 采用skip(1)原因：跳过 一开始EditText无任何输入时的空值</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">Observable<CharSequence> nameObservable = RxTextView.textChanges(name).skip(<span class="number">1</span>);</span><br><span class="line">Observable<CharSequence> ageObservable = RxTextView.textChanges(age).skip(<span class="number">1</span>);</span><br><span class="line">Observable<CharSequence> jobObservable = RxTextView.textChanges(job).skip(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 步骤3：通过combineLatest（）合并事件 & 联合判断</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">Observable.combineLatest(nameObservable,ageObservable,jobObservable,<span class="keyword">new</span> Function3<CharSequence, CharSequence, CharSequence,Boolean>() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">apply</span><span class="params">(@NonNull CharSequence charSequence, @NonNull CharSequence charSequence2, @NonNull CharSequence charSequence3)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 步骤4：规定表单信息输入不能为空</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        <span class="comment">// 1. 姓名信息</span></span><br><span class="line">        <span class="keyword">boolean</span> isUserNameValid = !TextUtils.isEmpty(name.getText()) ;</span><br><span class="line">        <span class="comment">// 除了设置为空，也可设置长度限制</span></span><br><span class="line">        <span class="comment">// boolean isUserNameValid = !TextUtils.isEmpty(name.getText()) && (name.getText().toString().length() > 2 && name.getText().toString().length() < 9);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 年龄信息</span></span><br><span class="line">        <span class="keyword">boolean</span> isUserAgeValid = !TextUtils.isEmpty(age.getText());</span><br><span class="line">        <span class="comment">// 3. 职业信息</span></span><br><span class="line">        <span class="keyword">boolean</span> isUserJobValid = !TextUtils.isEmpty(job.getText()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 步骤5：返回信息 = 联合判断，即3个信息同时已填写，"提交按钮"才可点击</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        <span class="keyword">return</span> isUserNameValid && isUserAgeValid && isUserJobValid;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">        }).subscribe(<span class="keyword">new</span> Consumer<Boolean>() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Boolean s)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 步骤6：返回结果 & 设置按钮可点击样式</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        Log.e(TAG, <span class="string">"提交按钮是否可点击： "</span>+s);</span><br><span class="line">        list.setEnabled(s);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<p>Rxjava 线程工作原理</p>
<p><img src="https://upload-images.jianshu.io/upload_images/944365-3997d7540acda975.png" alt></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>含义</th>
<th>应用</th>
</tr>
</thead>
<tbody><tr>
<td>Schedulers.immediate()</td>
<td>当前线程=不指定线程</td>
<td>默认</td>
</tr>
<tr>
<td>AndroidSchedulers.mainThread()</td>
<td>Android主线程</td>
<td>main</td>
</tr>
<tr>
<td>Schedulers.newThread()</td>
<td>常规新线程</td>
<td>耗时的操作</td>
</tr>
<tr>
<td>Schedulers.io()</td>
<td>io操作线程</td>
<td>网络请求，读写文件等io密集型操作</td>
</tr>
<tr>
<td>Schedulers.compution()</td>
<td>cpu计算线程</td>
<td>大量计算</td>
</tr>
</tbody></table>
<p>使用：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Observable.subscribeOn()指定</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 整体方法调用顺序：观察者.onSubscribe（）> 被观察者.subscribe（）> 观察者.doOnNext（）>观察者.onNext（）>观察者.onComplete() </span></span><br><span class="line"><span class="comment">// 2. 观察者.onSubscribe（）固定在主线程进行</span></span><br></pre></td></tr></tbody></table></figure>



</body></html>]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>UML类图</title>
    <url>/2020/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML%E7%B1%BB%E5%9B%BE/</url>
    <content><![CDATA[<html><head></head><body><p>UML类图用来表示类之间的关系: 采用starUML软件,下载安装,安装node.js,配置环境变量,配置 npm的镜像:<code>npm config set registry https://registry.npm.taobao.org</code>安装asar,<code>npm install -g asar</code>解压程序目录下的resources的app.asar,需要管理员权限<code>copy app.asar app.asar.bak;mkdir TMP; asar extract app.asar TMP;cd TMP/src/engin;修改license-manager.js文件;注释掉UnregisteredDialog.showDialog();修改setStatus(this,true);打包替换app.asar;asar pack TMP app.asar;破解成功</code></p>
<a id="more"></a>
<p><img src="/2020/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML%E7%B1%BB%E5%9B%BE/image-20200624174307086.png" alt="image-20200624174307086"></p>
<p><img src="/2020/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML%E7%B1%BB%E5%9B%BE/image-20200624174510124.png" alt="image-20200624174510124"></p>
<p>访问权限: + 表示public; - 表示 private; # 表示 protected; ~ 表示package 下划线表示static,斜体表示abstract; : 表示变量类型或方法的返回值;= 表示默认值.</p>
<p>接口: </p>
<p><img src="/2020/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML%E7%B1%BB%E5%9B%BE/image-20200624175352787.png" alt="image-20200624175352787"></p>
<p>关系:</p>
<p><img src="/2020/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML%E7%B1%BB%E5%9B%BE/image-20200624184945180.png" alt="image-20200624184945180"></p>
<p> <img src="/2020/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML%E7%B1%BB%E5%9B%BE/image-20200624183403664.png" alt="image-20200624183403664"></p>
</body></html>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>linux库函数</title>
    <url>/2020/05/26/linux/linuxday2/</url>
    <content><![CDATA[<html><head></head><body><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><figure class="highlight plain"><figcaption><span>man```用于查看linux文档，第1章shell命令，第二章库函数，等</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">```alias ls```查看ls命令是否被封装</span><br><span class="line"><!--more--></span><br><span class="line">```echo```输出如：```echo $PATH```输出path变量的值</span><br><span class="line"></span><br><span class="line">vim编辑器：命令模式，编辑模式，末行模式；</span><br><span class="line"></span><br><span class="line">![image-20200526193729409](assets/image-20200526193729409.png)</span><br><span class="line"></span><br><span class="line">![image-20200526194253885](assets/image-20200526194253885.png)</span><br><span class="line"></span><br><span class="line">查找```/字符;?字符;#;```/从光标向下查找，？从光标向上查找，#标注这个单词。遍历的快捷键```n/N</span><br></pre></td></tr></tbody></table></figure>

<p>缩进：向右>>；向左<<。</p>
<p><img src="/2020/05/26/linux/linuxday2/image-20200526201257734.png" alt="image-20200526201257734"></p>
<p>gcc编译器：</p>
<p>​        将文件编译为可执行程序：<code>gcc -E Test.c -o Test.i;gcc -S Test.i -o Test.s;gcc -c Test.s -o Test.o;gcc Test.o -o app;./app</code>也可以直接链接生成可执行程序：<code>gcc test.c -o app</code></p>
<p><img src="/2020/05/26/linux/linuxday2/image-20200526205940376.png" alt="image-20200526205940376"></p>
<p>包含头文件：-I  头文件的路径如：<code>gcc sum.c -I /include -o app</code>-D 定义宏；-g gdb调试；-Wail 警告信息</p>
<p>静态库：</p>
<p>​        命名：lib+名称+.a 制作步骤：生成.o文件，将.o文件打包。打包用<code>ar rcs 静态库的名字+*.o</code>；用户执行：<code>gcc main.c /lib/libtest.a -o app -Iinclude</code>(头文件)第二种：<code>gcc main.c -L ./lib(库所在的目录) -l test(库的名字，去掉头lib和后缀.a) -o app -Iinclude</code></p>
<figure class="highlight plain"><figcaption><span>+可执行程序```查看可执行程序。</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">共享库：</span><br><span class="line"></span><br><span class="line">​		lib+名字+.so;生成与位置无关的代码如：```gcc -fPIC -c *.c -I +头文件```;打包：```gcc -shared  -o lib+名字.so *.o -I +头文件```;将so文件和include打包给用户。用户执行：```gcc main.c(测试) /lib/libtest.so(打包共享库) -o app -Iinclude(头文件)</span><br></pre></td></tr></tbody></table></figure>

<p>用户执行会产生：error while loading shared libraries: libtest.so: cannot open shared object file: No such file or directory；设置环境变量：1 将共享库的目录导入LD_LIBARY_PATH;如：<code>export LD_LIBARY_PATH=./lib</code>是暂时的，关闭终端就会失效2 永久设置：修改配置文件/etc/ld.so.conf 将动态库的目录添加进去(绝对路径)。更新：<code>sudo ldconfig -v</code></p>
<p>ldd 查看可执行程序在执行的所依赖的所有库。</p>
<p>gdb调试：</p>
<p>​        开始运行（r,start）,l 查看代码 l+行号或文件名 设置断点（b +行号或函数名）或者b filename：行号(函数名)n单步，s（stap）单步可以进入函数内部，c直接停在断点。设置条件断点：b +行号 if value=10；删除断点; d+断点编号（info b获取）；从函数体内部跳出：finish，退出当前循环：u；查看变量的值：p；查看变量的类型：ptype+变量名称；设置变量的值：set var+变量名=赋值；设置追踪变量：dispaly；取消追踪变量：undisplay +编号（info display); 退出gdb：quit。</p>
<p>mkfile的编写：</p>
<p>​        创建makefile，格式：目标：依赖文件</p>
<p>​                                                       (前必须有tab空格)命令</p>
<p>​        执行<code>make</code>,makefile中的变量：</p>
<p><img src="/2020/05/26/linux/linuxday2/image-20200527042758106.png" alt="image-20200527042758106"></p>
<p><img src="/2020/05/26/linux/linuxday2/image-20200528200215674.png" alt="image-20200528200215674"></p>
<p><img src="/2020/05/26/linux/linuxday2/image-20200528204843533.png" alt="image-20200528204843533"></p>
<p>c系统函数:</p>
<p>1.文件描述符: int 类型,</p>
<p>2.pcd: 进程控制块.其中有文件描述符(数组(1024)).</p>
<p>3.虚拟地址空间: 用户区(0-3G)分布(代码段,未初始化的全局变量,已初始化的全局变量,堆,共享库,栈,环境变量,内核区),内核区(3G-4G)(不允许用户操作)</p>
<p>open函数: <code>open(文件描述符,什么方式(Q_RDWR));open(文件描述符,什么方式并且创建(Q_RDWR | Q_CREAT),权限)</code></p>
<p>read函数,write函数:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"> <span class="number">2</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"> <span class="number">1</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><sys/types.h></span></span></span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"> <span class="number">3</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdlib.h></span></span></span><br><span class="line"> <span class="number">4</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><sys/stat.h></span></span></span><br><span class="line"> <span class="number">5</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><unistd.h></span></span></span><br><span class="line"> <span class="number">6</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><fcntl.h></span></span></span><br><span class="line"> <span class="number">7</span> </span><br><span class="line"> <span class="number">8</span> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"> <span class="number">9</span>         <span class="keyword">int</span> fp = <span class="built_in">open</span>(<span class="string">"english.txt"</span>,O_RDONLY);</span><br><span class="line"><span class="number">10</span>         <span class="keyword">if</span>(fp == <span class="number">-1</span>){</span><br><span class="line"><span class="number">11</span>                 perror(<span class="string">"open file"</span>);</span><br><span class="line"><span class="number">12</span>                 <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="number">13</span>         }</span><br><span class="line"><span class="number">14</span>         <span class="comment">// 创建新的文件</span></span><br><span class="line"><span class="number">15</span>         <span class="keyword">int</span> fp1 = <span class="built_in">open</span>(<span class="string">"english1.txt"</span>,O_CREAT | O_WRONLY ,<span class="number">0777</span>);</span><br><span class="line"><span class="number">16</span>         <span class="keyword">if</span>(fp1 == <span class="number">-1</span>){</span><br><span class="line"><span class="number">17</span>                 perror(<span class="string">"creat file"</span>);</span><br><span class="line"><span class="number">18</span>                 <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="number">19</span>         }</span><br><span class="line"><span class="number">20</span>         <span class="comment">// read file</span></span><br><span class="line"><span class="number">21</span>         <span class="keyword">char</span> buf[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line"><span class="number">22</span>         <span class="keyword">int</span> count = <span class="built_in">read</span>(fp,buf,<span class="keyword">sizeof</span>(buf));</span><br><span class="line"><span class="number">23</span>         <span class="keyword">if</span>(count == <span class="number">-1</span>){</span><br><span class="line"><span class="number">24</span>                 perror(<span class="string">"raed file"</span>);</span><br><span class="line"><span class="number">25</span>                 <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="number">26</span>         }</span><br><span class="line"><span class="number">27</span>         <span class="keyword">while</span>(count){</span><br><span class="line"><span class="number">28</span>                 <span class="keyword">int</span> ret = <span class="built_in">write</span>(fp1,buf,count);</span><br><span class="line"><span class="number">29</span>                 <span class="built_in">printf</span>(<span class="string">"write byte %d\n"</span>,ret);</span><br><span class="line"><span class="number">30</span>                 count = <span class="built_in">read</span>(fp,buf,<span class="keyword">sizeof</span>(buf));</span><br><span class="line"><span class="number">31</span>         }</span><br><span class="line"><span class="number">32</span>         <span class="comment">// close file</span></span><br><span class="line"><span class="number">33</span>         <span class="built_in">close</span>(fp);</span><br><span class="line"><span class="number">34</span>         <span class="built_in">close</span>(fp1);</span><br><span class="line"><span class="number">35</span> }</span><br></pre></td></tr></tbody></table></figure>

<p>lseek函数: 能够给文件扩展</p>
<p><img src="/2020/05/26/linux/linuxday2/image-20200628183100651.png" alt="image-20200628183100651"></p>
</body></html>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux</title>
    <url>/2020/05/25/linux/linux/</url>
    <content><![CDATA[<html><head></head><body><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><p>day1</p>
<ol>
<li><p>tree 查看目录结构，需要安装 sudo apt-get install tree(ubuntu)</p>
</li>
<li><p>ls 查看指定目录下所有文件和目录信息 参数 -a 显示隐藏文件 -l 显示详细信息。</p>
</li>
<li><p>cd 非指令，在/bin目录下不能找到。</p>
</li>
<li><p>文件详细9个部分：</p>
<a id="more"></a>

<p><img src="/2020/05/25/linux/linux/image-20200525090438306.png" alt="image-20200525090438306"></p>
</li>
</ol>
<p>第一个字母表示文件类型，d：目录，-：普通目录，s：socket文件，p：管道，c：字符设备，l：链接目录 ，b:块设备。后面每三个字母表示文件所有者即：u，同组用户：g，其他人：o。w表示写权限数字2表示，r读权限数字4，x执行权限1.777表示所有者同组用户，其他人都有读写执行权限。后面的数字表示，文件节点，当文件节点为0，表示这块内存可以存放其他文件。</p>
<p>增加权限：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">chmod u/g/o/a+/-/=rwx 文件名 权限的改变</span><br><span class="line">chown 改变文件所属组和文件所有者 如 chown alex:root Test.cpp</span><br><span class="line">chgrp 改变组</span><br></pre></td></tr></tbody></table></figure>

<p>which 查看命令所在目录<code>which cp</code></p>
<p>sudo apt-get  clean 清理文件安装包，所在目录<code>/var/cache/apt/archives/</code> </p>
<p>创建/删除目录  mkdir 目录名 创建多级 mkdir -r 目录名 如：<code>mkdir -r /aa/bb/cc</code>删除目录  rmdir  只能删除空目录或rm -r 递归删除目录以及下的文件。删除文件 rm file  参数 -i用于提示是否删除。</p>
<p>创建文件  touch  文件名。 </p>
<p>复制文件  cp file.txt file1.txt 将file的内容复制到file1 文件不存在则创建，文件存在覆盖，cp 复制目录 cp -r  dir1 dir2 递归复制，如果存在会放在dir2中。</p>
<p>查看文件 cat，more，less，head，tail如：<code>tail -5 Test.cpp</code></p>
<p>创建链接 软链接（快捷方式）文件路径是绝对路径 ，需要参数-s 如：<code>ln -s /home/a.txt a.test</code></p>
<p><img src="/2020/05/25/linux/linux/image-20200525093300101.png" alt="image-20200525093300101"></p>
<p>查找文件 find ，grep 语法： <code>find+路径+-type/-size/-name 类型/大小/名称</code>，如<code>find / -name hello;find /usr/ -name "Test.cpp";find /usr/ -size -10k ;find /usr/bin/ -size +10M -size -15M;find /usr/ -type p</code></p>
<p>grep 参数-r递归查找 语法：<code>grep -r "查找的关键字"+路径</code></p>
<p>u盘的挂载卸载：自动挂载在/media下面。手动挂载在/mnt下。<code>fdisk -l</code>查看磁盘 。<code>sudo mount /dev/sdb3 /mnt/</code>手动挂载。</p>
<p>卸载：不能在使用U盘的目录中卸载<code>umount /mnt</code></p>
<p>压缩工具：gzip，bzip2 语法：<code>gzip 文件名</code>。<code>bzip2 文件名</code>，bzip的参数-k可以保留文件。解压 <code>gunzip *.gz</code>,不能保留文件。解压：<code>bunzip2 *.bz2</code> 。两个都不能压缩目录。</p>
<p>tar 参数：c 创建，x释放（解压），v 查看，f 文件名，z使用gzip的方式生成.gz。j使用bzip生成.bz2。</p>
<p>压缩：<code>tar czvf 文件名.tar.gz+文件或目录；tar cjvf 文件名.tar.bz2+文件或目录</code>。解压缩: <code>tar zxvf  .gz的压缩包  -C（到指定目录）+路径;tar jxvf  .bz2的压缩包  -C（到指定目录）+路径;</code></p>
<p>rar压缩：需要安装sudo apt-get install rar. <code>rar a 压缩包名（不同后缀）+文件名或目录;rar x 压缩包+路径；</code></p>
<p>zip压缩：<code>zip 压缩包名（不要后缀）+文件名或目录(目录需要-r)；解压：unzip 压缩包名 -d(到指定目录) +路径;</code></p>
<p>进程：ps 参数a（列出当前所有用户的信息）u显示丰富，x查看没有终端的应用程序 <code>ps aux</code></p>
<p>使用管道管理进程：<code>ps aux | grep bash ;kill -l;kill -9 进程ID</code></p>
<p>查看当前的环境变量 env 并显示PATH <code>env | grep PATH</code> top显示进程滚动 <code>top</code></p>
<p>网络管理：<code>ifconfig</code> 通讯 ping 如：<code>ping 192.168.0.106 -c 4</code>-c表示回馈4条信息就cut。-i表示多少秒通信一次。</p>
<p>查看IP： nslookup 如：<code>nslookup www.baidu.com</code></p>
<p>用户管理：创建用户： <code>sudo adduser +用户名</code>,还可以使用<code>sudo useradd -s /bin/bash -g Robin -d /home/Robin -m Robin</code>会提示Robin组不存在。创建Robin组：<code>sudo groupadd Robin</code>,指定密码：<code>sudo passwd Robin</code>删除用户：<code>sudo deluser 用户名</code>未删除/home/用户名 的内容，需要自己删除。2 <code>sudo userdel -r 用户名</code>删除比较完全，推荐。查看所有用户：<code>vim /etc/passwd</code></p>
<p>ftp服务器：安装vsftpd 。<code>sudo apt-get install vsftpd;修改配置文件；vim /etc/vsftpd.conf ；listen=YES，anonymous_enable=YES，write_enable=YES，local_umask=022，anon_upload_enable=YES，anon_mkdir_write_enable=YES，重启服务： sudo service vsftpd restart,服务器配置完成</code>客户端的登录上传和下载：使用<code>ftp ip地址（ftp的服务器地址）</code>,上传(只能上传登录ftp服务器前的目录下的文件):put file;下载：get file。匿名用户登录：1 修改配置文件 增加 <code>anon_root=路径；重启服务。客户端登陆：ftp ip；name：anonymous;passwd:空；登录</code>匿名登录只会在anon_root的目录下切换。</p>
<p>lftp客户端：登录：<code>lftp IP地址;login；可以切换本地目录lcd，上传多个文件mput；下载目录：mirror 目录；上传目录mirror -R 多个目录及其子目录</code></p>
<p>nfs服务器（用于共享文件夹）：安装： <code>sudo apt-get install nfs-kernel-server;修改配置文件：vim /etc/exports;增加共享目录：/usr/nfsshare/ *(网段)（rw（可读可写）ro（read only）,ayns（同步到磁盘））；重启服务；客户端登陆挂载：mount ip：共享文件夹路径 /mnt；</code>取消挂载：<code>sudo umount /mnt</code></p>
<p>ssh服务器：<code>sudo apt-get install openssh-server;登陆：ssh 用户名称@ip</code></p>
<p>scp超级拷贝：<code>scp -r 目标用户名@目标ip：目标目录路径 /保存到本机的绝对路径</code></p>
</body></html>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mui框架</title>
    <url>/2020/05/22/%E5%89%8D%E7%AB%AF/mui%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<html><head></head><body><h1 id="mui框架"><a href="#mui框架" class="headerlink" title="mui框架"></a>mui框架</h1><p>mui框架很坑。</p>
</body></html>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>常用算法和排序</title>
    <url>/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<html><head></head><body><p>函数对象</p>
<p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325053739130.png" alt="image-20200325053739130"></p>
<a id="more"></a>

<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myAdd</span>{</span> <span class="comment">// 函数对象 </span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		myAdd(){</span><br><span class="line">			<span class="keyword">this</span>->count=<span class="number">0</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{</span><br><span class="line">			<span class="keyword">this</span>->count++;</span><br><span class="line">			<span class="keyword">return</span> a+b;</span><br><span class="line">		} </span><br><span class="line">		<span class="comment">//使用属性记录对象调用次数</span></span><br><span class="line">		<span class="keyword">int</span> count; </span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">	myAdd myadd;</span><br><span class="line">	<span class="built_in">cout</span><< myadd(<span class="number">12</span>,<span class="number">43</span>) <<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span><< myadd(<span class="number">12</span>,<span class="number">43</span>) <<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span><<myadd.count<<<span class="built_in">endl</span>; <span class="comment">// 2</span></span><br><span class="line">}</span><br><span class="line"> <span class="comment">// 可以作为参数传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doAdd</span><span class="params">(myAdd &myadd,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{</span><br><span class="line">	<span class="built_in">cout</span><<myadd(a,b)<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">test2</span><span class="params">()</span></span>{</span><br><span class="line">	myAdd myadd;</span><br><span class="line">	doAdd(myadd,<span class="number">12</span>,<span class="number">44</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="comment">//test1();</span></span><br><span class="line">	test2();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>谓词</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 仿函数 返回值是bool类型, 成为谓词 </span></span><br><span class="line"><span class="comment">// 一元谓词 ,接收一个参数 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreatorFind</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> val)</span></span>{ <span class="comment">// 一元谓词 </span></span><br><span class="line">			<span class="keyword">return</span> val><span class="number">5</span>;</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">}; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myCompare</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{ <span class="comment">// 二元谓词 谓词指的是返回bool 二元指的是参数</span></span><br><span class="line">			<span class="keyword">return</span> a>b;</span><br><span class="line">		}</span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line">		v.push_back(i);</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=find_if(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),GreatorFind());</span><br><span class="line">	<span class="built_in">cout</span><<*it<<<span class="built_in">endl</span>;</span><br><span class="line">	sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),myCompare());</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">	} </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">9 8 7 6 5 4 3 2 1 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>内建仿函数</p>
<p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325062750741.png" alt="image-20200325062750741"></p>
<p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325063143207.png" alt="image-20200325063143207"></p>
<p>关系仿函数</p>
<p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325063930278.png" alt="image-20200325063930278"></p>
<p>逻辑仿函数</p>
<p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325064755552.png" alt="image-20200325064755552"></p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><functional> // 算数仿函数头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm> </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">	plus<<span class="keyword">int</span>> p;</span><br><span class="line">	negate<<span class="keyword">int</span>> n; </span><br><span class="line">	<span class="built_in">cout</span><<p(<span class="number">12</span>,<span class="number">43</span>)<<<span class="built_in">endl</span>; <span class="comment">// 不支持匿名 </span></span><br><span class="line">	<span class="built_in">cout</span><<n(<span class="number">129</span>)<<<span class="built_in">endl</span>; <span class="comment">//取反 </span></span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">9</span>;i++){</span><br><span class="line">		v.push_back(i);</span><br><span class="line">	}</span><br><span class="line">	sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),greater<<span class="keyword">int</span>>()); <span class="comment">//关系仿函数  </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="built_in">cout</span><<*it<<<span class="string">" "</span>;  </span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>; </span><br><span class="line">	<span class="comment">// 逻辑运算符</span></span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">bool</span>> v1;</span><br><span class="line">	v1.push_back(<span class="literal">true</span>);</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">bool</span>> v2;</span><br><span class="line">	v2.resize(v1.<span class="built_in">size</span>());</span><br><span class="line">	transform(v1.<span class="built_in">begin</span>(),v1.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>(),logical_not<<span class="keyword">bool</span>>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">bool</span>>::iterator it=v2.<span class="built_in">begin</span>();it!=v2.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="built_in">cout</span><<*it<<<span class="string">" "</span>;  </span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">55</span></span><br><span class="line"><span class="comment">-129</span></span><br><span class="line"><span class="comment">8 7 6 5 4 3 2 1 0</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test1();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>常用算法</p>
<p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325070307861.png" alt="image-20200325070307861"></p>
<p>常用的遍历算法</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">for_each(begin,end,func)</span><br><span class="line">transform()</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325072344750.png" alt="image-20200325072344750"></p>
<p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325090358265.png" alt="image-20200325090358265"></p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">print1</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<val<<<span class="string">" "</span>;</span><br><span class="line">		}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">string</span> name;</span><br><span class="line">		<span class="keyword">int</span> age;</span><br><span class="line">		Person(<span class="built_in">string</span> name,<span class="keyword">int</span> age){</span><br><span class="line">			<span class="keyword">this</span>->age=age;</span><br><span class="line">			<span class="keyword">this</span>->name=name;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Person&p){ <span class="comment">//比较规则 </span></span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>->name==p.name&&<span class="keyword">this</span>->age==p.age){</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			}<span class="keyword">else</span>{</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">}; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line">	<span class="built_in">cout</span><< val <<<span class="string">" "</span>; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="comment">// for_each</span></span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">9</span>;i++){</span><br><span class="line">		v.push_back(i);</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="built_in">print</span>); <span class="comment">//遍历</span></span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">	for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),print1()); <span class="comment">//遍历</span></span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;	</span><br><span class="line">	<span class="comment">//常用的查找算法</span></span><br><span class="line">	<span class="comment">// find</span></span><br><span class="line">	<span class="built_in">vector</span><Person> p;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">"12"</span>,<span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">"43"</span>,<span class="number">32</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">"45"</span>,<span class="number">32</span>)</span></span>;</span><br><span class="line">	p.push_back(p1);</span><br><span class="line">	p.push_back(p2);</span><br><span class="line">	p.push_back(p3);</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=<span class="built_in">find</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">5</span>); <span class="comment">// 必返回一个迭代器,如果没找到,就返回end </span></span><br><span class="line">	<span class="built_in">cout</span><<*it<<<span class="built_in">endl</span>; </span><br><span class="line">	<span class="built_in">vector</span><Person>::iterator itp=<span class="built_in">find</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>(),p1); <span class="comment">//查找自定义数据类型 </span></span><br><span class="line">	<span class="built_in">cout</span><<itp->name<<<span class="string">" "</span><<itp->age<<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">// find_if</span></span><br><span class="line">	<span class="comment">// adjacent_find 查找相邻重复的元素</span></span><br><span class="line">	<span class="comment">// binary_search 二分查找 返回值是true 和false  查找的元素必须为有序序列 </span></span><br><span class="line">	<span class="built_in">cout</span><<binary_search(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">6</span>)<<<span class="built_in">endl</span>; </span><br><span class="line">	<span class="comment">// count 统计 </span></span><br><span class="line">	<span class="built_in">cout</span><<count(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">1</span>)<<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">// count_if</span></span><br><span class="line">	 </span><br><span class="line">	</span><br><span class="line">	 </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test1();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200327005701055.png" alt="image-20200327005701055"></p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><ctime></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line">	<span class="built_in">cout</span><<val<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">9</span>;i++){</span><br><span class="line">		v.push_back(i);</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>>  v2;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">4</span>;i++){</span><br><span class="line">		v2.push_back(i);</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v3;</span><br><span class="line">	v3.resize(v.<span class="built_in">size</span>()+v2.<span class="built_in">size</span>());</span><br><span class="line">	merge(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),v3.<span class="built_in">begin</span>()); <span class="comment">// merge 合并, 将两个容器合并放到第三个容器中. 且两个容器是有序的,合并后也是有序的 </span></span><br><span class="line">	for_each(v3.<span class="built_in">begin</span>(),v3.<span class="built_in">end</span>(),<span class="built_in">print</span>);  </span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">	reverse(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">	for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="built_in">print</span>);</span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">	random_shuffle(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>()); <span class="comment">// random_shuffle 洗牌,将有序变无序 </span></span><br><span class="line">	for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="built_in">print</span>);</span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>; </span><br><span class="line">	</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200327163741378.png" alt="image-20200327163741378"></p>
<p>copy算法</p>
<p>replace替换,将所有相同的都替换</p>
<p>swap交换同种类型的容器</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// copy(v.begin(),v.end(),v2.begin()); copy </span></span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line">v.push_back(<span class="number">10</span>);</span><br><span class="line">v.push_back(<span class="number">23</span>);</span><br><span class="line">v.push_back(<span class="number">23</span>);</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v2;</span><br><span class="line">v2.resize(v.<span class="built_in">size</span>());</span><br><span class="line">copy(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>());</span><br><span class="line">for_each(v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),<span class="built_in">print</span>);</span><br><span class="line">	<span class="comment">// replace;</span></span><br><span class="line">replace(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">23</span>,<span class="number">2000</span>);</span><br><span class="line">copy(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>());</span><br><span class="line">for_each(v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),<span class="built_in">print</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>算术生成算法</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><numeric> // 头文件 </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>>v;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<=<span class="number">100</span>;i++){</span><br><span class="line">		v.push_back(i);</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">// 第三个参数是累加起始值. </span></span><br><span class="line">	<span class="built_in">cout</span><<accumulate(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">0</span>)<<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">// fill() 填充新值</span></span><br><span class="line">	<span class="comment">//fill()</span></span><br><span class="line">	 </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>集合算法</p>
<p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200327181910889.png" alt="image-20200327181910889"></p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line">	<span class="built_in">cout</span><<val<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v2;</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v3;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line">		v.push_back(i);</span><br><span class="line">		v2.push_back(i+<span class="number">5</span>);</span><br><span class="line">	} </span><br><span class="line">	v3.resize(<span class="built_in">min</span>(v.<span class="built_in">size</span>(),v2.<span class="built_in">size</span>()));</span><br><span class="line">	<span class="comment">// 交集 </span></span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=set_intersection(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),v3.<span class="built_in">begin</span>());</span><br><span class="line">	for_each(v3.<span class="built_in">begin</span>(),it,<span class="built_in">print</span>); <span class="comment">// 注意 </span></span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>; </span><br><span class="line">	<span class="comment">// 并集</span></span><br><span class="line">	v3.resize(v.<span class="built_in">size</span>()+v2.<span class="built_in">size</span>());</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator vit=set_union(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),v3.<span class="built_in">begin</span>());</span><br><span class="line">	for_each(v3.<span class="built_in">begin</span>(),vit,<span class="built_in">print</span>); <span class="comment">// 注意 </span></span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">// 补集</span></span><br><span class="line">	v3.resize(<span class="built_in">max</span>(v.<span class="built_in">size</span>(),v2.<span class="built_in">size</span>()));</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator vdit=set_difference(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),v3.<span class="built_in">begin</span>());</span><br><span class="line">	for_each(v3.<span class="built_in">begin</span>(),vdit,<span class="built_in">print</span>); <span class="comment">// 注意 </span></span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">		v3.resize(<span class="built_in">max</span>(v.<span class="built_in">size</span>(),v2.<span class="built_in">size</span>()));</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator vmaxit=set_difference(v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v3.<span class="built_in">begin</span>());</span><br><span class="line">	for_each(v3.<span class="built_in">begin</span>(),vmaxit,<span class="built_in">print</span>); <span class="comment">// 注意 </span></span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 6 7 8 9</span></span><br><span class="line"><span class="comment">0 1 2 3 4 5 6 7 8 9 10 11 12 13 14</span></span><br><span class="line"><span class="comment">0 1 2 3 4</span></span><br><span class="line"><span class="comment">10 11 12 13 14</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>员工分类案例</title>
    <url>/2020/04/17/c++/6-%E5%91%98%E5%B7%A5%E5%88%86%E7%B1%BB%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<html><head></head><body><h3 id="员工分类案例"><a href="#员工分类案例" class="headerlink" title="员工分类案例"></a>员工分类案例</h3><a id="more"></a>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><map> </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><cstdio></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><cstdlib></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><ctime></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	有十个员工,将这些员工随机分配到每个岗位,然后输出每个岗位的人员信息</span></span><br><span class="line"><span class="comment">	将10个人放在vector中,然后遍历vector将人随机分配到multimap的容器中</span></span><br><span class="line"><span class="comment">	分部门显示员工信息</span></span><br><span class="line"><span class="comment">	 </span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">string</span> name;</span><br><span class="line">		<span class="keyword">int</span> Salary;</span><br><span class="line"><span class="comment">//		Worker(string name,int Salary){</span></span><br><span class="line"><span class="comment">//			this->name=name;</span></span><br><span class="line"><span class="comment">//			this->Salary=Salary;</span></span><br><span class="line"><span class="comment">//		}</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createWorker</span><span class="params">(<span class="built_in">vector</span><Worker> &worker)</span></span>{</span><br><span class="line">	<span class="built_in">string</span> name_seed = <span class="string">"ABCDEFGHIJ"</span>; </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line">		Worker w;</span><br><span class="line">		w.name=<span class="string">"员工"</span>;</span><br><span class="line">		w.name+=name_seed[i];</span><br><span class="line">		w.Salary= rand()%<span class="number">10000</span>+<span class="number">10000</span>; <span class="comment">// 坑 , 一句还执行不了  worker.push_back(Worker("员工"+name_seed[i],rand()%10000+10000));</span></span><br><span class="line">		worker.push_back(w); <span class="comment">// 10000-19999</span></span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	for(vector<Worker>::iterator it=worker.begin();it!=Worker.end();it++){</span></span><br><span class="line"><span class="comment">//		itWorker()</span></span><br><span class="line"><span class="comment">//	}</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span><Worker> &worker)</span></span>{</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">vector</span><Worker>::iterator it=worker.<span class="built_in">begin</span>();it!=worker.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="built_in">cout</span><<<span class="string">"姓名:"</span><< it->name<<<span class="string">" "</span><<<span class="string">"工资:"</span><<it->Salary<<<span class="built_in">endl</span>;</span><br><span class="line">	}	</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setGroup</span><span class="params">(<span class="built_in">vector</span><Worker> &worker,<span class="built_in">multimap</span><<span class="keyword">int</span>,Worker> &mworker)</span></span>{</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">vector</span><Worker>::iterator it=worker.<span class="built_in">begin</span>();it!=worker.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="keyword">int</span> dept = rand()%<span class="number">3</span>; <span class="comment">// 0 1 2 </span></span><br><span class="line">		mworker.insert(make_pair(dept,*it));</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMworker</span><span class="params">(<span class="built_in">multimap</span><<span class="keyword">int</span>,Worker>&worker)</span></span>{ <span class="comment">//  0 A B C  1 F G  2 D E </span></span><br><span class="line">	<span class="built_in">cout</span><<<span class="string">"美术--------------"</span><<<span class="built_in">endl</span>;	</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">multimap</span><<span class="keyword">int</span>,Worker>::iterator it=worker.<span class="built_in">begin</span>();it!=worker.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="keyword">if</span>((*it).first==<span class="number">0</span>){	</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"姓名:"</span><< it->second.name<<<span class="string">" "</span><<<span class="string">"工资:"</span><< it->second.Salary<<<span class="built_in">endl</span>;</span><br><span class="line">			</span><br><span class="line">		}</span><br><span class="line">	} </span><br><span class="line">	<span class="built_in">cout</span><<<span class="string">"设计--------------"</span><<<span class="built_in">endl</span>;	</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">multimap</span><<span class="keyword">int</span>,Worker>::iterator it=worker.<span class="built_in">begin</span>();it!=worker.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="keyword">if</span>((*it).first==<span class="number">1</span>){	</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"姓名:"</span><< it->second.name<<<span class="string">" "</span><<<span class="string">"工资:"</span><< it->second.Salary<<<span class="built_in">endl</span>;</span><br><span class="line">			</span><br><span class="line">		}</span><br><span class="line">	} </span><br><span class="line">	<span class="built_in">cout</span><<<span class="string">"开发---------------"</span><<<span class="built_in">endl</span>;	</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">multimap</span><<span class="keyword">int</span>,Worker>::iterator it=worker.<span class="built_in">begin</span>();it!=worker.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="keyword">if</span>((*it).first==<span class="number">2</span>){	</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"姓名:"</span><< it->second.name<<<span class="string">" "</span><<<span class="string">"工资:"</span><< it->second.Salary<<<span class="built_in">endl</span>;		</span><br><span class="line">		}	</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	srand((<span class="keyword">unsigned</span> <span class="keyword">int</span> )time(<span class="literal">NULL</span>));</span><br><span class="line">	<span class="built_in">vector</span><Worker> vWorker;</span><br><span class="line">	createWorker(vWorker);</span><br><span class="line">	printVector(vWorker);</span><br><span class="line">	<span class="comment">// 员工分组</span></span><br><span class="line">	<span class="built_in">multimap</span><<span class="keyword">int</span>,Worker> mWorker;</span><br><span class="line">	setGroup(vWorker,mWorker);</span><br><span class="line">	printMworker(mWorker);</span><br><span class="line">	</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">姓名:员工A 工资:15799</span></span><br><span class="line"><span class="comment">姓名:员工B 工资:19029</span></span><br><span class="line"><span class="comment">姓名:员工C 工资:14589</span></span><br><span class="line"><span class="comment">姓名:员工D 工资:11870</span></span><br><span class="line"><span class="comment">姓名:员工E 工资:11106</span></span><br><span class="line"><span class="comment">姓名:员工F 工资:16145</span></span><br><span class="line"><span class="comment">姓名:员工G 工资:12290</span></span><br><span class="line"><span class="comment">姓名:员工H 工资:15171</span></span><br><span class="line"><span class="comment">姓名:员工I 工资:13026</span></span><br><span class="line"><span class="comment">姓名:员工J 工资:19923</span></span><br><span class="line"><span class="comment">美术--------------</span></span><br><span class="line"><span class="comment">姓名:员工B 工资:19029</span></span><br><span class="line"><span class="comment">姓名:员工C 工资:14589</span></span><br><span class="line"><span class="comment">姓名:员工D 工资:11870</span></span><br><span class="line"><span class="comment">姓名:员工F 工资:16145</span></span><br><span class="line"><span class="comment">设计--------------</span></span><br><span class="line"><span class="comment">姓名:员工A 工资:15799</span></span><br><span class="line"><span class="comment">姓名:员工E 工资:11106</span></span><br><span class="line"><span class="comment">姓名:员工J 工资:19923</span></span><br><span class="line"><span class="comment">开发---------------</span></span><br><span class="line"><span class="comment">姓名:员工G 工资:12290</span></span><br><span class="line"><span class="comment">姓名:员工H 工资:15171</span></span><br><span class="line"><span class="comment">姓名:员工I 工资:13026</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>容器</title>
    <url>/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<html><head></head><body><h3 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h3><p>vector存放自定义类型数据</p>
<a id="more"></a>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> age;</span><br><span class="line">		<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">			Person(<span class="keyword">int</span> age,<span class="built_in">string</span> name){</span><br><span class="line">				<span class="keyword">this</span>->age=age;</span><br><span class="line">				<span class="keyword">this</span>->name=name;	</span><br><span class="line">			} </span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">12</span>,<span class="string">"java"</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">13</span>,<span class="string">"c++"</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">1</span>,<span class="string">"c"</span>)</span></span>;</span><br><span class="line">	<span class="built_in">vector</span><Person*> v;</span><br><span class="line">	v.push_back(&p1);</span><br><span class="line">	v.push_back(&p2);</span><br><span class="line">	v.push_back(&p3);</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">vector</span><Person*>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="built_in">cout</span><<(*it)->age<<(*it)->name<<<span class="built_in">endl</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>string容器</p>
<p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20191219202604459.png" alt="image-20191219202604459"></p>
<p>string赋值</p>
<p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20191219203111427.png" alt="image-20191219203111427"></p>
<p>string拼接</p>
<p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20191219203050386.png" alt="image-20191219203050386"></p>
<p>容器嵌套容器</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="built_in">vector</span><<span class="built_in">vector</span><<span class="keyword">int</span>> >v; <span class="comment">//这里右边>>必须分开写 </span></span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v1;</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v2;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">4</span>;i++){</span><br><span class="line">		v1.push_back(i);</span><br><span class="line">		v2.push_back(i+<span class="number">1</span>);</span><br><span class="line">	}</span><br><span class="line">	v.push_back(v1);</span><br><span class="line">	v.push_back(v2);</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">vector</span><<span class="built_in">vector</span><<span class="keyword">int</span>> >::iterator it = v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="comment">// *it 指的是vector<int></span></span><br><span class="line">		<span class="comment">//再次遍历</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator vit=(*it).<span class="built_in">begin</span>();vit!=(*it).<span class="built_in">end</span>();vit++){</span><br><span class="line">			<span class="built_in">cout</span><<*(vit)<<<span class="string">" "</span>;</span><br><span class="line">		} </span><br><span class="line">		<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>string字符串拼接</p>
<p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321163725406.png" alt="image-20200321163725406"></p>
<p>string 查找和替换</p>
<p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321163810944.png" alt="image-20200321163810944"></p>
<p>注意替换replace(),三个参数是指从第几个开始,替换几个,会将新的字符串全部加进去</p>
<p>如</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> str=<span class="string">"cd"</span>;</span><br><span class="line">str.replace(<span class="number">1</span>,<span class="number">3</span>,<span class="string">"dasdddas"</span>)</span><br><span class="line"> <span class="comment">// cdasdddas</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><iostream> </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="built_in">string</span> str=<span class="string">"hello"</span>;</span><br><span class="line">	str.append(<span class="string">"world"</span>); <span class="comment">//添加 </span></span><br><span class="line">	str+=<span class="string">"i"</span>;</span><br><span class="line">	<span class="built_in">string</span> str1=<span class="string">"cdwewewf"</span>;</span><br><span class="line">	str1.replace(<span class="number">1</span>,<span class="number">3</span>,<span class="string">"das"</span>); <span class="comment">//字符替换 </span></span><br><span class="line">	<span class="built_in">cout</span><<str1;</span><br><span class="line">	<span class="built_in">string</span> str3=<span class="string">"hello"</span>;</span><br><span class="line">	<span class="built_in">string</span> str2=<span class="string">"xello"</span> ;</span><br><span class="line">	<span class="keyword">if</span>(str3.compare(str2)==<span class="number">0</span>){ <span class="comment">//字符串比较 </span></span><br><span class="line">		<span class="built_in">cout</span><<<span class="string">"相等"</span><<<span class="built_in">endl</span>; </span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">else</span>{</span><br><span class="line">		<span class="built_in">cout</span><<<span class="string">"不相等"</span><<<span class="built_in">endl</span>; </span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//string字符存取</span></span><br><span class="line">	<span class="built_in">string</span> str4=<span class="string">"hello"</span>;</span><br><span class="line">	<span class="comment">//访问字符</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<str4.<span class="built_in">size</span>();i++){</span><br><span class="line">		<span class="built_in">cout</span><<str4[i]<<<span class="string">" "</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>; </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<str4.<span class="built_in">size</span>();i++){</span><br><span class="line">		<span class="built_in">cout</span><<str4.at(i)<<<span class="string">" "</span>;</span><br><span class="line">	} </span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">// string 插入删除</span></span><br><span class="line">	<span class="comment">// insert()</span></span><br><span class="line">	<span class="comment">// erase(int pos,int n=npos);</span></span><br><span class="line">	str2.erase(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">cout</span><<str2<<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">// 子串</span></span><br><span class="line">	<span class="comment">// substr(int pos,int n=npos)</span></span><br><span class="line">	 <span class="built_in">string</span> str5=str3.substr(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">	 <span class="built_in">cout</span><<str5<<<span class="built_in">endl</span>;</span><br><span class="line">	 </span><br><span class="line">	 <span class="built_in">string</span> email = <span class="string">"zhangsan@sina.com"</span>; <span class="comment">//截取邮箱 </span></span><br><span class="line">	 <span class="keyword">int</span> pos = email.<span class="built_in">find</span>(<span class="string">"@"</span>);</span><br><span class="line">	 <span class="built_in">cout</span><<email.substr(<span class="number">0</span>,pos)<<<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    test();</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>vector 容器 动态扩展</p>
<p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321214940482.png" alt="image-20200321214940482"></p>
<p>vector赋值操作</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span><<span class="keyword">int</span>> &v)</span></span>{</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v1;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">4</span>;i++){</span><br><span class="line">		v1.push_back(i);</span><br><span class="line">	}</span><br><span class="line">	printVector(v1);</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v2;</span><br><span class="line">	v2=v1; <span class="comment">//拷贝构造 </span></span><br><span class="line">	printVector(v2);</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v3;</span><br><span class="line">	v3.assign(v1.<span class="built_in">begin</span>(),v1.<span class="built_in">end</span>());</span><br><span class="line">	printVector(v3);</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v4;</span><br><span class="line">	v4.assign(<span class="number">10</span>,<span class="number">100</span>); <span class="comment">//赋值 </span></span><br><span class="line">	printVector(v4);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>vector容量和大小</p>
<p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321220704981.png" alt="image-20200321220704981"></p>
<p>插入和删除</p>
<p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321211635313.png" alt="image-20200321211635313"></p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span><<span class="keyword">int</span>>&v)</span></span>{</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v1;</span><br><span class="line">	<span class="built_in">cout</span><<v1.capacity()<<<span class="built_in">endl</span>;<span class="comment">// 为空的时候 容量为0 </span></span><br><span class="line">	v1.push_back(<span class="number">1</span>);</span><br><span class="line">	v1.push_back(<span class="number">2</span>);</span><br><span class="line">	v1.push_back(<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">cout</span><<v1.capacity()<<<span class="built_in">endl</span>;<span class="comment">//</span></span><br><span class="line">	 <span class="comment">// 插入和删除</span></span><br><span class="line">	<span class="comment">// 尾删</span></span><br><span class="line">	printVector(v1);</span><br><span class="line">	v1.pop_back();</span><br><span class="line">	printVector(v1);</span><br><span class="line">	<span class="comment">// insert()</span></span><br><span class="line">	v1.insert(v1.<span class="built_in">begin</span>(),<span class="number">100</span>);</span><br><span class="line">	printVector(v1);</span><br><span class="line">	v1.insert(v1.<span class="built_in">begin</span>(),<span class="number">2</span>,<span class="number">1000</span>);</span><br><span class="line">	printVector(v1);</span><br><span class="line">	v1.erase(v1.<span class="built_in">begin</span>());</span><br><span class="line">	printVector(v1);</span><br><span class="line">	v1.erase(v1.<span class="built_in">begin</span>(),v1.<span class="built_in">end</span>()); <span class="comment">//相等于清空 </span></span><br><span class="line">	printVector(v1);</span><br><span class="line">	v1.<span class="built_in">clear</span>(); <span class="comment">//清空 </span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321213530726.png" alt="image-20200321213530726"></p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span><<span class="keyword">int</span>> &v1)</span></span>{</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=v1.<span class="built_in">begin</span>();it!=v1.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="built_in">cout</span><<*it<<<span class="string">" "</span>; </span><br><span class="line">	} </span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v1;</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v2;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line">		v1.push_back(i);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10</span>;i><span class="number">0</span>;i--){</span><br><span class="line">		v2.push_back(i);</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">//cout<<*v1<<endl; // 不被允许 </span></span><br><span class="line">	<span class="comment">// 数组方式遍历vector</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<v1.<span class="built_in">size</span>();i++){</span><br><span class="line">		<span class="built_in">cout</span><<v1[i]<<<span class="string">" "</span>;</span><br><span class="line">	} </span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<v1.<span class="built_in">size</span>();i++){</span><br><span class="line">		<span class="built_in">cout</span><<v1.at(i)<<<span class="string">" "</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">// 获取第一个元素</span></span><br><span class="line">	<span class="built_in">cout</span><<v1.front()<<<span class="built_in">endl</span>; </span><br><span class="line">	<span class="comment">//互换容器</span></span><br><span class="line">	v1.swap(v2);</span><br><span class="line">	printVector(v1);</span><br><span class="line">	printVector(v2);</span><br><span class="line">	 <span class="comment">// 实际用途,收缩内存空间 </span></span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>> v4;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//使用reserve预留空间,可以减少内存开辟次数</span></span><br><span class="line">	v4.reserve(<span class="number">100000</span>); </span><br><span class="line">	<span class="keyword">int</span> num=<span class="number">0</span>; </span><br><span class="line">	<span class="keyword">int</span> *p=<span class="literal">NULL</span>;  </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">100000</span>;i++){</span><br><span class="line">	 	v4.push_back(i);</span><br><span class="line">	 	<span class="keyword">if</span>(p!=&v4[<span class="number">0</span>]){</span><br><span class="line">	 		p=&v4[<span class="number">0</span>];</span><br><span class="line">	 		num++;</span><br><span class="line">		 }</span><br><span class="line">	} </span><br><span class="line">	<span class="built_in">cout</span><<num<<<span class="built_in">endl</span>; <span class="comment">//num 用来统计开辟了多少次内存  18 次 </span></span><br><span class="line">	<span class="built_in">cout</span><<v4.capacity()<<<span class="built_in">endl</span>;</span><br><span class="line">	v4.resize(<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">vector</span><<span class="keyword">int</span>>(v4).swap(v4); <span class="comment">//匿名对象 ,回收内存 </span></span><br><span class="line">	<span class="built_in">cout</span><<v4.capacity()<<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="comment">// 预留空间</span></span><br><span class="line">	 </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>deque 双端数组</p>
<p>与vector的区别</p>
<p>vector对于头部的插入删除效率低,数据量越大,效率越低</p>
<p>deque相对而言,对头部的插入删除速度比vector快</p>
<p>vector访问元素的速度会比deque快</p>
<p>deque内部工作原理,deque内部有中控器,维护每段缓冲区的内容,缓冲区中存放真实数据</p>
<p>中控器维护的是每一个缓冲区的地址,是的每个deque像一片连续的地址</p>
<p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321220121820.png" alt="image-20200321220121820"></p>
<p>注意: deque没有容量的概念</p>
<p>判断为空—empty</p>
<p>返回元素个数—-size</p>
<p>重新指定个数—-resize</p>
<p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321211749654.png" alt="image-20200321211749654"></p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><deque></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// deque容器的插入和删除 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDeque</span><span class="params">(<span class="keyword">const</span> <span class="built_in">deque</span><<span class="keyword">int</span>>&d)</span></span>{</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">deque</span><<span class="keyword">int</span>>::const_iterator it=d.<span class="built_in">begin</span>();it!=d.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="built_in">cout</span><<*it<<<span class="string">" "</span>;	</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="built_in">deque</span><<span class="keyword">int</span>> d;</span><br><span class="line">	d.push_back(<span class="number">12</span>);</span><br><span class="line">	d.push_back(<span class="number">100</span>);</span><br><span class="line">	d.push_front(<span class="number">120</span>);</span><br><span class="line">	printDeque(d);</span><br><span class="line">	<span class="comment">// 尾删</span></span><br><span class="line">	d.pop_back();</span><br><span class="line">	d.pop_front();</span><br><span class="line">	printDeque(d);</span><br><span class="line">	<span class="comment">// 指定位置插入删除</span></span><br><span class="line">	d.insert(d.<span class="built_in">begin</span>(),<span class="number">10000</span>);</span><br><span class="line">	printDeque(d); </span><br><span class="line">	<span class="comment">// 在指定区间</span></span><br><span class="line">	<span class="built_in">deque</span><<span class="keyword">int</span>> d2;</span><br><span class="line">	d2.push_back(<span class="number">1</span>);</span><br><span class="line">	d2.push_back(<span class="number">2</span>);</span><br><span class="line">	d2.push_back(<span class="number">3</span>);</span><br><span class="line">	<span class="comment">// </span></span><br><span class="line">	d.insert(d.<span class="built_in">begin</span>(),d2.<span class="built_in">begin</span>(),d2.<span class="built_in">end</span>());</span><br><span class="line">	</span><br><span class="line">	printDeque(d); </span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 删除</span></span><br><span class="line">	d.erase(d.<span class="built_in">begin</span>());</span><br><span class="line">	<span class="built_in">deque</span><<span class="keyword">int</span>>::iterator it=d.<span class="built_in">begin</span>();</span><br><span class="line">	it++;</span><br><span class="line">	d.erase(it); </span><br><span class="line">	printDeque(d);</span><br><span class="line">	sort(d.<span class="built_in">begin</span>(),d.<span class="built_in">end</span>()); <span class="comment">// 排序算法</span></span><br><span class="line">	printDeque(d);</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">120 12 100</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">10000 12</span></span><br><span class="line"><span class="comment">1 2 3 10000 12</span></span><br><span class="line"><span class="comment">2 10000 12</span></span><br><span class="line"><span class="comment">2 12 10000</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>案例</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><deque></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><ctime></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">string</span> name;</span><br><span class="line">		<span class="keyword">int</span> score;</span><br><span class="line">		Person(<span class="built_in">string</span> name,<span class="keyword">int</span> score){</span><br><span class="line">			<span class="keyword">this</span>->name=name;</span><br><span class="line">			<span class="keyword">this</span>->score=score;</span><br><span class="line">		}</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span><Person>&v)</span></span>{</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">vector</span><Person>::const_iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="built_in">cout</span><<(*it).name<<<span class="string">":"</span><<<span class="string">"分数"</span><<(*it).score<<<span class="built_in">endl</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createPerson</span><span class="params">(<span class="built_in">vector</span><Person> &v)</span></span>{</span><br><span class="line">	<span class="built_in">string</span> stringSeed=<span class="string">"ABCDE"</span>;</span><br><span class="line">	<span class="keyword">int</span> score=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">5</span>;i++){</span><br><span class="line">		<span class="built_in">string</span> name =<span class="string">"选手"</span>;</span><br><span class="line">		name+=stringSeed[i];</span><br><span class="line">		<span class="function">Person <span class="title">p</span><span class="params">(name,score)</span></span>;</span><br><span class="line">		v.push_back(p); <span class="comment">//创建5名对象 </span></span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="built_in">vector</span><Person>&v)</span></span>{</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">vector</span><Person>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="built_in">deque</span><<span class="keyword">int</span>> d;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line">			<span class="keyword">int</span> score=rand()%<span class="number">41</span>+<span class="number">60</span>; <span class="comment">//60-100</span></span><br><span class="line">			d.push_back(score);</span><br><span class="line">			<span class="built_in">cout</span><<(*it).name<<<span class="string">":"</span><<score<<<span class="string">" "</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">		sort(d.<span class="built_in">begin</span>(),d.<span class="built_in">end</span>()); <span class="comment">// 排序</span></span><br><span class="line">		d.pop_front();</span><br><span class="line">		d.pop_back(); <span class="comment">//去掉分数</span></span><br><span class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">deque</span><<span class="keyword">int</span>>::iterator it=d.<span class="built_in">begin</span>();it!=d.<span class="built_in">end</span>();it++){</span><br><span class="line">			sum+=*it;</span><br><span class="line">		}</span><br><span class="line">		(*it).score=sum/d.<span class="built_in">size</span>();</span><br><span class="line">	}</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="comment">//随机数种子</span></span><br><span class="line">	srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>)); </span><br><span class="line">	<span class="comment">// 创建5名选手</span></span><br><span class="line">	<span class="built_in">vector</span><Person> v;</span><br><span class="line">	createPerson(v);</span><br><span class="line">	<span class="comment">// 给5名选手打分</span></span><br><span class="line">	setScore(v);</span><br><span class="line">	<span class="comment">//  </span></span><br><span class="line">	<span class="built_in">print</span>(v);</span><br><span class="line">	<span class="built_in">cout</span><<rand()<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>stack容器</p>
<p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200322014757939.png" alt="image-20200322014757939"></p>
<p>queue容器</p>
<p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200322015602691.png" alt="image-20200322015602691"></p>
<p>list容器</p>
<p>list赋值和交换</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><list></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(<span class="keyword">const</span> <span class="built_in">list</span><<span class="keyword">int</span>>&L)</span></span>{</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">list</span><<span class="keyword">int</span>>::const_iterator it=L.<span class="built_in">begin</span>();it!=L.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="built_in">list</span><<span class="keyword">int</span>> L1;</span><br><span class="line">	<span class="built_in">list</span><<span class="keyword">int</span>> L2;</span><br><span class="line">	L1.push_back(<span class="number">100</span>);</span><br><span class="line">	L1.push_back(<span class="number">20</span>);</span><br><span class="line">	L1.push_back(<span class="number">12</span>);</span><br><span class="line">	L2.assign(<span class="number">10</span>,<span class="number">100</span>);</span><br><span class="line">	printList(L1);</span><br><span class="line">	printList(L2);</span><br><span class="line">	L1.swap(L2); <span class="comment">//交换 </span></span><br><span class="line">	printList(L1);</span><br><span class="line">	printList(L2);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200324233345500.png" alt="image-20200324233345500"></p>
<p>list排序案例</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><list></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// list 容器的排序案例 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="keyword">int</span> age;</span><br><span class="line">		<span class="built_in">string</span> name;</span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">height</span>;</span><br><span class="line">		Person(<span class="built_in">string</span> name,<span class="keyword">int</span> age, <span class="keyword">int</span> <span class="built_in">height</span>){</span><br><span class="line">			<span class="keyword">this</span>->name=name;</span><br><span class="line">			<span class="keyword">this</span>->age=age;</span><br><span class="line">			<span class="keyword">this</span>-><span class="built_in">height</span>=<span class="built_in">height</span>;</span><br><span class="line">		}</span><br><span class="line">	    </span><br><span class="line">		</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPerson</span><span class="params">(<span class="keyword">const</span> <span class="built_in">list</span><Person>&L)</span></span>{</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">list</span><Person>::const_iterator it=L.<span class="built_in">begin</span>();it!=L.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="built_in">cout</span><<(*it).name<<<span class="string">" "</span><<(*it).age<<<span class="string">" "</span><<(*it).<span class="built_in">height</span><<<span class="built_in">endl</span>; </span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myCompare</span><span class="params">(Person &p1, Person &p2 )</span></span>{ <span class="comment">// 自定义数据类型的排序规则 </span></span><br><span class="line">	<span class="keyword">if</span>(p1.age==p2.age){</span><br><span class="line">		<span class="keyword">return</span> p1.<span class="built_in">height</span><p2.<span class="built_in">height</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> p1.age<p2.age;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="built_in">list</span><Person> L;</span><br><span class="line">	L.push_back(Person(<span class="string">"zhangsan"</span>,<span class="number">23</span>,<span class="number">180</span>));</span><br><span class="line">	L.push_back(Person(<span class="string">"lisi"</span>,<span class="number">43</span>,<span class="number">290</span>));</span><br><span class="line">	L.push_back(Person(<span class="string">"wangwu"</span>,<span class="number">43</span>,<span class="number">90</span>));</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 容器用年龄排序,如果年龄相同,用身高排序</span></span><br><span class="line">	printPerson(L);</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	L.sort(myCompare);</span><br><span class="line">	</span><br><span class="line">	printPerson(L);</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>set集合(没有重复元素,并且自动排序)</p>
<p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200325004617027.png" alt="image-20200325004617027"></p>
<p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200325011034860.png" alt="image-20200325011034860"></p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><set></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSet</span><span class="params">(<span class="keyword">const</span> <span class="built_in">set</span><<span class="keyword">int</span>> &s)</span></span>{</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">set</span><<span class="keyword">int</span>>::const_iterator it=s.<span class="built_in">begin</span>();it!=s.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="built_in">set</span><<span class="keyword">int</span>> s;</span><br><span class="line">	s.insert(<span class="number">23</span>);</span><br><span class="line">	s.insert(<span class="number">43</span>);</span><br><span class="line">	printSet(s);</span><br><span class="line">	<span class="comment">// find 返回迭代器</span></span><br><span class="line">	<span class="keyword">if</span>(s.<span class="built_in">find</span>(<span class="number">43</span>)!=s.<span class="built_in">end</span>()){</span><br><span class="line">		<span class="built_in">cout</span><<*(s.<span class="built_in">find</span>(<span class="number">43</span>))<<<span class="built_in">endl</span>; <span class="comment">// 返回迭代器 *(s.find(23))</span></span><br><span class="line">	} </span><br><span class="line">	<span class="built_in">cout</span><<s.count(<span class="number">23</span>)<<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>pair对组(和元组很像)</p>
<p>paie的创建方式</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">pair<<span class="built_in">string</span>,<span class="keyword">int</span>>p(<span class="string">"tom"</span>,<span class="number">23</span>);</span><br><span class="line">pair<<span class="built_in">string</span>,<span class="keyword">int</span>> p2 =make_pair(<span class="string">"zhangsan"</span>,<span class="number">43</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>利用仿函数重载排序规则</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">compare</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span></span>{</span><br><span class="line">			<span class="keyword">return</span> v1>v2;</span><br><span class="line">		}</span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line">};</span><br><span class="line">	<span class="built_in">set</span><<span class="keyword">int</span>,compare> s;</span><br><span class="line">	s.insert(<span class="number">23</span>);</span><br><span class="line">	s.insert(<span class="number">43</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">set</span><<span class="keyword">int</span>,compare>::iterator it=s.<span class="built_in">begin</span>();it!=s.<span class="built_in">end</span>();it++){</span><br><span class="line">		<span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">	}</span><br></pre></td></tr></tbody></table></figure>

<p>map容器(高效率)(会按照key排序)</p>
<p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200325015540130.png" alt="image-20200325015540130"></p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">map</span><<span class="built_in">string</span>,<span class="keyword">int</span>> m;</span><br><span class="line">m.insert(pair<<span class="built_in">string</span>,<span class="keyword">int</span>>(<span class="string">"zhangsan"</span>,<span class="number">23</span>));</span><br><span class="line">m.insert(pair<<span class="built_in">string</span>,<span class="keyword">int</span>>(<span class="string">"lisi"</span>,<span class="number">34</span>));</span><br><span class="line">m.insert(pair<<span class="built_in">string</span>,<span class="keyword">int</span>>(<span class="string">"wangwu"</span>,<span class="number">343</span>));</span><br><span class="line">m.insert(make_pair(<span class="string">"wangmazi"</span>,<span class="number">89</span>));</span><br><span class="line">m.insert(<span class="built_in">map</span><<span class="built_in">string</span>,<span class="keyword">int</span>>::value_type(<span class="string">"啦啦啦"</span>,<span class="number">43</span>));</span><br><span class="line"><span class="built_in">cout</span><<m[<span class="string">"zhangsan"</span>]<<<span class="built_in">endl</span>; <span class="comment">// 中括号适合访问,不适合插入</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">map</span><<span class="built_in">string</span>,<span class="keyword">int</span>>::iterator it=m.<span class="built_in">begin</span>();it!=m.<span class="built_in">end</span>();it++){</span><br><span class="line">	<span class="built_in">cout</span><<it->first<<it->second<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>继承和多态</title>
    <url>/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<html><head></head><body><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承的构造和析构的循序:先父类再子类,然后子类析构父类析构</p>
<p>访问同名的成员变量需要加作用域其为:</p>
<a id="more"></a>

<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="keyword">int</span> a;</span><br><span class="line">		Base(){</span><br><span class="line">			a=<span class="number">100</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"父类同名函数"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a)</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"父类同名函数"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">	<span class="keyword">protected</span>:</span><br><span class="line">		<span class="keyword">int</span> b;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> c;</span><br><span class="line">}; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span><span class="keyword">public</span> Base{</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		A(){</span><br><span class="line">			a=<span class="number">23</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">int</span> a;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"子类同名函数"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">protected</span> Base{</span><br><span class="line">}; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">private</span> Base{</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	A a1;</span><br><span class="line">	<span class="built_in">cout</span><<a1.a<<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span><<a1.Base::a<<<span class="built_in">endl</span>;</span><br><span class="line">	a1.fun();</span><br><span class="line">	a1.Base::fun();</span><br><span class="line">	<span class="comment">//若想访问到父类的同名成员函数加作用域 </span></span><br><span class="line">	a1.Base::fun(<span class="number">1000</span>); </span><br><span class="line">    <span class="comment">//访问静态成员</span></span><br><span class="line">    <span class="comment">//子类::父类::静态变量;表示通过类名访问父类作用域下的静态变量</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>多继承</p>
<p>子类:继承方式 父类,继承方式 父类…</p>
<p>菱形继承问题</p>
<p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191117222518708.png" alt="image-20191117222518708"></p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="keyword">int</span> age;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Base{</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Base{</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> A,<span class="keyword">public</span> B{</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	C c;</span><br><span class="line">	c.age=<span class="number">100</span>;</span><br><span class="line">	c.age=<span class="number">23</span>;</span><br><span class="line">	<span class="built_in">cout</span><<c.age<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态的条件: 1 继承 2 子类覆写父类的方法 </p>
<p>使用 父类的引用指向子类的对象</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Annimal</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>{ <span class="comment">//虚函数实现多态</span></span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"动物在说话"</span><<<span class="built_in">endl</span>;</span><br><span class="line">	} </span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span><span class="keyword">public</span> Annimal{</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>{</span><br><span class="line">		<span class="built_in">cout</span><<<span class="string">"小猫在说话"</span><<<span class="built_in">endl</span>; </span><br><span class="line">	}</span><br><span class="line">}; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span><span class="keyword">public</span> Annimal{</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>{</span><br><span class="line">		<span class="built_in">cout</span><<<span class="string">"小狗在说话"</span><<<span class="built_in">endl</span>; </span><br><span class="line">	}</span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSpeak</span><span class="params">(Annimal &annimal)</span></span>{</span><br><span class="line">	annimal.speak();</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	Cat cat;</span><br><span class="line">	doSpeak(cat);</span><br><span class="line">	</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>纯虚函数和抽象类</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>=<span class="number">0</span>;有了纯虚函数我们城为抽象类,无法实例化对象</span><br><span class="line">子类必须重写父类的方法;</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractDrinking</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="comment">//煮水 </span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">		<span class="comment">//冲泡</span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">		<span class="comment">//倒入杯中</span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">		<span class="comment">//加料 </span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">makeDrink</span><span class="params">()</span></span>{</span><br><span class="line">			Boil();</span><br><span class="line">			Brew();</span><br><span class="line">			PourInCup();</span><br><span class="line">			PutSomething();</span><br><span class="line">		}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffee</span>:</span><span class="keyword">public</span> AbstractDrinking{</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="comment">//煮水 </span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"煮水"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">		<span class="comment">//冲泡</span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"冲泡"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">		<span class="comment">//倒入杯中</span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"导入杯中"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">		<span class="comment">//加料 </span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"加料"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">}; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tea</span>:</span><span class="keyword">public</span> AbstractDrinking{</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="comment">//煮水 </span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"煮水"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">		<span class="comment">//冲泡</span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"冲泡茶叶"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">		<span class="comment">//倒入杯中</span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"导入杯中"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">		<span class="comment">//加料 </span></span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"加料"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doWork</span><span class="params">(AbstractDrinking *<span class="built_in">abs</span>)</span></span>{</span><br><span class="line">	<span class="built_in">abs</span>->makeDrink();</span><br><span class="line">	<span class="keyword">delete</span> <span class="built_in">abs</span>; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	doWork(<span class="keyword">new</span> Coffee);</span><br><span class="line">	doWork(<span class="keyword">new</span> Tea);</span><br><span class="line">	</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>纯虚析构需要声明也需要实现</p>
<p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191121160323393.png" alt="image-20191121160323393"></p>
<p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191121160358800.png" alt="image-20191121160358800"></p>
<p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191121160431500.png" alt="image-20191121160431500"></p>
<p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191121160500114.png" alt="image-20191121160500114"></p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cpu</span>{</span></span><br><span class="line">	<span class="keyword">public</span>: </span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">caculate</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoCard</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span>{</span></span><br><span class="line">	<span class="keyword">public</span>: </span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span>=<span class="number">0</span>; </span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Computer(Cpu *cpu,VideoCard *videoCard,Memory *memory){</span><br><span class="line">			<span class="keyword">this</span>->cpu=cpu;</span><br><span class="line">			<span class="keyword">this</span>->videoCard=videoCard;</span><br><span class="line">			<span class="keyword">this</span>->memory=memory;</span><br><span class="line">	}</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Work</span><span class="params">()</span></span>{</span><br><span class="line">		cpu->caculate();</span><br><span class="line">		videoCard-><span class="built_in">display</span>();</span><br><span class="line">		memory->storage();</span><br><span class="line">	}</span><br><span class="line">	~Computer(){</span><br><span class="line">		<span class="keyword">if</span>(cpu!=<span class="literal">NULL</span>){</span><br><span class="line">			<span class="keyword">delete</span> cpu;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">if</span>(videoCard!=<span class="literal">NULL</span>){</span><br><span class="line">			<span class="keyword">delete</span> videoCard;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">if</span>(memory!=<span class="literal">NULL</span>){</span><br><span class="line">			<span class="keyword">delete</span> memory;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		Cpu *cpu;</span><br><span class="line">		VideoCard *videoCard;</span><br><span class="line">		Memory *memory;</span><br><span class="line">	</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelCpu</span>:</span><span class="keyword">public</span> Cpu{</span><br><span class="line">	<span class="keyword">public</span>: </span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">caculate</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"Intel的cpu"</span><<<span class="built_in">endl</span>;</span><br><span class="line">		}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelVideoCard</span>:</span><span class="keyword">public</span> VideoCard{</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"Intel的显示器"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelMemory</span>:</span><span class="keyword">public</span> Memory{</span><br><span class="line">	<span class="keyword">public</span>: </span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"Intel的内存"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoCpu</span>:</span><span class="keyword">public</span> Cpu{</span><br><span class="line">	<span class="keyword">public</span>: </span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">caculate</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"Lenovo的cpu"</span><<<span class="built_in">endl</span>;</span><br><span class="line">		}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoVideoCard</span>:</span><span class="keyword">public</span> VideoCard{</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"Lenovo的显示器"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoMemory</span>:</span><span class="keyword">public</span> Memory{</span><br><span class="line">	<span class="keyword">public</span>: </span><br><span class="line">		<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"Lenovo的内存"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	Computer *com=<span class="keyword">new</span> Computer(<span class="keyword">new</span> IntelCpu,<span class="keyword">new</span> LenovoVideoCard,<span class="keyword">new</span> IntelMemory);</span><br><span class="line">	com->Work();</span><br><span class="line">	<span class="keyword">delete</span> com; </span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>文件操作</p>
<p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191121164144152.png" alt="image-20191121164144152"></p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><fstream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>{</span><br><span class="line">	ofstream ofs;</span><br><span class="line">	ofs.<span class="built_in">open</span>(<span class="string">"test.txt"</span>,ios::app);</span><br><span class="line">	ofs<<<span class="string">"张三"</span><<<span class="built_in">endl</span>;</span><br><span class="line">	ofs<<<span class="string">"李四"</span><<<span class="built_in">endl</span>;</span><br><span class="line">	ofs.<span class="built_in">close</span>();</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>{</span><br><span class="line">	ifstream ifs;</span><br><span class="line">	ifs.<span class="built_in">open</span>(<span class="string">"test.txt"</span>,ios::in);</span><br><span class="line">	<span class="keyword">if</span>(!ifs.is_open()){</span><br><span class="line">		<span class="built_in">cout</span><<<span class="string">"文件打开失败"</span><<<span class="built_in">endl</span>; </span><br><span class="line">	}</span><br><span class="line">	<span class="comment">//四种方式读取</span></span><br><span class="line">	<span class="comment">//1</span></span><br><span class="line">	<span class="keyword">char</span> buf[<span class="number">1024</span>]={<span class="number">0</span>};</span><br><span class="line">	<span class="keyword">while</span>(ifs>>buf){</span><br><span class="line">		<span class="built_in">cout</span><<buf<<<span class="built_in">endl</span>;</span><br><span class="line">	} </span><br><span class="line">	<span class="comment">//2</span></span><br><span class="line">	<span class="keyword">char</span> buf2[<span class="number">1024</span>]={<span class="number">0</span>};</span><br><span class="line">	<span class="keyword">while</span>(ifs.getline(buf2,<span class="keyword">sizeof</span>(buf2))){</span><br><span class="line">		<span class="built_in">cout</span><<buf2<<<span class="built_in">endl</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">//3</span></span><br><span class="line">	<span class="built_in">string</span> <span class="built_in">buffer</span>;</span><br><span class="line">	<span class="keyword">while</span>(getline(ifs,<span class="built_in">buffer</span>)){</span><br><span class="line">		<span class="built_in">cout</span><<<span class="built_in">buffer</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">//4单个读取</span></span><br><span class="line">	 <span class="keyword">char</span> c;</span><br><span class="line">	 <span class="keyword">while</span>(c=ifs.<span class="built_in">get</span>()!=EOF){</span><br><span class="line">	 	<span class="built_in">cout</span><<c<<<span class="built_in">endl</span>;</span><br><span class="line">	 } </span><br><span class="line">	ifs.<span class="built_in">close</span>();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="built_in">write</span>();</span><br><span class="line">	<span class="built_in">read</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>模板必须推导出数据类型才可以使用</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">add</span>(<span class="title">T</span> <span class="title">a</span>,<span class="title">T</span> <span class="title">b</span>){</span></span><br><span class="line">	<span class="built_in">cout</span><<a+b<<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	add<<span class="keyword">int</span>>(<span class="number">23</span>,<span class="number">12</span>);<span class="comment">//显示</span></span><br><span class="line">	add(<span class="number">12.2</span>,<span class="number">34.2</span>);<span class="comment">//自动类型推导</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>普通函数与函数模板的区别</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myadd01</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{</span><br><span class="line">	<span class="keyword">return</span> a+b;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">myadd</span>(<span class="title">T</span> <span class="title">a</span>,<span class="title">T</span> <span class="title">b</span>){</span></span><br><span class="line">	<span class="keyword">return</span> a+b;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">12</span>,b=<span class="number">23</span>;</span><br><span class="line">	<span class="keyword">char</span> c=<span class="string">'a'</span>;</span><br><span class="line">	<span class="built_in">cout</span><<myadd01(a,b)<<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span><<myadd01(a,c)<<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span><<myadd(a,b)<<<span class="built_in">endl</span>;<span class="comment">//函数模板自动类型推导,不会发生自动类型转换 </span></span><br><span class="line">	<span class="built_in">cout</span><<myadd<<span class="keyword">int</span>>(a,c)<<<span class="built_in">endl</span>;<span class="comment">//不能类型转换,需要指定类型 </span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191205175241874.png" alt="image-20191205175241874"></p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//通过空模板参数调用函数模板</span></span><br><span class="line"><span class="comment">//函数模板也能发生函数重载</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">add</span>(<span class="title">T</span> <span class="title">a</span>,<span class="title">T</span> <span class="title">b</span>){</span></span><br><span class="line">	<span class="built_in">cout</span><<<span class="string">"函数模板1"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">add</span>(<span class="title">T</span> <span class="title">a</span>,<span class="title">T</span> <span class="title">b</span>,<span class="title">T</span> <span class="title">c</span>){</span></span><br><span class="line">	<span class="built_in">cout</span><<<span class="string">"函数模板2"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{</span><br><span class="line">	<span class="built_in">cout</span><<<span class="string">"普通函数"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	add(<span class="number">12</span>,<span class="number">30</span>);</span><br><span class="line">	add<>(<span class="number">12</span>,<span class="number">30</span>);</span><br><span class="line">	add(<span class="number">12</span>,<span class="number">30</span>,<span class="number">23</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>函数模板的类对象的对比</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Person(<span class="keyword">int</span> age,<span class="built_in">string</span> name){</span><br><span class="line">			<span class="keyword">this</span>->age=age;</span><br><span class="line">			<span class="keyword">this</span>->name=name;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">int</span> age;</span><br><span class="line">		<span class="built_in">string</span> name;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">mycompare</span>(<span class="title">T</span> &<span class="title">a</span>,<span class="title">T</span> &<span class="title">b</span>){</span></span><br><span class="line">	<span class="keyword">if</span>(a==b){</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">template</span><> <span class="keyword">bool</span> <span class="title">mycompare</span><span class="params">(Person &a,Person &b)</span></span>{</span><br><span class="line">	<span class="keyword">if</span>(a.age==b.age&&a.name==b.name){</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">12</span>,<span class="string">"java"</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">12</span>,<span class="string">"java"</span>)</span></span>;</span><br><span class="line">	<span class="built_in">cout</span><<mycompare(p1,p2)<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>类模板</p>
<p>语法</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class">类</span></span><br></pre></td></tr></tbody></table></figure>

<p>类模板与函数模板的区别</p>
<p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191205183118841.png" alt="image-20191205183118841"></p>
<p>类模板中成员函数的创建时机是模板调用时才创建</p>
<p>类模板的对象作为函数参数</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><typeinfo></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Person(T1 name,T2 age){</span><br><span class="line">			<span class="keyword">this</span>->name=name;</span><br><span class="line">			<span class="keyword">this</span>->age=age;</span><br><span class="line">		}</span><br><span class="line">		T1 name;</span><br><span class="line">		T2 age;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="keyword">this</span>->name<<<span class="string">" "</span><<<span class="keyword">this</span>->age<<<span class="built_in">endl</span>;</span><br><span class="line">		}</span><br><span class="line">};</span><br><span class="line"><span class="comment">//1 指定传入类型 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPerson</span><span class="params">(Person<<span class="built_in">string</span>,<span class="keyword">int</span>> &p)</span></span>{<span class="comment">//1 指定传入类型 </span></span><br><span class="line">	p.showPerson();</span><br><span class="line">}</span><br><span class="line"><span class="comment">//2 参数模板化</span></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>> </span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">printPerson2</span>(<span class="title">Person</span><T1,T2> &<span class="title">p</span>){</span><span class="comment">//1 指定传入类型 </span></span><br><span class="line">	p.showPerson();</span><br><span class="line">}</span><br><span class="line"><span class="comment">//3 整个类模板化</span></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span>  <span class="title">printPerson3</span>(<span class="title">T</span> &<span class="title">p</span>){</span></span><br><span class="line">	p.showPerson();</span><br><span class="line">	<span class="built_in">cout</span><<<span class="keyword">typeid</span>(T).name()<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{<span class="comment">//类模板的对象做函数的参数 </span></span><br><span class="line">	Person<string,int> p1("java",12);</span><br><span class="line">	printPerson(p1);</span><br><span class="line">	printPerson2(p1);</span><br><span class="line">	printPerson3(p1);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>类模板与继承</p>
<p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191205205213805.png" alt="image-20191205205213805"></p>
<p>类模板成员函数类外实现</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Person(T1 name,T2 age);</span><br><span class="line">		T1 name;</span><br><span class="line">		T2 age;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>></span></span><br><span class="line"><span class="class"><span class="title">Person</span><T1,T2>:</span>:Person(T1 name,T2 age){<span class="comment">//类模板构造函数类外实现 </span></span><br><span class="line">	<span class="keyword">this</span>->name=name;</span><br><span class="line">	<span class="keyword">this</span>->age=age;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Person</span><T1,T2>:</span>:showPerson(){<span class="comment">//模板类成员函数类外实现 </span></span><br><span class="line">	<span class="built_in">cout</span><<<span class="keyword">this</span>->name<<<span class="keyword">this</span>->age<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	Person<string,int> p1("c++",12);</span><br><span class="line">	p1.showPerson();</span><br><span class="line">	</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>类模板的的分文件编写</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">//将类模板和实现放在同一个文件中并命名为.hpp的文件,然后再.cpp中包含.hpp文件.</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191205213840891.png" alt="image-20191205213840891"></p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"person.hpp"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	Person<string,int> p1("java",12);</span><br><span class="line">	p1.showPerson();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>全局函数类外实现</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>>//声明模板 </span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span>;</span> <span class="comment">//声明类 </span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>>//声明这个函数 </span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">showPerson1</span>(<span class="title">Person</span><T1,T2> <span class="title">p</span>){</span></span><br><span class="line">	<span class="built_in">cout</span><<p.name<<p.age<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">showPerson</span><span class="params">(Person<T1,T2> p)</span></span>{<span class="comment">//全局函数类内实现</span></span><br><span class="line">		<span class="built_in">cout</span><<p.name<<p.age<<<span class="built_in">endl</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">//加空参数列表 </span></span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">void</span> showPerson1<>(Person<T1,T2> p);</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		T1 name;</span><br><span class="line">		T2 age;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Person(T1 name,T2 age){</span><br><span class="line">			<span class="keyword">this</span>->name=name;</span><br><span class="line">			<span class="keyword">this</span>->age=age;</span><br><span class="line">		}</span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	Person<string,int> p1("c++",12);</span><br><span class="line">	showPerson(p1);</span><br><span class="line">	showPerson1(p1);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id><a href="#" class="headerlink" title></a></h3></body></html>]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>运算符重载</title>
    <url>/2020/04/05/c++/3-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<html><head></head><body><p>运算符重载</p>
<a id="more"></a>

<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//加号运算符重载</span></span><br><span class="line"><span class="comment">//全局函数重载加号</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="keyword">int</span> a;</span><br><span class="line">		<span class="keyword">int</span> b;</span><br><span class="line"><span class="comment">//		Person operator+(Person &p){//成员函数的本质 </span></span><br><span class="line"><span class="comment">//			Person temp;</span></span><br><span class="line"><span class="comment">//			temp.a=p.a+this->a;</span></span><br><span class="line"><span class="comment">//			temp.b=p.b+this->b;</span></span><br><span class="line"><span class="comment">//			return temp;	</span></span><br><span class="line"><span class="comment">//		}	</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">Person <span class="keyword">operator</span>+(Person &p1,Person &p2){</span><br><span class="line">	Person temp;</span><br><span class="line">	temp.a=p1.a+p2.a;</span><br><span class="line">	temp.b=p1.b+p2.b;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	Person p1;</span><br><span class="line">	Person p2;</span><br><span class="line">	p2.a=<span class="number">12</span>;</span><br><span class="line">	p2.b=<span class="number">23</span>;</span><br><span class="line">	p1.a=<span class="number">10</span>;</span><br><span class="line">	p1.b=<span class="number">10</span>;</span><br><span class="line">	Person p3=p1+p2;</span><br><span class="line">	<span class="built_in">cout</span><<p3.a<<<span class="string">"------------"</span><<p3.b<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>左移运算符重载</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">friend</span> ostream & <span class="keyword">operator</span><<(ostream &<span class="built_in">cout</span>,Person &p);</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> a;</span><br><span class="line">		<span class="keyword">int</span> b;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Person(<span class="keyword">int</span> a,<span class="keyword">int</span> b){</span><br><span class="line">			<span class="keyword">this</span>->a=a;</span><br><span class="line">			<span class="keyword">this</span>->b=b;</span><br><span class="line">		}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">ostream & <span class="keyword">operator</span><<(ostream &<span class="built_in">cout</span>,Person &p){</span><br><span class="line">	<span class="built_in">cout</span><<p.a<<<span class="string">"-----------"</span><<p.b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">12</span>,<span class="number">23</span>)</span></span>;</span><br><span class="line">	<span class="built_in">cout</span><<p1<<<span class="built_in">endl</span>;<span class="comment">//直接输出对象</span></span><br><span class="line">	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>递增运算符重载</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自增运算符重载 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span>{</span></span><br><span class="line">	<span class="keyword">friend</span> ostream & <span class="keyword">operator</span><<(ostream &<span class="built_in">cout</span>,MyInteger Integer);<span class="comment">//为什么不传引用 </span></span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> num;</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		MyInteger(){</span><br><span class="line">			num=<span class="number">0</span>;</span><br><span class="line">		}</span><br><span class="line">	MyInteger& <span class="keyword">operator</span>++(){<span class="comment">//前置++</span></span><br><span class="line">		num++;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	MyInteger <span class="keyword">operator</span>++(<span class="keyword">int</span>){<span class="comment">//后置++</span></span><br><span class="line">		MyInteger temp=*<span class="keyword">this</span>;</span><br><span class="line">		num++;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	}</span><br><span class="line">	 	</span><br><span class="line">}; </span><br><span class="line">ostream & <span class="keyword">operator</span><<(ostream &<span class="built_in">cout</span>,MyInteger Integer){</span><br><span class="line">	<span class="built_in">cout</span><<Integer.num;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">cout</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//重载++运算符</span></span><br><span class="line"> <span class="comment">//前置++,后置++;</span></span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"> 	MyInteger myint;</span><br><span class="line">	<span class="built_in">cout</span><<myint++<<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span><<myint<<<span class="built_in">endl</span>;</span><br><span class="line"> 	</span><br><span class="line"> }</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	MyInteger num;</span><br><span class="line">	<span class="built_in">cout</span><<num<<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span><<++num<<<span class="built_in">endl</span>; </span><br><span class="line">	<span class="built_in">cout</span><<num<<<span class="built_in">endl</span>;</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>赋值运算符重载</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="keyword">int</span> *a;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Person(<span class="keyword">int</span> age){</span><br><span class="line">			a=<span class="keyword">new</span> <span class="keyword">int</span>(age);</span><br><span class="line">		}</span><br><span class="line">		~Person(){</span><br><span class="line">			<span class="keyword">if</span>(a!=<span class="literal">NULL</span>){</span><br><span class="line">				<span class="keyword">delete</span>(a);</span><br><span class="line">				a=<span class="literal">NULL</span>;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">		Person & <span class="keyword">operator</span>=(Person &p){</span><br><span class="line">			<span class="keyword">if</span>(a!=<span class="literal">NULL</span>){</span><br><span class="line">				<span class="keyword">delete</span>(a);</span><br><span class="line">			} </span><br><span class="line">			a=<span class="keyword">new</span> <span class="keyword">int</span>(*p.a);<span class="comment">//深拷贝 </span></span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">		} </span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	p3=p2=p1;</span><br><span class="line">	<span class="built_in">cout</span><< *p2.a<<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span><< *p3.a<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>关系运算符重载</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> age;</span><br><span class="line">		<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Person(<span class="keyword">int</span> age,<span class="built_in">string</span> name){</span><br><span class="line">			<span class="keyword">this</span>->age=age;</span><br><span class="line">			<span class="keyword">this</span>->name=name;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">bool</span> <span class="keyword">operator</span>==(Person &p){</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>->age==p.age&&<span class="keyword">this</span>->name==p.name){</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			}</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">12</span>,<span class="string">"java"</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">12</span>,<span class="string">"java"</span>)</span></span>;</span><br><span class="line">	<span class="keyword">if</span>(p1==p2){</span><br><span class="line">		<span class="built_in">cout</span><<<span class="string">"p1=p2"</span><<<span class="built_in">endl</span>;</span><br><span class="line">	}<span class="keyword">else</span>{</span><br><span class="line">		<span class="built_in">cout</span><<<span class="string">"p1!=p2"</span><<<span class="built_in">endl</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>仿函数</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="built_in">string</span> <span class="built_in">text</span>)</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="built_in">text</span><<<span class="built_in">endl</span>;</span><br><span class="line">		}</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	Person p1;</span><br><span class="line">	p1(<span class="string">"Hello world"</span>);</span><br><span class="line">    Person()(<span class="string">"123"</span>);<span class="comment">//匿名对象 </span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql服务消失问题</title>
    <url>/2020/04/05/problem/mysql%E6%9C%8D%E5%8A%A1%E6%B6%88%E5%A4%B1%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<html><head></head><body><h2 id="mysql服务消失问题"><a href="#mysql服务消失问题" class="headerlink" title="mysql服务消失问题"></a>mysql服务消失问题</h2><p>今天想着从数据库复制一篇文章,然后命令行连接报错,我一看服务消失,应该是装多个没改端口造成的,直接卸载重装</p>
<h4 id="1-官网下载"><a href="#1-官网下载" class="headerlink" title="1 官网下载"></a>1 官网下载</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://dev.mysql.com/downloads/file/?id=492456</span><br></pre></td></tr></tbody></table></figure>

<p>然后本地卸载mysql后会保留data目录,</p>
<a id="more"></a>

<h4 id="2-卸载本地mysql-保留data目录"><a href="#2-卸载本地mysql-保留data目录" class="headerlink" title="2 卸载本地mysql,保留data目录"></a>2 卸载本地mysql,保留data目录</h4><h4 id="3-将data目录复制到新的data目录中"><a href="#3-将data目录复制到新的data目录中" class="headerlink" title="3 将data目录复制到新的data目录中"></a>3 将data目录复制到新的data目录中</h4><p>注意覆盖文件,(应该新旧mysql版本要一致)mysql5.7的数据库文件都是opt类型,mysql8.0是ibd类型</p>
<h4 id="4-重启mysql服务"><a href="#4-重启mysql服务" class="headerlink" title="4 重启mysql服务"></a>4 重启mysql服务</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></tbody></table></figure>

<p>或者到服务中启动(运行<code>service.msc</code>)</p>
<p>有可能会报错</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">某些服务在未由其他服务或程序使用时将自动停止</span><br></pre></td></tr></tbody></table></figure>

<p>这是配置文件有问题,或者data目录文件有错,我是data目录下还有Data目录,将里面的数据库文件复制到data层然后删除Data</p>
<p>重启服务解决.而且数据没有丢失.</p>
<p>mysql8.0的data目录在这个文件下</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">C:\ProgramData\MySQL\MySQL Server 8.0\Data</span><br></pre></td></tr></tbody></table></figure>

<p>安装目录</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">C:\Program Files\MySQL\MySQL Server 8.0</span><br></pre></td></tr></tbody></table></figure>



<p><img src="/2020/04/05/problem/mysql%E6%9C%8D%E5%8A%A1%E6%B6%88%E5%A4%B1%E9%97%AE%E9%A2%98/image-20200405030817266.png" alt="image-20200405030817266"></p>
</body></html>]]></content>
      <categories>
        <category>problem</category>
      </categories>
      <tags>
        <tag>problem</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言指针</title>
    <url>/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<html><head></head><body><p>C语言用三种方式打印数组</p>
<a id="more"></a>

<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pointarray2</span><span class="params">(<span class="keyword">int</span> a[])</span></span>{<span class="comment">//用指针变量指向数组元素</span></span><br><span class="line">	<span class="keyword">int</span> *<span class="built_in">point</span>;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line">		<span class="built_in">point</span>=&a[i];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>,*<span class="built_in">point</span>);</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pointarray</span><span class="params">(<span class="keyword">int</span> a[])</span></span>{<span class="comment">//通过数组名计算数组的元素地址,找出元素的值</span></span><br><span class="line">	<span class="keyword">int</span> *<span class="built_in">point</span>;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="built_in">point</span>=a;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>,*(<span class="built_in">point</span>+i));</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>]={<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>};</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i<<span class="number">10</span>;i++){<span class="comment">//下标法</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	pointarray(a);</span><br><span class="line">	pointarray2(a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>实现数组倒序存储</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p1,<span class="keyword">int</span> *p2)</span></span>{</span><br><span class="line">	<span class="keyword">int</span> temp;</span><br><span class="line">	temp=*p1;</span><br><span class="line">	*p1=*p2;</span><br><span class="line">	*p2=temp;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>{</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">int</span> *low,*high;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i<=(n<span class="number">-1</span>)/<span class="number">2</span>;i++){</span><br><span class="line">		low=&a[i];</span><br><span class="line">		high=&a[n<span class="number">-1</span>-i];<span class="comment">//n-1-i指向对应的元素</span></span><br><span class="line">		swap(low,high);</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>]={<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>};</span><br><span class="line">	<span class="keyword">int</span> n=<span class="number">10</span>,i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i<n;i++){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"reverse later---------\n"</span>);</span><br><span class="line">	reverse(a,<span class="number">10</span>);<span class="comment">//将数组倒叙排放</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i<n;i++){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>max min search</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="keyword">int</span> *<span class="built_in">max</span>,*<span class="built_in">min</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Max_Min_Search</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>{</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">max</span>=a;</span><br><span class="line">	<span class="built_in">min</span>=a;</span><br><span class="line">	<span class="keyword">for</span>(;i<n;i++){</span><br><span class="line">		<span class="keyword">if</span>(a[i]>*<span class="built_in">max</span>){</span><br><span class="line">			<span class="built_in">max</span>=&a[i];</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">if</span>(a[i]<*<span class="built_in">min</span>){</span><br><span class="line">			<span class="built_in">min</span>=&a[i];</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>]={<span class="number">24</span>,<span class="number">10</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">540</span>,<span class="number">26</span>,<span class="number">30</span>,<span class="number">34</span>,<span class="number">35</span>};</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;i<<span class="number">10</span>;i++){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"---------------Searching------------------\n"</span>);</span><br><span class="line">	Max_Min_Search(a,<span class="number">10</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"max=%d min=%d\n"</span>,*<span class="built_in">max</span>,*<span class="built_in">min</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191024163739066.png" alt="image-20191024163739066"></p>
<p>打印二维数组</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTwoArray</span><span class="params">(<span class="keyword">int</span> (*a)[<span class="number">4</span>],<span class="keyword">int</span> row,<span class="keyword">int</span> len)</span></span>{<span class="comment">//(*a)[4]必须要传递列值,数组指针变量</span></span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i<row;i++){</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j<len;j++){</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d "</span>,*(*(a+i)+j));</span><br><span class="line">		}</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]={<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>};</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"a的地址:%d\n"</span>,a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"a: %d\n"</span>,&a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"a[0]:%d\n"</span>,a[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"*(*(a+1)):%d\n"</span>,*(*(a+<span class="number">1</span>)));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"*(*(a+1)+2):%d\n"</span>,*(*(a+<span class="number">1</span>)+<span class="number">2</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"&a[1][0]:%d\n"</span>,&a[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"--------------------\n"</span>);</span><br><span class="line">	PrintTwoArray(a,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>copy字符串</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_string</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">string</span>)</span></span>{</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"----------------string b is------\n"</span>);</span><br><span class="line">	<span class="keyword">for</span>(;*<span class="built_in">string</span>!=<span class="string">'\0'</span>;<span class="built_in">string</span>++){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%c"</span>,*<span class="built_in">string</span>);</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string5</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span></span>{</span><br><span class="line">	<span class="keyword">char</span> *p;</span><br><span class="line">	p=b;</span><br><span class="line">	<span class="keyword">while</span>(*p++=*a++){}</span><br><span class="line">	p=b;</span><br><span class="line">	print_string(p);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string4</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span></span>{</span><br><span class="line">	<span class="keyword">char</span> *p;</span><br><span class="line">	p=b;</span><br><span class="line">	<span class="keyword">while</span>(*a!=<span class="string">'\0'</span>){</span><br><span class="line">		*p++=*a++;</span><br><span class="line">	}</span><br><span class="line">	p=b;</span><br><span class="line">	print_string(p);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string3</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span></span>{</span><br><span class="line">	<span class="keyword">char</span> *p;</span><br><span class="line">	p=b;</span><br><span class="line">	<span class="keyword">while</span>((*p++=*a++)!=<span class="string">'\0'</span>){</span><br><span class="line">	}</span><br><span class="line">	p=b;</span><br><span class="line">	print_string(p);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string2</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span></span>{</span><br><span class="line">	<span class="keyword">char</span> *p;</span><br><span class="line">	p=b;</span><br><span class="line">	<span class="keyword">while</span>((*p=*a)!=<span class="string">'\0'</span>){</span><br><span class="line">		p++;</span><br><span class="line">		a++;</span><br><span class="line">	}</span><br><span class="line">	p=b;</span><br><span class="line">	print_string(p);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string1</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span></span>{</span><br><span class="line">	<span class="keyword">char</span> *p1,*p2;</span><br><span class="line">	p2=b;</span><br><span class="line">	p1=a;</span><br><span class="line">	<span class="keyword">for</span>(;*p1!=<span class="string">'\0'</span>;p1++,p2++){</span><br><span class="line">		*p2=*p1;</span><br><span class="line">	}</span><br><span class="line">	*p2=<span class="string">'\0'</span>;</span><br><span class="line">	p2=b;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"-------------------------\n"</span>);</span><br><span class="line">	print_string(p2);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="keyword">char</span> <span class="built_in">string</span>[]=<span class="string">"hello world"</span>;</span><br><span class="line">	<span class="keyword">char</span> *a=<span class="string">"i love you"</span>,b[]=<span class="string">"hello world "</span>,*p1,*p2;<span class="comment">//此处应该定义为char b[] 而不能用char  *b;因为char *b放在了常量区,不能被修改.</span></span><br><span class="line">	<span class="keyword">char</span> *s=<span class="string">"hello "</span>;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="built_in">string</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s);</span><br><span class="line">	</span><br><span class="line">	p1=a;</span><br><span class="line">	p2=b;</span><br><span class="line">	<span class="keyword">for</span>(;*p1!=<span class="string">'\0'</span>;p1++,p2++){</span><br><span class="line">		*p2=*p1;</span><br><span class="line">	}</span><br><span class="line">	*p2=<span class="string">'\0'</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"----------------string b is-------\n"</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;b[i]!=<span class="string">'\0'</span>;i++){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%c"</span>,b[i]);</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"---------------------\n"</span>);</span><br><span class="line">	copy_string1(a,b);	</span><br><span class="line">	copy_string2(a,b);</span><br><span class="line">	copy_string3(a,b);</span><br><span class="line">	copy_string4(a,b);</span><br><span class="line">	copy_string5(a,b);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191025192914077.png" alt="image-20191025192914077"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191025200423203.png" alt="image-20191025200423203"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191025200537661.png" alt="image-20191025200537661"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191025200650572.png" alt="image-20191025200650572"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191025201016685.png" alt="image-20191025201016685"></p>
<p>指针函数传递参数</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>{</span><br><span class="line">	<span class="keyword">return</span> x+y;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>{</span><br><span class="line">	<span class="keyword">if</span>(x>y){</span><br><span class="line">		<span class="keyword">return</span> y;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>{</span><br><span class="line">	<span class="keyword">if</span>(x>y){</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	}<span class="keyword">else</span>{</span><br><span class="line">		<span class="keyword">return</span> y;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prosess</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> (*fun)())</span></span>{<span class="comment">///////////////////</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,fun(x,y));</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">prosess</span><span class="params">(<span class="keyword">int</span> ,<span class="keyword">int</span> ,<span class="keyword">int</span> (*fun)())</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&a,&b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"max="</span>);</span><br><span class="line">	prosess(a,b,<span class="built_in">max</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"min="</span>);</span><br><span class="line">	prosess(a,b,<span class="built_in">min</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"sum="</span>);</span><br><span class="line">	prosess(a,b,add);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>输入序号打印学生各科成绩</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">search</span><span class="params">(<span class="keyword">int</span> (*score)[<span class="number">4</span>],<span class="keyword">int</span> id)</span></span>{</span><br><span class="line">	<span class="keyword">return</span> *(score+id);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="keyword">int</span> score[][<span class="number">4</span>]={<span class="number">12</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">25</span>,<span class="number">63</span>,<span class="number">90</span>,<span class="number">12</span>,<span class="number">57</span>,<span class="number">63</span>,<span class="number">27</span>};</span><br><span class="line">	<span class="keyword">int</span> id,i;</span><br><span class="line">	<span class="keyword">int</span> *p;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&id);</span><br><span class="line">	<span class="keyword">if</span>(id<span class="number">-1</span>><span class="number">0</span>&&id<span class="number">-1</span><<span class="number">3</span>){</span><br><span class="line">		p=search(score,id<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i<<span class="number">4</span>;i++){</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d "</span>,*(p+i));</span><br><span class="line">		}</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>判断不及格的学生</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">search</span><span class="params">(<span class="keyword">int</span> (*score)[<span class="number">4</span>],<span class="keyword">int</span> id)</span></span>{</span><br><span class="line">	<span class="keyword">return</span> *(score+id);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">print_score1</span><span class="params">(<span class="keyword">int</span> (*score)[<span class="number">4</span>],<span class="keyword">int</span> i)</span></span>{</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j<<span class="number">4</span>;j++){</span><br><span class="line">			<span class="keyword">if</span>(*(*(score+i)+j)<<span class="number">60</span>){</span><br><span class="line">				<span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_score</span><span class="params">(<span class="keyword">int</span> *p)</span></span>{</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(;i<<span class="number">4</span>;i++){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,*(p+i));</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="keyword">int</span> score[][<span class="number">4</span>]={<span class="number">12</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">54</span>,<span class="number">70</span>,<span class="number">89</span>,<span class="number">63</span>,<span class="number">90</span>,<span class="number">12</span>,<span class="number">57</span>,<span class="number">63</span>,<span class="number">27</span>};</span><br><span class="line">	<span class="keyword">int</span> id,i;</span><br><span class="line">	<span class="keyword">int</span> *p1;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&id);</span><br><span class="line">	<span class="keyword">if</span>(id<span class="number">-1</span>>=<span class="number">0</span>&&id<span class="number">-1</span><<span class="number">3</span>){</span><br><span class="line">		p1=search(score,id<span class="number">-1</span>);</span><br><span class="line">		print_score(p1);</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i<<span class="number">3</span>;i++){</span><br><span class="line">		<span class="keyword">if</span>(print_score1(score,i)><span class="number">0</span>){</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%d号不及格 "</span>,print_score1(score,i));</span><br><span class="line">		}<span class="keyword">else</span>{</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"及格 "</span>);</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026001020291.png" alt="image-20191026001020291"></p>
<p>字符串排序</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><string.h></span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">char</span> *name[],<span class="keyword">int</span> n)</span></span>{</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">char</span> *p;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i<n<span class="number">-1</span>;i++){</span><br><span class="line">		<span class="keyword">for</span>(j=i+<span class="number">1</span>;j<n;j++){</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">strcmp</span>(name[i],name[j])><span class="number">0</span>){</span><br><span class="line">				p=name[i];</span><br><span class="line">				name[i]=name[j];</span><br><span class="line">				name[j]=p;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> *name[] , <span class="keyword">int</span> n)</span></span>{</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i<n;i++){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s "</span>,name[i]);</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{<span class="comment">//指针数组</span></span><br><span class="line">	<span class="keyword">char</span> *name[]={<span class="string">"php"</span>,<span class="string">"go"</span>,<span class="string">"c++"</span>,<span class="string">"java"</span>,<span class="string">"c"</span>};</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> n=<span class="number">5</span>;</span><br><span class="line">	sort(name,n);</span><br><span class="line">	<span class="built_in">print</span>(name,n);</span><br><span class="line">	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026004814972.png" alt="image-20191026004814972"></p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *name[]={<span class="string">"php"</span>,<span class="string">"go"</span>,<span class="string">"c++"</span>,<span class="string">"java"</span>,<span class="string">"c"</span>};</span><br><span class="line"><span class="keyword">char</span> **p;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<n;i++){</span><br><span class="line">	p=name+i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%5s"</span>,*p);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026005311004.png" alt="image-20191026005311004"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026005650753.png" alt="image-20191026005650753"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026010454116.png" alt="image-20191026010454116"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026010537453.png" alt="image-20191026010537453"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026010620952.png" alt="image-20191026010620952"></p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="keyword">int</span> name[]={<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">53</span>,<span class="number">3</span>};</span><br><span class="line">	<span class="keyword">int</span> *p1,*p2;</span><br><span class="line">	p1=&name[<span class="number">1</span>];</span><br><span class="line">	p2=&name[<span class="number">4</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,p2-p1);<span class="comment">//3</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026011538963.png" alt="image-20191026011538963"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026011736366.png" alt="image-20191026011736366"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026011836077.png" alt="image-20191026011836077"></p>
<p>带参数的宏定义</p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027135958486.png" alt="image-20191027135958486"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027140124000.png" alt="image-20191027140124000"></p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M(a,b) (a>b)?a:b</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&a,&b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"max=%d"</span>,M(a,b));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027140729793.png" alt="image-20191027140729793"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027140848028.png" alt="image-20191027140848028"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027141110205.png" alt="image-20191027141110205"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027141521576.png" alt="image-20191027141521576"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027142416728.png" alt="image-20191027142416728"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027142443507.png" alt="image-20191027142443507"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027143938237.png" alt="image-20191027143938237"></p>
<p>结构体</p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027144701230.png" alt="image-20191027144701230"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027150035130.png" alt="image-20191027150035130"></p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span>{</span></span><br><span class="line">	<span class="keyword">int</span> year;</span><br><span class="line">	<span class="keyword">int</span> month;</span><br><span class="line">	<span class="keyword">int</span> day;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">struct</span>{</span></span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">char</span> *name;</span><br><span class="line">	<span class="keyword">char</span> gender;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">float</span> score;</span><br><span class="line">	<span class="keyword">char</span> *addr;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">birthday</span>;</span></span><br><span class="line">}student1,student2={<span class="number">1</span>,<span class="string">"hanmeimei"</span>,<span class="string">'m'</span>,<span class="number">45</span>,<span class="number">22.2f</span>,<span class="string">"hubei"</span>,<span class="number">2019</span>,<span class="number">12</span>,<span class="number">12</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	student1=student2;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"number=%d\nname=%s\ngender=%c\nage=%d\nscore=%f\naddr=%s\nbirthday=%d-%d-%d\n"</span>,student1.id,student1.name,student1.gender,student1.age,student1.score,student1.addr,student1.birthday.year,student1.birthday.month,student1.birthday.day);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>实现投票</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><string.h></span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PushTicket</span>{</span></span><br><span class="line">		<span class="keyword">char</span> *name;</span><br><span class="line">		<span class="keyword">int</span> ticket;</span><br><span class="line">	}*<span class="built_in">point</span>,ticket[<span class="number">5</span>]={{<span class="string">"hanmeimei"</span>,<span class="number">0</span>},{<span class="string">"lilei"</span>,<span class="number">0</span>},{<span class="string">"lili"</span>,<span class="number">0</span>},{<span class="string">"c"</span>,<span class="number">0</span>},{<span class="string">"java"</span>,<span class="number">0</span>}};</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTicket</span><span class="params">(struct PushTicket *<span class="built_in">point</span>)</span></span>{</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="built_in">point</span>=ticket;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"------------候选人的票-----------\n"</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i<<span class="number">5</span>;i++,<span class="built_in">point</span>++){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s-----:%d\n"</span>,<span class="built_in">point</span>->name,<span class="built_in">point</span>->ticket);</span><br><span class="line">	}</span><br><span class="line">			</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">compare</span><span class="params">(<span class="keyword">char</span> *input)</span></span>{</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="built_in">point</span>=ticket;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i<<span class="number">5</span>;i++,<span class="built_in">point</span>++){</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">strcmp</span>(input,<span class="built_in">point</span>->name)==<span class="number">0</span>){</span><br><span class="line">			(<span class="built_in">point</span>->ticket)++;</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">char</span> input[<span class="number">20</span>];</span><br><span class="line">	<span class="built_in">point</span>=ticket;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"------------候选人-----------\n"</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i<<span class="number">5</span>;i++,<span class="built_in">point</span>++){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s "</span>,<span class="built_in">point</span>->name);</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"---------------\n"</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"请输入候选人名称投票:"</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,&input);</span><br><span class="line">		compare(input);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">strcmp</span>(input,<span class="string">"-1"</span>)==<span class="number">0</span>){</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line">			PrintTicket(<span class="built_in">point</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>动态数组</p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027183935021.png" alt="image-20191027183935021"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027184043371.png" alt="image-20191027184043371"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027184110721.png" alt="image-20191027184110721"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027184156656.png" alt="image-20191027184156656"></p>
<p>链表</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>{</span></span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">float</span> score;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintLink</span><span class="params">(struct student *p)</span></span>{</span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="literal">NULL</span>){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"num=%d,score=%f"</span>,p->num,p->score);</span><br><span class="line">		p=p->next;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">a</span>,<span class="title">b</span>,<span class="title">c</span>,*<span class="title">head</span>;</span></span><br><span class="line">	a.num=<span class="number">1</span>;</span><br><span class="line">	a.score=<span class="number">89.0f</span>;</span><br><span class="line">	a.next=&b;</span><br><span class="line">	b.num=<span class="number">2</span>;</span><br><span class="line">	b.score=<span class="number">90</span>;</span><br><span class="line">	b.next=&c;</span><br><span class="line">	c.num=<span class="number">3</span>;</span><br><span class="line">	c.score=<span class="number">100</span>;</span><br><span class="line">	c.next=<span class="literal">NULL</span>;</span><br><span class="line">	head=&a;</span><br><span class="line">	PrintLink(head);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027223049024.png" alt="image-20191027223049024"></p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><malloc.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN sizeof(struct student)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>{</span><span class="comment">//定义链表</span></span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">float</span> score;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *head)</span></span>{<span class="comment">//打印链表</span></span><br><span class="line">	<span class="keyword">while</span>(head!=<span class="literal">NULL</span>){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"num=%d,score=%f\n"</span>,head->num,head->score);</span><br><span class="line">		head=head->next;</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"><span class="function">struct student *<span class="title">DeleteNode</span><span class="params">(<span class="keyword">int</span> input,struct student *head)</span></span>{</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"空链表\n"</span>);</span><br><span class="line">	}	</span><br><span class="line">	p1=head;	</span><br><span class="line">		<span class="keyword">while</span>(p1->num!=input&&p1->next!=<span class="literal">NULL</span>){<span class="comment">//当输入的shu和链表的书不相等时.</span></span><br><span class="line">			p2=p1;</span><br><span class="line">			p1=p1->next;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">if</span>(p1->num==input){</span><br><span class="line">			<span class="keyword">if</span>(p1==head){</span><br><span class="line">				head=p1->next;	</span><br><span class="line">			}<span class="keyword">else</span>{</span><br><span class="line">				p2->next=p1->next;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">return</span> head;</span><br><span class="line">	}</span><br><span class="line"><span class="function">struct student *<span class="title">insert</span><span class="params">(struct student *stu,struct student *head)</span></span>{<span class="comment">//有bug</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>,*<span class="title">p2</span>,*<span class="title">p0</span>;</span></span><br><span class="line">	p0=stu;</span><br><span class="line">	<span class="keyword">if</span>(head==<span class="literal">NULL</span>){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"NUll linktable\n"</span>);</span><br><span class="line">	}</span><br><span class="line">	p1=head;</span><br><span class="line">	<span class="keyword">while</span>(p0->num>p1->num&&(p1->next!=<span class="literal">NULL</span>)){</span><br><span class="line">		p2=p1;</span><br><span class="line">		p1=p1->next;</span><br><span class="line">		<span class="keyword">if</span>(p0->num<=p1->num){</span><br><span class="line">			<span class="keyword">if</span>(head==p1){</span><br><span class="line">				head=p0;</span><br><span class="line">			}<span class="keyword">else</span>{</span><br><span class="line">				p2->next=p0;</span><br><span class="line">				p0->next=p1;</span><br><span class="line">			}</span><br><span class="line"></span><br><span class="line">		}<span class="keyword">else</span>{</span><br><span class="line">			p1->next=p0;</span><br><span class="line">			p0->next=<span class="literal">NULL</span>;</span><br><span class="line">		}</span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line">	p1=head;</span><br><span class="line">	p2=p1;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function">struct student *<span class="title">create</span><span class="params">()</span></span>{<span class="comment">//创建链表</span></span><br><span class="line">	<span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">head</span>,*<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line">	p1=p2=(struct student *)<span class="built_in">malloc</span>(LEN);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"input num-------------:"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&p1->num);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"input score-----------:"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%f"</span>,&p1->score);</span><br><span class="line">	head=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">while</span>(p1->num!=<span class="number">0</span>){</span><br><span class="line">		n++;</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">1</span>){</span><br><span class="line">			head=p1;</span><br><span class="line">		}<span class="keyword">else</span>{</span><br><span class="line">			p2->next=p1;</span><br><span class="line">		}</span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line">		p2=p1;</span><br><span class="line">		p1=(struct student *)<span class="built_in">malloc</span>(LEN);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"input num-------------:"</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&p1->num);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"input score-----------:"</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%f"</span>,&p1->score);</span><br><span class="line">	}</span><br><span class="line">		p2->next=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">	</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="keyword">int</span> input;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">stu</span>,*<span class="title">p</span>,<span class="title">stu1</span>;</span></span><br><span class="line">	stu=create();</span><br><span class="line">	p=stu;</span><br><span class="line">	<span class="built_in">print</span>(p);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"删除节点-----:"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&input);</span><br><span class="line">	<span class="built_in">print</span>(DeleteNode(input,p));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"插入节点"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"input num-------------:"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&stu1.num);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"input score-----------:"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%f"</span>,&stu1.score);</span><br><span class="line">	<span class="built_in">print</span>(insert(&stu1,stu));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"插入节点"</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"input num-------------:"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&stu1.num);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"input score-----------:"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%f"</span>,&stu1.score);</span><br><span class="line">	<span class="built_in">print</span>(insert(&stu1,stu));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191028182743903.png" alt="image-20191028182743903"></p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdlib.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	FILE *file;</span><br><span class="line">	<span class="keyword">if</span>(!(file=fopen(<span class="string">"d:\\hello.txt"</span>,<span class="string">"w"</span>))){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"error"</span>);</span><br><span class="line">	}<span class="keyword">else</span>{</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"success!!!\n"</span>);</span><br><span class="line">		</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029131827023.png" alt="image-20191029131827023"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029142743283.png" alt="image-20191029142743283"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029144251829.png" alt="image-20191029144251829"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029144350161.png" alt="image-20191029144350161"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029144636084.png" alt="image-20191029144636084"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029144811799.png" alt="image-20191029144811799"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029144847446.png" alt="image-20191029144847446"></p>
<p>用位运算实现大小写转换</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"please input char:"</span>);</span><br><span class="line">	ch=getchar();</span><br><span class="line">	<span class="keyword">while</span>(!(ch><span class="string">'A'</span>&&ch<<span class="string">'z'</span>)||(ch><span class="string">'Z'</span>&&ch<<span class="string">'a'</span>)){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"error please input:\n"</span>);</span><br><span class="line">		ch=getchar();</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">if</span>(ch & <span class="number">32</span>){<span class="comment">//32的二进制位是100000 ch&100000得到第五位数是0,然后就换转大写</span></span><br><span class="line">		ch=ch&<span class="number">223</span>;</span><br><span class="line">	}<span class="keyword">else</span>{</span><br><span class="line">	</span><br><span class="line">		ch=ch|<span class="number">255</span>;<span class="comment">//得到第五位数是1 转小写.</span></span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">putchar</span>(ch);</span><br><span class="line"></span><br><span class="line">	ch=getchar();<span class="comment">//打印回车</span></span><br><span class="line">	<span class="built_in">putchar</span>(ch);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029151159306.png" alt="image-20191029151159306"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029151309955.png" alt="image-20191029151309955"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029151500290.png" alt="image-20191029151500290"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029151813040.png" alt="image-20191029151813040"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029152251623.png" alt="image-20191029152251623"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029152632086.png" alt="image-20191029152632086"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029152726176.png" alt="image-20191029152726176"></p>
<p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029153550877.png" alt="image-20191029153550877"></p>
<p>struct与malloc</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><malloc.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN sizeof(struct student)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>{</span></span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">char</span> *name;</span><br><span class="line">	<span class="keyword">int</span> score;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(struct student *p)</span></span>{</span><br><span class="line">	(*p).id=<span class="number">12</span>;</span><br><span class="line">	p->name=<span class="string">"hello"</span>;</span><br><span class="line">	p->score=<span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(struct student *p)</span></span>{</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d %s %d\n"</span>,p->id,p->name,p->score);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">stu</span>;</span></span><br><span class="line">	stu=(struct student *)<span class="built_in">malloc</span>(LEN);</span><br><span class="line">	fun(stu);</span><br><span class="line">	<span class="comment">//printf("%d %s %d",stu.id,stu.name,stu.score);</span></span><br><span class="line">	show(stu);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>动态数组的增删排</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><malloc.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdlib.h></span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Arr</span>{</span></span><br><span class="line">	<span class="keyword">int</span> *pBase;<span class="comment">//数组的首地址</span></span><br><span class="line">	<span class="keyword">int</span> len;<span class="comment">//数组的长度</span></span><br><span class="line">	<span class="keyword">int</span> cnt;<span class="comment">//当前有效元素的个数</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_arr</span><span class="params">(struct Arr *,<span class="keyword">int</span> length)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">append_arr</span><span class="params">(struct Arr *,<span class="keyword">int</span> val)</span></span>;<span class="comment">//追加</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert_arr</span><span class="params">(struct Arr *,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete_arr</span><span class="params">(struct Arr *,<span class="keyword">int</span> pos,<span class="keyword">int</span> *val)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int get();</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_empty</span><span class="params">(struct Arr *p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_full</span><span class="params">(struct Arr *p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sort_arr</span><span class="params">(struct Arr *p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_arr</span><span class="params">(struct Arr *p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reverse_arr</span><span class="params">(struct Arr *p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Arr</span> <span class="title">arr</span>;</span></span><br><span class="line">	<span class="keyword">int</span> val;</span><br><span class="line">	init_arr(&arr,<span class="number">6</span>);</span><br><span class="line">	append_arr(&arr,<span class="number">100</span>);</span><br><span class="line">	append_arr(&arr,<span class="number">99</span>);</span><br><span class="line">	append_arr(&arr,<span class="number">80</span>);</span><br><span class="line">	append_arr(&arr,<span class="number">23</span>);</span><br><span class="line">	<span class="keyword">if</span>(append_arr(&arr,<span class="number">45</span>)){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"append success\n"</span>);</span><br><span class="line">	}</span><br><span class="line">	insert_arr(&arr,<span class="number">7</span>,<span class="number">555</span>);</span><br><span class="line">	<span class="keyword">if</span>(append_arr(&arr,<span class="number">567</span>)){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"append success\n"</span>);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(append_arr(&arr,<span class="number">1000</span>)==<span class="number">1</span>){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"append success\n"</span>);</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,arr.cnt);</span><br><span class="line">	show_arr(&arr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"----------删除元素-------\n"</span>);</span><br><span class="line">	delete_arr(&arr,<span class="number">3</span>,&val);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"--------删除的元素是:%d\n"</span>,val);</span><br><span class="line">	show_arr(&arr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"----------倒置元素--------\n"</span>);</span><br><span class="line">	reverse_arr(&arr);</span><br><span class="line">	show_arr(&arr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"----------排序-------------\n"</span>);</span><br><span class="line">	sort_arr(&arr);</span><br><span class="line">	show_arr(&arr);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,arr.cnt);</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_arr</span><span class="params">(struct Arr *p,<span class="keyword">int</span> length)</span></span>{</span><br><span class="line">	p->pBase=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*length);</span><br><span class="line">	<span class="keyword">if</span>(<span class="literal">NULL</span>==p->pBase){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"error\n"</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	}</span><br><span class="line">	p->len=length;</span><br><span class="line">	p->cnt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_empty</span><span class="params">(struct Arr *p)</span></span>{</span><br><span class="line">	<span class="keyword">if</span>(p->cnt==<span class="number">0</span>){</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_arr</span><span class="params">(struct Arr *p)</span></span>{</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">if</span>(is_empty(p)==<span class="number">1</span>){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"数组为空\n"</span>);	</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i<p->cnt;i++){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>,*(p->pBase+i));</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_full</span><span class="params">(struct Arr *p)</span></span>{</span><br><span class="line">	<span class="keyword">if</span>(p->cnt==p->len){</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">append_arr</span><span class="params">(struct Arr *p,<span class="keyword">int</span> val)</span></span>{</span><br><span class="line">	<span class="keyword">if</span>(is_full(p)==<span class="number">1</span>){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"数组已满\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">//不满时</span></span><br><span class="line">	p->pBase[p->cnt]=val;</span><br><span class="line">	(p->cnt)++;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert_arr</span><span class="params">(struct Arr *p,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>{</span><br><span class="line">	<span class="keyword">int</span> i=(p->cnt)<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(pos<<span class="number">1</span>||pos>(p->cnt)+<span class="number">1</span>){<span class="comment">//<1或者大于当前有效元素</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">if</span>(is_full(p)==<span class="number">1</span>){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"数组已满\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">//pos的值从1开始,且从pos的位置之前插入</span></span><br><span class="line">	<span class="keyword">for</span>(;i>=pos<span class="number">-1</span>;i--){</span><br><span class="line">		p->pBase[i+<span class="number">1</span>]=p->pBase[i];</span><br><span class="line">	}</span><br><span class="line">	p->pBase[pos<span class="number">-1</span>]=val;</span><br><span class="line">	(p->cnt)++;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete_arr</span><span class="params">(struct Arr *p,<span class="keyword">int</span> pos,<span class="keyword">int</span> *val)</span></span>{</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">if</span>(is_empty(p)==<span class="number">1</span>){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"数组为空\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">if</span>(pos<<span class="number">1</span>||pos>p->cnt){</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	}</span><br><span class="line">	*val=p->pBase[pos<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">for</span>(i=pos;i<=p->cnt;i++){</span><br><span class="line">		p->pBase[i<span class="number">-1</span>]=p->pBase[i];</span><br><span class="line">	}</span><br><span class="line">	(p->cnt)--;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reverse_arr</span><span class="params">(struct Arr *p)</span></span>{</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>,temp,j=p->cnt<span class="number">-1</span>;</span><br><span class="line">	<span class="comment">//int *low,*high;</span></span><br><span class="line">	<span class="keyword">if</span>(is_empty(p)==<span class="number">1</span>){</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"数组为空\n"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">while</span>(i<j){</span><br><span class="line">		temp=p->pBase[i];</span><br><span class="line">		p->pBase[i]=p->pBase[j];</span><br><span class="line">		p->pBase[j]=temp;</span><br><span class="line">		i++;</span><br><span class="line">		j--;</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*low=&(p->pBase[0]);</span></span><br><span class="line"><span class="comment">	high=&(p->pBase[p->cnt]);</span></span><br><span class="line"><span class="comment">	for(i=0;i<=(high-low)/4;i++){</span></span><br><span class="line"><span class="comment">		low=&(p->pBase[i]);</span></span><br><span class="line"><span class="comment">		high=&(p->pBase[p->cnt-1-i]);</span></span><br><span class="line"><span class="comment">		temp=*low;</span></span><br><span class="line"><span class="comment">		*low=*high;</span></span><br><span class="line"><span class="comment">		*high=temp;</span></span><br><span class="line"><span class="comment">	}*/</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sort_arr</span><span class="params">(struct Arr *p)</span></span>{</span><br><span class="line">	<span class="keyword">int</span> i,<span class="built_in">min</span>,j,temp;</span><br><span class="line">	<span class="keyword">for</span>(j=<span class="number">0</span>;j<p->cnt;j++){</span><br><span class="line">		<span class="built_in">min</span>=p->pBase[j];</span><br><span class="line">		<span class="keyword">for</span>(i=j+<span class="number">1</span>;i<p->cnt;i++){</span><br><span class="line">			<span class="keyword">if</span>(p->pBase[i]<<span class="built_in">min</span>){</span><br><span class="line">				temp=p->pBase[i];</span><br><span class="line">				p->pBase[i]=<span class="built_in">min</span>;</span><br><span class="line">				<span class="built_in">min</span>=temp;</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">			p->pBase[j]=<span class="built_in">min</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo用gulp压缩静态资源的问题</title>
    <url>/2020/04/04/problem/Hexo%E7%94%A8gulp%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<html><head></head><body><h3 id="Hexo-建站面临的访问缓慢问题一直不得其解-经过大量的搜索后解决一半"><a href="#Hexo-建站面临的访问缓慢问题一直不得其解-经过大量的搜索后解决一半" class="headerlink" title="Hexo 建站面临的访问缓慢问题一直不得其解,经过大量的搜索后解决一半"></a>Hexo 建站面临的访问缓慢问题一直不得其解,经过大量的搜索后解决一半</h3><p>搜索几乎都是用neat和gulp,但是都是老版本的js,运行一直报错</p>
<h4 id="1-安装-gulp"><a href="#1-安装-gulp" class="headerlink" title="1 安装 gulp"></a>1 安装 gulp</h4><p>站点目录下执行</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></tbody></table></figure>

<a id="more"></a>

<h4 id="2-安装gulp插件"><a href="#2-安装gulp插件" class="headerlink" title="2 安装gulp插件"></a>2 安装gulp插件</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install gulp-minify-css --save</span><br><span class="line">npm install gulp-uglify --save</span><br><span class="line">npm install gulp-htmlmin --save</span><br><span class="line">npm install gulp-htmlclean --save</span><br><span class="line">npm install gulp-imagemin --save</span><br></pre></td></tr></tbody></table></figure>

<p>执行一次安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br></pre></td></tr></tbody></table></figure>

<p>安装其他一些插件</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># 解决【Gulp打包问题】 GulpUglifyError: unable to minify JavaScript</span><br><span class="line"># 解决 gulp-uglify 压缩JavaScript 不兼容 es5 语法的问题</span><br><span class="line">npm install babel-core@6.26.3 --save</span><br><span class="line">npm install gulp-babel@7.0.1 --save</span><br><span class="line">npm install babel-preset-es2015@6.24.1 --save</span><br><span class="line"># gulp-babel 取消严格模式方法("use strict")</span><br><span class="line">npm install babel-plugin-transform-remove-strict-mode --save</span><br></pre></td></tr></tbody></table></figure>

<h4 id="3-根目录创建gulpfile-js并加入一下代码"><a href="#3-根目录创建gulpfile-js并加入一下代码" class="headerlink" title="3 根目录创建gulpfile.js并加入一下代码"></a>3 根目录创建gulpfile.js并加入一下代码</h4><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="keyword">async</span>(done)=> {</span><br><span class="line">    <span class="keyword">await</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">    done();</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="keyword">async</span>(done)=> {</span><br><span class="line">    <span class="keyword">await</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin({</span><br><span class="line">            removeComments: <span class="literal">true</span>,</span><br><span class="line">            minifyJS: <span class="literal">true</span>,</span><br><span class="line">            minifyCSS: <span class="literal">true</span>,</span><br><span class="line">            minifyURLs: <span class="literal">true</span>,</span><br><span class="line">        }))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">    done();</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="keyword">async</span>(done)=>{</span><br><span class="line">    <span class="keyword">await</span> gulp.src([<span class="string">'./public/**/*.js'</span>, <span class="string">'!./public/**/*.min.js'</span>])</span><br><span class="line">        .pipe(babel({</span><br><span class="line">            <span class="comment">//将ES6代码转译为可执行的JS代码</span></span><br><span class="line">            presets: [<span class="string">'es2015'</span>] <span class="comment">// es5检查机制</span></span><br><span class="line">        }))</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">    done();</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/images 目录内图片(Version<3)</span></span><br><span class="line"><span class="comment">// gulp.task('minify-images', function () {</span></span><br><span class="line"><span class="comment">//     gulp.src('./public/images/**/*.*')</span></span><br><span class="line"><span class="comment">//         .pipe(imagemin({</span></span><br><span class="line"><span class="comment">//             optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</span></span><br><span class="line"><span class="comment">//             progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</span></span><br><span class="line"><span class="comment">//             interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span><br><span class="line"><span class="comment">//             multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化</span></span><br><span class="line"><span class="comment">//         }))</span></span><br><span class="line"><span class="comment">//         .pipe(gulp.dest('./public/images'));</span></span><br><span class="line"><span class="comment">// });</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/images 目录内图片(Version>3)</span></span><br><span class="line">gulp.task(<span class="string">'minify-images'</span>, <span class="keyword">async</span>(done)=> {</span><br><span class="line">    <span class="keyword">await</span> gulp.src(<span class="string">'./public/images/**/*.*'</span>)</span><br><span class="line">        .pipe(imagemin([</span><br><span class="line">            imagemin.gifsicle({<span class="attr">interlaced</span>: <span class="literal">true</span>}),</span><br><span class="line">            <span class="comment">//imagemin.jpegtran({progressive: true}),</span></span><br><span class="line">            imagemin.optipng({<span class="attr">optimizationLevel</span>: <span class="number">5</span>}),</span><br><span class="line">            imagemin.svgo({</span><br><span class="line">                plugins: [</span><br><span class="line">                    {<span class="attr">removeViewBox</span>: <span class="literal">true</span>},</span><br><span class="line">                    {<span class="attr">cleanupIDs</span>: <span class="literal">false</span>}</span><br><span class="line">                ]</span><br><span class="line">            })</span><br><span class="line">        ]))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public/images'</span>));</span><br><span class="line">    done();</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.0以前的写法 </span></span><br><span class="line"><span class="comment">//gulp.task('default', [</span></span><br><span class="line"><span class="comment">//  'minify-html', 'minify-css', 'minify-js', 'minify-images'</span></span><br><span class="line"><span class="comment">//]);</span></span><br><span class="line"><span class="comment">//4.0以后的写法</span></span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.series(gulp.parallel(<span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>, <span class="string">'minify-js'</span>, <span class="string">'minify-images'</span>)), <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----------gulp Finished----------"</span>);</span><br><span class="line">    <span class="comment">// Do something after a, b, and c are finished.</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<h4 id="4-执行"><a href="#4-执行" class="headerlink" title="4 执行"></a>4 执行</h4><figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">gulp default</span><br></pre></td></tr></tbody></table></figure>

<p>你会发现有这个错误</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ gulp default</span><br><span class="line">[05:53:37] Using gulpfile E:\博客\philxling\gulpfile.js</span><br><span class="line">[05:53:37] Starting 'default'...</span><br><span class="line">[05:53:37] Starting 'minify-html'...</span><br><span class="line">[05:53:37] Starting 'minify-css'...</span><br><span class="line">[05:53:37] Starting 'minify-js'...</span><br><span class="line">[05:53:37] Starting 'minify-images'...</span><br><span class="line">[05:53:37] Finished 'minify-html' after 78 ms</span><br><span class="line">[05:53:37] Finished 'minify-css' after 79 ms</span><br><span class="line">[05:53:37] Finished 'minify-js' after 79 ms</span><br><span class="line">[05:53:37] 'minify-images' errored after 79 ms</span><br><span class="line">[05:53:37] TypeError: imagemin.jpegtran is not a function</span><br><span class="line">    at E:\博客\philxling\gulpfile.js:60:22</span><br><span class="line">    at minify-images (E:\博客\philxling\node_modules\undertaker\lib\set-task.js:13:15)</span><br><span class="line">    at bound (domain.js:426:14)</span><br><span class="line">    at runBound (domain.js:439:12)</span><br><span class="line">    at asyncRunner (E:\博客\philxling\node_modules\async-done\index.js:55:18)</span><br><span class="line">    at processTicksAndRejections (internal/process/task_queues.js:79:11)</span><br><span class="line">[05:53:37] 'default' errored after 82 ms</span><br></pre></td></tr></tbody></table></figure>

<p>注释掉<code>imagemin.jpegtran({progressive: true}),</code>并且修改代码, 将所有的function和return替换为async和await</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">    done();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<p>改为</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="keyword">async</span>(done)=> {</span><br><span class="line">    <span class="keyword">await</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">    done();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<p>再次<code>gulp</code>出现</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">$ gulp default</span><br><span class="line">[05:32:10] Using gulpfile E:\博客\philxling\gulpfile.js</span><br><span class="line">[05:32:10] Starting 'default'...</span><br><span class="line">[05:32:10] Starting 'minify-html'...</span><br><span class="line">[05:32:10] Starting 'minify-css'...</span><br><span class="line">[05:32:10] Starting 'minify-js'...</span><br><span class="line">[05:32:10] Starting 'minify-images'...</span><br><span class="line">[05:32:11] Finished 'minify-html' after 434 ms</span><br><span class="line">[05:32:11] Finished 'minify-css' after 435 ms</span><br><span class="line">[05:32:11] Finished 'minify-js' after 435 ms</span><br><span class="line">[05:32:11] Finished 'minify-images' after 434 ms</span><br><span class="line">[05:32:11] Finished 'default' after 437 ms</span><br><span class="line"></span><br><span class="line">events.js:288</span><br><span class="line">      throw er; // Unhandled 'error' event</span><br><span class="line">      ^</span><br><span class="line">PluginError: ....</span><br></pre></td></tr></tbody></table></figure>

<p>这些是js的一些问题,自己慢慢解决</p>
<p>我出现的是</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"> at new HTMLParser (E:\博客\philxling\node_modules\gulp-htmlmin\node_modules\</span><br><span class="line">    at minify (E:\博客\philxling\node_modules\gulp-htmlmin\node_modules\html-min</span><br><span class="line">    at Object.exports.minify (E:\博客\philxling\node_modules\gulp-htmlmin\node_m</span><br><span class="line">    at minify (E:\博客\philxling\node_modules\gulp-htmlmin\index.js:16:44)</span><br><span class="line">    at DestroyableTransform._transform (E:\博客\philxling\node_modules\gulp-html</span><br><span class="line">    at DestroyableTransform.Transform._read (E:\博客\philxling\node_modules\read</span><br><span class="line">    at DestroyableTransform.Transform._write (E:\博客\philxling\node_modules\rea</span><br><span class="line">    at doWrite (E:\博客\philxling\node_modules\readable-stream\lib\_stream_writa</span><br><span class="line">    at writeOrBuffer (E:\博客\philxling\node_modules\readable-stream\lib\_stream</span><br><span class="line">    at DestroyableTransform.Writable.write (E:\博客\philxling\node_modules\reada</span><br><span class="line">Emitted 'error' event on Domain instance at:</span><br><span class="line">    at DestroyableTransform.EventEmitter.emit (domain.js:500:12)</span><br><span class="line">    at DestroyableTransform.onerror (E:\博客\philxling\node_modules\readable-str</span><br><span class="line">    at DestroyableTransform.emit (events.js:311:20)</span><br><span class="line">    at DestroyableTransform.EventEmitter.emit (domain.js:482:12)</span><br><span class="line">    at onwriteError (E:\博客\philxling\node_modules\readable-stream\lib\_stream_</span><br><span class="line">    at onwrite (E:\博客\philxling\node_modules\readable-stream\lib\_stream_writa</span><br><span class="line">    at WritableState.onwrite (E:\博客\philxling\node_modules\readable-stream\lib</span><br><span class="line">    at DestroyableTransform.afterTransform (E:\博客\philxling\node_modules\reada</span><br><span class="line">    at minify (E:\博客\philxling\node_modules\gulp-htmlmin\index.js:31:9)</span><br><span class="line">    at DestroyableTransform._transform (E:\博客\philxling\node_modules\gulp-html</span><br></pre></td></tr></tbody></table></figure>

<p>未解,但是能够<code>hexo d</code></p>
<p>睡了,2020-4-4,祝大家好,祖国好.</p>
</body></html>]]></content>
      <categories>
        <category>problem</category>
      </categories>
      <tags>
        <tag>problem</tag>
        <tag>Hexo</tag>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>c++面向对象</title>
    <url>/2020/04/02/c++/2-c-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<html><head></head><body><h3 id="c-面向对象"><a href="#c-面向对象" class="headerlink" title="c++面向对象"></a>c++面向对象</h3><a id="more"></a>

<p><img src="/2020/04/02/c++/2-c-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20191108170627836.png" alt="image-20191108170627836"></p>
<p><img src="/2020/04/02/c++/2-c-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20191108171009756.png" alt="image-20191108171009756"></p>
<p><img src="/2020/04/02/c++/2-c-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20191108171843986.png" alt="image-20191108171843986"></p>
<p><img src="/2020/04/02/c++/2-c-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20191108172250542.png" alt="image-20191108172250542"></p>
<p>引用是指针常量</p>
<p>如:</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> &b=a;</span><br></pre></td></tr></tbody></table></figure>

<p>即:</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> b=&a;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/2020/04/02/c++/2-c-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20191108205932273.png" alt="image-20191108205932273"></p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> ,<span class="keyword">int</span> =<span class="number">10</span>)</span></span>;<span class="comment">//占位参数,且可以有默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b=<span class="number">10000</span>,<span class="keyword">int</span> c=<span class="number">100</span>)</span></span>{<span class="comment">//若我们自己传入数据,就用自己的数据,如果没有,就用默认值 </span></span><br><span class="line">	<span class="keyword">return</span> a+b+c;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//注意事项,若某个位置有了默认参数,那么从这个位置后的参数都必须要有默认值</span></span><br><span class="line"><span class="comment">//如果函数声明和函数实现只能有一个有默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="built_in">cout</span><<fun(<span class="number">10</span>,<span class="number">20</span>)<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>函数重载</strong></p>
<p>1 必须在同一个作用域下</p>
<p>2 函数名称相同</p>
<p>3 函数参数类型不同,或者个数不同,或者顺序不同</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">cout</span><<<span class="string">"fun"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span>)</span></span>{</span><br><span class="line">    <span class="built_in">cout</span><<<span class="string">"fun!"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//返回值不能作为函数重载的条件</span></span><br><span class="line"><span class="comment">//注意事项</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1 引用作为重载的条件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> &a)</span></span>{</span><br><span class="line">    <span class="built_in">cout</span><<<span class="string">"引用作为重载"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &a)</span></span>{</span><br><span class="line">    <span class="built_in">cout</span><<<span class="string">"const int &a作为重载"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">func(a);<span class="comment">//调用的是func(int &a)</span></span><br><span class="line">func(<span class="number">10</span>);<span class="comment">//调用的是func(const int &a)</span></span><br><span class="line"><span class="comment">//2 函数重载作为默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b=<span class="number">10</span>)</span></span>{</span><br><span class="line">    <span class="built_in">cout</span><<<span class="string">"func2(int a,int b=10)"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a)</span></span>{</span><br><span class="line">    <span class="built_in">cout</span><<<span class="string">"func2(int a)"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//出现歧义</span></span><br><span class="line"><span class="comment">//应该避免这种情况</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//圆类</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:<span class="comment">//权限,访问权限:public protected,private</span></span><br><span class="line">		<span class="keyword">int</span> r ;</span><br><span class="line">		<span class="function"><span class="keyword">double</span> <span class="title">calculateZC</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="keyword">return</span> <span class="number">2</span>*PI*r;</span><br><span class="line">		}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="comment">//创建对象</span></span><br><span class="line">	 Circle c1;</span><br><span class="line">	 c1.r=<span class="number">3</span>;</span><br><span class="line">	 <span class="built_in">cout</span><<<span class="string">"圆的周长:"</span><<c1.calculateZC()<<<span class="built_in">endl</span>;</span><br><span class="line">	 </span><br><span class="line">} </span><br><span class="line"><span class="comment">//struct和class的区别:</span></span><br><span class="line"><span class="comment">//struct默认权限是public</span></span><br><span class="line"><span class="comment">//class默认权限是private</span></span><br></pre></td></tr></tbody></table></figure>

<p>构造函数</p>
<p>1 构造函数没有返回值,不用写void</p>
<p>2 函数名与类名相同</p>
<p>3 构造函数可以有参数,可以发生重载</p>
<p>4 创建对象的时候,构造函数会自动调用,且只调用一次</p>
<p>1 析构函数 进行清理的操作</p>
<p>2 没有返回值,不写void</p>
<p>3 函数名与类名相同,在名称前加~</p>
<p>4 对象在销毁前会自动调用析构函数,且只会调用一次</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Person(<span class="keyword">int</span> a){</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"person构造函数的调用"</span><<<span class="built_in">endl</span>; </span><br><span class="line">			<span class="built_in">cout</span><<a<<<span class="built_in">endl</span>;</span><br><span class="line">		}</span><br><span class="line">		~Person(){</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"析构函数的调用"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">12</span>)</span></span>;<span class="comment">//在栈上的数据 </span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>拷贝构造</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数的分类和调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Person(){</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"无参"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		};<span class="comment">//无参构造 </span></span><br><span class="line">		Person(<span class="keyword">int</span> a){<span class="comment">//有参构造 </span></span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"有参"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">		<span class="comment">//拷贝构造函数</span></span><br><span class="line">		Person(<span class="keyword">const</span> Person &p){</span><br><span class="line">			<span class="comment">//将传入的对象的所有属性拷贝到自己身上.</span></span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"拷贝构造"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		} </span><br><span class="line">		~Person(){</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"析构"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="comment">//括号法</span></span><br><span class="line">	Person p1;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">12</span>)</span></span>; </span><br><span class="line">	<span class="comment">//调用拷贝构造函数</span></span><br><span class="line">	<span class="function">Person  <span class="title">p3</span><span class="params">(p1)</span></span>;</span><br><span class="line">	<span class="comment">//注意事项:</span></span><br><span class="line">	<span class="comment">//不能用Person p1()调用,编译器会认为一个函数,不会认为是创建对象 </span></span><br><span class="line">	<span class="comment">//显示法</span></span><br><span class="line">	Person p4=p1; </span><br><span class="line">	Person(<span class="number">10</span>);<span class="comment">//匿名对象 ,当前行执行结束,系统会立即回收掉匿名对象 </span></span><br><span class="line">	<span class="comment">//不要利用拷贝构造函数初始化匿名对象如: Person(p1); 编译器会认为Person (p1)==Person p1 ,对象声明 </span></span><br><span class="line">	<span class="comment">//隐式转换法 </span></span><br><span class="line">	Person  p5=<span class="number">10</span>;<span class="comment">//等价于 Person p5=Person(10); 有参构造 </span></span><br><span class="line">	Person p6=p5;<span class="comment">//拷贝 </span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>拷贝构造函数使用时机</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造函数调用时机 </span></span><br><span class="line"><span class="comment">//1 使用一个已经创建的对象来初始化一个新对象 </span></span><br><span class="line"><span class="comment">//2 值传递的方式给函数传值</span></span><br><span class="line"><span class="comment">//3 值返回局部对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Person(){</span><br><span class="line">		<span class="built_in">cout</span><<<span class="string">"默认"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		};</span><br><span class="line">		Person(<span class="keyword">const</span> Person &p){</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"拷贝构造"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">		~Person(){</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"析构"</span><<<span class="built_in">endl</span>; </span><br><span class="line">		}</span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">	Person p1;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dowork</span><span class="params">(Person p)</span></span>{</span><br><span class="line">	</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>{</span><br><span class="line">	Person p3;</span><br><span class="line">	dowork(p3);</span><br><span class="line">}</span><br><span class="line"><span class="function">Person <span class="title">dowork1</span><span class="params">()</span></span>{</span><br><span class="line">	Person p4;</span><br><span class="line">	<span class="built_in">cout</span><<<span class="string">"p4--"</span><<(<span class="keyword">int</span>*)&p4<<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> p4;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>{</span><br><span class="line">	Person p5=dowork1();</span><br><span class="line">	<span class="built_in">cout</span><<(<span class="keyword">int</span>*)&p5<<<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test1();</span><br><span class="line">	test2();</span><br><span class="line">	test3();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">} </span><br><span class="line"><span class="comment">/*默认</span></span><br><span class="line"><span class="comment">拷贝构造</span></span><br><span class="line"><span class="comment">析构</span></span><br><span class="line"><span class="comment">析构</span></span><br><span class="line"><span class="comment">默认</span></span><br><span class="line"><span class="comment">拷贝构造</span></span><br><span class="line"><span class="comment">析构</span></span><br><span class="line"><span class="comment">析构</span></span><br><span class="line"><span class="comment">默认</span></span><br><span class="line"><span class="comment">p4--0019FE64</span></span><br><span class="line"><span class="comment">拷贝构造</span></span><br><span class="line"><span class="comment">析构</span></span><br><span class="line"><span class="comment">0019FECC</span></span><br><span class="line"><span class="comment">析构</span></span><br><span class="line"><span class="comment">Press any key to continue</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//如果写了有参构造,编译器不提供无参</span></span><br><span class="line"><span class="comment">//写了拷贝构造,不提供其他构造函数</span></span><br></pre></td></tr></tbody></table></figure>

<p>深拷贝浅拷贝</p>
<p>浅拷贝:简单的赋值拷贝操作</p>
<p>深拷贝:在堆区重新申请空间,进行拷贝操作</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝,浅拷贝</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Person(){	</span><br><span class="line">		}</span><br><span class="line">		~Person(){</span><br><span class="line">			<span class="comment">//将堆区开辟的数据释放</span></span><br><span class="line">			 <span class="keyword">if</span>(P_height!=<span class="literal">NULL</span>){</span><br><span class="line">			 	<span class="keyword">delete</span> P_height;</span><br><span class="line">			 	P_height=<span class="literal">NULL</span>;</span><br><span class="line">			 } </span><br><span class="line">		}</span><br><span class="line">		Person(<span class="keyword">int</span> age,<span class="keyword">int</span> <span class="built_in">height</span>){</span><br><span class="line">			P_height=<span class="keyword">new</span> <span class="keyword">int</span>(<span class="built_in">height</span>);</span><br><span class="line">			P_age=age;</span><br><span class="line">		}</span><br><span class="line">		Person(<span class="keyword">const</span> Person &p){</span><br><span class="line">			P_age=p.P_age;</span><br><span class="line">			<span class="comment">//p_height=p.P_height;编译器执行的是这种</span></span><br><span class="line">			<span class="comment">//用深拷贝解决</span></span><br><span class="line">			 P_height=<span class="keyword">new</span> <span class="keyword">int</span>(*p.P_height); </span><br><span class="line">		}</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> P_age;</span><br><span class="line">		<span class="keyword">int</span> *P_height;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="function">Person <span class="title">p</span><span class="params">(<span class="number">12</span>,<span class="number">150</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(p)</span></span>;</span><br><span class="line">	<span class="built_in">cout</span><<p.P_age<<*p.P_height<<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span><<p1.P_age<<*p1.P_height<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	Test1();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>初始化列表</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Person(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c):a(a),b(b),c(c){<span class="comment">//初始化列表 </span></span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">int</span> a;</span><br><span class="line">		<span class="keyword">int</span> b;</span><br><span class="line">		<span class="keyword">int</span> c;</span><br><span class="line">};	</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="function">Person <span class="title">p</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line">	<span class="built_in">cout</span><<p.a<<p.b<<<span class="string">" "</span><<p.c<<<span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>对象成员</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><string></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Phone(<span class="built_in">string</span> Phone_name):name(Phone_name){ </span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"Phone的构造"</span>; </span><br><span class="line">		}</span><br><span class="line">		<span class="built_in">string</span> name;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Person(<span class="built_in">string</span> name,<span class="keyword">int</span> id):phone(name),P_id(id){</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"Person的构造"</span>; </span><br><span class="line">		}</span><br><span class="line">		Phone phone;</span><br><span class="line">		<span class="keyword">int</span> P_id;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="function">Person <span class="title">p</span><span class="params">(<span class="string">"apple"</span>,<span class="number">12</span>)</span></span>;</span><br><span class="line">	<span class="built_in">cout</span><<p.phone.name<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	test();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">} </span><br><span class="line"><span class="comment">//Phone的构造 Person的构造 apple</span></span><br><span class="line"><span class="comment">//先初始化Phone再初始化Person</span></span><br></pre></td></tr></tbody></table></figure>

<p>static成员</p>
<p>静态成员函数:所有对象共享,只能访问静态变量</p>
<p>静态成员变量:所有对象共有,类内声明,类外定义</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>{</span><br><span class="line">			<span class="built_in">cout</span><<<span class="string">"静态成员函数"</span><<<span class="built_in">endl</span>; </span><br><span class="line">			<span class="built_in">cout</span><<a++<<<span class="built_in">endl</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">static</span> <span class="keyword">int</span> a; </span><br><span class="line">		</span><br><span class="line">};</span><br><span class="line"><span class="keyword">int</span> Person::a=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="comment">//对象访问</span></span><br><span class="line">	Person p;</span><br><span class="line">	p.fun(); </span><br><span class="line">	Person::fun();<span class="comment">//类访问 </span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>只有非静态成员变量属于对象</p>
<p>空对象的内存占用为1个字节</p>
<p>this指针: this指针指向被调用的成员函数所属的对象,this指针是指针常量其指向不可以修改</p>
<p>1 可以解决名称冲突</p>
<p>2 返回此对象 return *this;</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="keyword">int</span> age;</span><br><span class="line">		Person(<span class="keyword">int</span> age):age(age){</span><br><span class="line">		}</span><br><span class="line">		<span class="function">Person& <span class="title">addPersonAge</span><span class="params">(Person &p)</span></span>{</span><br><span class="line">			<span class="keyword">this</span>->age+=p.age;</span><br><span class="line">			<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">		}</span><br><span class="line">		</span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">	p2.addPersonAge(p1).addPersonAge(p1).addPersonAge(p1);</span><br><span class="line">	<span class="built_in">cout</span><<p1.age<<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span><<p2.age<<<span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>常函数 :不能修改指针指向和值.</p>
<p>常对象:只能调用常函数</p>
<p><img src="/2020/04/02/c++/2-c-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20191110010838064.png" alt="image-20191110010838064"></p>
<p><img src="/2020/04/02/c++/2-c-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20191110011503286.png" alt="image-20191110011503286"></p>
<p>友元函数</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>{</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Building &b)</span></span>;<span class="comment">//友元函数//友元类 firend class GoodGay;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">string</span> sittingRoom;</span><br><span class="line">		Building(){</span><br><span class="line">			sittingRoom=<span class="string">"客厅"</span>;</span><br><span class="line">			bedRoom=<span class="string">"卧室"</span>; </span><br><span class="line">		}</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="built_in">string</span> bedRoom; </span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Building &b)</span></span>{</span><br><span class="line">	<span class="built_in">cout</span><<b.sittingRoom<<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span><<b.bedRoom<<<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	Building b;</span><br><span class="line">	visit(b);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>{</span></span><br><span class="line">	<span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodGay</span>;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">string</span> sittingRoom;</span><br><span class="line">		Building(); </span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="built_in">string</span> bedRoom; </span><br><span class="line">};</span><br><span class="line">Building::Building(){</span><br><span class="line">	sittingRoom=<span class="string">"客厅"</span>;</span><br><span class="line">	bedRoom=<span class="string">"卧室"</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodGay</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		GoodGay();</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line">		Building *building; </span><br><span class="line">}; </span><br><span class="line">GoodGay::GoodGay(){</span><br><span class="line">	building=<span class="keyword">new</span> Building;</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="built_in">cout</span><<building->sittingRoom<<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span><<building->bedRoom<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	GoodGay gay;</span><br><span class="line">	gay.visit();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>成员函数做友元</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="comment">//此处若要将哪个类的成员函数做右元,其类应放在前面,此乃大坑</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodGay</span>{</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		GoodGay();</span><br><span class="line">		Building *building;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>{</span></span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span>;<span class="comment">//将GoodGay类的visit作为BUilding的友元,GoodGay应该先定义.注意与友元类的区别</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		Building();</span><br><span class="line">		<span class="built_in">string</span> sitRoom;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="built_in">string</span> bedRoom;</span><br><span class="line">	</span><br><span class="line">}; </span><br><span class="line">Building::Building(){</span><br><span class="line">	sitRoom=<span class="string">"客厅"</span>;</span><br><span class="line">	bedRoom=<span class="string">"卧室"</span>; </span><br><span class="line">}</span><br><span class="line">GoodGay::GoodGay(){</span><br><span class="line">	building=<span class="keyword">new</span> Building;</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span>{</span><br><span class="line">	<span class="built_in">cout</span><<building->sitRoom<<<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span><<building->bedRoom<<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">	GoodGay gay;</span><br><span class="line">	gay.visit();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>xpath语法与lxml库</title>
    <url>/2020/03/24/python%E7%88%AC%E8%99%AB/5-xpath%E8%AF%AD%E6%B3%95%E4%B8%8Elxml%E5%BA%93/</url>
    <content><![CDATA[<html><head></head><body><h1 id="xpath语法与lxml库"><a href="#xpath语法与lxml库" class="headerlink" title="xpath语法与lxml库"></a>xpath语法与lxml库</h1><h2 id="什么是XPath？"><a href="#什么是XPath？" class="headerlink" title="什么是XPath？"></a>什么是XPath？</h2><p>xpath（XML Path Language）是一门在XML和HTML文档中查找信息的语言，可用来在XML和HTML文档中对元素和属性进行遍历。</p>
<a id="more"></a>

<h2 id="XPath开发工具"><a href="#XPath开发工具" class="headerlink" title="XPath开发工具"></a>XPath开发工具</h2><ol>
<li>Chrome插件XPath Helper。</li>
<li>Firefox插件Try XPath。</li>
</ol>
<h2 id="XPath语法"><a href="#XPath语法" class="headerlink" title="XPath语法"></a>XPath语法</h2><h3 id="选取节点："><a href="#选取节点：" class="headerlink" title="选取节点："></a>选取节点：</h3><p>XPath 使用路径表达式来选取 XML 文档中的节点或者节点集。这些路径表达式和我们在常规的电脑文件系统中看到的表达式非常相似。</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
<th>示例</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>nodename</td>
<td>选取此节点的所有子节点</td>
<td>bookstore</td>
<td>选取bookstore下所有的子节点</td>
</tr>
<tr>
<td>/</td>
<td>如果是在最前面，代表从根节点选取。否则选择某节点下的某个节点</td>
<td>/bookstore</td>
<td>选取根元素下所有的bookstore节点</td>
</tr>
<tr>
<td>//</td>
<td>从全局节点中选择节点，随便在哪个位置</td>
<td>//book</td>
<td>从全局节点中找到所有的book节点</td>
</tr>
<tr>
<td>@</td>
<td>选取某个节点的属性</td>
<td>//book[@price]</td>
<td>选择所有拥有price属性的book节点</td>
</tr>
<tr>
<td>.</td>
<td>当前节点</td>
<td>./a</td>
<td>选取当前节点下的a标签</td>
</tr>
</tbody></table>
<h3 id="谓语："><a href="#谓语：" class="headerlink" title="谓语："></a>谓语：</h3><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点，被嵌在方括号中。<br>在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：</p>
<table>
<thead>
<tr>
<th>路径表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>/bookstore/book[1]</td>
<td>选取bookstore下的第一个子元素</td>
</tr>
<tr>
<td>/bookstore/book[last()]</td>
<td>选取bookstore下的倒数第二个book元素。</td>
</tr>
<tr>
<td>bookstore/book[position()<3]</td>
<td>选取bookstore下前面两个子元素。</td>
</tr>
<tr>
<td>//book[@price]</td>
<td>选取拥有price属性的book元素</td>
</tr>
<tr>
<td>//book[@price=10]</td>
<td>选取所有属性price等于10的book元素</td>
</tr>
</tbody></table>
<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>*表示通配符。</p>
<table>
<thead>
<tr>
<th align="left">通配符</th>
<th align="left">描述</th>
<th align="left">示例</th>
<th align="left">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">匹配任意节点</td>
<td align="left">/bookstore/*</td>
<td align="left">选取bookstore下的所有子元素。</td>
</tr>
<tr>
<td align="left">@*</td>
<td align="left">匹配节点中的任何属性</td>
<td align="left">//book[@*]</td>
<td align="left">选取所有带有属性的book元素。</td>
</tr>
</tbody></table>
<h3 id="选取多个路径："><a href="#选取多个路径：" class="headerlink" title="选取多个路径："></a>选取多个路径：</h3><p>通过在路径表达式中使用“|”运算符，可以选取若干个路径。<br>示例如下：</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">//bookstore/book | //book/title</span><br><span class="line"># 选取所有book元素以及book元素下所有的title元素</span><br></pre></td></tr></tbody></table></figure>

<h3 id="运算符："><a href="#运算符：" class="headerlink" title="运算符："></a>运算符：</h3><table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">描述</th>
<th align="left">实例</th>
<th align="left">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">|</td>
<td align="left">计算两个节点集</td>
<td align="left">//book | //cd</td>
<td align="left">返回所有拥有 book 和 cd 元素的节点集</td>
</tr>
<tr>
<td align="left">+</td>
<td align="left">加法</td>
<td align="left">6 + 4</td>
<td align="left">10</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">减法</td>
<td align="left">6 - 4</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">乘法</td>
<td align="left">6 * 4</td>
<td align="left">24</td>
</tr>
<tr>
<td align="left">div</td>
<td align="left">除法</td>
<td align="left">8 div 4</td>
<td align="left">2</td>
</tr>
<tr>
<td align="left">=</td>
<td align="left">等于</td>
<td align="left">price=9.80</td>
<td align="left">如果 price 是 9.80，则返回 true。如果 price 是 9.90，则返回 false。</td>
</tr>
<tr>
<td align="left">!=</td>
<td align="left">不等于</td>
<td align="left">price!=9.80</td>
<td align="left">如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td>
</tr>
<tr>
<td align="left"><</td>
<td align="left">小于</td>
<td align="left">price<9.80</td>
<td align="left">如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td>
</tr>
<tr>
<td align="left"><=</td>
<td align="left">小于或等于</td>
<td align="left">price<=9.80</td>
<td align="left">如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td>
</tr>
<tr>
<td align="left">></td>
<td align="left">大于</td>
<td align="left">price>9.80</td>
<td align="left">如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td>
</tr>
<tr>
<td align="left">>=</td>
<td align="left">大于或等于</td>
<td align="left">price>=9.80</td>
<td align="left">如果 price 是 9.90，则返回 true。如果 price 是 9.70，则返回 false。</td>
</tr>
<tr>
<td align="left">or</td>
<td align="left">或</td>
<td align="left">price=9.80 or price=9.70</td>
<td align="left">如果 price 是 9.80，则返回 true。如果 price 是 9.50，则返回 false。</td>
</tr>
<tr>
<td align="left">and</td>
<td align="left">与</td>
<td align="left">price>9.00 and price<9.90</td>
<td align="left">如果 price 是 9.80，则返回 true。如果 price 是 8.50，则返回 false。</td>
</tr>
<tr>
<td align="left">mod</td>
<td align="left">计算除法的余数</td>
<td align="left">5 mod 2</td>
<td align="left">1</td>
</tr>
</tbody></table>
<h2 id="lxml库"><a href="#lxml库" class="headerlink" title="lxml库"></a>lxml库</h2><p>lxml 是 一个HTML/XML的解析器，主要的功能是如何解析和提取 HTML/XML 数据。</p>
<p>lxml和正则一样，也是用 C 实现的，是一款高性能的 Python HTML/XML 解析器，我们可以利用之前学习的XPath语法，来快速的定位特定元素以及节点信息。</p>
<p>lxml python 官方文档：<a href="http://lxml.de/index.html" target="_blank" rel="noopener">http://lxml.de/index.html</a></p>
<p>需要安装C语言库，可使用 pip 安装：pip install lxml</p>
<h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><p>我们可以利用他来解析HTML代码，并且在解析HTML代码的时候，如果HTML代码不规范，他会自动的进行补全。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 lxml 的 etree 库</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree </span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string"><div></span></span><br><span class="line"><span class="string">    <ul></span></span><br><span class="line"><span class="string">         <li class="item-0"><a href="link1.html">first item</a></li></span></span><br><span class="line"><span class="string">         <li class="item-1"><a href="link2.html">second item</a></li></span></span><br><span class="line"><span class="string">         <li class="item-inactive"><a href="link3.html">third item</a></li></span></span><br><span class="line"><span class="string">         <li class="item-1"><a href="link4.html">fourth item</a></li></span></span><br><span class="line"><span class="string">         <li class="item-0"><a href="link5.html">fifth item</a> # 注意，此处缺少一个 </li> 闭合标签</span></span><br><span class="line"><span class="string">     </ul></span></span><br><span class="line"><span class="string"> </div></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#利用etree.HTML，将字符串解析为HTML文档</span></span><br><span class="line">html = etree.HTML(text) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 按字符串序列化HTML文档</span></span><br><span class="line">result = etree.tostring(html) </span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></tbody></table></figure>

<p>输入结果如下：</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag"><<span class="name">html</span>></span><span class="tag"><<span class="name">body</span>></span></span><br><span class="line"><span class="tag"><<span class="name">div</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">ul</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link1.html"</span>></span>first item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>></span>second item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-inactive"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>></span>third item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>></span>fourth item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>></span>fifth item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line"><span class="tag"></<span class="name">ul</span>></span></span><br><span class="line"> <span class="tag"></<span class="name">div</span>></span></span><br><span class="line"><span class="tag"></<span class="name">body</span>></span><span class="tag"></<span class="name">html</span>></span></span><br></pre></td></tr></tbody></table></figure>

<p>可以看到。lxml会自动修改HTML代码。例子中不仅补全了li标签，还添加了body，html标签。</p>
<h3 id="从文件中读取html代码："><a href="#从文件中读取html代码：" class="headerlink" title="从文件中读取html代码："></a>从文件中读取html代码：</h3><p>除了直接使用字符串进行解析，lxml还支持从文件中读取内容。我们新建一个hello.html文件：</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"><!-- hello.html --></span></span><br><span class="line"><span class="tag"><<span class="name">div</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">ul</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link1.html"</span>></span>first item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>></span>second item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-inactive"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>></span><span class="tag"><<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>></span>third item<span class="tag"></<span class="name">span</span>></span><span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>></span>fourth item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>></span>fifth item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">     <span class="tag"></<span class="name">ul</span>></span></span><br><span class="line"> <span class="tag"></<span class="name">div</span>></span></span><br></pre></td></tr></tbody></table></figure>

<p>然后利用<code>etree.parse()</code>方法来读取文件。示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取外部文件 hello.html</span></span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = etree.tostring(html, pretty_print=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></tbody></table></figure>

<p>输入结果和之前是相同的。</p>
<h3 id="在lxml中使用XPath语法："><a href="#在lxml中使用XPath语法：" class="headerlink" title="在lxml中使用XPath语法："></a>在lxml中使用XPath语法：</h3><ol>
<li><p>获取所有li标签：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line"><span class="keyword">print</span> type(html)  <span class="comment"># 显示etree.parse() 返回类型</span></span><br><span class="line">   </span><br><span class="line">result = html.xpath(<span class="string">'//li'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)  <span class="comment"># 打印<li>标签的元素集合</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>获取所有li元素下的所有class属性的值：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li/@class'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>获取li标签下href为<code>www.baidu.com</code>的a标签：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li/a[@href="www.baidu.com"]'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>获取li标签下所有span标签：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment">#result = html.xpath('//li/span')</span></span><br><span class="line"><span class="comment">#注意这么写是不对的：</span></span><br><span class="line"><span class="comment">#因为 / 是用来获取子元素的，而 <span> 并不是 <li> 的子元素，所以，要用双斜杠</span></span><br><span class="line">   </span><br><span class="line">result = html.xpath(<span class="string">'//li//span'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>获取li标签下的a标签里的所有class：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li/a//@class'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>获取最后一个li的a的href属性对应的值：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">   </span><br><span class="line">result = html.xpath(<span class="string">'//li[last()]/a/@href'</span>)</span><br><span class="line"><span class="comment"># 谓语 [last()] 可以找到最后一个元素</span></span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>获取倒数第二个li元素的内容：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li[last()-1]/a'</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># text 方法可以获取元素内容</span></span><br><span class="line">print(result[<span class="number">0</span>].text)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>获取倒数第二个li元素的内容的第二种方式：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li[last()-1]/a/text()'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></tbody></table></figure>

</li>
</ol>
<h2 id="使用requests和xpath爬取电影天堂"><a href="#使用requests和xpath爬取电影天堂" class="headerlink" title="使用requests和xpath爬取电影天堂"></a>使用requests和xpath爬取电影天堂</h2><p>示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">BASE_DOMAIN = <span class="string">'http://www.dytt8.net'</span></span><br><span class="line">HEADERS = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'http://www.dytt8.net/html/gndy/dyzz/list_23_2.html'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spider</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://www.dytt8.net/html/gndy/dyzz/list_23_1.html'</span></span><br><span class="line">    resp = requests.get(url,headers=HEADERS)</span><br><span class="line">    <span class="comment"># resp.content：经过编码后的字符串</span></span><br><span class="line">    <span class="comment"># resp.text：没有经过编码，也就是unicode字符串</span></span><br><span class="line">    <span class="comment"># text：相当于是网页中的源代码了</span></span><br><span class="line">    text = resp.content.decode(<span class="string">'gbk'</span>)</span><br><span class="line">    <span class="comment"># tree：经过lxml解析后的一个对象，以后使用这个对象的xpath方法，就可以</span></span><br><span class="line">    <span class="comment"># 提取一些想要的数据了</span></span><br><span class="line">    tree = etree.HTML(text)</span><br><span class="line">    <span class="comment"># xpath/beautifulsou4</span></span><br><span class="line">    all_a = tree.xpath(<span class="string">"//div[@class='co_content8']//a"</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> all_a:</span><br><span class="line">        title = a.xpath(<span class="string">"text()"</span>)[<span class="number">0</span>]</span><br><span class="line">        href = a.xpath(<span class="string">"@href"</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> href.startswith(<span class="string">'/'</span>):</span><br><span class="line">            detail_url = BASE_DOMAIN + href</span><br><span class="line">            crawl_detail(detail_url)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl_detail</span><span class="params">(url)</span>:</span></span><br><span class="line">    resp = requests.get(url,headers=HEADERS)</span><br><span class="line">    text = resp.content.decode(<span class="string">'gbk'</span>)</span><br><span class="line">    tree = etree.HTML(text)</span><br><span class="line">    create_time = tree.xpath(<span class="string">"//div[@class='co_content8']/ul/text()"</span>)[<span class="number">0</span>].strip()</span><br><span class="line">    imgs = tree.xpath(<span class="string">"//div[@id='Zoom']//img/@src"</span>)</span><br><span class="line">    <span class="comment"># 电影海报</span></span><br><span class="line">    cover = imgs[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 电影截图</span></span><br><span class="line">    screenshoot = imgs[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 获取span标签下所有的文本</span></span><br><span class="line">    infos = tree.xpath(<span class="string">"//div[@id='Zoom']//text()"</span>)</span><br><span class="line">    <span class="keyword">for</span> index,info <span class="keyword">in</span> enumerate(infos):</span><br><span class="line">        <span class="keyword">if</span> info.startswith(<span class="string">"◎年　　代"</span>):</span><br><span class="line">            year = info.replace(<span class="string">"◎年　　代"</span>,<span class="string">""</span>).strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> info.startswith(<span class="string">"◎豆瓣评分"</span>):</span><br><span class="line">            douban_rating = info.replace(<span class="string">"◎豆瓣评分"</span>,<span class="string">''</span>).strip()</span><br><span class="line">            print(douban_rating)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> info.startswith(<span class="string">"◎主　　演"</span>):</span><br><span class="line">            <span class="comment"># 从当前位置，一直往下面遍历</span></span><br><span class="line">            actors = [info]</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(index+<span class="number">1</span>,len(infos)):</span><br><span class="line">                actor = infos[x]</span><br><span class="line">                <span class="keyword">if</span> actor.startswith(<span class="string">"◎"</span>):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                actors.append(actor.strip())</span><br><span class="line">            print(<span class="string">","</span>.join(actors))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    spider()</span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫基础</title>
    <url>/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<html><head></head><body><h2 id="python爬虫基础"><a href="#python爬虫基础" class="headerlink" title="python爬虫基础"></a>python爬虫基础</h2><p>urllib库,url库含有四个模块</p>
<ul>
<li>request 是最基本的请求方式,error是异常处理信息,parse是解析的工具类,你可以将没有编码的url放在parse工具中编码和解码,robotparser主要是用来识别网站的 robots.txt 文件.</li>
</ul>
<p>例: </p>
<a id="more"></a>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request<span class="comment">#导入库</span></span><br><span class="line">response=request.urlopen(<span class="string">'http://www.baidu.com'</span>)<span class="comment">#请求baidu.com</span></span><br><span class="line">print(response.read())</span><br><span class="line"><!--more--></span><br><span class="line">request.urlretrieve(<span class="string">'http://www.baidu.com'</span>,<span class="string">'baidu.html'</span>)</span><br><span class="line"><span class="comment">#将百度的网页下载到本地baidu.html</span></span><br><span class="line"><span class="comment">#urlencode用法</span></span><br><span class="line"><span class="comment">#https://www.baidu.com/s?wd=hello&rsv_spt=1&rsv_iqid=0xc249d2880001381f&issp=1&f=8&rsv_bp=1&rsv_idx=2&ie=utf-8&tn=baiduhome_pg&rsv_enter=1&rsv_dl=tb&rsv_sug3=6&rsv_sug1=5&rsv_sug7=101&rsv_sug2=0&inputT=1310&rsv_sug4=2416</span></span><br><span class="line"><span class="comment">#将参数为中文的字符转换为浏览器能够识别的字符</span></span><br><span class="line">data={<span class="string">'wd'</span>:<span class="string">'你好'</span>,<span class="string">'age'</span>:<span class="number">12</span>,<span class="string">'gender'</span>:<span class="string">'男'</span>}</span><br><span class="line">data=parse.urlencode(data)</span><br><span class="line">print(data)</span><br><span class="line"><span class="comment">#wd=%E4%BD%A0%E5%A5%BD&age=12&gender=%E7%94%B7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request<span class="comment">#导入库</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse<span class="comment">#用于编码</span></span><br><span class="line">data={<span class="string">'wd'</span>:<span class="string">'你好'</span>}</span><br><span class="line">data=parse.urlencode(data)</span><br><span class="line">response=request.urlopen(<span class="string">'http://www.baidu.com/s?'</span>+data)<span class="comment">#请求baidu.com</span></span><br><span class="line">print(response.read())</span><br><span class="line"></span><br><span class="line"><span class="comment">#解码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#parse_qs()解码</span></span><br><span class="line">data=parse.parse_qs(data)</span><br><span class="line"><span class="comment">#url='http://www.baidu.com/s?'+data</span></span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlparse和urlsplit</span><br><span class="line"><span class="comment">#urlparse将url地址进行分割</span></span><br><span class="line"><span class="comment">#例</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">url=<span class="string">'http://www.baidu.com/s?wd=hello&username=123#12'</span></span><br><span class="line">print(parse.urlparse(url))</span><br><span class="line"></span><br><span class="line"><span class="comment">#ParseResult(scheme='http', netloc='www.baidu.com', path='/s', params='', query='wd=hello&username=123', fragment='12')</span></span><br><span class="line">print(parse.urlparse(url).scheme)</span><br><span class="line">print(parse.urlparse(url).netloc)</span><br><span class="line">print(parse.urlsplit(url))</span><br><span class="line"><span class="comment">#SplitResult(scheme='http', netloc='www.baidu.com', path='/s', query='wd=hello&username=123', fragment='12')</span></span><br><span class="line"><span class="comment">#前者多了一个params参数</span></span><br></pre></td></tr></tbody></table></figure>

<p>Request类</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url=<span class="string">'https://www.lagou.com/jobs/list_python?labelWords=&fromSearch=true&suginput='</span></span><br><span class="line"></span><br><span class="line">headers={<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'</span>}</span><br><span class="line">req=request.Request(url,headers=headers)</span><br><span class="line"></span><br><span class="line">print(request.urlopen(req).read())</span><br><span class="line"></span><br><span class="line"><span class="comment">#Request()参数</span></span><br></pre></td></tr></tbody></table></figure>

<p>代理设置</p>
<p>ProxyHandler处理器(代理设置)</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url=<span class="string">'https://httpbin.org/ip'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(request.urlopen(url).read())</span></span><br><span class="line"><span class="comment">#没有使用代理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用代理</span></span><br><span class="line"></span><br><span class="line">handler=request.ProxyHandler({<span class="string">'http'</span>:<span class="string">'112.84.55.122:9999'</span>})</span><br><span class="line"></span><br><span class="line">openner=request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">res=openner.open(url)</span><br><span class="line"></span><br><span class="line">print(res.read())</span><br></pre></td></tr></tbody></table></figure>

<p>http.cookiejar保存cookie</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"><span class="comment">#保存cookie信息</span></span><br><span class="line">cookieJar = MozillaCookieJar(<span class="string">'cookie.txt'</span>)</span><br><span class="line"><span class="comment">#加载cookie</span></span><br><span class="line">cookieJar.load(ignore_discard=<span class="literal">True</span>)</span><br><span class="line">handler = request.HTTPCookieProcessor(cookieJar)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line">resp = opener.open(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">cookieJar.save(ignore_discard=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#打印cookie信息</span></span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> cookieJar:</span><br><span class="line">    print(cookie)</span><br></pre></td></tr></tbody></table></figure>

<p>requests库</p>
<p>requests发送get请求</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">params = {<span class="string">'wd'</span>: <span class="string">'中国'</span>, <span class="string">'ie'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line"><span class="string">'f'</span>: <span class="number">3</span>,</span><br><span class="line"><span class="string">'rsv_bp'</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">'rsv_idx'</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">'tn'</span>: <span class="string">'baiduhome_pg'</span>,</span><br><span class="line"><span class="string">'rsv_spt'</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">'oq'</span>: <span class="number">100</span>,</span><br><span class="line"><span class="string">'rsv_pq'</span>: <span class="number">9282010e00005646</span>,</span><br><span class="line"><span class="string">'rsv_t'</span>: <span class="string">'65b6ZN8IJiXpluNcz/pIQxWDy8QWRjCXH7ym3yqE583HxR32Ytg75ZGh3MGjaslBNJxC'</span>,</span><br><span class="line"><span class="string">'rqlang'</span>: <span class="string">'cn'</span>,</span><br><span class="line"><span class="string">'rsv_enter'</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">'rsv_dl'</span>: <span class="string">'ts_0'</span>,</span><br><span class="line"><span class="string">'rsv_sug3'</span>: <span class="number">9</span>,</span><br><span class="line"><span class="string">'rsv_sug1'</span>: <span class="number">10</span>,</span><br><span class="line"><span class="string">'rsv_sug7'</span>: <span class="number">101</span>,</span><br><span class="line"><span class="string">'rsv_sug2'</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">'prefixsug'</span>: <span class="string">'zhongu'</span>,</span><br><span class="line"><span class="string">'rsp'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'inputT'</span>: <span class="number">4623</span>}</span><br><span class="line">headers = {<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                         <span class="string">'Chrome/76.0.3809.100 Safari/537.36'</span>}</span><br><span class="line">response = requests.get(<span class="string">'http://www.baidu.com/s'</span>, params=params, headers=headers)</span><br><span class="line"><span class="comment"># print(type(response.text)) #str类型 手动解码 </span></span><br><span class="line"><span class="comment"># print(type(response.content))# bytes类型 一般采用response.content.decode('utf-8')</span></span><br><span class="line">print(response.url)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'baidu.html'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:<span class="comment">#将页面写在baidu.html上</span></span><br><span class="line">    fp.write(response.content.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(response.content.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="comment"># print(response.status_code)</span></span><br></pre></td></tr></tbody></table></figure>

<p>发送post请求</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = {</span><br><span class="line">    <span class="string">'first'</span>: <span class="string">'true'</span>,</span><br><span class="line">    <span class="string">'pn'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'kd'</span>: <span class="string">'python'</span></span><br><span class="line">}</span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                         <span class="string">'Chrome/76.0.3809.100 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'https://www.lagou.com/jobs/list_python?labelWords=&fromSearch=true&suginput='</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'www.lagou.com'</span></span><br><span class="line">}</span><br><span class="line"><span class="comment"># 使用代理</span></span><br><span class="line"><span class="comment"># proxy={</span></span><br><span class="line"><span class="comment">#     'http':'27.43.190.11:9999'</span></span><br><span class="line"><span class="comment"># }</span></span><br><span class="line">response = requests.post(<span class="string">'https://www.lagou.com/jobs/positionAjax.json?needAddtionalResult=false'</span>, data=data, headers=headers) <span class="comment">#proxies=proxy)</span></span><br><span class="line">print(response.text)</span><br></pre></td></tr></tbody></table></figure>

<p>requests的cookie保存</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">resp = requests.get(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(resp.cookies.get_dict())</span><br></pre></td></tr></tbody></table></figure>

<p>session 利用session保存信息并访问</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">session=requests.session()<span class="comment">#创建会话</span></span><br><span class="line">session.post(url,data,headers)<span class="comment">#登录</span></span><br><span class="line">res=session.get(url)<span class="comment">#访问页面</span></span><br><span class="line">print(res.text)</span><br></pre></td></tr></tbody></table></figure>

<p>数据的提取</p>
<p>XPath和lxml</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">1 /AAA/DD/BBB 表示aaa下的dd下的bbb元素</span><br><span class="line">2 //aaa 选择所有的aaa元素</span><br><span class="line">3 //aaa/bbb 所有的aaa下的所有bbb元素</span><br><span class="line">4 /* 表示所有</span><br><span class="line">5 bbb[1] 表示bbb第一个元素</span><br><span class="line">6 bbb[@id] 只要bbb上有id属性，都能得到</span><br><span class="line">7 bbb[@id='b1'] 元素是bbb，上有id属性，并且属性的值为b1</span><br><span class="line">在某个标签下执行xpath在这个标签加.</span><br><span class="line">即 trs=html.xpath('//tr')</span><br><span class="line">   for i in trs:</span><br><span class="line">   		harf=i.xpath('.//a/@href')</span><br><span class="line">   		</span><br><span class="line">获取文本是text()即//a/text()</span><br></pre></td></tr></tbody></table></figure>

<p>使用lxml解析html</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string"><ul class="r_company_con"></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/9251.html">美柚</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/1373.html">喜马拉雅fm</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/14229.html">微盟</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/49369.html">淘粉吧</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/107435.html">熊猫TV</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/2768.html">易到用车</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/40738.html">小红唇</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/97631.html">汽车超人</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/109.html">蚂蜂窝</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/36996.html">三好网</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/4760.html">唯品会</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/1686.html">爱奇艺</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/23014.html">快法务</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/1575.html">百度招聘</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/81491.html">蚂蚁金服</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/62.html">今日头条</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/2474.html">滴滴</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/20909.html">AcFun</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/23489.html">点点客</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/59251.html">映客</a></li></span></span><br><span class="line"><span class="string">    	    		<li class="r_search_item"><a href="https://www.lagou.com/gongsi/3712.html">京东</a></li></span></span><br><span class="line"><span class="string">    	    </ul>   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_text</span><span class="params">()</span>:</span></span><br><span class="line">    htmlElement = etree.HTML(text)  <span class="comment"># 对象</span></span><br><span class="line">    print(etree.tostring(htmlElement, encoding=<span class="string">'utf-8'</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_file</span><span class="params">()</span>:</span></span><br><span class="line">    parser=etree.HTMLParser(encoding=<span class="string">'utf-8'</span>) <span class="comment"># 解析器</span></span><br><span class="line">    htmlElement = etree.parse(<span class="string">"lagou.html"</span>, parser=parser)</span><br><span class="line">    print(etree.tostring(htmlElement, encoding=<span class="string">'utf-8'</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    parse_file()</span><br><span class="line">//解析html的代码有两种,一种是解析字符串类型的html代码直接使用etree.HTML(字符串)一种是解析html文件</span><br><span class="line">使用parser=etree.HTMLParser(encoding=<span class="string">'utf-8'</span>)  htmlElement = etree.parse(<span class="string">"lagou.html"</span>, parser=parser)解析</span><br><span class="line">如果有不规范的html代码就要自定义解析器parser=etree.HTMLParser(encoding=<span class="string">'utf-8'</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>爬取电影天堂案例</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line">DOMAIN = <span class="string">'https://www.dytt8.net'</span></span><br><span class="line">HEADERS = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                  <span class="string">'Chrome/76.0.3809.100 Safari/537.36'</span>}</span><br><span class="line"></span><br><span class="line">movies = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_details</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">        url = <span class="string">'https://www.dytt8.net/html/gndy/dyzz/list_23_'</span> + str(i) + <span class="string">'.html'</span></span><br><span class="line">        response = requests.get(url, headers=HEADERS)</span><br><span class="line">        text = response.text</span><br><span class="line">        html = etree.HTML(text)</span><br><span class="line">        detail_urls = html.xpath(<span class="string">"//table[@class='tbspan']//a/@href"</span>)</span><br><span class="line">        <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">            movie = parse_detail(DOMAIN + detail_url)</span><br><span class="line">            movies.append(movie)</span><br><span class="line">            <span class="comment"># pf = pd.DataFrame(list(movie))</span></span><br><span class="line">            <span class="comment">#             # print(pf)</span></span><br><span class="line">            <span class="comment"># columns_map = {</span></span><br><span class="line">            <span class="comment">#     'title': '名称',</span></span><br><span class="line">            <span class="comment">#     'cover': '封面',</span></span><br><span class="line">            <span class="comment">#     'year': '年份',</span></span><br><span class="line">            <span class="comment">#     'country': '国家',</span></span><br><span class="line">            <span class="comment">#     'category': '分类',</span></span><br><span class="line">            <span class="comment">#     'douban_rating': '豆瓣评分',</span></span><br><span class="line">            <span class="comment">#     'size': '分辨率',</span></span><br><span class="line">            <span class="comment">#     'actors': '演员',</span></span><br><span class="line">            <span class="comment">#     'director': '导演',</span></span><br><span class="line">            <span class="comment">#     'label': '标签',</span></span><br><span class="line">            <span class="comment">#     'download_url': '下载地址',</span></span><br><span class="line">            <span class="comment">#     'profile': '简介'}</span></span><br><span class="line">            <span class="comment"># pf.rename(columns=columns_map, inplace=True)</span></span><br><span class="line">            <span class="comment"># pf.fillna(' ', inplace=True)</span></span><br><span class="line">            <span class="comment"># pf.to_excel('d:/my.xlsx', encoding='utf-8', index=False)</span></span><br><span class="line">            <span class="comment"># data = movie</span></span><br><span class="line">            <span class="comment"># data_df = pd.DataFrame(data)</span></span><br><span class="line">            <span class="comment"># data_df.index = range(1, 100)</span></span><br><span class="line">            <span class="comment"># writer = pd.ExcelWriter('my.xlsx')</span></span><br><span class="line">            <span class="comment"># data_df.to_excel(writer, float_format='%.5f')</span></span><br><span class="line">            <span class="comment"># writer.save()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(url)</span>:</span></span><br><span class="line">    movie = {}</span><br><span class="line">    response = requests.get(url, headers=HEADERS)</span><br><span class="line">    text = response.content.decode(<span class="string">'gbk'</span>)</span><br><span class="line">    html = etree.HTML(text)</span><br><span class="line">    movie[<span class="string">'title'</span>] = html.xpath(<span class="string">"//div[@class='title_all']//font/text()"</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> len(html.xpath(<span class="string">"//div[@id='Zoom']//img/@src"</span>)):</span><br><span class="line">        movie[<span class="string">'cover'</span>] = html.xpath(<span class="string">"//div[@id='Zoom']//img/@src"</span>)[<span class="number">0</span>]</span><br><span class="line">    parse_movie_content(html, movie)  <span class="comment"># 解析content</span></span><br><span class="line">    movie_download_url = html.xpath(<span class="string">"//td[@bgcolor='#fdfddf']/a/@href"</span>)</span><br><span class="line">    movie[<span class="string">'download_url'</span>] = movie_download_url</span><br><span class="line">    <span class="keyword">return</span> movie</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_movie_content</span><span class="params">(html, movie)</span>:</span></span><br><span class="line">    movie_content = html.xpath(<span class="string">"//div[@id='Zoom']//p/text()"</span>)</span><br><span class="line">    <span class="keyword">for</span> index, info <span class="keyword">in</span> enumerate(movie_content):</span><br><span class="line">        <span class="keyword">if</span> info.startswith(<span class="string">"◎年　　代"</span>):</span><br><span class="line">            info = info.replace(<span class="string">"◎年　　代"</span>, <span class="string">""</span>).strip()</span><br><span class="line">            movie[<span class="string">'year'</span>] = info</span><br><span class="line">        <span class="keyword">if</span> info.startswith(<span class="string">"◎产　　地"</span>):</span><br><span class="line">            info = info.replace(<span class="string">"◎产　　地"</span>, <span class="string">""</span>).strip()</span><br><span class="line">            movie[<span class="string">'country'</span>] = info</span><br><span class="line">        <span class="keyword">if</span> info.startswith(<span class="string">"◎类　　别"</span>):</span><br><span class="line">            info = info.replace(<span class="string">"◎类　　别"</span>, <span class="string">""</span>).strip()</span><br><span class="line">            movie[<span class="string">'category'</span>] = info</span><br><span class="line">        <span class="keyword">if</span> info.startswith(<span class="string">"◎豆瓣评分"</span>):</span><br><span class="line">            info = info.replace(<span class="string">"◎豆瓣评分"</span>, <span class="string">""</span>).strip()</span><br><span class="line">            movie[<span class="string">'douban_rating'</span>] = info</span><br><span class="line">        <span class="keyword">if</span> info.startswith(<span class="string">"◎视频尺寸"</span>):</span><br><span class="line">            info = info.replace(<span class="string">"◎视频尺寸"</span>, <span class="string">""</span>).strip()</span><br><span class="line">            movie[<span class="string">'size'</span>] = info</span><br><span class="line">        <span class="keyword">if</span> info.startswith(<span class="string">'◎导　　演'</span>):</span><br><span class="line">            info = info.replace(<span class="string">"◎导　　演"</span>, <span class="string">""</span>).strip()</span><br><span class="line">            movie[<span class="string">"director"</span>] = info</span><br><span class="line">        <span class="keyword">if</span> info.startswith(<span class="string">'◎主　　演'</span>):</span><br><span class="line">            info = info.replace(<span class="string">"◎主　　演"</span>, <span class="string">""</span>).strip()</span><br><span class="line">            actors = [info]</span><br><span class="line">            <span class="keyword">for</span> actor <span class="keyword">in</span> range(index + <span class="number">1</span>, len(movie_content)):</span><br><span class="line">                <span class="keyword">if</span> movie_content[actor].startswith(<span class="string">"◎标　　签"</span>):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                actors.append(movie_content[actor].strip())</span><br><span class="line">            movie[<span class="string">"actors"</span>] = actors</span><br><span class="line">        <span class="keyword">if</span> info.startswith(<span class="string">'◎标　　签'</span>):</span><br><span class="line">            info = info.replace(<span class="string">"◎标　　签"</span>, <span class="string">""</span>).strip()</span><br><span class="line">            movie[<span class="string">'label'</span>] = info</span><br><span class="line">        <span class="keyword">if</span> info.startswith(<span class="string">'◎简　　介'</span>):</span><br><span class="line">            info = movie_content[index + <span class="number">1</span>].strip()</span><br><span class="line">            movie[<span class="string">"profile"</span>] = info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    get_details()</span><br><span class="line">    pf = pd.DataFrame(list(movies))</span><br><span class="line">    columns_map = {</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'名称'</span>,</span><br><span class="line">        <span class="string">'cover'</span>: <span class="string">'封面'</span>,</span><br><span class="line">        <span class="string">'year'</span>: <span class="string">'年份'</span>,</span><br><span class="line">        <span class="string">'country'</span>: <span class="string">'国家'</span>,</span><br><span class="line">        <span class="string">'category'</span>: <span class="string">'分类'</span>,</span><br><span class="line">        <span class="string">'douban_rating'</span>: <span class="string">'豆瓣评分'</span>,</span><br><span class="line">        <span class="string">'size'</span>: <span class="string">'分辨率'</span>,</span><br><span class="line">        <span class="string">'actors'</span>: <span class="string">'演员'</span>,</span><br><span class="line">        <span class="string">'director'</span>: <span class="string">'导演'</span>,</span><br><span class="line">        <span class="string">'label'</span>: <span class="string">'标签'</span>,</span><br><span class="line">        <span class="string">'download_url'</span>: <span class="string">'下载地址'</span>,</span><br><span class="line">        <span class="string">'profile'</span>: <span class="string">'简介'</span>}</span><br><span class="line">    pf.rename(columns=columns_map, inplace=<span class="literal">True</span>)</span><br><span class="line">    pf.to_excel(<span class="string">'D:/my.xlsx'</span>, encoding=<span class="string">'utf-8'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>爬取公众号文章</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Dict</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://data.wxb.com/rank/day/2020-02-22/%E7%A7%91%E6%8A%80?sort=&page=1&page_size=50&is_new=1'</span></span><br><span class="line"></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                  <span class="string">'Chrome/76.0.3809.100 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'PHPSESSID=beac3d26447612afc0000369ce0a6b37; Qs_lvt_288791=1582549381; Qs_pv_288791=4313460905624405000; '</span></span><br><span class="line">              <span class="string">'aliyungf_tc=AQAAAKyqam5YtgQAWQMTOkuQHo7LO0N2; visit-wxb-id=847ecde119a5cefbe55b022b9af2debe '</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">response=requests.get(url, headers=headers)</span><br><span class="line">json_obj=json.loads(response.text,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">url_id=[]</span><br><span class="line">articles = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> json_obj[<span class="string">'data'</span>]:</span><br><span class="line">    url_id.append(i[<span class="string">'wx_origin_id'</span>])</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> url_id:</span><br><span class="line">    headers[<span class="string">'Referer'</span>] = <span class="string">'https://data.wxb.com/details/postRead?id='</span>+url</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        resp = requests.get(<span class="string">'https://data.wxb.com/account/statArticles/'</span>+url+<span class="string">'?period=30&page='</span>+str(j)+<span class="string">'&sort='</span>, headers=headers)</span><br><span class="line">        json_obj = json.loads(resp.text, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> json_obj[<span class="string">'data'</span>]:</span><br><span class="line">            article = {<span class="string">'title'</span>: i[<span class="string">'title'</span>], <span class="string">'url'</span>: i[<span class="string">'url'</span>]}</span><br><span class="line">            articles.append(article)</span><br><span class="line">            <span class="comment"># for article in article_url:</span></span><br><span class="line">            <span class="comment">#     res=requests.get(article)</span></span><br><span class="line">            <span class="comment">#     print(res.url)</span></span><br><span class="line">            <span class="comment">#     print(res.text)</span></span><br><span class="line">                <span class="comment"># html=etree.HTML(res.text)</span></span><br><span class="line">                <span class="comment"># head=html.xpath("//head")</span></span><br><span class="line">                <span class="comment"># for i in head:</span></span><br><span class="line">                <span class="comment">#     print(etree.tostring(i, encoding='utf-8').decode('utf-8'))</span></span><br><span class="line">pf = pd.DataFrame(list(articles))</span><br><span class="line">columns = {</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'名称'</span>,</span><br><span class="line">        <span class="string">'url'</span>: <span class="string">'网址'</span></span><br><span class="line">    }</span><br><span class="line">pf.rename(columns=columns, inplace=<span class="literal">True</span>)</span><br><span class="line">pf.to_excel(<span class="string">'D:/公众号文章.xlsx'</span>, encoding=<span class="string">'utf-8'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>BeautifulSoup4解析</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1</span> .find_all(<span class="string">'a'</span>,limit=*) //查所有的a标签,参数limit可以限制找到几个</span><br><span class="line"><span class="number">2</span> .find_all(<span class="string">'tr'</span>,class_=<span class="string">'even'</span>)//查找所有的tr标签并且<span class="class"><span class="keyword">class</span>为<span class="title">even</span></span></span><br><span class="line"><span class="class">3 .<span class="title">find_all</span><span class="params">(<span class="string">'tr'</span>,attrs={<span class="string">'class'</span>:<span class="string">'even'</span>})</span></span></span><br><span class="line"><span class="class">4 .<span class="title">find_all</span><span class="params">(<span class="string">'tr'</span>,id=<span class="string">'even'</span>)</span></span></span><br><span class="line"><span class="class">5 //获取纯文本</span></span><br><span class="line">	trs=soup.find_all('tr')//获取所有tr标签</span><br><span class="line">	<span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">		title=tr[<span class="number">0</span>].string//某个标签下有多行文本不能取到</span><br><span class="line">		category=tr[<span class="number">1</span>].string常用</span><br><span class="line">		infos=list(tr.stripped_strings)//获取tr下的所有非空文本(常用)</span><br><span class="line"><span class="number">6</span> .find(<span class="string">'a'</span>)//返回第一个符合条件的a标签</span><br><span class="line"><span class="number">7</span> contents和children//返回某个标签下的直接子元素,contents返回列表,children返回迭代器</span><br><span class="line"><span class="number">8</span> 使用css选择器,使用soup.select(<span class="string">'css语法'</span>),应该写css语法的字符串</span><br></pre></td></tr></tbody></table></figure>

<p>中国天气网</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar</span><br><span class="line"></span><br><span class="line">ALL_DATA = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    page = [<span class="string">'hb'</span>, <span class="string">'db'</span>, <span class="string">'hd'</span>, <span class="string">'hz'</span>, <span class="string">'hn'</span>, <span class="string">'xb'</span>, <span class="string">'xn'</span>, <span class="string">'gat'</span>]</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> page:</span><br><span class="line">        url = <span class="string">'http://www.weather.com.cn/textFC/'</span> + url + <span class="string">'.shtml'</span></span><br><span class="line">        parse_page(url)</span><br><span class="line">    <span class="comment"># 根据最低气温排序</span></span><br><span class="line">    ALL_DATA.sort(key=<span class="keyword">lambda</span> data: data[<span class="string">'min_temp'</span>])</span><br><span class="line">    data = ALL_DATA[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">    charts = Bar(<span class="string">'中国最低气温排行榜'</span>)</span><br><span class="line">    cities = list(map(<span class="keyword">lambda</span> x: x[<span class="string">'city'</span>], data))</span><br><span class="line">    temp = list(map(<span class="keyword">lambda</span> x: x[<span class="string">'min_temp'</span>], data))</span><br><span class="line">    charts.add(<span class="string">''</span>, cities, temp)</span><br><span class="line">    charts.render(<span class="string">'temperature.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    headers = {</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                      <span class="string">'Chrome/76.0.3809.100 Safari/537.36'</span></span><br><span class="line">    }</span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    html = response.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html5lib'</span>)</span><br><span class="line">    div = soup.find_all(<span class="string">'div'</span>, attrs={<span class="string">'class'</span>: <span class="string">'conMidtab'</span>})[<span class="number">0</span>]</span><br><span class="line">    tables = div.find_all(<span class="string">'table'</span>)</span><br><span class="line">    <span class="keyword">for</span> table <span class="keyword">in</span> tables:</span><br><span class="line">        trs = table.find_all(<span class="string">'tr'</span>)[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">            tds = tr.find_all(<span class="string">'td'</span>)</span><br><span class="line">            city_td = tds[<span class="number">-8</span>]</span><br><span class="line">            city = list(city_td.stripped_strings)[<span class="number">0</span>]</span><br><span class="line">            temp_td = tds[<span class="number">-2</span>]</span><br><span class="line">            min_temp = list(temp_td.stripped_strings)[<span class="number">0</span>]</span><br><span class="line">            ALL_DATA.append({<span class="string">'city'</span>: city, <span class="string">'min_temp'</span>: int(min_temp)})</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure>

<p>正则表达式匹配</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 * 可以匹配0或任意多个字符</span></span><br><span class="line">text = <span class="string">'aqw+q123ad1232'</span></span><br><span class="line"><span class="comment"># result = re.match('\s*', text)</span></span><br><span class="line"><span class="comment"># + 匹配1个或多个字符</span></span><br><span class="line"><span class="comment"># result = re.match('\w+', text)</span></span><br><span class="line"><span class="comment"># aqw</span></span><br><span class="line"><span class="comment"># ? 匹配一个或0个(要么没有,要么就只有一个)</span></span><br><span class="line"><span class="comment"># result = re.match('\w?', text)</span></span><br><span class="line"><span class="comment"># a</span></span><br><span class="line"><span class="comment"># {m} 匹配m个字符</span></span><br><span class="line"><span class="comment"># result = re.match('\w{2}', text)</span></span><br><span class="line"><span class="comment"># aq</span></span><br><span class="line"><span class="comment"># {m, n} 匹配m-n个字符</span></span><br><span class="line">test = <span class="string">'\\n'</span></span><br><span class="line">test1 = <span class="string">'apple is $22, orange is $12'</span></span><br><span class="line">test2 = <span class="string">'Hello ni hao'</span></span><br><span class="line">result = re.search(<span class="string">'\\\\n'</span>, test)  <span class="comment"># \\\\表示 \\ 表示一个\ \\后面一个表示一个\ 即 \\n 用python匹配 则是\n</span></span><br><span class="line"><span class="comment"># aqw</span></span><br><span class="line">res = re.findall(<span class="string">'\$\d+'</span>, test1)</span><br><span class="line"><span class="comment"># ['$22', '$12']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sub函数</span></span><br><span class="line">print(re.sub(<span class="string">'\$\d+'</span>, <span class="string">'0'</span>, test1))</span><br><span class="line"><span class="comment"># apple is 0, orange is 0</span></span><br><span class="line">print(res)</span><br><span class="line">print(re.split(<span class="string">' '</span>, test2))</span><br><span class="line"><span class="comment"># ['Hello', 'ni', 'hao']</span></span><br></pre></td></tr></tbody></table></figure>

<p>案例</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 验证手机号</span></span><br><span class="line">text = <span class="string">'13991471643'</span></span><br><span class="line">result = re.match(<span class="string">'1[34578]\d{9}'</span>, text)</span><br><span class="line"><span class="comment"># print(result.group())</span></span><br><span class="line"><span class="comment"># 验证邮箱</span></span><br><span class="line">email = <span class="string">'321915@163.com'</span></span><br><span class="line">ret = re.match(<span class="string">'\w+@[a-z0-9]+\.[a-z]+'</span>, email)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证url</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com/s?re=233'</span></span><br><span class="line">resultUrl = re.match(<span class="string">'(http|https|ftp)://[^\s]+'</span>, url)<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证身份证</span></span><br><span class="line"></span><br><span class="line">id = <span class="string">'61252619971008357x'</span></span><br><span class="line">res = re.match(<span class="string">'\d{17}[\dXx]'</span>, id)</span><br><span class="line">print(res.group())</span><br></pre></td></tr></tbody></table></figure>

<p>用正则表达式爬取古诗文网</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">poems = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_urls</span><span class="params">()</span>:</span></span><br><span class="line">    headers = {</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                      <span class="string">'Chrome/76.0.3809.100 Safari/537.36'</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="comment"># response = requests.get('https://www.gushiwen.org/default_' + str(i) + '.aspx', headers=headers)</span></span><br><span class="line">        response = requests.get(<span class="string">'https://so.gushiwen.org/shiwen/default_0AA'</span>+str(i)+<span class="string">'.aspx'</span>, headers=headers)</span><br><span class="line">        html = response.text</span><br><span class="line">        titles = re.findall(<span class="string">r'<div\sclass="cont".*?<b>(.*?)</b>'</span>, html, re.DOTALL)</span><br><span class="line">        dynasties = re.findall(<span class="string">r'<p\sclass="source".*?<a.*?>(.*?)</a>'</span>, html, re.DOTALL)</span><br><span class="line">        authors = re.findall(<span class="string">r'<p\sclass="source">.*?<span.*?<a.*?>(.*?)</a>'</span>, html, re.DOTALL)</span><br><span class="line">        content_tag = re.findall(<span class="string">r'<div\sclass="contson".*?>(.*?)</div>'</span>, html, re.DOTALL)</span><br><span class="line">        contents = []</span><br><span class="line">        <span class="keyword">for</span> content <span class="keyword">in</span> content_tag:</span><br><span class="line">            content = re.sub(<span class="string">r'<.*?>'</span>, <span class="string">''</span>, content)</span><br><span class="line">            contents.append(content.strip())</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> zip(titles, dynasties, authors, contents):</span><br><span class="line">            title, dynasty, author, content = value</span><br><span class="line">            poem = {</span><br><span class="line">                <span class="string">'title'</span>: title,</span><br><span class="line">                <span class="string">'dynasty'</span>: dynasty,</span><br><span class="line">                <span class="string">'author'</span>: author,</span><br><span class="line">                <span class="string">'content'</span>: content</span><br><span class="line">            }</span><br><span class="line">            poems.append(poem)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    get_urls()</span><br><span class="line">    pf = pd.DataFrame(list(poems))</span><br><span class="line">    columns = {</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'诗名'</span>,</span><br><span class="line">        <span class="string">'dynasty'</span>: <span class="string">'朝代'</span>,</span><br><span class="line">        <span class="string">'author'</span>: <span class="string">'作者'</span>,</span><br><span class="line">        <span class="string">'content'</span>: <span class="string">'内容'</span></span><br><span class="line">        }</span><br><span class="line">    pf.rename(columns=columns, inplace=<span class="literal">True</span>)</span><br><span class="line">    pf.to_excel(<span class="string">'D:/古诗词.xlsx'</span>, encoding=<span class="string">'utf-8'</span>, index=<span class="literal">False</span>)</span><br><span class="line">    print(len(poems))</span><br></pre></td></tr></tbody></table></figure>

<p>json数据</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">//字符转json</span><br><span class="line">json.dumps(json_str)</span><br><span class="line">//json转python对象</span><br><span class="line">json.loads(json字符串)</span><br></pre></td></tr></tbody></table></figure>

<p>将json写入文件</p>
<p><img src="/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB/image-20200228161318410.png" alt="image-20200228161318410"></p>
<p>csv文件</p>
<p><img src="/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB/image-20200228175101405.png" alt="image-20200228175101405"></p>
<p><img src="/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB/image-20200228175137667.png" alt="image-20200228175137667"></p>
<p>多线程</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writer_</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> value</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        value += <span class="number">1</span></span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> value</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        value += <span class="number">1</span></span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    threading.Thread(target=writer_).start()</span><br><span class="line">    threading.Thread(target=drawing).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="comment">#  1254106</span></span><br><span class="line"><span class="comment">#  1396958</span></span><br><span class="line"><span class="comment"># 出现线程抢占问题</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">gLock = threading.Lock() <span class="comment"># 创建锁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writer_</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> value</span><br><span class="line">    gLock.acquire()  <span class="comment"># 加锁</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000000</span>):</span><br><span class="line">        value += <span class="number">1</span></span><br><span class="line">    gLock.release()  <span class="comment"># 释放锁</span></span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    threading.Thread(target=writer_).start()</span><br><span class="line">    threading.Thread(target=writer_).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure>

<p>lock版生产者消费者</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 生产者消费者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">gTimes = <span class="number">0</span></span><br><span class="line">gTotalTimes = <span class="number">10</span></span><br><span class="line">gMoney = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">gLock = threading.Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            <span class="keyword">if</span> gTimes > gTotalTimes:</span><br><span class="line">                gLock.release()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            gMoney += money</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'%s生产了%d的钱,还剩%d的钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">            gLock.release()</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            <span class="keyword">if</span> money <= gMoney:</span><br><span class="line">                gMoney -= money</span><br><span class="line">                print(<span class="string">'%s消费了%d的钱,还剩%d的钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> gTimes > gTotalTimes:</span><br><span class="line">                    gLock.release()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                print(<span class="string">'%s消费%d的钱,还剩%d的钱,钱不足'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">            gLock.release()</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Consumer(name=<span class="string">'消费者%d'</span> % x).start()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Producer(name=<span class="string">'生产者%d'</span> % x).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure>

<p>condition版,即线程通信的方式</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 生产者消费者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">gTimes = <span class="number">0</span></span><br><span class="line">gTotalTimes = <span class="number">10</span></span><br><span class="line">gMoney = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">gCondition = threading.Condition()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            <span class="keyword">if</span> gTimes > gTotalTimes:</span><br><span class="line">                gCondition.release()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            gMoney += money</span><br><span class="line">            gCondition.notify_all()</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'%s生产了%d的钱,还剩%d的钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">            gCondition.release()</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            <span class="keyword">while</span> gMoney < money:</span><br><span class="line">                <span class="keyword">if</span> gTimes >= gTotalTimes:</span><br><span class="line">                    gCondition.release()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                print(<span class="string">'%s准备消费%d,还剩%d的钱,钱不足'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">                gCondition.wait()</span><br><span class="line">            gMoney -= money</span><br><span class="line">            print(<span class="string">'%s消费了%d的钱,还剩%d的钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">            gCondition.release()</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Consumer(name=<span class="string">'消费者%d'</span> % x).start()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Producer(name=<span class="string">'生产者%d'</span> % x).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><Consumer(消费者<span class="number">0</span>, started <span class="number">11240</span>)>消费了<span class="number">811</span>的钱,还剩<span class="number">189</span>的钱</span><br><span class="line"><Consumer(消费者<span class="number">1</span>, started <span class="number">16408</span>)>消费了<span class="number">153</span>的钱,还剩<span class="number">36</span>的钱</span><br><span class="line"><Consumer(消费者<span class="number">2</span>, started <span class="number">14100</span>)>准备消费<span class="number">762</span>,还剩<span class="number">36</span>的钱,钱不足</span><br><span class="line"><Consumer(消费者<span class="number">3</span>, started <span class="number">12012</span>)>准备消费<span class="number">512</span>,还剩<span class="number">36</span>的钱,钱不足</span><br><span class="line"><Consumer(消费者<span class="number">4</span>, started <span class="number">6924</span>)>准备消费<span class="number">568</span>,还剩<span class="number">36</span>的钱,钱不足</span><br><span class="line"><Producer(生产者<span class="number">0</span>, started <span class="number">18116</span>)>生产了<span class="number">692</span>的钱,还剩<span class="number">728</span>的钱</span><br><span class="line"><Consumer(消费者<span class="number">2</span>, started <span class="number">14100</span>)>准备消费<span class="number">762</span>,还剩<span class="number">728</span>的钱,钱不足</span><br><span class="line"><Consumer(消费者<span class="number">3</span>, started <span class="number">12012</span>)>消费了<span class="number">512</span>的钱,还剩<span class="number">216</span>的钱</span><br><span class="line"><Consumer(消费者<span class="number">4</span>, started <span class="number">6924</span>)>准备消费<span class="number">568</span>,还剩<span class="number">216</span>的钱,钱不足</span><br><span class="line"><Producer(生产者<span class="number">1</span>, started <span class="number">18792</span>)>生产了<span class="number">523</span>的钱,还剩<span class="number">739</span>的钱</span><br><span class="line"><Producer(生产者<span class="number">2</span>, started <span class="number">19104</span>)>生产了<span class="number">457</span>的钱,还剩<span class="number">1196</span>的钱</span><br><span class="line"><Consumer(消费者<span class="number">2</span>, started <span class="number">14100</span>)>消费了<span class="number">762</span>的钱,还剩<span class="number">434</span>的钱</span><br><span class="line"><Consumer(消费者<span class="number">4</span>, started <span class="number">6924</span>)>准备消费<span class="number">568</span>,还剩<span class="number">434</span>的钱,钱不足</span><br><span class="line"><Producer(生产者<span class="number">3</span>, started <span class="number">17256</span>)>生产了<span class="number">171</span>的钱,还剩<span class="number">605</span>的钱</span><br><span class="line"><Producer(生产者<span class="number">4</span>, started <span class="number">1284</span>)>生产了<span class="number">486</span>的钱,还剩<span class="number">1091</span>的钱</span><br><span class="line"><Consumer(消费者<span class="number">4</span>, started <span class="number">6924</span>)>消费了<span class="number">568</span>的钱,还剩<span class="number">523</span>的钱</span><br><span class="line"><Consumer(消费者<span class="number">0</span>, started <span class="number">11240</span>)>准备消费<span class="number">584</span>,还剩<span class="number">523</span>的钱,钱不足</span><br><span class="line"><Consumer(消费者<span class="number">1</span>, started <span class="number">16408</span>)>准备消费<span class="number">605</span>,还剩<span class="number">523</span>的钱,钱不足</span><br><span class="line"><Producer(生产者<span class="number">2</span>, started <span class="number">19104</span>)>生产了<span class="number">774</span>的钱,还剩<span class="number">1297</span>的钱</span><br><span class="line"><Consumer(消费者<span class="number">3</span>, started <span class="number">12012</span>)>消费了<span class="number">621</span>的钱,还剩<span class="number">676</span>的钱</span><br><span class="line"><Consumer(消费者<span class="number">0</span>, started <span class="number">11240</span>)>消费了<span class="number">584</span>的钱,还剩<span class="number">92</span>的钱</span><br><span class="line"><Consumer(消费者<span class="number">1</span>, started <span class="number">16408</span>)>准备消费<span class="number">605</span>,还剩<span class="number">92</span>的钱,钱不足</span><br><span class="line"><Producer(生产者<span class="number">0</span>, started <span class="number">18116</span>)>生产了<span class="number">383</span>的钱,还剩<span class="number">475</span>的钱</span><br><span class="line"><Producer(生产者<span class="number">1</span>, started <span class="number">18792</span>)>生产了<span class="number">639</span>的钱,还剩<span class="number">1114</span>的钱</span><br><span class="line"><Consumer(消费者<span class="number">1</span>, started <span class="number">16408</span>)>消费了<span class="number">605</span>的钱,还剩<span class="number">509</span>的钱</span><br><span class="line"><Consumer(消费者<span class="number">4</span>, started <span class="number">6924</span>)>消费了<span class="number">116</span>的钱,还剩<span class="number">393</span>的钱</span><br><span class="line"><Producer(生产者<span class="number">3</span>, started <span class="number">17256</span>)>生产了<span class="number">550</span>的钱,还剩<span class="number">943</span>的钱</span><br><span class="line"><Consumer(消费者<span class="number">2</span>, started <span class="number">14100</span>)>消费了<span class="number">543</span>的钱,还剩<span class="number">400</span>的钱</span><br><span class="line"><Producer(生产者<span class="number">4</span>, started <span class="number">1284</span>)>生产了<span class="number">957</span>的钱,还剩<span class="number">1357</span>的钱</span><br><span class="line"><Consumer(消费者<span class="number">3</span>, started <span class="number">12012</span>)>消费了<span class="number">754</span>的钱,还剩<span class="number">603</span>的钱</span><br><span class="line"><Producer(生产者<span class="number">2</span>, started <span class="number">19104</span>)>生产了<span class="number">463</span>的钱,还剩<span class="number">1066</span>的钱</span><br><span class="line"><Consumer(消费者<span class="number">0</span>, started <span class="number">11240</span>)>消费了<span class="number">778</span>的钱,还剩<span class="number">288</span>的钱</span><br></pre></td></tr></tbody></table></figure>

<p>队列 queue</p>
<p>from queue import Queue</p>
<p>使用多线程爬取表情包</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产者消费者下载表情包</span></span><br><span class="line"><span class="comment">#  其中需要两个队列,一个是获取每一页的url 还有一个获取每个表情的url</span></span><br><span class="line"><span class="comment"># 生产者负责获取每个表情包的url,消费者负责将表情的url写进文件</span></span><br><span class="line"></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                  <span class="string">'Chrome/76.0.3809.100 Safari/537.36 '</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, page_queue, img_queue, *args, **kwargs)</span>:</span>  <span class="comment"># 构造函数</span></span><br><span class="line">        super(Producer, self).__init__(*args, **kwargs)  <span class="comment"># 继承父类的方法</span></span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        self.img_queue = img_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.page_queue.empty():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            url = self.page_queue.get()</span><br><span class="line">            self.parse_page(url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        html = etree.HTML(response.text)</span><br><span class="line">        images = html.xpath(<span class="string">"//div[@class='page-content text-center']//img[@class!='gif']"</span>)</span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> images:</span><br><span class="line">            file_url = img.get(<span class="string">'data-original'</span>)</span><br><span class="line">            alt = img.get(<span class="string">'alt'</span>)</span><br><span class="line">            suffix = os.path.splitext(file_url)</span><br><span class="line">            alt = re.sub(<span class="string">r"[!\?,\.！？]"</span>, <span class="string">''</span>, alt)</span><br><span class="line">            filename = alt + suffix[<span class="number">1</span>]</span><br><span class="line">            self.img_queue.put((file_url, filename))</span><br><span class="line">            <span class="comment"># download_img(file_url, filename)</span></span><br><span class="line">            <span class="comment"># 此处不能用urllib.request.urlretrieve() 会403</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, page_queue, img_queue, *args, **kwargs)</span>:</span>  <span class="comment"># 构造函数</span></span><br><span class="line">        super(Consumer, self).__init__(*args, **kwargs)  <span class="comment"># 继承父类的方法</span></span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        self.img_queue = img_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.img_queue.empty() <span class="keyword">and</span> self.page_queue.empty():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            img_url, filename = self.img_queue.get()  <span class="comment"># 解析元组</span></span><br><span class="line">            self.download_img(img_url, filename)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download_img</span><span class="params">(self, url, filename)</span>:</span></span><br><span class="line">        file_name = <span class="string">'D:\\images\\'</span> + filename</span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="keyword">with</span> open(file_name, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.content)</span><br><span class="line">        print(filename + <span class="string">'下载完成'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    page_queue = Queue(<span class="number">100</span>)</span><br><span class="line">    img_queue = Queue(<span class="number">50000</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">        url = <span class="string">'http://www.doutula.com/photo/list/?page=%d'</span> % i</span><br><span class="line">        page_queue.put(url)  <span class="comment"># 将每一页的url加入队列中</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Producer(page_queue, img_queue).start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Consumer(page_queue, img_queue).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure>

<p>selenium与chromedriver</p>
<p>安装selenium</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></tbody></table></figure>

<p>安装chromedriver(安装与自己浏览器匹配的版本,将chromedriver放在不含中文的文件夹下)</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://npm.taobao.org/mirrors/chromedriver/</span><br></pre></td></tr></tbody></table></figure>

<p>selenium测试和行为链</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment">#  行为链</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line">driver_path = <span class="string">r'E:\Program Files\chromedriver\chromedriver.exe'</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line">driver.get(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">actions = ActionChains(driver)</span><br><span class="line">inputTag = driver.find_element_by_name(<span class="string">'wd'</span>)</span><br><span class="line">submit = driver.find_element_by_id(<span class="string">'su'</span>)</span><br><span class="line">actions.move_to_element(inputTag)</span><br><span class="line">actions.send_keys_to_element(inputTag, <span class="string">'python'</span>)</span><br><span class="line">actions.move_to_element(submit)</span><br><span class="line">actions.click(submit)</span><br><span class="line">actions.perform()</span><br></pre></td></tr></tbody></table></figure>

<p>selenium api文档</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains</span><br></pre></td></tr></tbody></table></figure>

<p>操作cookie</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> driver.get_cookies():</span><br><span class="line">    print(cookie)</span><br><span class="line"></span><br><span class="line">print(driver.get_cookie(<span class="string">'PSTM'</span>))</span><br><span class="line"></span><br><span class="line">print(driver.delete_cookie(<span class="string">'PSTM'</span>))</span><br><span class="line"></span><br><span class="line">print(driver.delete_all_cookies())</span><br></pre></td></tr></tbody></table></figure>

<p>显示等待和隐式等待</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">driver_path = <span class="string">r'E:\Program Files\chromedriver\chromedriver.exe'</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(driver_path)</span><br><span class="line">driver.get(<span class="string">'http://www.douban.com'</span>)</span><br><span class="line"><span class="comment"># driver.implicitly_wait(5)  # 隐式等待</span></span><br><span class="line"></span><br><span class="line">WebDriverWait(driver, <span class="number">10</span>).until(  <span class="comment"># 显示等待 当元素出现就返回</span></span><br><span class="line">    EC.presence_of_element_located((By.ID, <span class="string">'anony-group'</span>))</span><br><span class="line">)</span><br><span class="line"><span class="comment"># driver.find_element_by_name('weweweew')</span></span><br></pre></td></tr></tbody></table></figure>

<p>页面切换</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver_path = <span class="string">r'E:\Program Files\chromedriver\chromedriver.exe'</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(driver_path)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"></span><br><span class="line">driver.execute_script(<span class="string">"window.open('http://www.douban.com')"</span>)</span><br><span class="line">driver.switch_to.window(driver.window_handles[<span class="number">1</span>])  <span class="comment"># driver.window_handles[1] 页面句柄 </span></span><br><span class="line"><span class="comment"># switch_to.window 跳转页面</span></span><br><span class="line">print(driver.current_url)</span><br></pre></td></tr></tbody></table></figure>

<p>使用代理</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">driver_path = <span class="string">r'E:\Program Files\chromedriver\chromedriver.exe'</span></span><br><span class="line">options = webdriver.ChromeOptions()  <span class="comment"># 代理</span></span><br><span class="line">options.add_argument(<span class="string">'--proxy-server=http://119.57.108.65:53281'</span>)</span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path, chrome_options=options)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">'http://httpbin.org/ip'</span>)</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line"># 对元素进行操作</span><br><span class="line">from selenium.webdriver.remote.webelement import WebElement</span><br><span class="line"># 对元素进行操作</span><br><span class="line">submitBtn = driver.fin_element_by_id('su')</span><br><span class="line">print(submitBtn.get_attribute("value"))</span><br></pre></td></tr></tbody></table></figure>

<p>selenium实现获取拉勾网职位信息</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">requesst_url</span><span class="params">()</span>:</span></span><br><span class="line">    driver_path = <span class="string">r'E:\Program Files\chromedriver\chromedriver.exe'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.driver = webdriver.Chrome(requesst_url.driver_path)</span><br><span class="line">        self.url = <span class="string">'https://www.lagou.com/jobs/list_python?labelWords=&fromSearch=true&suginput='</span></span><br><span class="line">        self.positions = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.driver.get(self.url)</span><br><span class="line">        self.driver.find_element_by_xpath(<span class="string">"//div[@class='body-btn']"</span>).click()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            source = self.driver.page_source</span><br><span class="line">            self.parse_page(source)</span><br><span class="line">            WebDriverWait(self.driver, <span class="number">10</span>).until(</span><br><span class="line">                EC.presence_of_element_located((By.XPATH, <span class="string">"//div[@class='pager_container']//span[last()]"</span>))</span><br><span class="line">            )</span><br><span class="line">            next_btn = self.driver.find_element_by_xpath(<span class="string">"//div[@class='pager_container']//span[last()]"</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'pager_next_disabled'</span> <span class="keyword">in</span> next_btn.get_attribute(<span class="string">'class'</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                next_btn.click()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self, source)</span>:</span></span><br><span class="line">        html = etree.HTML(source)</span><br><span class="line">        detail_urls = html.xpath(<span class="string">"//a[@class='position_link']/@href"</span>)</span><br><span class="line">        <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">            self.driver.execute_script(<span class="string">"window.open('%s')"</span> % detail_url) <span class="comment"># 切换到新的页面</span></span><br><span class="line">            self.driver.switch_to.window(self.driver.window_handles[<span class="number">1</span>])</span><br><span class="line">            WebDriverWait(self.driver, <span class="number">10</span>).until(</span><br><span class="line">                EC.presence_of_element_located((By.XPATH, <span class="string">"//div[@class='job-name']"</span>))</span><br><span class="line">            )</span><br><span class="line">            source = self.driver.page_source</span><br><span class="line">            self.parse_detail_page(source)</span><br><span class="line">            self.driver.close()</span><br><span class="line">            self.driver.switch_to.window(self.driver.window_handles[<span class="number">0</span>]) <span class="comment"># 切换到原来的页面</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_detail_page</span><span class="params">(self, source)</span>:</span></span><br><span class="line">        html = etree.HTML(source)</span><br><span class="line">        position_name = html.xpath(<span class="string">"//div[@class='job-name']/@title"</span>)[<span class="number">0</span>]</span><br><span class="line">        spans = html.xpath(<span class="string">"//dd[@class='job_request']"</span>)[<span class="number">0</span>]</span><br><span class="line">        salary = spans.xpath(<span class="string">".//span[@class='salary']/text()"</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        city = re.sub(<span class="string">r"[\s/]"</span>, <span class="string">''</span>, spans.xpath(<span class="string">".//span/text()"</span>)[<span class="number">1</span>]).strip()</span><br><span class="line">        work_years = re.sub(<span class="string">r"[\s/]"</span>, <span class="string">''</span>, spans.xpath(<span class="string">".//span/text()"</span>)[<span class="number">2</span>]).strip()</span><br><span class="line">        company_name = html.xpath(<span class="string">"//div[@class='job_company_content']//em/text()"</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        require = re.sub(<span class="string">r"[\s/]"</span>, <span class="string">''</span>, spans.xpath(<span class="string">".//span/text()"</span>)[<span class="number">3</span>]).strip()</span><br><span class="line">        description = <span class="string">""</span>.join(html.xpath(<span class="string">"//div[@class='job-detail']//text()"</span>)).strip()</span><br><span class="line">        position = {</span><br><span class="line">            <span class="string">'position_name'</span>: position_name,</span><br><span class="line">            <span class="string">'salary'</span>: salary,</span><br><span class="line">            <span class="string">'city'</span>: city,</span><br><span class="line">            <span class="string">'work_years'</span>: work_years,</span><br><span class="line">            <span class="string">'company_name'</span>: company_name,</span><br><span class="line">            <span class="string">'require'</span>: require,</span><br><span class="line">            <span class="string">'description'</span>: description</span><br><span class="line">        }</span><br><span class="line">        self.positions.append(position)</span><br><span class="line">        print(position)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    requesst_url().run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure>

<p>图形验证码识别技术</p>
<p>tesseract的安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://digi.bib.uni-mannheim.de/tesseract/</span><br></pre></td></tr></tbody></table></figure>

<p>配置环境变量</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">D:\Program Files\Tesseract-OCR\tessdata</span><br></pre></td></tr></tbody></table></figure>

<p>测试验证码</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    pytesseract.pytesseract.tesseract_cmd = <span class="string">r'D:\Program Files\Tesseract-OCR\tesseract.exe'</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        time_stamp = int(time.time())</span><br><span class="line">        url = <span class="string">'http://47.103.204.177/BookStore/Vcode?a=%d'</span> % time_stamp</span><br><span class="line">        request.urlretrieve(url, <span class="string">'captcha.png'</span>)</span><br><span class="line">        image = Image.open(<span class="string">'captcha.png'</span>)</span><br><span class="line">        text = pytesseract.image_to_string(image)</span><br><span class="line">        print(text)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure>

<p>Scrapy框架</p>
<p><img src="/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB/image-20200305165442113.png" alt="image-20200305165442113"></p>
<p>安装</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">pip install scrapy</span><br><span class="line"># windows下还要安装</span><br><span class="line">pip install pypiwin32</span><br></pre></td></tr></tbody></table></figure>

<p>文档</p>
<p>scrapy中文文档</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">https://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/overview.html</span><br></pre></td></tr></tbody></table></figure>

<p>使用命令行创建项目</p>
<p>创建项目前将scrapy加到环境变量</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">scrapy startproject 项目名称</span><br></pre></td></tr></tbody></table></figure>

<p>目录结构</p>
<p><img src="/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB/image-20200305162348095.png" alt="image-20200305162348095"></p>
<p>使用命令生成一个爬虫</p>
<p>项目路径:</p>
<p><img src="/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB/image-20200305162546702.png" alt="image-20200305162546702"></p>
<p>进入项目下创建</p>
<p><img src="/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB/image-20200305162952859.png" alt="image-20200305162952859"></p>
<p>(创建爬虫项目要与项目名不一样)</p>
<p>生成项目</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkSpiderSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'qsbk_spider'</span></span><br><span class="line">    allowed_domains = [<span class="string">'funnyba.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://funnyba.com/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure>

<p>在settings设置</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ROBOTSTXT_OBEY = False  # 机器人协议</span><br></pre></td></tr></tbody></table></figure>

<p>在请求头添加User-Agent</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">DEFAULT_REQUEST_HEADERS = {</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'en'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                  <span class="string">'Chrome/80.0.3987.132 Safari/537.36 '</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>例:爬取段子</p>
<p>qsbk_spider.py代码</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy_demo.qsbk.qsbk.items <span class="keyword">import</span> QsbkItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkSpiderSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'qsbk_spider'</span></span><br><span class="line">    allowed_domains = [<span class="string">'xiaohuabang.cn'</span>]</span><br><span class="line">    start_urls = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">190</span>):</span><br><span class="line">        start_urls.append(<span class="string">'http://www.xiaohuabang.cn/duanzi/hunduanzi/p%d/'</span> % i)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        hrefs = response.xpath(<span class="string">"//a[@class='link_more']/@href"</span>).getall()</span><br><span class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> hrefs:</span><br><span class="line">            url = <span class="string">'http://www.xiaohuabang.cn'</span>+href</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url, callback=self.parse_detail)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        title = response.xpath(<span class="string">"//em[contains(@style,'font')]/text()"</span>).get()</span><br><span class="line">        content = <span class="string">""</span>.join(response.xpath(<span class="string">"//div[@class='block untagged noline']//div[@class='content']//text()"</span>).getall()).strip()</span><br><span class="line">        content = re.sub(<span class="string">r"[\s\n\s?]"</span>, <span class="string">''</span>, content)</span><br><span class="line">        item = QsbkItem(title=title, content=content)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></tbody></table></figure>

<p>pipelines.py代码</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> scrapy.exporters <span class="keyword">import</span> JsonLinesItemExporter</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.fp = open(<span class="string">"duanzi.json"</span>, <span class="string">"wb"</span>)</span><br><span class="line">        self.exporter = JsonLinesItemExporter(self.fp, ensure_ascii=<span class="literal">False</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.exporter.export_item(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></tbody></table></figure>

<p>CrawlSpider爬虫</p>
<p>LinkExtractors链接提取器</p>
<p>常用参数</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">allow=() #允许的url,满足这个正则的url都会被提取</span><br><span class="line">deny=() 禁止的url,满足这个正则的url都不会被提取</span><br></pre></td></tr></tbody></table></figure>

<p>Rule 规则类</p>
<p>创建crawl模板的spider</p>
<p><img src="/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB/image-20200306135437033.png" alt="image-20200306135437033"></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">scrapy startproject 项目名称</span><br><span class="line">进入项目下</span><br><span class="line">即cd 项目名称</span><br><span class="line">创建 crawl模板的spider</span><br><span class="line">scrapy genspider -t crawl wxapp_spider "域名"</span><br></pre></td></tr></tbody></table></figure>

<p>需要使用LinkExtractors和Rule 规则</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">start_urls = [<span class="string">'http://www.wxapp-union.com/portal.php?mod=list&catid=2&page=1'</span>]</span><br><span class="line"><span class="comment"># start_url 是爬虫开始的url</span></span><br><span class="line"></span><br><span class="line">rules = (</span><br><span class="line">    Rule(LinkExtractor(allow=<span class="string">r'.+mod=list&catid=2&page=\d'</span>), follow=<span class="literal">True</span>),</span><br><span class="line">    Rule(LinkExtractor(allow=<span class="string">".+article-.+\.html"</span>), callback=<span class="string">"parse_detail"</span>, follow=<span class="literal">False</span>)</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 重点是rules 其中的Rule(LinkExtractor(allow="")#allow 使用正则表达式,区分所有的url follow表示 是否要跟进比如前十页后面还有则设置为true 为详情页的rule设置callback是返回执行的解析函数,follow不跟进, 什么情况下需要指定callback如果这个url只为获取更多的url并不需要里面的数据, 则不用设置,若这个url需要获取页面的信息则要指定callback</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy_demo.wxapp.wxapp.items <span class="keyword">import</span> WxappItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WxappSpiderSpider</span><span class="params">(CrawlSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'wxapp_spider'</span></span><br><span class="line">    allowed_domains = [<span class="string">'wxapp-union.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://www.wxapp-union.com/portal.php?mod=list&catid=2&page=1'</span>]</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">r'.+mod=list&catid=2&page=\d'</span>), follow=<span class="literal">True</span>),</span><br><span class="line">        Rule(LinkExtractor(allow=<span class="string">".+article-.+\.html"</span>), callback=<span class="string">"parse_detail"</span>, follow=<span class="literal">False</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># item = {}</span></span><br><span class="line">        <span class="comment"># item['domain_id'] = response.xpath('//input[@id="sid"]/@value').get()</span></span><br><span class="line">        <span class="comment"># item['name'] = response.xpath('//div[@id="name"]').get()</span></span><br><span class="line">        <span class="comment"># item['description'] = response.xpath('//div[@id="description"]').get()</span></span><br><span class="line">        title = response.xpath(<span class="string">"//h1[@class='ph']/text()"</span>).get()</span><br><span class="line">        author_p = response.xpath(<span class="string">"//p[@class='authors']"</span>)</span><br><span class="line">        author = author_p.xpath(<span class="string">".//a/text()"</span>).get()</span><br><span class="line">        pub_time = author_p.xpath(<span class="string">".//span/text()"</span>).get()</span><br><span class="line">        article_content = <span class="string">""</span>.join(response.xpath(<span class="string">"//td[@id='article_content']//text()"</span>).getall()).strip()</span><br><span class="line">        <span class="comment"># print(article_content)</span></span><br><span class="line">        <span class="comment"># print("author: %s,pub_time: %s" % (author, pub_time))</span></span><br><span class="line">        item = WxappItem(title=title, author=author, pub_time=pub_time, content=article_content)</span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.exporters <span class="keyword">import</span> JsonLinesItemExporter</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WxappPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.fp = open(<span class="string">'wxapp.json'</span>, <span class="string">'wb'</span>)</span><br><span class="line">        self.exporters = JsonLinesItemExporter(self.fp, ensure_ascii=<span class="literal">False</span>, encoding=<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.exporters.export_item(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.fp.close()</span><br></pre></td></tr></tbody></table></figure>

<p>主意要开启</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ITEM_PIPELINES = {</span><br><span class="line">   'wxapp.pipelines.WxappPipeline': 300,</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define here the models for your scraped items</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># https://docs.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WxappItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    author = scrapy.Field()</span><br><span class="line">    pub_time = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br></pre></td></tr></tbody></table></figure>

<p>Scrapy shell </p>
<p><img src="/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB/image-20200306140125182.png" alt="image-20200306140125182"></p>
<p>request和response对象</p>
<p><img src="/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB/image-20200306141415606.png" alt="image-20200306141415606"></p>
<p><img src="/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB/image-20200306141525160.png" alt="image-20200306141525160"></p>
<p>发送post请求</p>
<p>重写start_request方法,使用FormRequest()</p>
<p><img src="/2020/03/15/python%E7%88%AC%E8%99%AB/python%E7%88%AC%E8%99%AB/image-20200306165729994.png" alt="image-20200306165729994"></p>
<p>模拟登录豆瓣网</p>
</body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫前奏</title>
    <url>/2020/03/13/python%E7%88%AC%E8%99%AB/1-%E7%88%AC%E8%99%AB%E5%89%8D%E5%A5%8F/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-爬虫前奏"><a href="#1-爬虫前奏" class="headerlink" title="1-爬虫前奏"></a>1-爬虫前奏</h1><h2 id="爬虫的实际例子："><a href="#爬虫的实际例子：" class="headerlink" title="爬虫的实际例子："></a>爬虫的实际例子：</h2><ol>
<li><p>搜索引擎（百度、谷歌、360搜索等）。</p>
<a id="more"></a>
</li>
<li><p>伯乐在线。</p>
</li>
<li><p>惠惠购物助手。</p>
</li>
<li><p>数据分析与研究（数据冰山知乎专栏）。</p>
</li>
<li><p>抢票软件等。</p>
</li>
</ol>
<h2 id="什么是网络爬虫："><a href="#什么是网络爬虫：" class="headerlink" title="什么是网络爬虫："></a>什么是网络爬虫：</h2><ol>
<li>通俗理解：爬虫是一个模拟人类请求网站行为的程序。可以自动请求网页、并数据抓取下来，然后使用一定的规则提取有价值的数据。</li>
<li>专业介绍：<a href="https://baike.baidu.com/item/网络爬虫/5162711?fr=aladdin" target="_blank" rel="noopener">百度百科</a>。</li>
</ol>
<h2 id="通用爬虫和聚焦爬虫："><a href="#通用爬虫和聚焦爬虫：" class="headerlink" title="通用爬虫和聚焦爬虫："></a>通用爬虫和聚焦爬虫：</h2><ol>
<li>通用爬虫：通用爬虫是搜索引擎抓取系统（百度、谷歌、搜狗等）的重要组成部分。主要是将互联网上的网页下载到本地，形成一个互联网内容的镜像备份。</li>
<li>聚焦爬虫：是面向特定需求的一种网络爬虫程序，他与通用爬虫的区别在于：聚焦爬虫在实施网页抓取的时候会对内容进行筛选和处理，尽量保证只抓取与需求相关的网页信息。</li>
</ol>
<h2 id="为什么用Python写爬虫程序："><a href="#为什么用Python写爬虫程序：" class="headerlink" title="为什么用Python写爬虫程序："></a>为什么用Python写爬虫程序：</h2><ol>
<li>PHP：PHP是世界是最好的语言，但他天生不是做这个的，而且对多线程、异步支持不是很好，并发处理能力弱。爬虫是工具性程序，对速度和效率要求比较高。</li>
<li>Java：生态圈很完善，是Python爬虫最大的竞争对手。但是Java语言本身很笨重，代码量很大。重构成本比较高，任何修改会导致代码大量改动。爬虫经常要修改采集代码。</li>
<li>C/C++：运行效率是无敌的。但是学习和开发成本高。写个小爬虫程序可能要大半天时间。</li>
<li>Python：语法优美、代码简洁、开发效率高、支持的模块多。相关的HTTP请求模块和HTML解析模块非常丰富。还有Scrapy和Scrapy-redis框架让我们开发爬虫变得异常简单。</li>
</ol>
<h2 id="准备工具："><a href="#准备工具：" class="headerlink" title="准备工具："></a>准备工具：</h2><ol>
<li>Python3.6开发环境。</li>
<li>Pycharm 2017 professional版。</li>
<li>虚拟环境。<code>virtualenv/virtualenvwrapper</code>。</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql连表查询续</title>
    <url>/2020/03/04/mysql/mysql2/</url>
    <content><![CDATA[<html><head></head><body><h2 id="mysql查询基本知识-通过记录log的方式记录知识点"><a href="#mysql查询基本知识-通过记录log的方式记录知识点" class="headerlink" title="mysql查询基本知识,通过记录log的方式记录知识点"></a>mysql查询基本知识,通过记录log的方式记录知识点</h2><p>作者: philxling</p>
<p>mysql> select goods_name,goods_id, concat(“HTC”,substring(goods_name,4)) as name from goods where goods_name like “诺基亚%”;</p>
<a id="more"></a>

<p>+—————————————-+———-+———————————-+<br>| goods_name                             | goods_id | name                             |<br>+—————————————-+———-+———————————-+<br>| 诺基亚n85原装充电器                    |        4 | HTCn85原装充电器                 |<br>| 诺基亚原装5800耳机                     |        3 | HTC原装5800耳机                  |<br>| 诺基亚n85原装立体声耳机hs-82           |        7 | HTCn85原装立体声耳机hs-82        |<br>| 诺基亚e66                              |        9 | HTCe66                           |<br>| 诺基亚5320 xpressmusic                 |       13 | HTC5320 xpressmusic              |<br>| 诺基亚5800xm                           |       14 | HTC5800xm                        |<br>| 诺基亚n96                              |       23 | HTCn96                           |<br>| 诺基亚n85                              |       32 | HTCn85                           |<br>+—————————————-+———-+———————————-+<br>8 rows in set (0.00 sec)</p>
<p>mysql> select * from mian<br>    -> ;<br>+——+<br>| num  |<br>+——+<br>|    3 |<br>|   12 |<br>|   15 |<br>|   20 |<br>|   20 |<br>|   20 |<br>|   30 |<br>|   30 |<br>|   30 |<br>+——+<br>9 rows in set (0.00 sec)</p>
<p>mysql> #取出第三个栏目下价格小于1000或者大于3000 同时点击量大于5的商品<br>mysql> select goods_id ,goods_name, shop_price,cat_id,click_count from goods where cat_id=3 and (shop_price<1000 || shop_price>3000) and click_count >=5 ;<br>+———-+——————-+————+——–+————-+<br>| goods_id | goods_name        | shop_price | cat_id | click_count |<br>+———-+——————-+————+——–+————-+<br>|        8 | 飞利浦9@9v        |     399.00 |      3 |          10 |<br>|       12 | 摩托罗拉a810      |     983.00 |      3 |          13 |<br>|       15 | 摩托罗拉a810      |     788.00 |      3 |           8 |<br>|       19 | 三星sgh-f258      |     858.00 |      3 |           7 |<br>|       20 | 三星bc01          |     280.00 |      3 |          14 |<br>|       22 | 多普达touch hd    |    5999.00 |      3 |          16 |<br>|       32 | 诺基亚n85         |    3010.00 |      3 |           9 |<br>+———-+——————-+————+——–+————-+<br>7 rows in set (0.00 sec)</p>
<p>mysql> #最贵的商品的价格<br>mysql> select max(shop_price) from goods;<br>+—————–+<br>| max(shop_price) |<br>+—————–+<br>|         5999.00 |<br>+—————–+<br>1 row in set (0.06 sec)</p>
<p>mysql> #查询最便宜的商品的价格<br>mysql> select min(shop_price) from goods ;<br>+—————–+<br>| min(shop_price) |<br>+—————–+<br>|           18.00 |<br>+—————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #查出最旧的商品<br>mysql> select min(goods_id) from goods;<br>+—————+<br>| min(goods_id) |<br>+—————+<br>|             1 |<br>+—————+<br>1 row in set (0.10 sec)</p>
<p>mysql> #goods_number是库存量<br>mysql> select sum(goods_number) from goods<br>    -> ;<br>+——————-+<br>| sum(goods_number) |<br>+——————-+<br>|               313 |<br>+——————-+<br>1 row in set (0.00 sec)</p>
<p>mysql> #查看自己店里的商品的平均价格</p>
<p>mysql> select avg(shop_price) from goods;<br>+—————–+<br>| avg(shop_price) |<br>+—————–+<br>|     1232.526774 |<br>+—————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #统计多少种商品<br>mysql> select count(<em>) from goods;<br>+———-+<br>| count(</em>) |<br>+———-+<br>|       31 |<br>+———-+<br>1 row in set (0.00 sec)</p>
<p>mysql> show tables;<br>+——————+<br>| Tables_in_test01 |<br>+——————+<br>| a                |<br>| b                |<br>| boy              |<br>| category         |<br>| girl             |<br>| goods            |<br>| m                |<br>| mian             |<br>| result           |<br>| t                |<br>| user             |<br>+——————+<br>11 rows in set (0.17 sec)</p>
<p>mysql> select * from t;<br>+——+————–+<br>| tid  | tname        |<br>+——+————–+<br>|    1 | 国安         |<br>|    2 | 申花         |<br>|    3 | 布尔联队     |<br>+——+————–+<br>3 rows in set (0.06 sec)</p>
<p>mysql> #select count(<em>) from 表名,表示查询的是绝对的行数,哪怕某一行所有字段全为null的时候也能计算在内,<br>mysql> #而select count(字段) from 表名 查询的是该列不为null的所有行的行数<br>mysql> #用count(</em>)和count(1) 那个好,对于myisamm的表咩有区别,这种引擎计数器在维护,innodb的用count(*))直接读行数,效率很低<br>mysql> #计算第三个栏目下所有商品的库存量之和<br>mysql> select sum(goods_number) from goods where cat_id =3;<br>+——————-+<br>| sum(goods_number) |<br>+——————-+<br>|               203 |<br>+——————-+<br>1 row in set (0.00 sec)</p>
<p>mysql> #计算每个栏目下的库存量之和<br>mysql> select cat_id, sum(goods_number) from goods  group by cat_id ;<br>+——–+——————-+<br>| cat_id | sum(goods_number) |<br>+——–+——————-+<br>|      4 |                 3 |<br>|      8 |                61 |<br>|     11 |                23 |<br>|      3 |               203 |<br>|      2 |                 0 |<br>|      5 |                 8 |<br>|     13 |                 4 |<br>|     15 |                 2 |<br>|     14 |                 9 |<br>+——–+——————-+<br>9 rows in set (0.05 sec)</p>
<p>mysql> #having 筛选<br>mysql> #查询每种商品积压的货款<br>mysql> show databases;<br>+——————–+<br>| Database           |<br>+——————–+<br>| bookstore          |<br>| clouddb01          |<br>| clouddb02          |<br>| clouddb03          |<br>| information_schema |<br>| mydb               |<br>| mysql              |<br>| performance_schema |<br>| shop               |<br>| ssm_crud           |<br>| struts             |<br>| student            |<br>| sys                |<br>| test               |<br>| test01             |<br>+——————–+<br>15 rows in set (0.00 sec)</p>
<p>mysql> #查询每种商品积压的货款<br>mysql> select market_price,shop_price, market_price-shop_price as discount from goods where 1 having discount >200;<br>ERROR 1046 (3D000): No database selected<br>mysql> use test01;<br>Database changed</p>
<p>mysql> #查询每种商品积压的货款<br>mysql> #提示: 商品的库存量*价格</p>
<p>mysql> select goods_id ,shop_price,goods_number*shop_price as hk from goods;<br>+———-+————+———–+<br>| goods_id | shop_price | hk        |<br>+———-+————+———–+<br>|        1 |    1388.00 |   1388.00 |<br>|        4 |      58.00 |    986.00 |<br>|        3 |      68.00 |   1632.00 |<br>|        5 |      20.00 |    160.00 |<br>|        6 |      42.00 |    630.00 |<br>|        7 |     100.00 |   2000.00 |<br>|        8 |     399.00 |    399.00 |<br>|        9 |    2298.00 |   9192.00 |<br>|       10 |    1328.00 |   9296.00 |<br>|       11 |    1300.00 |   1300.00 |<br>|       12 |     983.00 |   7864.00 |<br>|       13 |    1311.00 |  10488.00 |<br>|       14 |    2625.00 |   2625.00 |<br>|       15 |     788.00 |   2364.00 |<br>|       16 |     823.33 |      0.00 |<br>|       17 |    2300.00 |   2300.00 |<br>|       18 |    2878.00 |   2878.00 |<br>|       19 |     858.00 |  10296.00 |<br>|       20 |     280.00 |   3360.00 |<br>|       21 |    2000.00 |  80000.00 |<br>|       22 |    5999.00 |   5999.00 |<br>|       23 |    3700.00 |  29600.00 |<br>|       24 |    2000.00 | 200000.00 |<br>|       25 |      48.00 |     96.00 |<br>|       26 |      19.00 |     38.00 |<br>|       27 |      95.00 |    190.00 |<br>|       28 |      45.00 |      0.00 |<br>|       29 |      90.00 |      0.00 |<br>|       30 |      18.00 |    162.00 |<br>|       31 |    1337.00 |   1337.00 |<br>|       32 |    3010.00 |  12040.00 |<br>+———-+————+———–+<br>31 rows in set (0.00 sec)</p>
<p>mysql> #查询该店积压的总货款<br>mysql> select goods_number ,sum(goods_number*shop_price) as sum from goods;<br>+————–+———–+<br>| goods_number | sum       |<br>+————–+———–+<br>|            1 | 398620.00 |<br>+————–+———–+<br>1 row in set (0.07 sec)</p>
<p>mysql> select sum(goods_number*shop_price) as sum from goods;<br>+———–+<br>| sum       |<br>+———–+<br>| 398620.00 |<br>+———–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #查询每个栏目下积压的k货款<br>mysql> select cat_id, sum(goods_number*shop_price) as sum from goods group by cat_id;<br>+——–+———–+<br>| cat_id | sum       |<br>+——–+———–+<br>|      4 |   6891.00 |<br>|      8 |   4618.00 |<br>|     11 |    790.00 |<br>|      3 | 356235.00 |<br>|      2 |      0.00 |<br>|      5 |  29600.00 |<br>|     13 |    134.00 |<br>|     15 |    190.00 |<br>|     14 |    162.00 |<br>+——–+———–+<br>9 rows in set (0.03 sec)</p>
<p>mysql> #查询栏目的积压货款金额,且查出挤压金额超出20000的货款<br>mysql> select cat_id, sum(goods_number*shop_price) as sum from goods  group by cat_id having sum>20000;<br>+——–+———–+<br>| cat_id | sum       |<br>+——–+———–+<br>|      3 | 356235.00 |<br>|      5 |  29600.00 |<br>+——–+———–+<br>2 rows in set (0.00 sec)</p>
<p>mysql> #查询本店市场价与本店价省的钱,且筛选出省钱200以上的商品<br>mysql> select goods_name, market_price-shop_price as discount from goods having discount>200;<br>ERROR 1690 (22003): DECIMAL UNSIGNED value is out of range in ‘(<code>test01</code>.<code>goods</code>.<code>market_price</code> - <code>test01</code>.<code>goods</code>.<code>shop_price</code>)’<br>mysql> show tables;<br>+——————+<br>| Tables_in_test01 |<br>+——————+<br>| a                |<br>| b                |<br>| boy              |<br>| category         |<br>| girl             |<br>| goods            |<br>| m                |<br>| mian             |<br>| result           |<br>| t                |<br>| user             |<br>+——————+<br>11 rows in set (0.14 sec)</p>
<p>mysql> select * from result;<br>+——–+———+——-+<br>| name   | subject | score |<br>+——–+———+——-+<br>| 张三   | 数学    |    90 |<br>| 张三   | 语文    |    50 |<br>| 张三   | 地理    |    40 |<br>| 李四   | 语文    |    55 |<br>| 李四   | 政治    |    45 |<br>| 王五   | 政治    |    30 |<br>+——–+———+——-+<br>6 rows in set (0.07 sec)</p>
<p>mysql> #查询出两门及两门以上不及格者的平均成绩<br>mysql> select avg(score) as average ,subject from result where subject>=2  group by name having average<60;<br>Empty set, 6 warnings (0.00 sec)</p>
<p>mysql> select avg(score) as average ,subject from result group by name;<br>+———+———+<br>| average | subject |<br>+———+———+<br>| 60.0000 | 数学    |<br>| 50.0000 | 语文    |<br>| 30.0000 | 政治    |<br>+———+———+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name from result group by name;<br>+———+——–+<br>| average | name   |<br>+———+——–+<br>| 60.0000 | 张三   |<br>| 50.0000 | 李四   |<br>| 30.0000 | 王五   |<br>+———+——–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name from result where 1  group by name;<br>+———+——–+<br>| average | name   |<br>+———+——–+<br>| 60.0000 | 张三   |<br>| 50.0000 | 李四   |<br>| 30.0000 | 王五   |<br>+———+——–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name from result where 1  group by name having average<60 ;<br>+———+——–+<br>| average | name   |<br>+———+——–+<br>| 50.0000 | 李四   |<br>| 30.0000 | 王五   |<br>+———+——–+<br>2 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name from result where score<60  group by name having avg(average) ;<br>Empty set (0.00 sec)</p>
<p>mysql> select avg(score<60) as average ,name from result where 1  group by name having avg(average) ;<br>Empty set (0.00 sec)</p>
<p>mysql> select avg(score<60) as average ,name from result where 1  group by name ;<br>+———+——–+<br>| average | name   |<br>+———+——–+<br>|  0.6667 | 张三   |<br>|  1.0000 | 李四   |<br>|  1.0000 | 王五   |<br>+———+——–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name from result where score<60  group by name ;<br>+———+——–+<br>| average | name   |<br>+———+——–+<br>| 45.0000 | 张三   |<br>| 50.0000 | 李四   |<br>| 30.0000 | 王五   |<br>+———+——–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name from result where subject>=2  group by name ;<br>Empty set, 6 warnings (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject) from result where score<60  group by name ;<br>+———+——–+—————-+<br>| average | name   | count(subject) |<br>+———+——–+—————-+<br>| 45.0000 | 张三   |              2 |<br>| 50.0000 | 李四   |              2 |<br>| 30.0000 | 王五   |              1 |<br>+———+——–+—————-+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject) as subject from result where score<60   group by name having subject>=2  ;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 45.0000 | 张三   |       2 |<br>| 50.0000 | 李四   |       2 |<br>+———+——–+———+<br>2 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject) as subject from result where score<60   group by name having subject>=2 and avg(average);<br>Empty set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject)>=2 as subject from result where score<60   group by name having avg(average);<br>Empty set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject) as subject from result where score<60   group by name having subject>=2;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 45.0000 | 张三   |       2 |<br>| 50.0000 | 李四   |       2 |<br>+———+——–+———+<br>2 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name from result where score<60  group by name ;<br>+———+——–+<br>| average | name   |<br>+———+——–+<br>| 45.0000 | 张三   |<br>| 50.0000 | 李四   |<br>| 30.0000 | 王五   |<br>+———+——–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject) from result where score<60  group by name ;<br>+———+——–+—————-+<br>| average | name   | count(subject) |<br>+———+——–+—————-+<br>| 45.0000 | 张三   |              2 |<br>| 50.0000 | 李四   |              2 |<br>| 30.0000 | 王五   |              1 |<br>+———+——–+—————-+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject)>=2 from result where score<60  group by name ;<br>+———+——–+——————-+<br>| average | name   | count(subject)>=2 |<br>+———+——–+——————-+<br>| 45.0000 | 张三   |                 1 |<br>| 50.0000 | 李四   |                 1 |<br>| 30.0000 | 王五   |                 0 |<br>+———+——–+——————-+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject)>=2 from result where score<60  group by name ;<br>+———+——–+——————-+<br>| average | name   | count(subject)>=2 |<br>+———+——–+——————-+<br>| 45.0000 | 张三   |                 1 |<br>| 50.0000 | 李四   |                 1 |<br>| 30.0000 | 王五   |                 0 |<br>+———+——–+——————-+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name,count(subject) from result where score<60  group by name ;<br>+———+——–+—————-+<br>| average | name   | count(subject) |<br>+———+——–+—————-+<br>| 45.0000 | 张三   |              2 |<br>| 50.0000 | 李四   |              2 |<br>| 30.0000 | 王五   |              1 |<br>+———+——–+—————-+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name from result where score<60 and subject>=2   group by name ;<br>Empty set, 5 warnings (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name, count(subject) from result where score<60 and subject>=2   group by name ;<br>Empty set, 5 warnings (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name, count(subject) from result where score<60    group by name ;<br>+———+——–+—————-+<br>| average | name   | count(subject) |<br>+———+——–+—————-+<br>| 45.0000 | 张三   |              2 |<br>| 50.0000 | 李四   |              2 |<br>| 30.0000 | 王五   |              1 |<br>+———+——–+—————-+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select avg(score) as average ,name, count(subject) as subject from result where score<60    group by name having subject>=2  ;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 45.0000 | 张三   |       2 |<br>| 50.0000 | 李四   |       2 |<br>+———+——–+———+<br>2 rows in set (0.00 sec)</p>
<p>mysql> use test01<br>Database changed<br>mysql> show tables;<br>+——————+<br>| Tables_in_test01 |<br>+——————+<br>| a                |<br>| b                |<br>| boy              |<br>| category         |<br>| girl             |<br>| goods            |<br>| m                |<br>| mian             |<br>| result           |<br>| t                |<br>| user             |<br>+——————+<br>11 rows in set (0.42 sec)</p>
<p>mysql> select avg(score) as average ,name, count(subject) as subject from result where score<60    group by name having subject>=2  ;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 45.0000 | 张三   |       2 |<br>| 50.0000 | 李四   |       2 |<br>+———+——–+———+<br>2 rows in set (0.14 sec)</p>
<p>mysql> insert into resule values(“赵六”,”语文”,100),<br>    -> (“赵六”,”数学”,99),<br>    -> (“赵六”,”英语”,98);<br>ERROR 1146 (42S02): Table ‘test01.resule’ doesn’t exist<br>mysql> insert into result values(“赵六”,”语文”,100),<br>    -> (“赵六”,”数学”,99),<br>    -> (“赵六”,”英语”,98);<br>Query OK, 3 rows affected (0.19 sec)<br>Records: 3  Duplicates: 0  Warnings: 0</p>
<p>mysql> select * from result;<br>+——–+———+——-+<br>| name   | subject | score |<br>+——–+———+——-+<br>| 张三   | 数学    |    90 |<br>| 张三   | 语文    |    50 |<br>| 张三   | 地理    |    40 |<br>| 李四   | 语文    |    55 |<br>| 李四   | 政治    |    45 |<br>| 王五   | 政治    |    30 |<br>| 赵六   | 语文    |   100 |<br>| 赵六   | 数学    |    99 |<br>| 赵六   | 英语    |    98 |<br>+——–+———+——-+<br>9 rows in set (0.00 sec)</p>
<p>mysql>  select avg(score) as average ,name, count(subject) as subject from result where score<60    group by name having subject>=2;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 45.0000 | 张三   |       2 |<br>| 50.0000 | 李四   |       2 |<br>+———+——–+———+<br>2 rows in set (0.00 sec)</p>
<p>mysql> insert into result values(“张三”,”英语”,34);<br>Query OK, 1 row affected (0.05 sec)</p>
<p>mysql>  select avg(score) as average ,name, count(subject) as subject from result where score<60    group by name having subject>=2;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 41.3333 | 张三   |       3 |<br>| 50.0000 | 李四   |       2 |<br>+———+——–+———+<br>2 rows in set (0.00 sec)</p>
<p>mysql>  select avg(score) as average ,name, sum(score<60) as subject from result   group by name having subject>=2;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 53.5000 | 张三   |       3 |<br>| 50.0000 | 李四   |       2 |<br>+———+——–+———+<br>2 rows in set (0.00 sec)</p>
<p>mysql>  select avg(score) as average ,name, sum(score<60) as subject from result   group by name having subject>=2 order by average;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 50.0000 | 李四   |       2 |<br>| 53.5000 | 张三   |       3 |<br>+———+——–+———+<br>2 rows in set (0.00 sec)</p>
<p>mysql>  select avg(score) as average ,name, sum(score<60) as subject from result   group by name having subject>=2 order by desc average;<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘desc average’ at line 1<br>mysql>  select avg(score) as average ,name, sum(score<60) as subject from result   group by name having subject>=2 order by  average desc;<br>+———+——–+———+<br>| average | name   | subject |<br>+———+——–+———+<br>| 53.5000 | 张三   |       3 |<br>| 50.0000 | 李四   |       2 |<br>+———+——–+———+<br>2 rows in set (0.00 sec)</p>
<p>mysql> #降序排 order by 列名 desc 降序/asc升序<br>mysql>  select avg(score) as average ,name, sum(score<60) as subject from result   group by name having subject>=2 order by  add_time asc;<br>ERROR 1054 (42S22): Unknown column ‘add_time’ in ‘order clause’<br>mysql> desc goods;<br>+————–+————————+——+—–+———+—————-+<br>| Field        | Type                   | Null | Key | Default | Extra          |<br>+————–+————————+——+—–+———+—————-+<br>| goods_id     | mediumint(8) unsigned  | NO   | PRI | NULL    | auto_increment |<br>| goods_name   | varchar(120)           | NO   |     |         |                |<br>| cat_id       | smallint(5) unsigned   | NO   |     | 0       |                |<br>| brand_id     | smallint(5) unsigned   | NO   |     | 0       |                |<br>| goods_sn     | char(15)               | NO   |     |         |                |<br>| goods_number | smallint(5) unsigned   | NO   |     | 0       |                |<br>| shop_price   | decimal(10,2) unsigned | NO   |     | 0.00    |                |<br>| market_price | decimal(10,2) unsigned | NO   |     | 0.00    |                |<br>| click_count  | int(10) unsigned       | NO   |     | 0       |                |<br>+————–+————————+——+—–+———+—————-+<br>9 rows in set (0.20 sec)</p>
<p>mysql> select goods_name ,cat_id,goods_id,shop_price from goods order by asc cat_id ,shop_price desc;<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘asc cat_id ,shop_price desc’ at line 1<br>mysql> select goods_name ,cat_id,goods_id,shop_price from goods order by  cat_id asc ,shop_price desc;<br>+—————————————-+——–+———-+————+<br>| goods_name                             | cat_id | goods_id | shop_price |<br>+—————————————-+——–+———-+————+<br>| 恒基伟业g101                           |      2 |       16 |     823.33 |<br>| 多普达touch hd                         |      3 |       22 |    5999.00 |<br>| 诺基亚n85                              |      3 |       32 |    3010.00 |<br>| 夏新n7                                 |      3 |       17 |    2300.00 |<br>| 诺基亚e66                              |      3 |        9 |    2298.00 |<br>| 金立 a30                               |      3 |       21 |    2000.00 |<br>| p806                                   |      3 |       24 |    2000.00 |<br>| 摩托罗拉e8                             |      3 |       31 |    1337.00 |<br>| 索爱c702c                              |      3 |       10 |    1328.00 |<br>| 诺基亚5320 xpressmusic                 |      3 |       13 |    1311.00 |<br>| 索爱c702c                              |      3 |       11 |    1300.00 |<br>| 摩托罗拉a810                           |      3 |       12 |     983.00 |<br>| 三星sgh-f258                           |      3 |       19 |     858.00 |<br>| 摩托罗拉a810                           |      3 |       15 |     788.00 |<br>| 飞利浦9@9v                             |      3 |        8 |     399.00 |<br>| 三星bc01                               |      3 |       20 |     280.00 |<br>| 夏新t5                                 |      4 |       18 |    2878.00 |<br>| 诺基亚5800xm                           |      4 |       14 |    2625.00 |<br>| kd876                                  |      4 |        1 |    1388.00 |<br>| 诺基亚n96                              |      5 |       23 |    3700.00 |<br>| 诺基亚n85原装立体声耳机hs-82           |      8 |        7 |     100.00 |<br>| 诺基亚原装5800耳机                     |      8 |        3 |      68.00 |<br>| 诺基亚n85原装充电器                    |      8 |        4 |      58.00 |<br>| 胜创kingmax内存卡                      |     11 |        6 |      42.00 |<br>| 索爱原装m2卡读卡器                     |     11 |        5 |      20.00 |<br>| 小灵通/固话50元充值卡                  |     13 |       25 |      48.00 |<br>| 小灵通/固话20元充值卡                  |     13 |       26 |      19.00 |<br>| 移动100元充值卡                        |     14 |       29 |      90.00 |<br>| 移动20元充值卡                         |     14 |       30 |      18.00 |<br>| 联通100元充值卡                        |     15 |       27 |      95.00 |<br>| 联通50元充值卡                         |     15 |       28 |      45.00 |<br>+—————————————-+——–+———-+————+<br>31 rows in set (0.26 sec)</p>
<p>mysql> #多排 用,隔开 order by cat_id asc ,shop_price desc<br>mysql> exit<br>mysql> use test01;<br>Database changed<br>mysql> #limit 限制条目<br>mysql> select goods_id,cat_id,goods_name,shop_price from goods where cat_id=3 order by shop_price desc limit 0,3;<br>+———-+——–+——————-+————+<br>| goods_id | cat_id | goods_name        | shop_price |<br>+———-+——–+——————-+————+<br>|       22 |      3 | 多普达touch hd    |    5999.00 |<br>|       32 |      3 | 诺基亚n85         |    3010.00 |<br>|       17 |      3 | 夏新n7            |    2300.00 |<br>+———-+——–+——————-+————+<br>3 rows in set (0.01 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name,shop_price from goods where cat_id=3 order by shop_price desc limit 2,2;<br>+———-+——–+————–+————+<br>| goods_id | cat_id | goods_name   | shop_price |<br>+———-+——–+————–+————+<br>|       17 |      3 | 夏新n7       |    2300.00 |<br>|        9 |      3 | 诺基亚e66    |    2298.00 |<br>+———-+——–+————–+————+<br>2 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name,shop_price from goods where cat_id=3 order by shop_price desc limit 2,3;<br>+———-+——–+————–+————+<br>| goods_id | cat_id | goods_name   | shop_price |<br>+———-+——–+————–+————+<br>|       17 |      3 | 夏新n7       |    2300.00 |<br>|        9 |      3 | 诺基亚e66    |    2298.00 |<br>|       21 |      3 | 金立 a30     |    2000.00 |<br>+———-+——–+————–+————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> #limit 第一个参数为0可以不写<br>mysql> #查询出每个栏目下id号最大的一条商品<br>mysql> select goods_id,cat_id,goods_name,shop_price from goods where 1 group by cat_id order by goods_id desc limit 1;<br>+———-+——–+———————–+————+<br>| goods_id | cat_id | goods_name            | shop_price |<br>+———-+——–+———————–+————+<br>|       29 |     14 | 移动100元充值卡       |      90.00 |<br>+———-+——–+———————–+————+<br>1 row in set (0.06 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name,shop_price from goods where 1 group by cat_id ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|        1 |      4 | kd876                          |    1388.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name,shop_price from goods  group by cat_id ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|        1 |      4 | kd876                          |    1388.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select cat_id,goods_name,shop_price from goods  group by cat_id ;<br>+——–+——————————–+————+<br>| cat_id | goods_name                     | shop_price |<br>+——–+——————————–+————+<br>|      4 | kd876                          |    1388.00 |<br>|      8 | 诺基亚n85原装充电器            |      58.00 |<br>|     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|      3 | 飞利浦9@9v                     |     399.00 |<br>|      2 | 恒基伟业g101                   |     823.33 |<br>|      5 | 诺基亚n96                      |    3700.00 |<br>|     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|     15 | 联通100元充值卡                |      95.00 |<br>|     14 | 移动100元充值卡                |      90.00 |<br>+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods   group by cat_id=3  ;<br>+———-+——–+—————+————+<br>| goods_id | cat_id | goods_name    | shop_price |<br>+———-+——–+—————+————+<br>|        1 |      4 | kd876         |    1388.00 |<br>|        8 |      3 | 飞利浦9@9v    |     399.00 |<br>+———-+——–+—————+————+<br>2 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|        1 |      4 | kd876                                  |    1388.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods group by cat_id ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|        1 |      4 | kd876                          |    1388.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>|        1 |      4 | kd876                                  |    1388.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc ;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|        1 |      4 | kd876                                  |    1388.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods group by cat_id  order by cat_id asc ,goods_id desc ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|        1 |      4 | kd876                          |    1388.00 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc ;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|        1 |      4 | kd876                                  |    1388.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select * from (select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc) as tem group by cat_id  ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|        1 |      4 | kd876                          |    1388.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.04 sec)</p>
<p>mysql> select * from (select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc) as tem group by cat_id  order by cat_id asc ,goods_id desc limit 1  ;<br>+———-+——–+——————+————+<br>| goods_id | cat_id | goods_name       | shop_price |<br>+———-+——–+——————+————+<br>|       16 |      2 | 恒基伟业g101     |     823.33 |<br>+———-+——–+——————+————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select * from (select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc) as tem group by cat_id  order by cat_id asc ,goods_id desc ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|        1 |      4 | kd876                          |    1388.00 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc ;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|        1 |      4 | kd876                                  |    1388.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select * from (select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc) as temp order by cat_id asc ;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>|        1 |      4 | kd876                                  |    1388.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select * from (select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc) as temp group by cat_id order by cat_id asc ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|        1 |      4 | kd876                          |    1388.00 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select * from (select goods_id, cat_id,goods_name,shop_price from goods order by cat_id asc ,goods_id desc) as temp group by cat_id  ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|        1 |      4 | kd876                          |    1388.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods where cat_id=3 order by goods_id desc limit 1 ;<br>+———-+——–+————–+————+<br>| goods_id | cat_id | goods_name   | shop_price |<br>+———-+——–+————–+————+<br>|       32 |      3 | 诺基亚n85    |    3010.00 |<br>+———-+——–+————–+————+<br>1 row in set (0.07 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods  order by goods_id desc limit 1 ;<br>+———-+——–+————–+————+<br>| goods_id | cat_id | goods_name   | shop_price |<br>+———-+——–+————–+————+<br>|       32 |      3 | 诺基亚n85    |    3010.00 |<br>+———-+——–+————–+————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods  order by goods_id desc limit 1 ;<br>+———-+——–+————–+————+<br>| goods_id | cat_id | goods_name   | shop_price |<br>+———-+——–+————–+————+<br>|       32 |      3 | 诺基亚n85    |    3010.00 |<br>+———-+——–+————–+————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods  order by goods_id desc  ;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|        1 |      4 | kd876                                  |    1388.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods group by cat_id  order by goods_id desc  ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        1 |      4 | kd876                          |    1388.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods group by cat_id  ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|        1 |      4 | kd876                          |    1388.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods group by cat_id  order by goods_id desc  ;<br>+———-+——–+——————————–+————+<br>| goods_id | cat_id | goods_name                     | shop_price |<br>+———-+——–+——————————–+————+<br>|       29 |     14 | 移动100元充值卡                |      90.00 |<br>|       27 |     15 | 联通100元充值卡                |      95.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|       23 |      5 | 诺基亚n96                      |    3700.00 |<br>|       16 |      2 | 恒基伟业g101                   |     823.33 |<br>|        8 |      3 | 飞利浦9@9v                     |     399.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|        4 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|        1 |      4 | kd876                          |    1388.00 |<br>+———-+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id,goods_name,shop_price from goods  order by goods_id desc limit 1 ;<br>+———-+——–+————–+————+<br>| goods_id | cat_id | goods_name   | shop_price |<br>+———-+——–+————–+————+<br>|       32 |      3 | 诺基亚n85    |    3010.00 |<br>+———-+——–+————–+————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select max(goods_id), cat_id,goods_name,shop_price from goods  order by goods_id desc ;<br>+—————+——–+————+————+<br>| max(goods_id) | cat_id | goods_name | shop_price |<br>+—————+——–+————+————+<br>|            32 |      4 | kd876      |    1388.00 |<br>+—————+——–+————+————+<br>1 row in set (0.06 sec)</p>
<p>mysql> select goods_id ,cat_id ,goods_name from goods<br>    -> ;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|        1 |      4 | kd876                                  |<br>|        4 |      8 | 诺基亚n85原装充电器                    |<br>|        3 |      8 | 诺基亚原装5800耳机                     |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        8 |      3 | 飞利浦9@9v                             |<br>|        9 |      3 | 诺基亚e66                              |<br>|       10 |      3 | 索爱c702c                              |<br>|       11 |      3 | 索爱c702c                              |<br>|       12 |      3 | 摩托罗拉a810                           |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |<br>|       14 |      4 | 诺基亚5800xm                           |<br>|       15 |      3 | 摩托罗拉a810                           |<br>|       16 |      2 | 恒基伟业g101                           |<br>|       17 |      3 | 夏新n7                                 |<br>|       18 |      4 | 夏新t5                                 |<br>|       19 |      3 | 三星sgh-f258                           |<br>|       20 |      3 | 三星bc01                               |<br>|       21 |      3 | 金立 a30                               |<br>|       22 |      3 | 多普达touch hd                         |<br>|       23 |      5 | 诺基亚n96                              |<br>|       24 |      3 | p806                                   |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       27 |     15 | 联通100元充值卡                        |<br>|       28 |     15 | 联通50元充值卡                         |<br>|       29 |     14 | 移动100元充值卡                        |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       31 |      3 | 摩托罗拉e8                             |<br>|       32 |      3 | 诺基亚n85                              |<br>+———-+——–+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select max(goods_id), cat_id,goods_name,shop_price from goods group by cat_id ;<br>+—————+——–+——————————–+————+<br>| max(goods_id) | cat_id | goods_name                     | shop_price |<br>+—————+——–+——————————–+————+<br>|            18 |      4 | kd876                          |    1388.00 |<br>|             7 |      8 | 诺基亚n85原装充电器            |      58.00 |<br>|             6 |     11 | 索爱原装m2卡读卡器             |      20.00 |<br>|            32 |      3 | 飞利浦9@9v                     |     399.00 |<br>|            16 |      2 | 恒基伟业g101                   |     823.33 |<br>|            23 |      5 | 诺基亚n96                      |    3700.00 |<br>|            26 |     13 | 小灵通/固话50元充值卡          |      48.00 |<br>|            28 |     15 | 联通100元充值卡                |      95.00 |<br>|            30 |     14 | 移动100元充值卡                |      90.00 |<br>+—————+——–+——————————–+————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select max(goods_id), cat_id from goods group by cat_id ;<br>+—————+——–+<br>| max(goods_id) | cat_id |<br>+—————+——–+<br>|            18 |      4 |<br>|             7 |      8 |<br>|             6 |     11 |<br>|            32 |      3 |<br>|            16 |      2 |<br>|            23 |      5 |<br>|            26 |     13 |<br>|            28 |     15 |<br>|            30 |     14 |<br>+—————+——–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select * from (select max(goods_id) as goods_id, cat_id from goods group by cat_id ) as temp where cat_id=cat_id ;<br>+———-+——–+<br>| goods_id | cat_id |<br>+———-+——–+<br>|       18 |      4 |<br>|        7 |      8 |<br>|        6 |     11 |<br>|       32 |      3 |<br>|       16 |      2 |<br>|       23 |      5 |<br>|       26 |     13 |<br>|       28 |     15 |<br>|       30 |     14 |<br>+———-+——–+<br>9 rows in set (0.06 sec)</p>
<p>mysql> select cat_id ,count(goods_name) from goods group by cat_id;<br>+——–+——————-+<br>| cat_id | count(goods_name) |<br>+——–+——————-+<br>|      4 |                 3 |<br>|      8 |                 3 |<br>|     11 |                 2 |<br>|      3 |                15 |<br>|      2 |                 1 |<br>|      5 |                 1 |<br>|     13 |                 2 |<br>|     15 |                 2 |<br>|     14 |                 2 |<br>+——–+——————-+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select cat_id ,max(goods_id) from goods group by cat_id;<br>+——–+—————+<br>| cat_id | max(goods_id) |<br>+——–+—————+<br>|      4 |            18 |<br>|      8 |             7 |<br>|     11 |             6 |<br>|      3 |            32 |<br>|      2 |            16 |<br>|      5 |            23 |<br>|     13 |            26 |<br>|     15 |            28 |<br>|     14 |            30 |<br>+——–+—————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select cat_id ,max(goods_id),max(goods_name) from goods group by cat_id;<br>+——–+—————+——————————–+<br>| cat_id | max(goods_id) | max(goods_name)                |<br>+——–+—————+——————————–+<br>|      4 |            18 | 诺基亚5800xm                   |<br>|      8 |             7 | 诺基亚原装5800耳机             |<br>|     11 |             6 | 胜创kingmax内存卡              |<br>|      3 |            32 | 飞利浦9@9v                     |<br>|      2 |            16 | 恒基伟业g101                   |<br>|      5 |            23 | 诺基亚n96                      |<br>|     13 |            26 | 小灵通/固话50元充值卡          |<br>|     15 |            28 | 联通50元充值卡                 |<br>|     14 |            30 | 移动20元充值卡                 |<br>+——–+—————+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select cat_id ,max(goods_id) from goods ;<br>+——–+—————+<br>| cat_id | max(goods_id) |<br>+——–+—————+<br>|      4 |            32 |<br>+——–+—————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select cat_id, goods_id,goods_name from goods order by goods_id desc ;<br>+——–+———-+—————————————-+<br>| cat_id | goods_id | goods_name                             |<br>+——–+———-+—————————————-+<br>|      3 |       32 | 诺基亚n85                              |<br>|      3 |       31 | 摩托罗拉e8                             |<br>|     14 |       30 | 移动20元充值卡                         |<br>|     14 |       29 | 移动100元充值卡                        |<br>|     15 |       28 | 联通50元充值卡                         |<br>|     15 |       27 | 联通100元充值卡                        |<br>|     13 |       26 | 小灵通/固话20元充值卡                  |<br>|     13 |       25 | 小灵通/固话50元充值卡                  |<br>|      3 |       24 | p806                                   |<br>|      5 |       23 | 诺基亚n96                              |<br>|      3 |       22 | 多普达touch hd                         |<br>|      3 |       21 | 金立 a30                               |<br>|      3 |       20 | 三星bc01                               |<br>|      3 |       19 | 三星sgh-f258                           |<br>|      4 |       18 | 夏新t5                                 |<br>|      3 |       17 | 夏新n7                                 |<br>|      2 |       16 | 恒基伟业g101                           |<br>|      3 |       15 | 摩托罗拉a810                           |<br>|      4 |       14 | 诺基亚5800xm                           |<br>|      3 |       13 | 诺基亚5320 xpressmusic                 |<br>|      3 |       12 | 摩托罗拉a810                           |<br>|      3 |       11 | 索爱c702c                              |<br>|      3 |       10 | 索爱c702c                              |<br>|      3 |        9 | 诺基亚e66                              |<br>|      3 |        8 | 飞利浦9@9v                             |<br>|      8 |        7 | 诺基亚n85原装立体声耳机hs-82           |<br>|     11 |        6 | 胜创kingmax内存卡                      |<br>|     11 |        5 | 索爱原装m2卡读卡器                     |<br>|      8 |        4 | 诺基亚n85原装充电器                    |<br>|      8 |        3 | 诺基亚原装5800耳机                     |<br>|      4 |        1 | kd876                                  |<br>+——–+———-+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select cat_id ,max(goods_id) from goods ;<br>+——–+—————+<br>| cat_id | max(goods_id) |<br>+——–+—————+<br>|      4 |            32 |<br>+——–+—————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select cat_id, goods_id,goods_name from goods order by goods_id desc ;<br>+——–+———-+—————————————-+<br>| cat_id | goods_id | goods_name                             |<br>+——–+———-+—————————————-+<br>|      3 |       32 | 诺基亚n85                              |<br>|      3 |       31 | 摩托罗拉e8                             |<br>|     14 |       30 | 移动20元充值卡                         |<br>|     14 |       29 | 移动100元充值卡                        |<br>|     15 |       28 | 联通50元充值卡                         |<br>|     15 |       27 | 联通100元充值卡                        |<br>|     13 |       26 | 小灵通/固话20元充值卡                  |<br>|     13 |       25 | 小灵通/固话50元充值卡                  |<br>|      3 |       24 | p806                                   |<br>|      5 |       23 | 诺基亚n96                              |<br>|      3 |       22 | 多普达touch hd                         |<br>|      3 |       21 | 金立 a30                               |<br>|      3 |       20 | 三星bc01                               |<br>|      3 |       19 | 三星sgh-f258                           |<br>|      4 |       18 | 夏新t5                                 |<br>|      3 |       17 | 夏新n7                                 |<br>|      2 |       16 | 恒基伟业g101                           |<br>|      3 |       15 | 摩托罗拉a810                           |<br>|      4 |       14 | 诺基亚5800xm                           |<br>|      3 |       13 | 诺基亚5320 xpressmusic                 |<br>|      3 |       12 | 摩托罗拉a810                           |<br>|      3 |       11 | 索爱c702c                              |<br>|      3 |       10 | 索爱c702c                              |<br>|      3 |        9 | 诺基亚e66                              |<br>|      3 |        8 | 飞利浦9@9v                             |<br>|      8 |        7 | 诺基亚n85原装立体声耳机hs-82           |<br>|     11 |        6 | 胜创kingmax内存卡                      |<br>|     11 |        5 | 索爱原装m2卡读卡器                     |<br>|      8 |        4 | 诺基亚n85原装充电器                    |<br>|      8 |        3 | 诺基亚原装5800耳机                     |<br>|      4 |        1 | kd876                                  |<br>+——–+———-+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select cat_id ,max(goods_id) from goods ;<br>+——–+—————+<br>| cat_id | max(goods_id) |<br>+——–+—————+<br>|      4 |            32 |<br>+——–+—————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select cat_id ,max(goods_id) from goods group by cat_id;<br>+——–+—————+<br>| cat_id | max(goods_id) |<br>+——–+—————+<br>|      4 |            18 |<br>|      8 |             7 |<br>|     11 |             6 |<br>|      3 |            32 |<br>|      2 |            16 |<br>|      5 |            23 |<br>|     13 |            26 |<br>|     15 |            28 |<br>|     14 |            30 |<br>+——–+—————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id ,goods_name,cat_id from goods where goods_id in(select max(goods_id) from goods group by cat_id) ;<br>+———-+—————————————-+——–+<br>| goods_id | goods_name                             | cat_id |<br>+———-+—————————————-+——–+<br>|        6 | 胜创kingmax内存卡                      |     11 |<br>|        7 | 诺基亚n85原装立体声耳机hs-82           |      8 |<br>|       16 | 恒基伟业g101                           |      2 |<br>|       18 | 夏新t5                                 |      4 |<br>|       23 | 诺基亚n96                              |      5 |<br>|       26 | 小灵通/固话20元充值卡                  |     13 |<br>|       28 | 联通50元充值卡                         |     15 |<br>|       30 | 移动20元充值卡                         |     14 |<br>|       32 | 诺基亚n85                              |      3 |<br>+———-+—————————————-+——–+<br>9 rows in set (0.06 sec)</p>
<p>mysql> select * from(select goods_id,cat_id ,goods_name from goods order by goods_id desc ) as temp  group by cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|        1 |      4 | kd876                          |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|       16 |      2 | 恒基伟业g101                   |<br>|       23 |      5 | 诺基亚n96                      |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       27 |     15 | 联通100元充值卡                |<br>|       29 |     14 | 移动100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select * from(select goods_id,cat_id ,goods_name from goods order by goods_id desc)  as temp  group by temp.cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|        1 |      4 | kd876                          |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|       16 |      2 | 恒基伟业g101                   |<br>|       23 |      5 | 诺基亚n96                      |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       27 |     15 | 联通100元充值卡                |<br>|       29 |     14 | 移动100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id ,goods_name from goods order by goods_id desc;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       32 |      3 | 诺基亚n85                              |<br>|       31 |      3 | 摩托罗拉e8                             |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       29 |     14 | 移动100元充值卡                        |<br>|       28 |     15 | 联通50元充值卡                         |<br>|       27 |     15 | 联通100元充值卡                        |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |<br>|       24 |      3 | p806                                   |<br>|       23 |      5 | 诺基亚n96                              |<br>|       22 |      3 | 多普达touch hd                         |<br>|       21 |      3 | 金立 a30                               |<br>|       20 |      3 | 三星bc01                               |<br>|       19 |      3 | 三星sgh-f258                           |<br>|       18 |      4 | 夏新t5                                 |<br>|       17 |      3 | 夏新n7                                 |<br>|       16 |      2 | 恒基伟业g101                           |<br>|       15 |      3 | 摩托罗拉a810                           |<br>|       14 |      4 | 诺基亚5800xm                           |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |<br>|       12 |      3 | 摩托罗拉a810                           |<br>|       11 |      3 | 索爱c702c                              |<br>|       10 |      3 | 索爱c702c                              |<br>|        9 |      3 | 诺基亚e66                              |<br>|        8 |      3 | 飞利浦9@9v                             |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |<br>|        4 |      8 | 诺基亚n85原装充电器                    |<br>|        3 |      8 | 诺基亚原装5800耳机                     |<br>|        1 |      4 | kd876                                  |<br>+———-+——–+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select cat_id,goods_name from (select goods_id,cat_id ,goods_name from goods order by goods_id desc) as temp group by cat_id;<br>+——–+——————————–+<br>| cat_id | goods_name                     |<br>+——–+——————————–+<br>|      4 | kd876                          |<br>|      8 | 诺基亚n85原装充电器            |<br>|     11 | 索爱原装m2卡读卡器             |<br>|      3 | 飞利浦9@9v                     |<br>|      2 | 恒基伟业g101                   |<br>|      5 | 诺基亚n96                      |<br>|     13 | 小灵通/固话50元充值卡          |<br>|     15 | 联通100元充值卡                |<br>|     14 | 移动100元充值卡                |<br>+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select temp.cat_id,goods_name from (select goods_id,cat_id ,goods_name from goods order by goods_id desc) as temp group by temp.cat_id;<br>+——–+——————————–+<br>| cat_id | goods_name                     |<br>+——–+——————————–+<br>|      4 | kd876                          |<br>|      8 | 诺基亚n85原装充电器            |<br>|     11 | 索爱原装m2卡读卡器             |<br>|      3 | 飞利浦9@9v                     |<br>|      2 | 恒基伟业g101                   |<br>|      5 | 诺基亚n96                      |<br>|     13 | 小灵通/固话50元充值卡          |<br>|     15 | 联通100元充值卡                |<br>|     14 | 移动100元充值卡                |<br>+——–+——————————–+<br>9 rows in set (0.05 sec)</p>
<p>mysql> #子查询<br>mysql> #查询商品id最大的商品不用排序<br>mysql> select goods_id ,cat_id ,goods_name from goods where goods_id=(select max(goods_id) from goods);<br>+———-+——–+————–+<br>| goods_id | cat_id | goods_name   |<br>+———-+——–+————–+<br>|       32 |      3 | 诺基亚n85    |<br>+———-+——–+————–+<br>1 row in set (0.05 sec)</p>
<p>mysql> #如果where型子查询 即where 列=(内层sql 返回的是必是单行单列单个值,) 若where 列 in(内层sql)只能是单列多行<br>mysql> #from型子查询,内部查询的结果当作外部查询的表s<br>mysql> select goods_id ,cat_id ,goods_name from (select goods_id ,cat_id ,goods_name from goods order by cat_id asc,goods_id desc) as temp group by cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|        1 |      4 | kd876                          |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|       16 |      2 | 恒基伟业g101                   |<br>|       23 |      5 | 诺基亚n96                      |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       27 |     15 | 联通100元充值卡                |<br>|       29 |     14 | 移动100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id ,cat_id ,goods_name from goods order by cat_id asc,goods_id desc;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       16 |      2 | 恒基伟业g101                           |<br>|       32 |      3 | 诺基亚n85                              |<br>|       31 |      3 | 摩托罗拉e8                             |<br>|       24 |      3 | p806                                   |<br>|       22 |      3 | 多普达touch hd                         |<br>|       21 |      3 | 金立 a30                               |<br>|       20 |      3 | 三星bc01                               |<br>|       19 |      3 | 三星sgh-f258                           |<br>|       17 |      3 | 夏新n7                                 |<br>|       15 |      3 | 摩托罗拉a810                           |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |<br>|       12 |      3 | 摩托罗拉a810                           |<br>|       11 |      3 | 索爱c702c                              |<br>|       10 |      3 | 索爱c702c                              |<br>|        9 |      3 | 诺基亚e66                              |<br>|        8 |      3 | 飞利浦9@9v                             |<br>|       18 |      4 | 夏新t5                                 |<br>|       14 |      4 | 诺基亚5800xm                           |<br>|        1 |      4 | kd876                                  |<br>|       23 |      5 | 诺基亚n96                              |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        4 |      8 | 诺基亚n85原装充电器                    |<br>|        3 |      8 | 诺基亚原装5800耳机                     |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       29 |     14 | 移动100元充值卡                        |<br>|       28 |     15 | 联通50元充值卡                         |<br>|       27 |     15 | 联通100元充值卡                        |<br>+———-+——–+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select * from (select goods_id ,cat_id ,goods_name from goods order by cat_id asc,goods_id desc) as temp group by cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|        1 |      4 | kd876                          |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|       16 |      2 | 恒基伟业g101                   |<br>|       23 |      5 | 诺基亚n96                      |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       27 |     15 | 联通100元充值卡                |<br>|       29 |     14 | 移动100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select * from (select goods_id ,cat_id ,goods_name from goods order by cat_id asc,goods_id desc) as temp group by temp.cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|        1 |      4 | kd876                          |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|       16 |      2 | 恒基伟业g101                   |<br>|       23 |      5 | 诺基亚n96                      |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       27 |     15 | 联通100元充值卡                |<br>|       29 |     14 | 移动100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name from (select goods_id as goods_id ,cat_id as cat_id ,goods_name as goods_name from goods order by cat_id asc,goods_id desc) as temp group by temp.cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|        1 |      4 | kd876                          |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|       16 |      2 | 恒基伟业g101                   |<br>|       23 |      5 | 诺基亚n96                      |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       27 |     15 | 联通100元充值卡                |<br>|       29 |     14 | 移动100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id, cat_id, goods_name from (select goods_id, goods_name, cat_id from goods order by cat_id asc, goods_id desc) as tmp group by cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|        1 |      4 | kd876                          |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|       16 |      2 | 恒基伟业g101                   |<br>|       23 |      5 | 诺基亚n96                      |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       27 |     15 | 联通100元充值卡                |<br>|       29 |     14 | 移动100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> exit<br>mysql> show databases;<br>+——————–+<br>| Database           |<br>+——————–+<br>| bookstore          |<br>| clouddb01          |<br>| clouddb02          |<br>| clouddb03          |<br>| information_schema |<br>| mydb               |<br>| mysql              |<br>| performance_schema |<br>| shop               |<br>| ssm_crud           |<br>| struts             |<br>| student            |<br>| sys                |<br>| test               |<br>| test01             |<br>+——————–+<br>15 rows in set (0.35 sec)</p>
<p>mysql> use test01;<br>Database changed<br>mysql> select goods_id,cat_id,goods_name from goods order by goods_id desc ,cat_id asc;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       32 |      3 | 诺基亚n85                              |<br>|       31 |      3 | 摩托罗拉e8                             |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       29 |     14 | 移动100元充值卡                        |<br>|       28 |     15 | 联通50元充值卡                         |<br>|       27 |     15 | 联通100元充值卡                        |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |<br>|       24 |      3 | p806                                   |<br>|       23 |      5 | 诺基亚n96                              |<br>|       22 |      3 | 多普达touch hd                         |<br>|       21 |      3 | 金立 a30                               |<br>|       20 |      3 | 三星bc01                               |<br>|       19 |      3 | 三星sgh-f258                           |<br>|       18 |      4 | 夏新t5                                 |<br>|       17 |      3 | 夏新n7                                 |<br>|       16 |      2 | 恒基伟业g101                           |<br>|       15 |      3 | 摩托罗拉a810                           |<br>|       14 |      4 | 诺基亚5800xm                           |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |<br>|       12 |      3 | 摩托罗拉a810                           |<br>|       11 |      3 | 索爱c702c                              |<br>|       10 |      3 | 索爱c702c                              |<br>|        9 |      3 | 诺基亚e66                              |<br>|        8 |      3 | 飞利浦9@9v                             |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |<br>|        4 |      8 | 诺基亚n85原装充电器                    |<br>|        3 |      8 | 诺基亚原装5800耳机                     |<br>|        1 |      4 | kd876                                  |<br>+———-+——–+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name from  goods order by cat_id  desc ;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       27 |     15 | 联通100元充值卡                        |<br>|       28 |     15 | 联通50元充值卡                         |<br>|       29 |     14 | 移动100元充值卡                        |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|        4 |      8 | 诺基亚n85原装充电器                    |<br>|        3 |      8 | 诺基亚原装5800耳机                     |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|       23 |      5 | 诺基亚n96                              |<br>|        1 |      4 | kd876                                  |<br>|       14 |      4 | 诺基亚5800xm                           |<br>|       18 |      4 | 夏新t5                                 |<br>|        8 |      3 | 飞利浦9@9v                             |<br>|        9 |      3 | 诺基亚e66                              |<br>|       10 |      3 | 索爱c702c                              |<br>|       11 |      3 | 索爱c702c                              |<br>|       12 |      3 | 摩托罗拉a810                           |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |<br>|       15 |      3 | 摩托罗拉a810                           |<br>|       17 |      3 | 夏新n7                                 |<br>|       19 |      3 | 三星sgh-f258                           |<br>|       20 |      3 | 三星bc01                               |<br>|       21 |      3 | 金立 a30                               |<br>|       22 |      3 | 多普达touch hd                         |<br>|       24 |      3 | p806                                   |<br>|       31 |      3 | 摩托罗拉e8                             |<br>|       32 |      3 | 诺基亚n85                              |<br>|       16 |      2 | 恒基伟业g101                           |<br>+———-+——–+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name from(select goods_id,cat_id,goods_name from goods order by cat_id,goods_id desc) as tmp;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       16 |      2 | 恒基伟业g101                           |<br>|       32 |      3 | 诺基亚n85                              |<br>|       31 |      3 | 摩托罗拉e8                             |<br>|       24 |      3 | p806                                   |<br>|       22 |      3 | 多普达touch hd                         |<br>|       21 |      3 | 金立 a30                               |<br>|       20 |      3 | 三星bc01                               |<br>|       19 |      3 | 三星sgh-f258                           |<br>|       17 |      3 | 夏新n7                                 |<br>|       15 |      3 | 摩托罗拉a810                           |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |<br>|       12 |      3 | 摩托罗拉a810                           |<br>|       11 |      3 | 索爱c702c                              |<br>|       10 |      3 | 索爱c702c                              |<br>|        9 |      3 | 诺基亚e66                              |<br>|        8 |      3 | 飞利浦9@9v                             |<br>|       18 |      4 | 夏新t5                                 |<br>|       14 |      4 | 诺基亚5800xm                           |<br>|        1 |      4 | kd876                                  |<br>|       23 |      5 | 诺基亚n96                              |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        4 |      8 | 诺基亚n85原装充电器                    |<br>|        3 |      8 | 诺基亚原装5800耳机                     |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       29 |     14 | 移动100元充值卡                        |<br>|       28 |     15 | 联通50元充值卡                         |<br>|       27 |     15 | 联通100元充值卡                        |<br>+———-+——–+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name from(select goods_id,cat_id,goods_name from goods order by cat_id,goods_id desc) as tmp group by cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|        1 |      4 | kd876                          |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|       16 |      2 | 恒基伟业g101                   |<br>|       23 |      5 | 诺基亚n96                      |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       27 |     15 | 联通100元充值卡                |<br>|       29 |     14 | 移动100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> desc goods;<br>+————–+————————+——+—–+———+—————-+<br>| Field        | Type                   | Null | Key | Default | Extra          |<br>+————–+————————+——+—–+———+—————-+<br>| goods_id     | mediumint(8) unsigned  | NO   | PRI | NULL    | auto_increment |<br>| goods_name   | varchar(120)           | NO   |     |         |                |<br>| cat_id       | smallint(5) unsigned   | NO   |     | 0       |                |<br>| brand_id     | smallint(5) unsigned   | NO   |     | 0       |                |<br>| goods_sn     | char(15)               | NO   |     |         |                |<br>| goods_number | smallint(5) unsigned   | NO   |     | 0       |                |<br>| shop_price   | decimal(10,2) unsigned | NO   |     | 0.00    |                |<br>| market_price | decimal(10,2) unsigned | NO   |     | 0.00    |                |<br>| click_count  | int(10) unsigned       | NO   |     | 0       |                |<br>+————–+————————+——+—–+———+—————-+<br>9 rows in set (0.18 sec)</p>
<p>mysql> alter table goods add index cat(cat_id);<br>Query OK, 31 rows affected (1.05 sec)<br>Records: 31  Duplicates: 0  Warnings: 0</p>
<p>mysql> select goods_id,cat_id,goods_name from(select goods_id,cat_id,goods_name from goods order by cat_id,goods_id desc) as tmp group by cat_id;<br>+———-+——–+——————————–+<br>| goods_id | cat_id | goods_name                     |<br>+———-+——–+——————————–+<br>|       16 |      2 | 恒基伟业g101                   |<br>|        8 |      3 | 飞利浦9@9v                     |<br>|        1 |      4 | kd876                          |<br>|       23 |      5 | 诺基亚n96                      |<br>|        4 |      8 | 诺基亚n85原装充电器            |<br>|        5 |     11 | 索爱原装m2卡读卡器             |<br>|       25 |     13 | 小灵通/固话50元充值卡          |<br>|       29 |     14 | 移动100元充值卡                |<br>|       27 |     15 | 联通100元充值卡                |<br>+———-+——–+——————————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name from(select goods_id,cat_id,goods_name from goods order by cat_id,goods_id desc limit 1000) as tmp group by cat_id;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       16 |      2 | 恒基伟业g101                           |<br>|       32 |      3 | 诺基亚n85                              |<br>|       18 |      4 | 夏新t5                                 |<br>|       23 |      5 | 诺基亚n96                              |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       28 |     15 | 联通50元充值卡                         |<br>+———-+——–+—————————————-+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name from goods where goods_id in(select max(goods_id) from goods group by cat_id) group by cat_id;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       16 |      2 | 恒基伟业g101                           |<br>|       32 |      3 | 诺基亚n85                              |<br>|       18 |      4 | 夏新t5                                 |<br>|       23 |      5 | 诺基亚n96                              |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       28 |     15 | 联通50元充值卡                         |<br>+———-+——–+—————————————-+<br>9 rows in set (0.04 sec)</p>
<p>mysql> #exits子查询<br>mysql> #from子查询的排序要加limit<br>mysql> #exists 存在,exists 子查询<br>mysql> #查出有商品的栏目<br>mysql> show tables;<br>+——————+<br>| Tables_in_test01 |<br>+——————+<br>| a                |<br>| b                |<br>| boy              |<br>| category         |<br>| girl             |<br>| goods            |<br>| m                |<br>| mian             |<br>| result           |<br>| t                |<br>| user             |<br>+——————+<br>11 rows in set (0.06 sec)</p>
<p>mysql> desc category;<br>+———–+———————-+——+—–+———+—————-+<br>| Field     | Type                 | Null | Key | Default | Extra          |<br>+———–+———————-+——+—–+———+—————-+<br>| cat_id    | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |<br>| cat_name  | varchar(90)          | NO   |     |         |                |<br>| parent_id | smallint(5) unsigned | YES  |     | NULL    |                |<br>+———–+———————-+——+—–+———+—————-+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select * from  category;<br>+——–+—————————+———–+<br>| cat_id | cat_name                  | parent_id |<br>+——–+—————————+———–+<br>|      1 | 手机类型                  |         0 |<br>|      2 | CDMA手机                  |         1 |<br>|      3 | GSM手机                   |         1 |<br>|      4 | 3G手机                    |         1 |<br>|      5 | 双模手机                  |         1 |<br>|      6 | 手机配件                  |         0 |<br>|      7 | 充电器                    |         6 |<br>|      8 | 耳机                      |         6 |<br>|      9 | 电池                      |         6 |<br>|     11 | 读卡器和内存卡            |         6 |<br>|     12 | 充值卡                    |         0 |<br>|     13 | 小灵通/固话充值卡         |        12 |<br>|     14 | 移动手机充值卡            |        12 |<br>|     15 | 联通手机充值卡            |        12 |<br>+——–+—————————+———–+<br>14 rows in set (0.07 sec)</p>
<p>mysql> desc goods;<br>+————–+————————+——+—–+———+—————-+<br>| Field        | Type                   | Null | Key | Default | Extra          |<br>+————–+————————+——+—–+———+—————-+<br>| goods_id     | mediumint(8) unsigned  | NO   | PRI | NULL    | auto_increment |<br>| goods_name   | varchar(120)           | NO   |     |         |                |<br>| cat_id       | smallint(5) unsigned   | NO   | MUL | 0       |                |<br>| brand_id     | smallint(5) unsigned   | NO   |     | 0       |                |<br>| goods_sn     | char(15)               | NO   |     |         |                |<br>| goods_number | smallint(5) unsigned   | NO   |     | 0       |                |<br>| shop_price   | decimal(10,2) unsigned | NO   |     | 0.00    |                |<br>| market_price | decimal(10,2) unsigned | NO   |     | 0.00    |                |<br>| click_count  | int(10) unsigned       | NO   |     | 0       |                |<br>+————–+————————+——+—–+———+—————-+<br>9 rows in set (0.00 sec)</p>
<p>mysql> show index from goods;<br>+——-+————+———-+————–+————-+———–+————-+———-+——–+——+————+———+—————+———+<br>| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible |<br>+——-+————+———-+————–+————-+———–+————-+———-+——–+——+————+———+—————+———+<br>| goods |          0 | PRIMARY  |            1 | goods_id    | A         |          31 |     NULL |   NULL |      | BTREE      |         |               | YES     |<br>| goods |          1 | cat      |            1 | cat_id      | A         |        NULL |     NULL |   NULL |      | BTREE      |         |               | YES     |<br>+——-+————+———-+————–+————-+———–+————-+———-+——–+——+————+———+—————+———+<br>2 rows in set (0.17 sec)</p>
<p>mysql> drop index cat on goods;<br>Query OK, 31 rows affected (0.55 sec)<br>Records: 31  Duplicates: 0  Warnings: 0</p>
<p>mysql> show index from goods;<br>+——-+————+———-+————–+————-+———–+————-+———-+——–+——+————+———+—————+———+<br>| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment | Visible |<br>+——-+————+———-+————–+————-+———–+————-+———-+——–+——+————+———+—————+———+<br>| goods |          0 | PRIMARY  |            1 | goods_id    | A         |          31 |     NULL |   NULL |      | BTREE      |         |               | YES     |<br>+——-+————+———-+————–+————-+———–+————-+———-+——–+——+————+———+—————+———+<br>1 row in set (0.00 sec)</p>
<p>mysql> desc goods;<br>+————–+————————+——+—–+———+—————-+<br>| Field        | Type                   | Null | Key | Default | Extra          |<br>+————–+————————+——+—–+———+—————-+<br>| goods_id     | mediumint(8) unsigned  | NO   | PRI | NULL    | auto_increment |<br>| goods_name   | varchar(120)           | NO   |     |         |                |<br>| cat_id       | smallint(5) unsigned   | NO   |     | 0       |                |<br>| brand_id     | smallint(5) unsigned   | NO   |     | 0       |                |<br>| goods_sn     | char(15)               | NO   |     |         |                |<br>| goods_number | smallint(5) unsigned   | NO   |     | 0       |                |<br>| shop_price   | decimal(10,2) unsigned | NO   |     | 0.00    |                |<br>| market_price | decimal(10,2) unsigned | NO   |     | 0.00    |                |<br>| click_count  | int(10) unsigned       | NO   |     | 0       |                |<br>+————–+————————+——+—–+———+—————-+<br>9 rows in set (0.00 sec)</p>
<p>mysql> desc category;<br>+———–+———————-+——+—–+———+—————-+<br>| Field     | Type                 | Null | Key | Default | Extra          |<br>+———–+———————-+——+—–+———+—————-+<br>| cat_id    | smallint(5) unsigned | NO   | PRI | NULL    | auto_increment |<br>| cat_name  | varchar(90)          | NO   |     |         |                |<br>| parent_id | smallint(5) unsigned | YES  |     | NULL    |                |<br>+———–+———————-+——+—–+———+—————-+<br>3 rows in set (0.03 sec)</p>
<p>mysql> select cat_name from category;<br>+—————————+<br>| cat_name                  |<br>+—————————+<br>| 手机类型                  |<br>| CDMA手机                  |<br>| GSM手机                   |<br>| 3G手机                    |<br>| 双模手机                  |<br>| 手机配件                  |<br>| 充电器                    |<br>| 耳机                      |<br>| 电池                      |<br>| 读卡器和内存卡            |<br>| 充值卡                    |<br>| 小灵通/固话充值卡         |<br>| 移动手机充值卡            |<br>| 联通手机充值卡            |<br>+—————————+<br>14 rows in set (0.00 sec)</p>
<p>mysql> select cat_id,cat_name from category where exists(select * from goods where category.cat_id=goods_id);<br>+——–+—————————+<br>| cat_id | cat_name                  |<br>+——–+—————————+<br>|      1 | 手机类型                  |<br>|      3 | GSM手机                   |<br>|      4 | 3G手机                    |<br>|      5 | 双模手机                  |<br>|      6 | 手机配件                  |<br>|      7 | 充电器                    |<br>|      8 | 耳机                      |<br>|      9 | 电池                      |<br>|     11 | 读卡器和内存卡            |<br>|     12 | 充值卡                    |<br>|     13 | 小灵通/固话充值卡         |<br>|     14 | 移动手机充值卡            |<br>|     15 | 联通手机充值卡            |<br>+——–+—————————+<br>13 rows in set (0.00 sec)</p>
<p>mysql> select cat_id,cat_name from category where exists(select * from goods where category.cat_id=goods.cat_id);<br>+——–+—————————+<br>| cat_id | cat_name                  |<br>+——–+—————————+<br>|      2 | CDMA手机                  |<br>|      3 | GSM手机                   |<br>|      4 | 3G手机                    |<br>|      5 | 双模手机                  |<br>|      8 | 耳机                      |<br>|     11 | 读卡器和内存卡            |<br>|     13 | 小灵通/固话充值卡         |<br>|     14 | 移动手机充值卡            |<br>|     15 | 联通手机充值卡            |<br>+——–+—————————+<br>9 rows in set (0.00 sec)</p>
<p>mysql> #为什么建表时加not null或default 0  ,不想出现null值<br>mysql> #null判断只能用 is null 或is not nul<br>mysql><br>mysql> #效率不高,影响索引效率<br>mysql> select 100000<em>232344242<br>    -> ;<br>+——————+<br>| 100000</em>232344242 |<br>+——————+<br>|   23234424200000 |<br>+——————+<br>1 row in set (0.00 sec)</p>
<p>mysql> #左连接的语法<br>mysql> a表不动,b表在右边滑动<br>    -> #<br>    -> \n<br>ERROR:<br>Unknown command ‘\n’.<br>    -> ;<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘a表不动,b表在右边滑动</p>
<p>\n’ at line 1<br>mysql> #a表与b表通过什么关联行<br>mysql> # a 表left join b on 条件 条件为真,则b表对应的行取出<br>mysql> # a left join b on<br>mysql> #将a left join b on 条件 设为c 表<br>mysql> #可以对c表进行查询,可以查询a和b的列<br>mysql> select  goods_id,cat_id,cat_name from goods left join category on goods.cat_id=category.cat_id;<br>ERROR 1052 (23000): Column ‘cat_id’ in field list is ambiguous<br>mysql> select  goods_id,goods.cat_id,cat_name from goods left join category on goods.cat_id=category.cat_id;<br>+———-+——–+—————————+<br>| goods_id | cat_id | cat_name                  |<br>+———-+——–+—————————+<br>|        1 |      4 | 3G手机                    |<br>|        4 |      8 | 耳机                      |<br>|        3 |      8 | 耳机                      |<br>|        5 |     11 | 读卡器和内存卡            |<br>|        6 |     11 | 读卡器和内存卡            |<br>|        7 |      8 | 耳机                      |<br>|        8 |      3 | GSM手机                   |<br>|        9 |      3 | GSM手机                   |<br>|       10 |      3 | GSM手机                   |<br>|       11 |      3 | GSM手机                   |<br>|       12 |      3 | GSM手机                   |<br>|       13 |      3 | GSM手机                   |<br>|       14 |      4 | 3G手机                    |<br>|       15 |      3 | GSM手机                   |<br>|       16 |      2 | CDMA手机                  |<br>|       17 |      3 | GSM手机                   |<br>|       18 |      4 | 3G手机                    |<br>|       19 |      3 | GSM手机                   |<br>|       20 |      3 | GSM手机                   |<br>|       21 |      3 | GSM手机                   |<br>|       22 |      3 | GSM手机                   |<br>|       23 |      5 | 双模手机                  |<br>|       24 |      3 | GSM手机                   |<br>|       25 |     13 | 小灵通/固话充值卡         |<br>|       26 |     13 | 小灵通/固话充值卡         |<br>|       27 |     15 | 联通手机充值卡            |<br>|       28 |     15 | 联通手机充值卡            |<br>|       29 |     14 | 移动手机充值卡            |<br>|       30 |     14 | 移动手机充值卡            |<br>|       31 |      3 | GSM手机                   |<br>|       32 |      3 | GSM手机                   |<br>+———-+——–+—————————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select  goods_id,goods.cat_id,cat_name,goods_name from goods left join category on goods.cat_id=category.cat_id;<br>+———-+——–+—————————+—————————————-+<br>| goods_id | cat_id | cat_name                  | goods_name                             |<br>+———-+——–+—————————+—————————————-+<br>|        1 |      4 | 3G手机                    | kd876                                  |<br>|        4 |      8 | 耳机                      | 诺基亚n85原装充电器                    |<br>|        3 |      8 | 耳机                      | 诺基亚原装5800耳机                     |<br>|        5 |     11 | 读卡器和内存卡            | 索爱原装m2卡读卡器                     |<br>|        6 |     11 | 读卡器和内存卡            | 胜创kingmax内存卡                      |<br>|        7 |      8 | 耳机                      | 诺基亚n85原装立体声耳机hs-82           |<br>|        8 |      3 | GSM手机                   | 飞利浦9@9v                             |<br>|        9 |      3 | GSM手机                   | 诺基亚e66                              |<br>|       10 |      3 | GSM手机                   | 索爱c702c                              |<br>|       11 |      3 | GSM手机                   | 索爱c702c                              |<br>|       12 |      3 | GSM手机                   | 摩托罗拉a810                           |<br>|       13 |      3 | GSM手机                   | 诺基亚5320 xpressmusic                 |<br>|       14 |      4 | 3G手机                    | 诺基亚5800xm                           |<br>|       15 |      3 | GSM手机                   | 摩托罗拉a810                           |<br>|       16 |      2 | CDMA手机                  | 恒基伟业g101                           |<br>|       17 |      3 | GSM手机                   | 夏新n7                                 |<br>|       18 |      4 | 3G手机                    | 夏新t5                                 |<br>|       19 |      3 | GSM手机                   | 三星sgh-f258                           |<br>|       20 |      3 | GSM手机                   | 三星bc01                               |<br>|       21 |      3 | GSM手机                   | 金立 a30                               |<br>|       22 |      3 | GSM手机                   | 多普达touch hd                         |<br>|       23 |      5 | 双模手机                  | 诺基亚n96                              |<br>|       24 |      3 | GSM手机                   | p806                                   |<br>|       25 |     13 | 小灵通/固话充值卡         | 小灵通/固话50元充值卡                  |<br>|       26 |     13 | 小灵通/固话充值卡         | 小灵通/固话20元充值卡                  |<br>|       27 |     15 | 联通手机充值卡            | 联通100元充值卡                        |<br>|       28 |     15 | 联通手机充值卡            | 联通50元充值卡                         |<br>|       29 |     14 | 移动手机充值卡            | 移动100元充值卡                        |<br>|       30 |     14 | 移动手机充值卡            | 移动20元充值卡                         |<br>|       31 |      3 | GSM手机                   | 摩托罗拉e8                             |<br>|       32 |      3 | GSM手机                   | 诺基亚n85                              |<br>+———-+——–+—————————+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select  goods_id,goods.cat_id,goods_name,cat_name from goods left join category on goods.cat_id=category.cat_id;<br>+———-+——–+—————————————-+—————————+<br>| goods_id | cat_id | goods_name                             | cat_name                  |<br>+———-+——–+—————————————-+—————————+<br>|        1 |      4 | kd876                                  | 3G手机                    |<br>|        4 |      8 | 诺基亚n85原装充电器                    | 耳机                      |<br>|        3 |      8 | 诺基亚原装5800耳机                     | 耳机                      |<br>|        5 |     11 | 索爱原装m2卡读卡器                     | 读卡器和内存卡            |<br>|        6 |     11 | 胜创kingmax内存卡                      | 读卡器和内存卡            |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           | 耳机                      |<br>|        8 |      3 | 飞利浦9@9v                             | GSM手机                   |<br>|        9 |      3 | 诺基亚e66                              | GSM手机                   |<br>|       10 |      3 | 索爱c702c                              | GSM手机                   |<br>|       11 |      3 | 索爱c702c                              | GSM手机                   |<br>|       12 |      3 | 摩托罗拉a810                           | GSM手机                   |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 | GSM手机                   |<br>|       14 |      4 | 诺基亚5800xm                           | 3G手机                    |<br>|       15 |      3 | 摩托罗拉a810                           | GSM手机                   |<br>|       16 |      2 | 恒基伟业g101                           | CDMA手机                  |<br>|       17 |      3 | 夏新n7                                 | GSM手机                   |<br>|       18 |      4 | 夏新t5                                 | 3G手机                    |<br>|       19 |      3 | 三星sgh-f258                           | GSM手机                   |<br>|       20 |      3 | 三星bc01                               | GSM手机                   |<br>|       21 |      3 | 金立 a30                               | GSM手机                   |<br>|       22 |      3 | 多普达touch hd                         | GSM手机                   |<br>|       23 |      5 | 诺基亚n96                              | 双模手机                  |<br>|       24 |      3 | p806                                   | GSM手机                   |<br>|       25 |     13 | 小灵通/固话50元充值卡                  | 小灵通/固话充值卡         |<br>|       26 |     13 | 小灵通/固话20元充值卡                  | 小灵通/固话充值卡         |<br>|       27 |     15 | 联通100元充值卡                        | 联通手机充值卡            |<br>|       28 |     15 | 联通50元充值卡                         | 联通手机充值卡            |<br>|       29 |     14 | 移动100元充值卡                        | 移动手机充值卡            |<br>|       30 |     14 | 移动20元充值卡                         | 移动手机充值卡            |<br>|       31 |      3 | 摩托罗拉e8                             | GSM手机                   |<br>|       32 |      3 | 诺基亚n85                              | GSM手机                   |<br>+———-+——–+—————————————-+—————————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> #取出第四个栏目的商品以及商品的栏目名称<br>mysql> select  goods_id,goods.cat_id,goods_name,cat_name from goods left join category on goods.cat_id=category.cat_id where goods.cat_id=4;<br>+———-+——–+—————–+———-+<br>| goods_id | cat_id | goods_name      | cat_name |<br>+———-+——–+—————–+———-+<br>|        1 |      4 | kd876           | 3G手机   |<br>|       14 |      4 | 诺基亚5800xm    | 3G手机   |<br>|       18 |      4 | 夏新t5          | 3G手机   |<br>+———-+——–+—————–+———-+<br>3 rows in set (0.07 sec)</p>
<p>mysql> #左右连接,左连接即左表不动,<br>mysql> #a left join b 并不是说 a 一定是在b的左边<br>mysql> #左右连接可以互换, a left join b =b right join a<br>mysql> # 内链接 特点 所有有配偶的男生/女生 走到舞台上来, 其 左表和右表不匹配的不能出现<br>mysql> # 集合的角度看,内链接是左右连接的交集;<br>mysql> # 外连接,求的是并集,但是在mysql中不支持<br>mysql> #左连接<br>mysql> show tables;<br>+——————+<br>| Tables_in_test01 |<br>+——————+<br>| a                |<br>| b                |<br>| boy              |<br>| category         |<br>| girl             |<br>| goods            |<br>| m                |<br>| mian             |<br>| result           |<br>| t                |<br>| user             |<br>+——————+<br>11 rows in set (0.60 sec)</p>
<p>mysql> select * from t;<br>+——+————–+<br>| tid  | tname        |<br>+——+————–+<br>|    1 | 国安         |<br>|    2 | 申花         |<br>|    3 | 布尔联队     |<br>+——+————–+<br>3 rows in set (0.40 sec)</p>
<p>mysql> select * from m;<br>+——+——+——+——+————+<br>| mid  | hid  | gid  | mres | matime     |<br>+——+——+——+——+————+<br>|    1 |    1 |    2 | 2:0  | 2006-05-21 |<br>|    2 |    2 |    3 | 1:2  | 2006-06-21 |<br>|    3 |    3 |    1 | 2:5  | 2006-06-25 |<br>|    4 |    2 |    1 | 3:2  | 2006-07-21 |<br>+——+——+——+——+————+<br>4 rows in set (0.10 sec)</p>
<p>mysql> select m.mid,m.hid,t.tname,m.gid,t.tname from m left join t on m.hid=t.tid;<br>+——+——+————–+——+————–+<br>| mid  | hid  | tname        | gid  | tname        |<br>+——+——+————–+——+————–+<br>|    1 |    1 | 国安         |    2 | 国安         |<br>|    2 |    2 | 申花         |    3 | 申花         |<br>|    4 |    2 | 申花         |    1 | 申花         |<br>|    3 |    3 | 布尔联队     |    1 | 布尔联队     |<br>+——+——+————–+——+————–+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select m.mid,m.hid,t.tname,m.gid from m left join t on m.hid=t.tid;<br>+——+——+————–+——+<br>| mid  | hid  | tname        | gid  |<br>+——+——+————–+——+<br>|    1 |    1 | 国安         |    2 |<br>|    2 |    2 | 申花         |    3 |<br>|    4 |    2 | 申花         |    1 |<br>|    3 |    3 | 布尔联队     |    1 |<br>+——+——+————–+——+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select tem.mid,tem.hid,t.tname,tem.gid,t.tname from (select m.mid,m.hid,t.tname,m.gid from m left join t on m.hid=t.tid) as tem  left join t on t.tid=tem.gid;<br>+——+——+————–+——+————–+<br>| mid  | hid  | tname        | gid  | tname        |<br>+——+——+————–+——+————–+<br>|    4 |    2 | 国安         |    1 | 国安         |<br>|    3 |    3 | 国安         |    1 | 国安         |<br>|    1 |    1 | 申花         |    2 | 申花         |<br>|    2 |    2 | 布尔联队     |    3 | 布尔联队     |<br>+——+——+————–+——+————–+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select tem.mid,tem.hid,t.tname,tem.gid,t.tname from (select m.mid,m.hid,t.tname,m.gid from m left join t on m.hid=t.tid) as tem  left join t on t.tid=tem.gid order by tem.mid asc;<br>+——+——+————–+——+————–+<br>| mid  | hid  | tname        | gid  | tname        |<br>+——+——+————–+——+————–+<br>|    1 |    1 | 申花         |    2 | 申花         |<br>|    2 |    2 | 布尔联队     |    3 | 布尔联队     |<br>|    3 |    3 | 国安         |    1 | 国安         |<br>|    4 |    2 | 国安         |    1 | 国安         |<br>+——+——+————–+——+————–+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select tem.mid,tem.hid,t.tname,tem.gid,t.tname from (select m.mid,m.hid,t.tname,m.gid from m left join t on m.hid=t.tid) as tem  left join t on tem.gid=t.tid order by tem.mid asc;<br>+——+——+————–+——+————–+<br>| mid  | hid  | tname        | gid  | tname        |<br>+——+——+————–+——+————–+<br>|    1 |    1 | 申花         |    2 | 申花         |<br>|    2 |    2 | 布尔联队     |    3 | 布尔联队     |<br>|    3 |    3 | 国安         |    1 | 国安         |<br>|    4 |    2 | 国安         |    1 | 国安         |<br>+——+——+————–+——+————–+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select tem.mid,tem.hid,tem.tname,tem.gid,tem.tname from (select m.mid,m.hid,t.tname,m.gid from m left join t on m.hid=t.tid) as tem  left join t on tem.gid=t.tid order by tem.mid asc;<br>+——+——+————–+——+————–+<br>| mid  | hid  | tname        | gid  | tname        |<br>+——+——+————–+——+————–+<br>|    1 |    1 | 国安         |    2 | 国安         |<br>|    2 |    2 | 申花         |    3 | 申花         |<br>|    3 |    3 | 布尔联队     |    1 | 布尔联队     |<br>|    4 |    2 | 申花         |    1 | 申花         |<br>+——+——+————–+——+————–+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select m.* from m left join t on m.hid=t.tid;<br>+——+——+——+——+————+<br>| mid  | hid  | gid  | mres | matime     |<br>+——+——+——+——+————+<br>|    1 |    1 |    2 | 2:0  | 2006-05-21 |<br>|    2 |    2 |    3 | 1:2  | 2006-06-21 |<br>|    4 |    2 |    1 | 3:2  | 2006-07-21 |<br>|    3 |    3 |    1 | 2:5  | 2006-06-25 |<br>+——+——+——+——+————+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select m.*,t.tname from m left join t on m.hid=t.tid;<br>+——+——+——+——+————+————–+<br>| mid  | hid  | gid  | mres | matime     | tname        |<br>+——+——+——+——+————+————–+<br>|    1 |    1 |    2 | 2:0  | 2006-05-21 | 国安         |<br>|    2 |    2 |    3 | 1:2  | 2006-06-21 | 申花         |<br>|    4 |    2 |    1 | 3:2  | 2006-07-21 | 申花         |<br>|    3 |    3 |    1 | 2:5  | 2006-06-25 | 布尔联队     |<br>+——+——+——+——+————+————–+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select tem.<em>, t.tname  from (select m.</em>,t.tname from m left join t on m.hid=t.tid) as tem left join t on tem.gid=t.tid;<br>+——+——+——+——+————+————–+————–+<br>| mid  | hid  | gid  | mres | matime     | tname        | tname        |<br>+——+——+——+——+————+————–+————–+<br>|    4 |    2 |    1 | 3:2  | 2006-07-21 | 申花         | 国安         |<br>|    3 |    3 |    1 | 2:5  | 2006-06-25 | 布尔联队     | 国安         |<br>|    1 |    1 |    2 | 2:0  | 2006-05-21 | 国安         | 申花         |<br>|    2 |    2 |    3 | 1:2  | 2006-06-21 | 申花         | 布尔联队     |<br>+——+——+——+——+————+————–+————–+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select * from t;<br>+——+————–+<br>| tid  | tname        |<br>+——+————–+<br>|    1 | 国安         |<br>|    2 | 申花         |<br>|    3 | 布尔联队     |<br>+——+————–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select tem.mid,tem.hid,tem.tname,tem.gid,t.tname,tem.mres,tem.matime  from (select m.mid ,m.hid,t.tname,m.gid,m.mres,m.matime from m left join t on m.hid=t.tid) as tem left join t on tem.gid=t.tid;<br>+——+——+————–+——+————–+——+————+<br>| mid  | hid  | tname        | gid  | tname        | mres | matime     |<br>+——+——+————–+——+————–+——+————+<br>|    4 |    2 | 申花         |    1 | 国安         | 3:2  | 2006-07-21 |<br>|    3 |    3 | 布尔联队     |    1 | 国安         | 2:5  | 2006-06-25 |<br>|    1 |    1 | 国安         |    2 | 申花         | 2:0  | 2006-05-21 |<br>|    2 |    2 | 申花         |    3 | 布尔联队     | 1:2  | 2006-06-21 |<br>+——+——+————–+——+————–+——+————+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select tem.mid,tem.hid,tem.tname,tem.gid,t.tname,tem.mres,tem.matime  from (select m.mid ,m.hid,t.tname,m.gid,m.mres,m.matime from m left join t on m.hid=t.tid) as tem left join t on tem.gid=t.tid order by tem.mid;<br>+——+——+————–+——+————–+——+————+<br>| mid  | hid  | tname        | gid  | tname        | mres | matime     |<br>+——+——+————–+——+————–+——+————+<br>|    1 |    1 | 国安         |    2 | 申花         | 2:0  | 2006-05-21 |<br>|    2 |    2 | 申花         |    3 | 布尔联队     | 1:2  | 2006-06-21 |<br>|    3 |    3 | 布尔联队     |    1 | 国安         | 2:5  | 2006-06-25 |<br>|    4 |    2 | 申花         |    1 | 国安         | 3:2  | 2006-07-21 |<br>+——+——+————–+——+————–+——+————+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select * from m;<br>+——+——+——+——+————+<br>| mid  | hid  | gid  | mres | matime     |<br>+——+——+——+——+————+<br>|    1 |    1 |    2 | 2:0  | 2006-05-21 |<br>|    2 |    2 |    3 | 1:2  | 2006-06-21 |<br>|    3 |    3 |    1 | 2:5  | 2006-06-25 |<br>|    4 |    2 |    1 | 3:2  | 2006-07-21 |<br>+——+——+——+——+————+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select tem.mid,tem.hid,tem.tname,tem.gid,t.tname,tem.mres,tem.matime  from (select m.mid ,m.hid,t.tname,m.gid,m.mres,m.matime from m left join t on m.hid=t.tid) as tem left join t on tem.gid=t.tid where tem.matime between “2006-6-1” and “2006-7-1”  order by tem.mid;<br>+——+——+————–+——+————–+——+————+<br>| mid  | hid  | tname        | gid  | tname        | mres | matime     |<br>+——+——+————–+——+————–+——+————+<br>|    2 |    2 | 申花         |    3 | 布尔联队     | 1:2  | 2006-06-21 |<br>|    3 |    3 | 布尔联队     |    1 | 国安         | 2:5  | 2006-06-25 |<br>+——+——+————–+——+————–+——+————+<br>2 rows in set (0.06 sec)</p>
<p>mysql> select m.mid ,m.hid,t.tname,m.gid,tem.tname,m.mres,m.matime from m left join t on m.hid=t.tid  left join t  as tem on m.gid=tem.tid where m.matime between “2006-6-1” and “2006-7-1”  order by m.mid;<br>+——+——+————–+——+————–+——+————+<br>| mid  | hid  | tname        | gid  | tname        | mres | matime     |<br>+——+——+————–+——+————–+——+————+<br>|    2 |    2 | 申花         |    3 | 布尔联队     | 1:2  | 2006-06-21 |<br>|    3 |    3 | 布尔联队     |    1 | 国安         | 2:5  | 2006-06-25 |<br>+——+——+————–+——+————–+——+————+<br>2 rows in set (0.00 sec)</p>
<p>mysql> exit<br>mysql> use test01;<br>Database changed<br>mysql> select goods_id,goods_name,shop_price from goods where shop_price<50<br>    -> ;<br>+———-+——————————–+————+<br>| goods_id | goods_name                     | shop_price |<br>+———-+——————————–+————+<br>|        5 | 索爱原装m2卡读卡器             |      20.00 |<br>|        6 | 胜创kingmax内存卡              |      42.00 |<br>|       25 | 小灵通/固话50元充值卡          |      48.00 |<br>|       26 | 小灵通/固话20元充值卡          |      19.00 |<br>|       28 | 联通50元充值卡                 |      45.00 |<br>|       30 | 移动20元充值卡                 |      18.00 |<br>+———-+——————————–+————+<br>6 rows in set (0.14 sec)</p>
<p>mysql> #union 联合 语法 sql1 union sql2<br>mysql> select goods_id,goods_name,shop_price from goods where shop_price>4000;<br>+———-+——————-+————+<br>| goods_id | goods_name        | shop_price |<br>+———-+——————-+————+<br>|       22 | 多普达touch hd    |    5999.00 |<br>+———-+——————-+————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select goods_id,goods_name,shop_price from goods where shop_price>4000 union select goods_id,goods_name,shop_price from goods where shop_price<50;<br>+———-+——————————–+————+<br>| goods_id | goods_name                     | shop_price |<br>+———-+——————————–+————+<br>|       22 | 多普达touch hd                 |    5999.00 |<br>|        5 | 索爱原装m2卡读卡器             |      20.00 |<br>|        6 | 胜创kingmax内存卡              |      42.00 |<br>|       25 | 小灵通/固话50元充值卡          |      48.00 |<br>|       26 | 小灵通/固话20元充值卡          |      19.00 |<br>|       28 | 联通50元充值卡                 |      45.00 |<br>|       30 | 移动20元充值卡                 |      18.00 |<br>+———-+——————————–+————+<br>7 rows in set (0.10 sec)</p>
<p>mysql> #可以从两张表union联合查询<br>mysql> #两个列名不一致 以第一个列名为准<br>mysql> #union 满足的条件,只要结果集的列数一致就可以了<br>mysql> #union后的结果集可以排序<br>mysql> #格式: sql1 union sql2 order by<br>mysql> # 用nuion 取出第4个栏目和第5个栏目的商品m,并按价格升序排列<br>mysql> select goods_id ,cat_id, goods_name ,shop_price from goods union select goods_id ,cat_id ,goods_name ,shop_price from goods order by shop_price asc;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|        1 |      4 | kd876                                  |    1388.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.05 sec)</p>
<p>mysql> select goods_id ,cat_id, goods_name ,shop_price from goods where cat_id=4 union select goods_id ,cat_id ,goods_name ,shop_price from goods where cat_id=5 order by shop_price asc;<br>+———-+——–+—————–+————+<br>| goods_id | cat_id | goods_name      | shop_price |<br>+———-+——–+—————–+————+<br>|        1 |      4 | kd876           |    1388.00 |<br>|       14 |      4 | 诺基亚5800xm    |    2625.00 |<br>|       18 |      4 | 夏新t5          |    2878.00 |<br>|       23 |      5 | 诺基亚n96       |    3700.00 |<br>+———-+——–+—————–+————+<br>4 rows in set (0.00 sec)</p>
<p>mysql> #取出第3个下价格前三高 的商品,和第四个栏目下价格前两高的商品用union完成</p>
<p>mysql> select goods_id ,cat_id,goods_name ,shop_price from goods where cat_id=3 order by  shop_price desc limit 3;<br>+———-+——–+——————-+————+<br>| goods_id | cat_id | goods_name        | shop_price |<br>+———-+——–+——————-+————+<br>|       22 |      3 | 多普达touch hd    |    5999.00 |<br>|       32 |      3 | 诺基亚n85         |    3010.00 |<br>|       17 |      3 | 夏新n7            |    2300.00 |<br>+———-+——–+——————-+————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select goods_id ,cat_id ,goods_name ,shop_price from goods where cat_id=4 order by shop_price desc limit 2;<br>+———-+——–+—————–+————+<br>| goods_id | cat_id | goods_name      | shop_price |<br>+———-+——–+—————–+————+<br>|       18 |      4 | 夏新t5          |    2878.00 |<br>|       14 |      4 | 诺基亚5800xm    |    2625.00 |<br>+———-+——–+—————–+————+<br>2 rows in set (0.00 sec)</p>
<p>mysql> (select goods_id ,cat_id,goods_name ,shop_price from goods where cat_id=3 order by  shop_price desc limit 3) union (select goods_id ,cat_id,goods_name ,shop_price from goods where cat_id=4 order by shop_price desc limit 2);<br>+———-+——–+——————-+————+<br>| goods_id | cat_id | goods_name        | shop_price |<br>+———-+——–+——————-+————+<br>|       22 |      3 | 多普达touch hd    |    5999.00 |<br>|       32 |      3 | 诺基亚n85         |    3010.00 |<br>|       17 |      3 | 夏新n7            |    2300.00 |<br>|       18 |      4 | 夏新t5            |    2878.00 |<br>|       14 |      4 | 诺基亚5800xm      |    2625.00 |<br>+———-+——–+——————-+————+<br>5 rows in set (0.00 sec)</p>
<p>mysql> #这次内层的order by 不会失效是因为有limit,单纯的order by不会对结果集有影响,需要配合limit<br>mysql> #如果union后的结果有重复如何解决<br>mysql> #union会有去重的效果,不想去重可以用union all<br>mysql> show tables;<br>+——————+<br>| Tables_in_test01 |<br>+——————+<br>| a                |<br>| b                |<br>| boy              |<br>| category         |<br>| girl             |<br>| goods            |<br>| m                |<br>| mian             |<br>| result           |<br>| t                |<br>| user             |<br>+——————+<br>11 rows in set (0.08 sec)</p>
<p>mysql> select * from a;<br>+——+——+<br>| id   | num  |<br>+——+——+<br>| a    |    5 |<br>| b    |   10 |<br>| c    |   15 |<br>| d    |   10 |<br>+——+——+<br>4 rows in set (0.15 sec)</p>
<p>mysql> select  * from b;<br>+——+——+<br>| id   | num  |<br>+——+——+<br>| b    |    5 |<br>| c    |   15 |<br>| d    |   20 |<br>| e    |   99 |<br>+——+——+<br>4 rows in set (0.02 sec)</p>
<p>mysql> select * from a union select * from b;<br>+——+——+<br>| id   | num  |<br>+——+——+<br>| a    |    5 |<br>| b    |   10 |<br>| c    |   15 |<br>| d    |   10 |<br>| b    |    5 |<br>| d    |   20 |<br>| e    |   99 |<br>+——+——+<br>7 rows in set (0.00 sec)</p>
<p>mysql> select * from a union all select * from b;<br>+——+——+<br>| id   | num  |<br>+——+——+<br>| a    |    5 |<br>| b    |   10 |<br>| c    |   15 |<br>| d    |   10 |<br>| b    |    5 |<br>| c    |   15 |<br>| d    |   20 |<br>| e    |   99 |<br>+——+——+<br>8 rows in set (0.00 sec)</p>
<p>mysql> select * from a union all select * from b group by id;<br>+——+——+<br>| id   | num  |<br>+——+——+<br>| a    |    5 |<br>| b    |   10 |<br>| c    |   15 |<br>| d    |   10 |<br>| b    |    5 |<br>| c    |   15 |<br>| d    |   20 |<br>| e    |   99 |<br>+——+——+<br>8 rows in set (0.00 sec)</p>
<p>mysql> select tem.id,sum(tem.num) from(select a.id,a.num from a union all select b.id,b.num from b) as tem group by tem.id ;<br>+——+————–+<br>| id   | sum(tem.num) |<br>+——+————–+<br>| a    |            5 |<br>| b    |           15 |<br>| c    |           30 |<br>| d    |           30 |<br>| e    |           99 |<br>+——+————–+<br>5 rows in set (0.00 sec)</p>
<p>mysql> select a.* ,b.* from a left join b on a.id=b.id;<br>+——+——+——+——+<br>| id   | num  | id   | num  |<br>+——+——+——+——+<br>| b    |   10 | b    |    5 |<br>| c    |   15 | c    |   15 |<br>| d    |   10 | d    |   20 |<br>| a    |    5 | NULL | NULL |<br>+——+——+——+——+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select a.* ,b.* from a inner join b on a.id=b.id;<br>+——+——+——+——+<br>| id   | num  | id   | num  |<br>+——+——+——+——+<br>| b    |   10 | b    |    5 |<br>| c    |   15 | c    |   15 |<br>| d    |   10 | d    |   20 |<br>+——+——+——+——+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select a.* ,b.* from a left join b on a.id=b.id;<br>+——+——+——+——+<br>| id   | num  | id   | num  |<br>+——+——+——+——+<br>| b    |   10 | b    |    5 |<br>| c    |   15 | c    |   15 |<br>| d    |   10 | d    |   20 |<br>| a    |    5 | NULL | NULL |<br>+——+——+——+——+<br>4 rows in set (0.00 sec)</p>
<p>mysql> select a.* ,b.* from a left join b on a.id=b.id union select a.* ,b.* from a right join b on a.id=b.id;<br>+——+——+——+——+<br>| id   | num  | id   | num  |<br>+——+——+——+——+<br>| b    |   10 | b    |    5 |<br>| c    |   15 | c    |   15 |<br>| d    |   10 | d    |   20 |<br>| a    |    5 | NULL | NULL |<br>| NULL | NULL | e    |   99 |<br>+——+——+——+——+<br>5 rows in set (0.00 sec)</p>
<p>mysql> #先左联再u右连然后子查询;<br>mysql><br>mysql> #函数<br>mysql> #取出第四个栏目的商品及打88折的会员价<br>mysql> select goods_id,cat_id,good_name,shop_price<em>0.88 from goods where cat_id=4<br>    -> ;<br>ERROR 1054 (42S22): Unknown column ‘good_name’ in ‘field list’<br>mysql> select goods_id,cat_id,goods_name,shop_price</em>0.88 from goods where cat_id=4<br>    -> ;<br>+———-+——–+—————–+—————–+<br>| goods_id | cat_id | goods_name      | shop_price*0.88 |<br>+———-+——–+—————–+—————–+<br>|        1 |      4 | kd876           |       1221.4400 |<br>|       14 |      4 | 诺基亚5800xm    |       2310.0000 |<br>|       18 |      4 | 夏新t5          |       2532.6400 |<br>+———-+——–+—————–+—————–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select goods_id,cat_id,goods_name,floor(shop_price<em>0.88) from goods where cat_id=4 ;<br>+———-+——–+—————–+————————+<br>| goods_id | cat_id | goods_name      | floor(shop_price</em>0.88) |<br>+———-+——–+—————–+————————+<br>|        1 |      4 | kd876           |                   1221 |<br>|       14 |      4 | 诺基亚5800xm    |                   2310 |<br>|       18 |      4 | 夏新t5          |                   2532 |<br>+———-+——–+—————–+————————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> #随机生成5-15之间的数字;</p>
<p>mysql> select floor(rand()<em>10+5);<br>+——————–+<br>| floor(rand()</em>10+5) |<br>+——————–+<br>|                  7 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select floor(rand()<em>10+5);<br>+——————–+<br>| floor(rand()</em>10+5) |<br>+——————–+<br>|                 13 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select floor(rand()<em>10+5);<br>+——————–+<br>| floor(rand()</em>10+5) |<br>+——————–+<br>|                  8 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select floor(rand()<em>10+5);<br>+——————–+<br>| floor(rand()</em>10+5) |<br>+——————–+<br>|                  9 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select floor(rand()<em>10+5);<br>+——————–+<br>| floor(rand()</em>10+5) |<br>+——————–+<br>|                  8 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select floor(rand()<em>10+5);<br>+——————–+<br>| floor(rand()</em>10+5) |<br>+——————–+<br>|                  5 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select floor(rand()<em>10+5);<br>+——————–+<br>| floor(rand()</em>10+5) |<br>+——————–+<br>|                  8 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select floor(rand()<em>10+5);<br>+——————–+<br>| floor(rand()</em>10+5) |<br>+——————–+<br>|                 11 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #ceiling 向上取整<br>mysql> #group concat 取出4栏目下goods_id拼接<br>mysql> select group_concat(goods_id) from goods where cat_id=4;<br>+————————+<br>| group_concat(goods_id) |<br>+————————+<br>| 1,14,18                |<br>+————————+<br>1 row in set (0.08 sec)</p>
<p>mysql> #计算字符的ascil码<br>mysql> select ascil(a);<br>ERROR 1305 (42000): FUNCTION test01.ascil does not exist<br>mysql> select ascii(a);<br>ERROR 1054 (42S22): Unknown column ‘a’ in ‘field list’<br>mysql> select ascii(‘a’);<br>+————+<br>| ascii(‘a’) |<br>+————+<br>|         97 |<br>+————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select length(“中华”);<br>+——————+<br>| length(“中华”)   |<br>+——————+<br>|                6 |<br>+——————+<br>1 row in set (0.06 sec)</p>
<p>mysql> #length 计算的字节场地<br>mysql> #length 计算的字符数<br>mysql> #char_length 计算的字符数<br>mysql> select char_length(‘中国’);<br>+———————–+<br>| char_length(‘中国’)   |<br>+———————–+<br>|                     2 |<br>+———————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #反转字符串<br>mysql> select reverse(‘zh’)<br>    -> ;<br>+—————+<br>| reverse(‘zh’) |<br>+—————+<br>| hz            |<br>+—————+<br>1 row in set (0.05 sec)</p>
<p>mysql> select reverse(‘zh中国’);<br>+———————+<br>| reverse(‘zh中国’)   |<br>+———————+<br>| 国中hz              |<br>+———————+<br>1 row in set (0.00 sec)</p>
<p>mysql> #position<br>mysql> select position(‘@’ in ‘abc@sina.com’);<br>+———————————+<br>| position(‘@’ in ‘abc@sina.com’) |<br>+———————————+<br>|                               4 |<br>+———————————+<br>1 row in set (0.05 sec)</p>
<p>mysql> select right(‘abc@sina.com’ ,2);<br>+————————–+<br>| right(‘abc@sina.com’ ,2) |<br>+————————–+<br>| om                       |<br>+————————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #某网站有email字段,有邮件地址,想调查163.qq.com的u邮箱的比例<br>mysql> show tables;<br>+——————+<br>| Tables_in_test01 |<br>+——————+<br>| a                |<br>| b                |<br>| boy              |<br>| category         |<br>| girl             |<br>| goods            |<br>| m                |<br>| mian             |<br>| result           |<br>| t                |<br>| user             |<br>+——————+<br>11 rows in set (0.01 sec)</p>
<p>mysql> #查询邮箱后缀,<br>mysql> create table email(uname char,email char);<br>Query OK, 0 rows affected (1.76 sec)</p>
<p>mysql> desc email;<br>+——-+———+——+—–+———+——-+<br>| Field | Type    | Null | Key | Default | Extra |<br>+——-+———+——+—–+———+——-+<br>| uname | char(1) | YES  |     | NULL    |       |<br>| email | char(1) | YES  |     | NULL    |       |<br>+——-+———+——+—–+———+——-+<br>2 rows in set (0.09 sec)</p>
<p>mysql> alter table email modify column uname char(50) ;<br>Query OK, 0 rows affected (1.96 sec)<br>Records: 0  Duplicates: 0  Warnings: 0</p>
<p>mysql> alter table email modify column email char(50) ;<br>Query OK, 0 rows affected (1.34 sec)<br>Records: 0  Duplicates: 0  Warnings: 0</p>
<p>mysql> desc eamil;<br>ERROR 1146 (42S02): Table ‘test01.eamil’ doesn’t exist<br>mysql> desc email;<br>+——-+———-+——+—–+———+——-+<br>| Field | Type     | Null | Key | Default | Extra |<br>+——-+———-+——+—–+———+——-+<br>| uname | char(50) | YES  |     | NULL    |       |<br>| email | char(50) | YES  |     | NULL    |       |<br>+——-+———-+——+—–+———+——-+<br>2 rows in set (0.00 sec)</p>
<p>mysql> insert into email values(‘zhangsan’,‘zhan@163.com’),(‘lilie’,‘li@qq.com’),(‘hanmeimei’,‘han@126.com’);<br>Query OK, 3 rows affected (0.28 sec)<br>Records: 3  Duplicates: 0  Warnings: 0</p>
<p>mysql> select * from email;<br>+———–+————–+<br>| uname     | email        |<br>+———–+————–+<br>| zhangsan  | <a href="mailto:zhan@163.com">zhan@163.com</a> |<br>| lilie     | <a href="mailto:li@qq.com">li@qq.com</a>    |<br>| hanmeimei | <a href="mailto:han@126.com">han@126.com</a>  |<br>+———–+————–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select uname ,position(‘@’ in email) from email;<br>+———–+————————+<br>| uname     | position(‘@’ in email) |<br>+———–+————————+<br>| zhangsan  |                      5 |<br>| lilie     |                      3 |<br>| hanmeimei |                      4 |<br>+———–+————————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select uname ,right(email,position(‘@’ in email)) from email;<br>+———–+————————————-+<br>| uname     | right(email,position(‘@’ in email)) |<br>+———–+————————————-+<br>| zhangsan  | 3.com                               |<br>| lilie     | com                                 |<br>| hanmeimei | .com                                |<br>+———–+————————————-+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select uname ,right(email,char_length(email)-position(‘@’ in email)) from email;<br>+———–+——————————————————–+<br>| uname     | right(email,char_length(email)-position(‘@’ in email)) |<br>+———–+——————————————————–+<br>| zhangsan  | 163.com                                                |<br>| lilie     | qq.com                                                 |<br>| hanmeimei | 126.com                                                |<br>+———–+——————————————————–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select uname ,right(email,length(email)-position(‘@’ in email)) from email;<br>+———–+—————————————————+<br>| uname     | right(email,length(email)-position(‘@’ in email)) |<br>+———–+—————————————————+<br>| zhangsan  | 163.com                                           |<br>| lilie     | qq.com                                            |<br>| hanmeimei | 126.com                                           |<br>+———–+—————————————————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> #截取邮箱<br>mysql> #截取邮箱后半部分;<br>mysql> select uname ,right(email,length(email)-position(‘@’ in email)) from email;<br>+———–+—————————————————+<br>| uname     | right(email,length(email)-position(‘@’ in email)) |<br>+———–+—————————————————+<br>| zhangsan  | 163.com                                           |<br>| lilie     | qq.com                                            |<br>| hanmeimei | 126.com                                           |<br>+———–+—————————————————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> #日期时间函数,取当前时间<br>mysql> select now;<br>ERROR 1054 (42S22): Unknown column ‘now’ in ‘field list’<br>mysql> select now();<br>+———————+<br>| now()               |<br>+———————+<br>| 2019-10-15 20:00:44 |<br>+———————+<br>1 row in set (0.05 sec)</p>
<p>mysql> select curdate();<br>+————+<br>| curdate()  |<br>+————+<br>| 2019-10-15 |<br>+————+<br>1 row in set (0.01 sec)</p>
<p>mysql> # now()返回datetime格式,curdate返回date格式<br>mysql> select curtime();<br>+———–+<br>| curtime() |<br>+———–+<br>| 20:02:19  |<br>+———–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #查看某一日是那一周的第几天<br>mysql> select dayofweek(‘2019-10-15’);<br>+————————-+<br>| dayofweek(‘2019-10-15’) |<br>+————————-+<br>|                       3 |<br>+————————-+<br>1 row in set (0.05 sec)</p>
<p>mysql> select week(‘2019-10-15’);<br>+——————–+<br>| week(‘2019-10-15’) |<br>+——————–+<br>|                 41 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select week(‘2019-12-30’);<br>+——————–+<br>| week(‘2019-12-30’) |<br>+——————–+<br>|                 52 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select week(curdate());<br>+—————–+<br>| week(curdate()) |<br>+—————–+<br>|              41 |<br>+—————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> select week(‘2019-12-31’);<br>+——————–+<br>| week(‘2019-12-31’) |<br>+——————–+<br>|                 52 |<br>+——————–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #案例:name<br>mysql> # overtime 日期<br>mysql> # 5        2019-9-1<br>mysql> # 6        2019-9-2<br>mysql> # 3        2019-9-3<br>mysql> # 报表统计,按星期统计加班时间<br>mysql> create table jiaban(num int(10) ,time date);<br>Query OK, 0 rows affected (0.52 sec)</p>
<p>mysql> insert into jiaban values(3,”2019-9-1”),(4,’2019-9-2’),(5,”2019-9-3”),(6,’2019-9-10’),(19,’2019-9-18’);<br>Query OK, 5 rows affected (0.15 sec)<br>Records: 5  Duplicates: 0  Warnings: 0</p>
<p>mysql> select * from jiaban;<br>+——+————+<br>| num  | time       |<br>+——+————+<br>|    3 | 2019-09-01 |<br>|    4 | 2019-09-02 |<br>|    5 | 2019-09-03 |<br>|    6 | 2019-09-10 |<br>|   19 | 2019-09-18 |<br>+——+————+<br>5 rows in set (0.00 sec)</p>
<p>mysql> #按星期统计加班时间;<br>mysql> select sum(num), week(time) from jiaban ;<br>+———-+————+<br>| sum(num) | week(time) |<br>+———-+————+<br>|       37 |         35 |<br>+———-+————+<br>1 row in set (0.02 sec)</p>
<p>mysql> select sum(num), week(time) from jiaban group by week(time);<br>+———-+————+<br>| sum(num) | week(time) |<br>+———-+————+<br>|       12 |         35 |<br>|        6 |         36 |<br>|       19 |         37 |<br>+———-+————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select num, week(time) from jiaban group by week(time);<br>+——+————+<br>| num  | week(time) |<br>+——+————+<br>|    3 |         35 |<br>|    6 |         36 |<br>|   19 |         37 |<br>+——+————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select sum(num), week(time) from jiaban group by week(time);<br>+———-+————+<br>| sum(num) | week(time) |<br>+———-+————+<br>|       12 |         35 |<br>|        6 |         36 |<br>|       19 |         37 |<br>+———-+————+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select *, week(time) from jiaban;<br>+——+————+————+<br>| num  | time       | week(time) |<br>+——+————+————+<br>|    3 | 2019-09-01 |         35 |<br>|    4 | 2019-09-02 |         35 |<br>|    5 | 2019-09-03 |         35 |<br>|    6 | 2019-09-10 |         36 |<br>|   19 | 2019-09-18 |         37 |<br>+——+————+————+<br>5 rows in set (0.00 sec)</p>
<p>mysql> #加密函数,码得<br>mysql> #md5加密函数;<br>mysql> select md5(‘1’);<br>+———————————-+<br>| md5(‘1’)                         |<br>+———————————-+<br>| c4ca4238a0b923820dcc509a6f75849b |<br>+———————————-+<br>1 row in set (0.07 sec)</p>
<p>mysql> select md5(‘1’);<br>+———————————-+<br>| md5(‘1’)                         |<br>+———————————-+<br>| c4ca4238a0b923820dcc509a6f75849b |<br>+———————————-+<br>1 row in set (0.00 sec)</p>
<p>mysql> #md5是不可逆的<br>mysql> #流程h控制函数<br>mysql> #case 变量<br>mysql> 2 when 值 then 语句；<br>    -> 3 when 值 then 语句；<br>    -> 4 else 语句；<br>    -> 5 end case；<br>    -> \c<br>mysql> #if(gender=0,’优先’,’等待’) as vip<br>mysql> ifnull<br>    -> \c<br>mysql> #ifnull的用法,判断第一个表达式是否为null 如果为null 返回第2 个表达式的值<br>mysql> #如果不为null 返回自身,即表达式1<br>mysql> select ifnull(‘’,a);<br>ERROR 1054 (42S22): Unknown column ‘a’ in ‘field list’<br>mysql> select ifnull(‘’,’a’);<br>+—————-+<br>| ifnull(‘’,’a’) |<br>+—————-+<br>|                |<br>+—————-+<br>1 row in set (0.00 sec)</p>
<p>mysql> select ifnull(null,’a’);<br>+——————+<br>| ifnull(null,’a’) |<br>+——————+<br>| a                |<br>+——————+<br>1 row in set (0.00 sec)</p>
<p>mysql> #系统调试函数<br>mysql><br>mysql><br>mysql> select user();<br>+—————-+<br>| user()         |<br>+—————-+<br>| root@localhost |<br>+—————-+<br>1 row in set (0.00 sec)</p>
<p>mysql> #user返回用户及主机,判断自己的身份<br>mysql> #database(),返回当前操作的数据库名<br>mysql> select database();<br>+————+<br>| database() |<br>+————+<br>| test01     |<br>+————+<br>1 row in set (0.00 sec)</p>
<p>mysql> select version();<br>+———–+<br>| version() |<br>+———–+<br>| 8.0.12    |<br>+———–+<br>1 row in set (0.00 sec)</p>
<p>mysql> #vension() 返回数据库的版本<br>mysql> #时间的h格式化,优先在业务逻辑上使用,<br>mysql> #总结: where 条件中,对某列使用了函数,由此列的索引不发挥作用<br>mysql> #视图 view<br>mysql> view 将查询表当作临时表使用,<br>    -> \c<br>mysql> # 查询每个栏目下商品的平均价格,并对平均价格取前三的栏目<br>mysql> select cat_id,avg(shop_price),count(goods_id) from goods group by cat_id;<br>+——–+—————–+—————–+<br>| cat_id | avg(shop_price) | count(goods_id) |<br>+——–+—————–+—————–+<br>|      4 |     2297.000000 |               3 |<br>|      8 |       75.333333 |               3 |<br>|     11 |       31.000000 |               2 |<br>|      3 |     1746.066667 |              15 |<br>|      2 |      823.330000 |               1 |<br>|      5 |     3700.000000 |               1 |<br>|     13 |       33.500000 |               2 |<br>|     15 |       70.000000 |               2 |<br>|     14 |       54.000000 |               2 |<br>+——–+—————–+—————–+<br>9 rows in set (0.10 sec)</p>
<p>mysql> select cat_id,avg(shop_price) as average,count(goods_id) from goods group by cat_id order by average desc limit 3 ;<br>+——–+————-+—————–+<br>| cat_id | average     | count(goods_id) |<br>+——–+————-+—————–+<br>|      5 | 3700.000000 |               1 |<br>|      4 | 2297.000000 |               3 |<br>|      3 | 1746.066667 |              15 |<br>+——–+————-+—————–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> select cat_id,avg(shop_price) as average,count(goods_id) from goods group by cat_id order by average asc limit 3 ;<br>+——–+———–+—————–+<br>| cat_id | average   | count(goods_id) |<br>+——–+———–+—————–+<br>|     11 | 31.000000 |               2 |<br>|     13 | 33.500000 |               2 |<br>|     14 | 54.000000 |               2 |<br>+——–+———–+—————–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> #取平均价格由高到底第三到第5的栏目<br>mysql> select cat_id,avg(shop_price) as average,count(goods_id) from goods group by cat_id order by average asc  ;<br>+——–+————-+—————–+<br>| cat_id | average     | count(goods_id) |<br>+——–+————-+—————–+<br>|     11 |   31.000000 |               2 |<br>|     13 |   33.500000 |               2 |<br>|     14 |   54.000000 |               2 |<br>|     15 |   70.000000 |               2 |<br>|      8 |   75.333333 |               3 |<br>|      2 |  823.330000 |               1 |<br>|      3 | 1746.066667 |              15 |<br>|      4 | 2297.000000 |               3 |<br>|      5 | 3700.000000 |               1 |<br>+——–+————-+—————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> select cat_id,avg(shop_price) as average,count(goods_id) from goods group by cat_id;<br>+——–+————-+—————–+<br>| cat_id | average     | count(goods_id) |<br>+——–+————-+—————–+<br>|      4 | 2297.000000 |               3 |<br>|      8 |   75.333333 |               3 |<br>|     11 |   31.000000 |               2 |<br>|      3 | 1746.066667 |              15 |<br>|      2 |  823.330000 |               1 |<br>|      5 | 3700.000000 |               1 |<br>|     13 |   33.500000 |               2 |<br>|     15 |   70.000000 |               2 |<br>|     14 |   54.000000 |               2 |<br>+——–+————-+—————–+<br>9 rows in set (0.00 sec)</p>
<p>mysql> # 将结果集设为a  a频繁用到,因此用到视图<br>mysql> # 表通过某种运算得到的影子<br>mysql> #如何创建视图,建视图的时候语法 create view 表名 as 查询语句;<br>mysql> create view state as select cat_id,avg(shop_price) as average,count(goods_id) from goods group by cat_id;<br>Query OK, 0 rows affected (0.27 sec)</p>
<p>mysql> show tables;<br>+——————+<br>| Tables_in_test01 |<br>+——————+<br>| a                |<br>| b                |<br>| boy              |<br>| category         |<br>| email            |<br>| girl             |<br>| goods            |<br>| jiaban           |<br>| m                |<br>| mian             |<br>| result           |<br>| state            |<br>| t                |<br>| user             |<br>+——————+<br>14 rows in set (0.01 sec)</p>
<p>mysql> #多了一张state表<br>mysql> select * from state;<br>+——–+————-+—————–+<br>| cat_id | average     | count(goods_id) |<br>+——–+————-+—————–+<br>|      4 | 2297.000000 |               3 |<br>|      8 |   75.333333 |               3 |<br>|     11 |   31.000000 |               2 |<br>|      3 | 1746.066667 |              15 |<br>|      2 |  823.330000 |               1 |<br>|      5 | 3700.000000 |               1 |<br>|     13 |   33.500000 |               2 |<br>|     15 |   70.000000 |               2 |<br>|     14 |   54.000000 |               2 |<br>+——–+————-+—————–+<br>9 rows in set (0.06 sec)</p>
<p>mysql> select * from state order by average limit 3;<br>+——–+———–+—————–+<br>| cat_id | average   | count(goods_id) |<br>+——–+———–+—————–+<br>|     11 | 31.000000 |               2 |<br>|     13 | 33.500000 |               2 |<br>|     14 | 54.000000 |               2 |<br>+——–+———–+—————–+<br>3 rows in set (0.00 sec)</p>
<p>mysql> #视图一旦创建完毕,可以完全当表使用,<br>mysql> # 简化查询,复杂的统计,<br>mysql> #更清晰的权限控制<br>mysql> # 开放权限,但是不想开放密码字段,用视图<br>mysql> # 多表查询,分表时候用,将表头放在视图中;<br>mysql> #视图是表的影子,表与视图相互影响的关系<br>mysql> #表的数据变化,影响视图的变化,<br>mysql> #以此例,,此视图的数据不能更改,其数据来自shop_price的平均值<br>mysql> #视图是否能够增删改呢?<br>mysql> #某种情况下是可以删除的,11对应,即表的数据能够推出视图的数据,视图的数据能够推出表的数据<br>mysql> #删除视图即 drop table/view 表名/视图名<br>mysql> exit<br>mysql> show databases;<br>+——————–+<br>| Database           |<br>+——————–+<br>| bookstore          |<br>| clouddb01          |<br>| clouddb02          |<br>| clouddb03          |<br>| information_schema |<br>| mydb               |<br>| mysql              |<br>| performance_schema |<br>| shop               |<br>| ssm_crud           |<br>| struts             |<br>| student            |<br>| sys                |<br>| test               |<br>| test01             |<br>+——————–+<br>15 rows in set (0.18 sec)</p>
<p>mysql> use test01;<br>Database changed<br>mysql> #algorithm<br>mysql> # merge —合并查询语句<br>mysql> #tem<br>mysql> #temptable —临时表<br>mysql> #undefined –未定义,由系统判断<br>mysql> #建一张简单的查询视图,不同临时表,只用y条件合并<br>mysql> create view as select * from goods where shop_price>300;<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘as select * from goods where shop_price>300’ at line 1<br>mysql> create view v1  as  select * from goods where shop_price>300;<br>Query OK, 0 rows affected (0.52 sec)</p>
<p>mysql> #查询视图<br>mysql> select goods_id ,goods_name ,shop_price from v1 where shop_price<500;<br>+———-+—————+————+<br>| goods_id | goods_name    | shop_price |<br>+———-+—————+————+<br>|        8 | 飞利浦9@9v    |     399.00 |<br>+———-+—————+————+<br>1 row in set (0.01 sec)</p>
<p>mysql> #总的条件是>300 <500;<br>mysql> #这个简单的查询还建立临时表的话,开销有点大;<br>mysql> #这是我们可以指定algorithm为merge<br>mysql> create algorithm=merge view v2 as select * from goods where shop_price>300;<br>Query OK, 0 rows affected (0.21 sec)</p>
<p>mysql> select goods_id ,goods_name ,shop_price from v2 where shop_price<500;<br>+———-+—————+————+<br>| goods_id | goods_name    | shop_price |<br>+———-+—————+————+<br>|        8 | 飞利浦9@9v    |     399.00 |<br>+———-+—————+————+<br>1 row in set (0.00 sec)</p>
<p>mysql> #有的时候必须建临时表,<br>mysql> #比如,每个栏目的平均商品价格<br>mysql> #比如每个栏目下的最高d价格的商品<br>mysql> create algorithm=temptable view v3 as select goods_id,cat_id,goods_name from goods order by cat_id asc ,goods_id desc;<br>Query OK, 0 rows affected (0.21 sec)</p>
<p>mysql> select * from v3 group by cat_id;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       16 |      2 | 恒基伟业g101                           |<br>|       32 |      3 | 诺基亚n85                              |<br>|       18 |      4 | 夏新t5                                 |<br>|       23 |      5 | 诺基亚n96                              |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       28 |     15 | 联通50元充值卡                         |<br>+———-+——–+—————————————-+<br>9 rows in set (0.05 sec)</p>
<p>mysql> select * from v3;<br>+———-+——–+—————————————-+<br>| goods_id | cat_id | goods_name                             |<br>+———-+——–+—————————————-+<br>|       16 |      2 | 恒基伟业g101                           |<br>|       32 |      3 | 诺基亚n85                              |<br>|       31 |      3 | 摩托罗拉e8                             |<br>|       24 |      3 | p806                                   |<br>|       22 |      3 | 多普达touch hd                         |<br>|       21 |      3 | 金立 a30                               |<br>|       20 |      3 | 三星bc01                               |<br>|       19 |      3 | 三星sgh-f258                           |<br>|       17 |      3 | 夏新n7                                 |<br>|       15 |      3 | 摩托罗拉a810                           |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |<br>|       12 |      3 | 摩托罗拉a810                           |<br>|       11 |      3 | 索爱c702c                              |<br>|       10 |      3 | 索爱c702c                              |<br>|        9 |      3 | 诺基亚e66                              |<br>|        8 |      3 | 飞利浦9@9v                             |<br>|       18 |      4 | 夏新t5                                 |<br>|       14 |      4 | 诺基亚5800xm                           |<br>|        1 |      4 | kd876                                  |<br>|       23 |      5 | 诺基亚n96                              |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |<br>|        4 |      8 | 诺基亚n85原装充电器                    |<br>|        3 |      8 | 诺基亚原装5800耳机                     |<br>|        6 |     11 | 胜创kingmax内存卡                      |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |<br>|       30 |     14 | 移动20元充值卡                         |<br>|       29 |     14 | 移动100元充值卡                        |<br>|       28 |     15 | 联通50元充值卡                         |<br>|       27 |     15 | 联通100元充值卡                        |<br>+———-+——–+—————————————-+<br>31 rows in set (0.00 sec)</p>
<p>mysql> drop view v3;<br>Query OK, 0 rows affected (0.27 sec)</p>
<p>mysql> create algorithm=temptable view v3 as select goods_id,cat_id,goods_name,shop_price from goods order by cat_id asc ,shop_price desc;<br>Query OK, 0 rows affected (0.31 sec)</p>
<p>mysql> slect * form v3 ;<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘slect * form v3’ at line 1<br>mysql> select * form v3 ;<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘form v3’ at line 1<br>mysql> select * from v3 ;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       32 |      3 | 诺基亚n85                              |    3010.00 |<br>|       17 |      3 | 夏新n7                                 |    2300.00 |<br>|        9 |      3 | 诺基亚e66                              |    2298.00 |<br>|       21 |      3 | 金立 a30                               |    2000.00 |<br>|       24 |      3 | p806                                   |    2000.00 |<br>|       31 |      3 | 摩托罗拉e8                             |    1337.00 |<br>|       10 |      3 | 索爱c702c                              |    1328.00 |<br>|       13 |      3 | 诺基亚5320 xpressmusic                 |    1311.00 |<br>|       11 |      3 | 索爱c702c                              |    1300.00 |<br>|       12 |      3 | 摩托罗拉a810                           |     983.00 |<br>|       19 |      3 | 三星sgh-f258                           |     858.00 |<br>|       15 |      3 | 摩托罗拉a810                           |     788.00 |<br>|        8 |      3 | 飞利浦9@9v                             |     399.00 |<br>|       20 |      3 | 三星bc01                               |     280.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       14 |      4 | 诺基亚5800xm                           |    2625.00 |<br>|        1 |      4 | kd876                                  |    1388.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        3 |      8 | 诺基亚原装5800耳机                     |      68.00 |<br>|        4 |      8 | 诺基亚n85原装充电器                    |      58.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|        5 |     11 | 索爱原装m2卡读卡器                     |      20.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       26 |     13 | 小灵通/固话20元充值卡                  |      19.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       30 |     14 | 移动20元充值卡                         |      18.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>|       28 |     15 | 联通50元充值卡                         |      45.00 |<br>+———-+——–+—————————————-+————+<br>31 rows in set (0.00 sec)</p>
<p>mysql> select * from v3 group by cat_id;<br>+———-+——–+—————————————-+————+<br>| goods_id | cat_id | goods_name                             | shop_price |<br>+———-+——–+—————————————-+————+<br>|       16 |      2 | 恒基伟业g101                           |     823.33 |<br>|       22 |      3 | 多普达touch hd                         |    5999.00 |<br>|       18 |      4 | 夏新t5                                 |    2878.00 |<br>|       23 |      5 | 诺基亚n96                              |    3700.00 |<br>|        7 |      8 | 诺基亚n85原装立体声耳机hs-82           |     100.00 |<br>|        6 |     11 | 胜创kingmax内存卡                      |      42.00 |<br>|       25 |     13 | 小灵通/固话50元充值卡                  |      48.00 |<br>|       29 |     14 | 移动100元充值卡                        |      90.00 |<br>|       27 |     15 | 联通100元充值卡                        |      95.00 |<br>+———-+——–+—————————————-+————+<br>9 rows in set (0.03 sec)</p>
<p>mysql> #编码问题<br>mysql> #字符编码到字符集的映射<br>mysql> #gb2312,utf-8<br>mysql> #unicode 码表,—– utf-8 压缩文件的关系<br>mysql> #如何截取utf-8无乱码<br>mysql> #从头开始,取1个字节,<br>mysql> #通过位运算,计算连续的1的g个数<br>mysql> #如为0 截取1个<br>mysql> #如为n 则截取n个<br>mysql> gbk转为utf-8<br>    -> \c<br>mysql> #jbk<br>mysql> #jbk 转unicode 在转utf-8<br>mysql> #乱码是怎么形成,编码和解码不统一<br>mysql> #转码过程字节丢失<br>mysql> create table t(id int ,name varchar(50) not null default(“1244”));<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘(“1244”))’ at line 1<br>mysql> create table t(id int ,name varchar(50) not null default(1244));<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘(1244))’ at line 1<br>mysql> create table t(id int ,name varchar(50) not null default ‘1244’);<br>ERROR 1050 (42S01): Table ‘t’ already exists<br>mysql> create table tem(id int ,time datetime not null default now() );;<br>Query OK, 0 rows affected (0.95 sec)</p>
<p>ERROR:<br>No query specified</p>
<p>mysql> desc time;<br>ERROR 1146 (42S02): Table ‘test01.time’ doesn’t exist<br>mysql> desc tem;<br>+——-+———-+——+—–+——————-+——-+<br>| Field | Type     | Null | Key | Default           | Extra |<br>+——-+———-+——+—–+——————-+——-+<br>| id    | int(11)  | YES  |     | NULL              |       |<br>| time  | datetime | NO   |     | CURRENT_TIMESTAMP |       |<br>+——-+———-+——+—–+——————-+——-+<br>2 rows in set (0.13 sec)</p>
<p>mysql> drop tem;<br>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘tem’ at line 1<br>mysql> drop table tem;<br>Query OK, 0 rows affected (0.49 sec)</p>
<p>mysql> create table tem(id int(11) not null primary key ,name varchar(50) not null ,time datetime not null default now());<br>Query OK, 0 rows affected (0.39 sec)</p>
<p>mysql> insert into tem values(1,”lili”),(2,”韩梅梅”),(3,”笑话”),(4,”哈哈”);<br>ERROR 1136 (21S01): Column count doesn’t match value count at row 1<br>mysql> insert into tem values(1,”lili”,null),(2,”韩梅梅”,null),(3,”笑话”,null),(4,”哈哈”,null);<br>ERROR 1048 (23000): Column ‘time’ cannot be null<br>mysql> insert into tem(id,name) values(1,”lili”),(2,”韩梅梅”),(3,”笑话”),(4,”哈哈”);<br>Query OK, 4 rows affected (0.20 sec)<br>Records: 4  Duplicates: 0  Warnings: 0</p>
<p>mysql> select * from tem;<br>+—-+———–+———————+<br>| id | name      | time                |<br>+—-+———–+———————+<br>|  1 | lili      | 2019-10-16 19:45:54 |<br>|  2 | 韩梅梅    | 2019-10-16 19:45:54 |<br>|  3 | 笑话      | 2019-10-16 19:45:54 |<br>|  4 | 哈哈      | 2019-10-16 19:45:54 |<br>+—-+———–+———————+<br>4 rows in set (0.00 sec)</p>
<p>mysql> delete from tem order by id desc limit 2;<br>Query OK, 2 rows affected (0.33 sec)</p>
<p>mysql> select * from tem;<br>+—-+———–+———————+<br>| id | name      | time                |<br>+—-+———–+———————+<br>|  1 | lili      | 2019-10-16 19:45:54 |<br>|  2 | 韩梅梅    | 2019-10-16 19:45:54 |<br>+—-+———–+———————+<br>2 rows in set (0.00 sec)</p>
<p>mysql> select *,week(time) from tem;<br>+—-+———–+———————+————+<br>| id | name      | time                | week(time) |<br>+—-+———–+———————+————+<br>|  1 | lili      | 2019-10-16 19:45:54 |         41 |<br>|  2 | 韩梅梅    | 2019-10-16 19:45:54 |         41 |<br>+—-+———–+———————+————+<br>2 rows in set (0.01 sec)</p>
<p>mysql> #设置client 和connection的字符集<br>mysql> # set character_set_client=gbk;<br>mysql> # set character_set_connection=utf8<br>mysql> # set character_set_ressults=gbk;<br>mysql> # set character_set_results=gbk;<br>mysql> # 1366 字符编码问题<br>mysql> 大转小会丢失<br>    -> \c<br>mysql> #即 server> connection> client 编码范围<br>mysql> #client con results 都是hgbk<br>mysql> #client con results 都是gbk<br>mysql> #若三者都是gbk 则可以简写<br>mysql> # 即 set names gbk<br>mysql> #utf8中文截取无乱码<br>mysql> #存储引擎,<br>mysql> # innodb myisam  innodb支持事务,<br>mysql><br>mysql> #start transaction;<br>mysql> commit;<br>Query OK, 0 rows affected (0.00 sec)</p>
<p>mysql> #commit;<br>mysql> #rollback;<br>mysql> exit</p>
</body></html>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
