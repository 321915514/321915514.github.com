<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>philxling</title>
  <icon>https://www.gravatar.com/avatar/295a5284129a41f836e900ffd2bcd96b</icon>
  <subtitle>Sometimes,Nowhere means &quot;Now&quot;&quot;Here&quot;</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://philxling.cn/"/>
  <updated>2020-04-02T14:52:34.960Z</updated>
  <id>http://philxling.cn/</id>
  
  <author>
    <name>philxling</name>
    <email>321915514wx@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用算法和排序</title>
    <link href="http://philxling.cn/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/"/>
    <id>http://philxling.cn/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/</id>
    <published>2020-04-20T15:27:01.000Z</published>
    <updated>2020-04-02T14:52:34.960Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>函数对象</p><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325053739130.png" alt="image-20200325053739130"></p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myAdd</span>{</span> <span class="comment">// 函数对象 </span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">myAdd(){</span><br><span class="line"><span class="keyword">this</span>->count=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{</span><br><span class="line"><span class="keyword">this</span>->count++;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">} </span><br><span class="line"><span class="comment">//使用属性记录对象调用次数</span></span><br><span class="line"><span class="keyword">int</span> count; </span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">myAdd myadd;</span><br><span class="line"><span class="built_in">cout</span><< myadd(<span class="number">12</span>,<span class="number">43</span>) <<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><< myadd(<span class="number">12</span>,<span class="number">43</span>) <<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><<myadd.count<<<span class="built_in">endl</span>; <span class="comment">// 2</span></span><br><span class="line">}</span><br><span class="line"> <span class="comment">// 可以作为参数传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doAdd</span><span class="params">(myAdd &myadd,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<myadd(a,b)<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">test2</span><span class="params">()</span></span>{</span><br><span class="line">myAdd myadd;</span><br><span class="line">doAdd(myadd,<span class="number">12</span>,<span class="number">44</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//test1();</span></span><br><span class="line">test2();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>谓词</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 仿函数 返回值是bool类型, 成为谓词 </span></span><br><span class="line"><span class="comment">// 一元谓词 ,接收一个参数 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreatorFind</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> val)</span></span>{ <span class="comment">// 一元谓词 </span></span><br><span class="line"><span class="keyword">return</span> val><span class="number">5</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myCompare</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{ <span class="comment">// 二元谓词 谓词指的是返回bool 二元指的是参数</span></span><br><span class="line"><span class="keyword">return</span> a>b;</span><br><span class="line">}</span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line">v.push_back(i);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=find_if(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),GreatorFind());</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="built_in">endl</span>;</span><br><span class="line">sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),myCompare());</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">} </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">9 8 7 6 5 4 3 2 1 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>内建仿函数</p><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325062750741.png" alt="image-20200325062750741"></p><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325063143207.png" alt="image-20200325063143207"></p><p>关系仿函数</p><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325063930278.png" alt="image-20200325063930278"></p><p>逻辑仿函数</p><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325064755552.png" alt="image-20200325064755552"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><functional> // 算数仿函数头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm> </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">plus<<span class="keyword">int</span>> p;</span><br><span class="line">negate<<span class="keyword">int</span>> n; </span><br><span class="line"><span class="built_in">cout</span><<p(<span class="number">12</span>,<span class="number">43</span>)<<<span class="built_in">endl</span>; <span class="comment">// 不支持匿名 </span></span><br><span class="line"><span class="built_in">cout</span><<n(<span class="number">129</span>)<<<span class="built_in">endl</span>; <span class="comment">//取反 </span></span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">9</span>;i++){</span><br><span class="line">v.push_back(i);</span><br><span class="line">}</span><br><span class="line">sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),greater<<span class="keyword">int</span>>()); <span class="comment">//关系仿函数  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;  </span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>; </span><br><span class="line"><span class="comment">// 逻辑运算符</span></span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">bool</span>> v1;</span><br><span class="line">v1.push_back(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">bool</span>> v2;</span><br><span class="line">v2.resize(v1.<span class="built_in">size</span>());</span><br><span class="line">transform(v1.<span class="built_in">begin</span>(),v1.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>(),logical_not<<span class="keyword">bool</span>>());</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">bool</span>>::iterator it=v2.<span class="built_in">begin</span>();it!=v2.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;  </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">55</span></span><br><span class="line"><span class="comment">-129</span></span><br><span class="line"><span class="comment">8 7 6 5 4 3 2 1 0</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test1();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>常用算法</p><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325070307861.png" alt="image-20200325070307861"></p><p>常用的遍历算法</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for_each(begin,end,func)</span><br><span class="line">transform()</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325072344750.png" alt="image-20200325072344750"></p><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325090358265.png" alt="image-20200325090358265"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">print1</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<val<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">Person(<span class="built_in">string</span> name,<span class="keyword">int</span> age){</span><br><span class="line"><span class="keyword">this</span>->age=age;</span><br><span class="line"><span class="keyword">this</span>->name=name;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Person&p){ <span class="comment">//比较规则 </span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>->name==p.name&&<span class="keyword">this</span>->age==p.age){</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line"><span class="built_in">cout</span><< val <<<span class="string">" "</span>; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">// for_each</span></span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">9</span>;i++){</span><br><span class="line">v.push_back(i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="built_in">print</span>); <span class="comment">//遍历</span></span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),print1()); <span class="comment">//遍历</span></span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//常用的查找算法</span></span><br><span class="line"><span class="comment">// find</span></span><br><span class="line"><span class="built_in">vector</span><Person> p;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">"12"</span>,<span class="number">32</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">"43"</span>,<span class="number">32</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">"45"</span>,<span class="number">32</span>)</span></span>;</span><br><span class="line">p.push_back(p1);</span><br><span class="line">p.push_back(p2);</span><br><span class="line">p.push_back(p3);</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=<span class="built_in">find</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">5</span>); <span class="comment">// 必返回一个迭代器,如果没找到,就返回end </span></span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">vector</span><Person>::iterator itp=<span class="built_in">find</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>(),p1); <span class="comment">//查找自定义数据类型 </span></span><br><span class="line"><span class="built_in">cout</span><<itp->name<<<span class="string">" "</span><<itp->age<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// find_if</span></span><br><span class="line"><span class="comment">// adjacent_find 查找相邻重复的元素</span></span><br><span class="line"><span class="comment">// binary_search 二分查找 返回值是true 和false  查找的元素必须为有序序列 </span></span><br><span class="line"><span class="built_in">cout</span><<binary_search(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">6</span>)<<<span class="built_in">endl</span>; </span><br><span class="line"><span class="comment">// count 统计 </span></span><br><span class="line"><span class="built_in">cout</span><<count(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">1</span>)<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// count_if</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test1();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200327005701055.png" alt="image-20200327005701055"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><ctime></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<val<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">9</span>;i++){</span><br><span class="line">v.push_back(i);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>  v2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">4</span>;i++){</span><br><span class="line">v2.push_back(i);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v3;</span><br><span class="line">v3.resize(v.<span class="built_in">size</span>()+v2.<span class="built_in">size</span>());</span><br><span class="line">merge(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),v3.<span class="built_in">begin</span>()); <span class="comment">// merge 合并, 将两个容器合并放到第三个容器中. 且两个容器是有序的,合并后也是有序的 </span></span><br><span class="line">for_each(v3.<span class="built_in">begin</span>(),v3.<span class="built_in">end</span>(),<span class="built_in">print</span>);  </span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">reverse(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="built_in">print</span>);</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">random_shuffle(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>()); <span class="comment">// random_shuffle 洗牌,将有序变无序 </span></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="built_in">print</span>);</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200327163741378.png" alt="image-20200327163741378"></p><p>copy算法</p><p>replace替换,将所有相同的都替换</p><p>swap交换同种类型的容器</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// copy(v.begin(),v.end(),v2.begin()); copy </span></span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line">v.push_back(<span class="number">10</span>);</span><br><span class="line">v.push_back(<span class="number">23</span>);</span><br><span class="line">v.push_back(<span class="number">23</span>);</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v2;</span><br><span class="line">v2.resize(v.<span class="built_in">size</span>());</span><br><span class="line">copy(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>());</span><br><span class="line">for_each(v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),<span class="built_in">print</span>);</span><br><span class="line"><span class="comment">// replace;</span></span><br><span class="line">replace(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">23</span>,<span class="number">2000</span>);</span><br><span class="line">copy(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>());</span><br><span class="line">for_each(v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),<span class="built_in">print</span>);</span><br></pre></td></tr></tbody></table></figure><p>算术生成算法</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><numeric> // 头文件 </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<=<span class="number">100</span>;i++){</span><br><span class="line">v.push_back(i);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 第三个参数是累加起始值. </span></span><br><span class="line"><span class="built_in">cout</span><<accumulate(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">0</span>)<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// fill() 填充新值</span></span><br><span class="line"><span class="comment">//fill()</span></span><br><span class="line"> </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>集合算法</p><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200327181910889.png" alt="image-20200327181910889"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<val<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v2;</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v3;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line">v.push_back(i);</span><br><span class="line">v2.push_back(i+<span class="number">5</span>);</span><br><span class="line">} </span><br><span class="line">v3.resize(<span class="built_in">min</span>(v.<span class="built_in">size</span>(),v2.<span class="built_in">size</span>()));</span><br><span class="line"><span class="comment">// 交集 </span></span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=set_intersection(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),v3.<span class="built_in">begin</span>());</span><br><span class="line">for_each(v3.<span class="built_in">begin</span>(),it,<span class="built_in">print</span>); <span class="comment">// 注意 </span></span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>; </span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line">v3.resize(v.<span class="built_in">size</span>()+v2.<span class="built_in">size</span>());</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>::iterator vit=set_union(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),v3.<span class="built_in">begin</span>());</span><br><span class="line">for_each(v3.<span class="built_in">begin</span>(),vit,<span class="built_in">print</span>); <span class="comment">// 注意 </span></span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// 补集</span></span><br><span class="line">v3.resize(<span class="built_in">max</span>(v.<span class="built_in">size</span>(),v2.<span class="built_in">size</span>()));</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>::iterator vdit=set_difference(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),v3.<span class="built_in">begin</span>());</span><br><span class="line">for_each(v3.<span class="built_in">begin</span>(),vdit,<span class="built_in">print</span>); <span class="comment">// 注意 </span></span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">v3.resize(<span class="built_in">max</span>(v.<span class="built_in">size</span>(),v2.<span class="built_in">size</span>()));</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>::iterator vmaxit=set_difference(v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v3.<span class="built_in">begin</span>());</span><br><span class="line">for_each(v3.<span class="built_in">begin</span>(),vmaxit,<span class="built_in">print</span>); <span class="comment">// 注意 </span></span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 6 7 8 9</span></span><br><span class="line"><span class="comment">0 1 2 3 4 5 6 7 8 9 10 11 12 13 14</span></span><br><span class="line"><span class="comment">0 1 2 3 4</span></span><br><span class="line"><span class="comment">10 11 12 13 14</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数对象&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325053739130.png&quot; alt=&quot;image-20200325053739130&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://philxling.cn/categories/c/"/>
    
    
      <category term="c++" scheme="http://philxling.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>员工分类案例</title>
    <link href="http://philxling.cn/2020/04/17/c++/6-%E5%91%98%E5%B7%A5%E5%88%86%E7%B1%BB%E6%A1%88%E4%BE%8B/"/>
    <id>http://philxling.cn/2020/04/17/c++/6-%E5%91%98%E5%B7%A5%E5%88%86%E7%B1%BB%E6%A1%88%E4%BE%8B/</id>
    <published>2020-04-17T15:24:57.000Z</published>
    <updated>2020-04-02T14:52:19.203Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h3 id="员工分类案例"><a href="#员工分类案例" class="headerlink" title="员工分类案例"></a>员工分类案例</h3><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><map> </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><cstdio></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><cstdlib></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><ctime></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有十个员工,将这些员工随机分配到每个岗位,然后输出每个岗位的人员信息</span></span><br><span class="line"><span class="comment">将10个人放在vector中,然后遍历vector将人随机分配到multimap的容器中</span></span><br><span class="line"><span class="comment">分部门显示员工信息</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> Salary;</span><br><span class="line"><span class="comment">//Worker(string name,int Salary){</span></span><br><span class="line"><span class="comment">//this->name=name;</span></span><br><span class="line"><span class="comment">//this->Salary=Salary;</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createWorker</span><span class="params">(<span class="built_in">vector</span><Worker> &worker)</span></span>{</span><br><span class="line"><span class="built_in">string</span> name_seed = <span class="string">"ABCDEFGHIJ"</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line">Worker w;</span><br><span class="line">w.name=<span class="string">"员工"</span>;</span><br><span class="line">w.name+=name_seed[i];</span><br><span class="line">w.Salary= rand()%<span class="number">10000</span>+<span class="number">10000</span>; <span class="comment">// 坑 , 一句还执行不了  worker.push_back(Worker("员工"+name_seed[i],rand()%10000+10000));</span></span><br><span class="line">worker.push_back(w); <span class="comment">// 10000-19999</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//for(vector<Worker>::iterator it=worker.begin();it!=Worker.end();it++){</span></span><br><span class="line"><span class="comment">//itWorker()</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span><Worker> &worker)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><Worker>::iterator it=worker.<span class="built_in">begin</span>();it!=worker.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"姓名:"</span><< it->name<<<span class="string">" "</span><<<span class="string">"工资:"</span><<it->Salary<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setGroup</span><span class="params">(<span class="built_in">vector</span><Worker> &worker,<span class="built_in">multimap</span><<span class="keyword">int</span>,Worker> &mworker)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><Worker>::iterator it=worker.<span class="built_in">begin</span>();it!=worker.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="keyword">int</span> dept = rand()%<span class="number">3</span>; <span class="comment">// 0 1 2 </span></span><br><span class="line">mworker.insert(make_pair(dept,*it));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMworker</span><span class="params">(<span class="built_in">multimap</span><<span class="keyword">int</span>,Worker>&worker)</span></span>{ <span class="comment">//  0 A B C  1 F G  2 D E </span></span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"美术--------------"</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">multimap</span><<span class="keyword">int</span>,Worker>::iterator it=worker.<span class="built_in">begin</span>();it!=worker.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="keyword">if</span>((*it).first==<span class="number">0</span>){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"姓名:"</span><< it->second.name<<<span class="string">" "</span><<<span class="string">"工资:"</span><< it->second.Salary<<<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">} </span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"设计--------------"</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">multimap</span><<span class="keyword">int</span>,Worker>::iterator it=worker.<span class="built_in">begin</span>();it!=worker.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="keyword">if</span>((*it).first==<span class="number">1</span>){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"姓名:"</span><< it->second.name<<<span class="string">" "</span><<<span class="string">"工资:"</span><< it->second.Salary<<<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">} </span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"开发---------------"</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">multimap</span><<span class="keyword">int</span>,Worker>::iterator it=worker.<span class="built_in">begin</span>();it!=worker.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="keyword">if</span>((*it).first==<span class="number">2</span>){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"姓名:"</span><< it->second.name<<<span class="string">" "</span><<<span class="string">"工资:"</span><< it->second.Salary<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span> )time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="built_in">vector</span><Worker> vWorker;</span><br><span class="line">createWorker(vWorker);</span><br><span class="line">printVector(vWorker);</span><br><span class="line"><span class="comment">// 员工分组</span></span><br><span class="line"><span class="built_in">multimap</span><<span class="keyword">int</span>,Worker> mWorker;</span><br><span class="line">setGroup(vWorker,mWorker);</span><br><span class="line">printMworker(mWorker);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">姓名:员工A 工资:15799</span></span><br><span class="line"><span class="comment">姓名:员工B 工资:19029</span></span><br><span class="line"><span class="comment">姓名:员工C 工资:14589</span></span><br><span class="line"><span class="comment">姓名:员工D 工资:11870</span></span><br><span class="line"><span class="comment">姓名:员工E 工资:11106</span></span><br><span class="line"><span class="comment">姓名:员工F 工资:16145</span></span><br><span class="line"><span class="comment">姓名:员工G 工资:12290</span></span><br><span class="line"><span class="comment">姓名:员工H 工资:15171</span></span><br><span class="line"><span class="comment">姓名:员工I 工资:13026</span></span><br><span class="line"><span class="comment">姓名:员工J 工资:19923</span></span><br><span class="line"><span class="comment">美术--------------</span></span><br><span class="line"><span class="comment">姓名:员工B 工资:19029</span></span><br><span class="line"><span class="comment">姓名:员工C 工资:14589</span></span><br><span class="line"><span class="comment">姓名:员工D 工资:11870</span></span><br><span class="line"><span class="comment">姓名:员工F 工资:16145</span></span><br><span class="line"><span class="comment">设计--------------</span></span><br><span class="line"><span class="comment">姓名:员工A 工资:15799</span></span><br><span class="line"><span class="comment">姓名:员工E 工资:11106</span></span><br><span class="line"><span class="comment">姓名:员工J 工资:19923</span></span><br><span class="line"><span class="comment">开发---------------</span></span><br><span class="line"><span class="comment">姓名:员工G 工资:12290</span></span><br><span class="line"><span class="comment">姓名:员工H 工资:15171</span></span><br><span class="line"><span class="comment">姓名:员工I 工资:13026</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;员工分类案例&quot;&gt;&lt;a href=&quot;#员工分类案例&quot; class=&quot;headerlink&quot; title=&quot;员工分类案例&quot;&gt;&lt;/a&gt;员工分类案例&lt;/h3&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://philxling.cn/categories/c/"/>
    
    
      <category term="c++" scheme="http://philxling.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>容器</title>
    <link href="http://philxling.cn/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/"/>
    <id>http://philxling.cn/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/</id>
    <published>2020-04-15T15:20:00.000Z</published>
    <updated>2020-04-02T14:51:46.418Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h3 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h3><p>vector存放自定义类型数据</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="keyword">int</span> age,<span class="built_in">string</span> name){</span><br><span class="line"><span class="keyword">this</span>->age=age;</span><br><span class="line"><span class="keyword">this</span>->name=name;</span><br><span class="line">} </span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">12</span>,<span class="string">"java"</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">13</span>,<span class="string">"c++"</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">1</span>,<span class="string">"c"</span>)</span></span>;</span><br><span class="line"><span class="built_in">vector</span><Person*> v;</span><br><span class="line">v.push_back(&p1);</span><br><span class="line">v.push_back(&p2);</span><br><span class="line">v.push_back(&p3);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><Person*>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<(*it)->age<<(*it)->name<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>string容器</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20191219202604459.png" alt="image-20191219202604459"></p><p>string赋值</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20191219203111427.png" alt="image-20191219203111427"></p><p>string拼接</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20191219203050386.png" alt="image-20191219203050386"></p><p>容器嵌套容器</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">vector</span><<span class="built_in">vector</span><<span class="keyword">int</span>> >v; <span class="comment">//这里右边>>必须分开写 </span></span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v1;</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">4</span>;i++){</span><br><span class="line">v1.push_back(i);</span><br><span class="line">v2.push_back(i+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">v.push_back(v1);</span><br><span class="line">v.push_back(v2);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><<span class="built_in">vector</span><<span class="keyword">int</span>> >::iterator it = v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="comment">// *it 指的是vector<int></span></span><br><span class="line"><span class="comment">//再次遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator vit=(*it).<span class="built_in">begin</span>();vit!=(*it).<span class="built_in">end</span>();vit++){</span><br><span class="line"><span class="built_in">cout</span><<*(vit)<<<span class="string">" "</span>;</span><br><span class="line">} </span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>string字符串拼接</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321163725406.png" alt="image-20200321163725406"></p><p>string 查找和替换</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321163810944.png" alt="image-20200321163810944"></p><p>注意替换replace(),三个参数是指从第几个开始,替换几个,会将新的字符串全部加进去</p><p>如</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str=<span class="string">"cd"</span>;</span><br><span class="line">str.replace(<span class="number">1</span>,<span class="number">3</span>,<span class="string">"dasdddas"</span>)</span><br><span class="line"> <span class="comment">// cdasdddas</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><iostream> </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">string</span> str=<span class="string">"hello"</span>;</span><br><span class="line">str.append(<span class="string">"world"</span>); <span class="comment">//添加 </span></span><br><span class="line">str+=<span class="string">"i"</span>;</span><br><span class="line"><span class="built_in">string</span> str1=<span class="string">"cdwewewf"</span>;</span><br><span class="line">str1.replace(<span class="number">1</span>,<span class="number">3</span>,<span class="string">"das"</span>); <span class="comment">//字符替换 </span></span><br><span class="line"><span class="built_in">cout</span><<str1;</span><br><span class="line"><span class="built_in">string</span> str3=<span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">string</span> str2=<span class="string">"xello"</span> ;</span><br><span class="line"><span class="keyword">if</span>(str3.compare(str2)==<span class="number">0</span>){ <span class="comment">//字符串比较 </span></span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"相等"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"不相等"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//string字符存取</span></span><br><span class="line"><span class="built_in">string</span> str4=<span class="string">"hello"</span>;</span><br><span class="line"><span class="comment">//访问字符</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<str4.<span class="built_in">size</span>();i++){</span><br><span class="line"><span class="built_in">cout</span><<str4[i]<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<str4.<span class="built_in">size</span>();i++){</span><br><span class="line"><span class="built_in">cout</span><<str4.at(i)<<<span class="string">" "</span>;</span><br><span class="line">} </span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// string 插入删除</span></span><br><span class="line"><span class="comment">// insert()</span></span><br><span class="line"><span class="comment">// erase(int pos,int n=npos);</span></span><br><span class="line">str2.erase(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">cout</span><<str2<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// 子串</span></span><br><span class="line"><span class="comment">// substr(int pos,int n=npos)</span></span><br><span class="line"> <span class="built_in">string</span> str5=str3.substr(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"> <span class="built_in">cout</span><<str5<<<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">string</span> email = <span class="string">"zhangsan@sina.com"</span>; <span class="comment">//截取邮箱 </span></span><br><span class="line"> <span class="keyword">int</span> pos = email.<span class="built_in">find</span>(<span class="string">"@"</span>);</span><br><span class="line"> <span class="built_in">cout</span><<email.substr(<span class="number">0</span>,pos)<<<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    test();</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>vector 容器 动态扩展</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321214940482.png" alt="image-20200321214940482"></p><p>vector赋值操作</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span><<span class="keyword">int</span>> &v)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v1;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">4</span>;i++){</span><br><span class="line">v1.push_back(i);</span><br><span class="line">}</span><br><span class="line">printVector(v1);</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v2;</span><br><span class="line">v2=v1; <span class="comment">//拷贝构造 </span></span><br><span class="line">printVector(v2);</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v3;</span><br><span class="line">v3.assign(v1.<span class="built_in">begin</span>(),v1.<span class="built_in">end</span>());</span><br><span class="line">printVector(v3);</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v4;</span><br><span class="line">v4.assign(<span class="number">10</span>,<span class="number">100</span>); <span class="comment">//赋值 </span></span><br><span class="line">printVector(v4);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>vector容量和大小</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321220704981.png" alt="image-20200321220704981"></p><p>插入和删除</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321211635313.png" alt="image-20200321211635313"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span><<span class="keyword">int</span>>&v)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v1;</span><br><span class="line"><span class="built_in">cout</span><<v1.capacity()<<<span class="built_in">endl</span>;<span class="comment">// 为空的时候 容量为0 </span></span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">2</span>);</span><br><span class="line">v1.push_back(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span><<v1.capacity()<<<span class="built_in">endl</span>;<span class="comment">//</span></span><br><span class="line"> <span class="comment">// 插入和删除</span></span><br><span class="line"><span class="comment">// 尾删</span></span><br><span class="line">printVector(v1);</span><br><span class="line">v1.pop_back();</span><br><span class="line">printVector(v1);</span><br><span class="line"><span class="comment">// insert()</span></span><br><span class="line">v1.insert(v1.<span class="built_in">begin</span>(),<span class="number">100</span>);</span><br><span class="line">printVector(v1);</span><br><span class="line">v1.insert(v1.<span class="built_in">begin</span>(),<span class="number">2</span>,<span class="number">1000</span>);</span><br><span class="line">printVector(v1);</span><br><span class="line">v1.erase(v1.<span class="built_in">begin</span>());</span><br><span class="line">printVector(v1);</span><br><span class="line">v1.erase(v1.<span class="built_in">begin</span>(),v1.<span class="built_in">end</span>()); <span class="comment">//相等于清空 </span></span><br><span class="line">printVector(v1);</span><br><span class="line">v1.<span class="built_in">clear</span>(); <span class="comment">//清空 </span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321213530726.png" alt="image-20200321213530726"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span><<span class="keyword">int</span>> &v1)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=v1.<span class="built_in">begin</span>();it!=v1.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>; </span><br><span class="line">} </span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v1;</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line">v1.push_back(i);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10</span>;i><span class="number">0</span>;i--){</span><br><span class="line">v2.push_back(i);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//cout<<*v1<<endl; // 不被允许 </span></span><br><span class="line"><span class="comment">// 数组方式遍历vector</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<v1.<span class="built_in">size</span>();i++){</span><br><span class="line"><span class="built_in">cout</span><<v1[i]<<<span class="string">" "</span>;</span><br><span class="line">} </span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<v1.<span class="built_in">size</span>();i++){</span><br><span class="line"><span class="built_in">cout</span><<v1.at(i)<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// 获取第一个元素</span></span><br><span class="line"><span class="built_in">cout</span><<v1.front()<<<span class="built_in">endl</span>; </span><br><span class="line"><span class="comment">//互换容器</span></span><br><span class="line">v1.swap(v2);</span><br><span class="line">printVector(v1);</span><br><span class="line">printVector(v2);</span><br><span class="line"> <span class="comment">// 实际用途,收缩内存空间 </span></span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v4;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用reserve预留空间,可以减少内存开辟次数</span></span><br><span class="line">v4.reserve(<span class="number">100000</span>); </span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> *p=<span class="literal">NULL</span>;  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">100000</span>;i++){</span><br><span class="line"> v4.push_back(i);</span><br><span class="line"> <span class="keyword">if</span>(p!=&v4[<span class="number">0</span>]){</span><br><span class="line"> p=&v4[<span class="number">0</span>];</span><br><span class="line"> num++;</span><br><span class="line"> }</span><br><span class="line">} </span><br><span class="line"><span class="built_in">cout</span><<num<<<span class="built_in">endl</span>; <span class="comment">//num 用来统计开辟了多少次内存  18 次 </span></span><br><span class="line"><span class="built_in">cout</span><<v4.capacity()<<<span class="built_in">endl</span>;</span><br><span class="line">v4.resize(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>(v4).swap(v4); <span class="comment">//匿名对象 ,回收内存 </span></span><br><span class="line"><span class="built_in">cout</span><<v4.capacity()<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// 预留空间</span></span><br><span class="line"> </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>deque 双端数组</p><p>与vector的区别</p><p>vector对于头部的插入删除效率低,数据量越大,效率越低</p><p>deque相对而言,对头部的插入删除速度比vector快</p><p>vector访问元素的速度会比deque快</p><p>deque内部工作原理,deque内部有中控器,维护每段缓冲区的内容,缓冲区中存放真实数据</p><p>中控器维护的是每一个缓冲区的地址,是的每个deque像一片连续的地址</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321220121820.png" alt="image-20200321220121820"></p><p>注意: deque没有容量的概念</p><p>判断为空—empty</p><p>返回元素个数—-size</p><p>重新指定个数—-resize</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321211749654.png" alt="image-20200321211749654"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><deque></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// deque容器的插入和删除 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDeque</span><span class="params">(<span class="keyword">const</span> <span class="built_in">deque</span><<span class="keyword">int</span>>&d)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">deque</span><<span class="keyword">int</span>>::const_iterator it=d.<span class="built_in">begin</span>();it!=d.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">deque</span><<span class="keyword">int</span>> d;</span><br><span class="line">d.push_back(<span class="number">12</span>);</span><br><span class="line">d.push_back(<span class="number">100</span>);</span><br><span class="line">d.push_front(<span class="number">120</span>);</span><br><span class="line">printDeque(d);</span><br><span class="line"><span class="comment">// 尾删</span></span><br><span class="line">d.pop_back();</span><br><span class="line">d.pop_front();</span><br><span class="line">printDeque(d);</span><br><span class="line"><span class="comment">// 指定位置插入删除</span></span><br><span class="line">d.insert(d.<span class="built_in">begin</span>(),<span class="number">10000</span>);</span><br><span class="line">printDeque(d); </span><br><span class="line"><span class="comment">// 在指定区间</span></span><br><span class="line"><span class="built_in">deque</span><<span class="keyword">int</span>> d2;</span><br><span class="line">d2.push_back(<span class="number">1</span>);</span><br><span class="line">d2.push_back(<span class="number">2</span>);</span><br><span class="line">d2.push_back(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">d.insert(d.<span class="built_in">begin</span>(),d2.<span class="built_in">begin</span>(),d2.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">printDeque(d); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">d.erase(d.<span class="built_in">begin</span>());</span><br><span class="line"><span class="built_in">deque</span><<span class="keyword">int</span>>::iterator it=d.<span class="built_in">begin</span>();</span><br><span class="line">it++;</span><br><span class="line">d.erase(it); </span><br><span class="line">printDeque(d);</span><br><span class="line">sort(d.<span class="built_in">begin</span>(),d.<span class="built_in">end</span>()); <span class="comment">// 排序算法</span></span><br><span class="line">printDeque(d);</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">120 12 100</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">10000 12</span></span><br><span class="line"><span class="comment">1 2 3 10000 12</span></span><br><span class="line"><span class="comment">2 10000 12</span></span><br><span class="line"><span class="comment">2 12 10000</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>案例</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><deque></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><ctime></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line">Person(<span class="built_in">string</span> name,<span class="keyword">int</span> score){</span><br><span class="line"><span class="keyword">this</span>->name=name;</span><br><span class="line"><span class="keyword">this</span>->score=score;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span><Person>&v)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><Person>::const_iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<(*it).name<<<span class="string">":"</span><<<span class="string">"分数"</span><<(*it).score<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createPerson</span><span class="params">(<span class="built_in">vector</span><Person> &v)</span></span>{</span><br><span class="line"><span class="built_in">string</span> stringSeed=<span class="string">"ABCDE"</span>;</span><br><span class="line"><span class="keyword">int</span> score=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">5</span>;i++){</span><br><span class="line"><span class="built_in">string</span> name =<span class="string">"选手"</span>;</span><br><span class="line">name+=stringSeed[i];</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(name,score)</span></span>;</span><br><span class="line">v.push_back(p); <span class="comment">//创建5名对象 </span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="built_in">vector</span><Person>&v)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><Person>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">deque</span><<span class="keyword">int</span>> d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line"><span class="keyword">int</span> score=rand()%<span class="number">41</span>+<span class="number">60</span>; <span class="comment">//60-100</span></span><br><span class="line">d.push_back(score);</span><br><span class="line"><span class="built_in">cout</span><<(*it).name<<<span class="string">":"</span><<score<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">sort(d.<span class="built_in">begin</span>(),d.<span class="built_in">end</span>()); <span class="comment">// 排序</span></span><br><span class="line">d.pop_front();</span><br><span class="line">d.pop_back(); <span class="comment">//去掉分数</span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">deque</span><<span class="keyword">int</span>>::iterator it=d.<span class="built_in">begin</span>();it!=d.<span class="built_in">end</span>();it++){</span><br><span class="line">sum+=*it;</span><br><span class="line">}</span><br><span class="line">(*it).score=sum/d.<span class="built_in">size</span>();</span><br><span class="line">}</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//随机数种子</span></span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>)); </span><br><span class="line"><span class="comment">// 创建5名选手</span></span><br><span class="line"><span class="built_in">vector</span><Person> v;</span><br><span class="line">createPerson(v);</span><br><span class="line"><span class="comment">// 给5名选手打分</span></span><br><span class="line">setScore(v);</span><br><span class="line"><span class="comment">//  </span></span><br><span class="line"><span class="built_in">print</span>(v);</span><br><span class="line"><span class="built_in">cout</span><<rand()<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>stack容器</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200322014757939.png" alt="image-20200322014757939"></p><p>queue容器</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200322015602691.png" alt="image-20200322015602691"></p><p>list容器</p><p>list赋值和交换</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><list></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(<span class="keyword">const</span> <span class="built_in">list</span><<span class="keyword">int</span>>&L)</span></span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">list</span><<span class="keyword">int</span>>::const_iterator it=L.<span class="built_in">begin</span>();it!=L.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">list</span><<span class="keyword">int</span>> L1;</span><br><span class="line"><span class="built_in">list</span><<span class="keyword">int</span>> L2;</span><br><span class="line">L1.push_back(<span class="number">100</span>);</span><br><span class="line">L1.push_back(<span class="number">20</span>);</span><br><span class="line">L1.push_back(<span class="number">12</span>);</span><br><span class="line">L2.assign(<span class="number">10</span>,<span class="number">100</span>);</span><br><span class="line">printList(L1);</span><br><span class="line">printList(L2);</span><br><span class="line">L1.swap(L2); <span class="comment">//交换 </span></span><br><span class="line">printList(L1);</span><br><span class="line">printList(L2);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200324233345500.png" alt="image-20200324233345500"></p><p>list排序案例</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><list></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// list 容器的排序案例 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">height</span>;</span><br><span class="line">Person(<span class="built_in">string</span> name,<span class="keyword">int</span> age, <span class="keyword">int</span> <span class="built_in">height</span>){</span><br><span class="line"><span class="keyword">this</span>->name=name;</span><br><span class="line"><span class="keyword">this</span>->age=age;</span><br><span class="line"><span class="keyword">this</span>-><span class="built_in">height</span>=<span class="built_in">height</span>;</span><br><span class="line">}</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPerson</span><span class="params">(<span class="keyword">const</span> <span class="built_in">list</span><Person>&L)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">list</span><Person>::const_iterator it=L.<span class="built_in">begin</span>();it!=L.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<(*it).name<<<span class="string">" "</span><<(*it).age<<<span class="string">" "</span><<(*it).<span class="built_in">height</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myCompare</span><span class="params">(Person &p1, Person &p2 )</span></span>{ <span class="comment">// 自定义数据类型的排序规则 </span></span><br><span class="line"><span class="keyword">if</span>(p1.age==p2.age){</span><br><span class="line"><span class="keyword">return</span> p1.<span class="built_in">height</span><p2.<span class="built_in">height</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> p1.age<p2.age;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">list</span><Person> L;</span><br><span class="line">L.push_back(Person(<span class="string">"zhangsan"</span>,<span class="number">23</span>,<span class="number">180</span>));</span><br><span class="line">L.push_back(Person(<span class="string">"lisi"</span>,<span class="number">43</span>,<span class="number">290</span>));</span><br><span class="line">L.push_back(Person(<span class="string">"wangwu"</span>,<span class="number">43</span>,<span class="number">90</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 容器用年龄排序,如果年龄相同,用身高排序</span></span><br><span class="line">printPerson(L);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L.sort(myCompare);</span><br><span class="line"></span><br><span class="line">printPerson(L);</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>set集合(没有重复元素,并且自动排序)</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200325004617027.png" alt="image-20200325004617027"></p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200325011034860.png" alt="image-20200325011034860"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><set></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSet</span><span class="params">(<span class="keyword">const</span> <span class="built_in">set</span><<span class="keyword">int</span>> &s)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">set</span><<span class="keyword">int</span>>::const_iterator it=s.<span class="built_in">begin</span>();it!=s.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">set</span><<span class="keyword">int</span>> s;</span><br><span class="line">s.insert(<span class="number">23</span>);</span><br><span class="line">s.insert(<span class="number">43</span>);</span><br><span class="line">printSet(s);</span><br><span class="line"><span class="comment">// find 返回迭代器</span></span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">find</span>(<span class="number">43</span>)!=s.<span class="built_in">end</span>()){</span><br><span class="line"><span class="built_in">cout</span><<*(s.<span class="built_in">find</span>(<span class="number">43</span>))<<<span class="built_in">endl</span>; <span class="comment">// 返回迭代器 *(s.find(23))</span></span><br><span class="line">} </span><br><span class="line"><span class="built_in">cout</span><<s.count(<span class="number">23</span>)<<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>pair对组(和元组很像)</p><p>paie的创建方式</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pair<<span class="built_in">string</span>,<span class="keyword">int</span>>p(<span class="string">"tom"</span>,<span class="number">23</span>);</span><br><span class="line">pair<<span class="built_in">string</span>,<span class="keyword">int</span>> p2 =make_pair(<span class="string">"zhangsan"</span>,<span class="number">43</span>);</span><br></pre></td></tr></tbody></table></figure><p>利用仿函数重载排序规则</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">compare</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span></span>{</span><br><span class="line"><span class="keyword">return</span> v1>v2;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="built_in">set</span><<span class="keyword">int</span>,compare> s;</span><br><span class="line">s.insert(<span class="number">23</span>);</span><br><span class="line">s.insert(<span class="number">43</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">set</span><<span class="keyword">int</span>,compare>::iterator it=s.<span class="built_in">begin</span>();it!=s.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>map容器(高效率)(会按照key排序)</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200325015540130.png" alt="image-20200325015540130"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span><<span class="built_in">string</span>,<span class="keyword">int</span>> m;</span><br><span class="line">m.insert(pair<<span class="built_in">string</span>,<span class="keyword">int</span>>(<span class="string">"zhangsan"</span>,<span class="number">23</span>));</span><br><span class="line">m.insert(pair<<span class="built_in">string</span>,<span class="keyword">int</span>>(<span class="string">"lisi"</span>,<span class="number">34</span>));</span><br><span class="line">m.insert(pair<<span class="built_in">string</span>,<span class="keyword">int</span>>(<span class="string">"wangwu"</span>,<span class="number">343</span>));</span><br><span class="line">m.insert(make_pair(<span class="string">"wangmazi"</span>,<span class="number">89</span>));</span><br><span class="line">m.insert(<span class="built_in">map</span><<span class="built_in">string</span>,<span class="keyword">int</span>>::value_type(<span class="string">"啦啦啦"</span>,<span class="number">43</span>));</span><br><span class="line"><span class="built_in">cout</span><<m[<span class="string">"zhangsan"</span>]<<<span class="built_in">endl</span>; <span class="comment">// 中括号适合访问,不适合插入</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">map</span><<span class="built_in">string</span>,<span class="keyword">int</span>>::iterator it=m.<span class="built_in">begin</span>();it!=m.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<it->first<<it->second<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vector容器&quot;&gt;&lt;a href=&quot;#vector容器&quot; class=&quot;headerlink&quot; title=&quot;vector容器&quot;&gt;&lt;/a&gt;vector容器&lt;/h3&gt;&lt;p&gt;vector存放自定义类型数据&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://philxling.cn/categories/c/"/>
    
    
      <category term="c++" scheme="http://philxling.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>多线程爬虫</title>
    <link href="http://philxling.cn/2020/04/13/python%E7%88%AC%E8%99%AB/13-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB/"/>
    <id>http://philxling.cn/2020/04/13/python%E7%88%AC%E8%99%AB/13-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB/</id>
    <published>2020-04-13T14:46:23.000Z</published>
    <updated>2020-04-13T14:48:04.984Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="多线程爬虫"><a href="#多线程爬虫" class="headerlink" title="多线程爬虫"></a>多线程爬虫</h1><p>有些时候，比如下载图片，因为下载图片是一个耗时的操作。如果采用之前那种同步的方式下载。那效率肯会特别慢。这时候我们就可以考虑使用多线程的方式来下载图片。</p><a id="more"></a><h2 id="多线程介绍："><a href="#多线程介绍：" class="headerlink" title="多线程介绍："></a>多线程介绍：</h2><p>多线程是为了同步完成多项任务，通过提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。<br>最简单的比喻多线程就像火车的每一节车厢，而进程则是火车。车厢离开火车是无法跑动的，同理火车也可以有多节车厢。多线程的出现就是为了提高效率。同时它的出现也带来了一些问题。更多介绍请参考：<a href="https://baike.baidu.com/item/多线程/1190404?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/多线程/1190404?fr=aladdin</a></p><h2 id="threading模块介绍："><a href="#threading模块介绍：" class="headerlink" title="threading模块介绍："></a>threading模块介绍：</h2><p><code>threading</code>模块是<code>python</code>中专门提供用来做多线程编程的模块。<code>threading</code>模块中最常用的类是<code>Thread</code>。以下看一个简单的多线程程序：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coding</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">'%s正在写代码'</span> % x)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">'%s正在画图'</span> % x)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_thread</span><span class="params">()</span>:</span></span><br><span class="line">    coding()</span><br><span class="line">    drawing()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_thread</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = threading.Thread(target=coding)</span><br><span class="line">    t2 = threading.Thread(target=drawing)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    multi_thread()</span><br></pre></td></tr></tbody></table></figure><h3 id="查看线程数："><a href="#查看线程数：" class="headerlink" title="查看线程数："></a>查看线程数：</h3><p>使用<code>threading.enumerate()</code>函数便可以看到当前线程的数量。</p><h3 id="查看当前线程的名字："><a href="#查看当前线程的名字：" class="headerlink" title="查看当前线程的名字："></a>查看当前线程的名字：</h3><p>使用<code>threading.current_thread()</code>可以看到当前线程的信息。</p><h3 id="继承自threading-Thread类："><a href="#继承自threading-Thread类：" class="headerlink" title="继承自threading.Thread类："></a>继承自<code>threading.Thread</code>类：</h3><p>为了让线程代码更好的封装。可以使用<code>threading</code>模块下的<code>Thread</code>类，继承自这个类，然后实现<code>run</code>方法，线程就会自动运行<code>run</code>方法中的代码。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodingThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            print(<span class="string">'%s正在写代码'</span> % threading.current_thread())</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawingThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            print(<span class="string">'%s正在画图'</span> % threading.current_thread())</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_thread</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = CodingThread()</span><br><span class="line">    t2 = DrawingThread()</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    multi_thread()</span><br></pre></td></tr></tbody></table></figure><h3 id="多线程共享全局变量的问题："><a href="#多线程共享全局变量的问题：" class="headerlink" title="多线程共享全局变量的问题："></a>多线程共享全局变量的问题：</h3><p>多线程都是在同一个进程中运行的。因此在进程中的全局变量所有线程都是可共享的。这就造成了一个问题，因为线程执行的顺序是无序的。有可能会造成数据错误。比如以下代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">tickets = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ticket</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> tickets</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        tickets += <span class="number">1</span></span><br><span class="line">    print(<span class="string">'tickets:%d'</span>%tickets)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t = threading.Thread(target=get_ticket)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>以上结果正常来讲应该是6，但是因为多线程运行的不确定性。因此最后的结果可能是随机的。</p><h3 id="锁机制："><a href="#锁机制：" class="headerlink" title="锁机制："></a>锁机制：</h3><p>为了解决以上使用共享全局变量的问题。<code>threading</code>提供了一个<code>Lock</code>类，这个类可以在某个线程访问某个变量的时候加锁，其他线程此时就不能进来，直到当前线程处理完后，把锁释放了，其他线程才能进来处理。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">VALUE = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">gLock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_value</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> VALUE</span><br><span class="line">    gLock.acquire()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        VALUE += <span class="number">1</span></span><br><span class="line">    gLock.release()</span><br><span class="line">    print(<span class="string">'value：%d'</span>%VALUE)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t = threading.Thread(target=add_value)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h2 id="Lock版本生产者和消费者模式："><a href="#Lock版本生产者和消费者模式：" class="headerlink" title="Lock版本生产者和消费者模式："></a>Lock版本生产者和消费者模式：</h2><p>生产者和消费者模式是多线程开发中经常见到的一种模式。生产者的线程专门用来生产一些数据，然后存放到一个中间的变量中。消费者再从这个中间的变量中取出数据进行消费。但是因为要使用中间变量，中间变量经常是一些全局变量，因此需要使用锁来保证数据完整性。以下是使用<code>threading.Lock</code>锁实现的“生产者与消费者模式”的一个例子：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">1000</span></span><br><span class="line">gLock = threading.Lock()</span><br><span class="line"><span class="comment"># 记录生产者生产的次数，达到10次就不再生产</span></span><br><span class="line">gTimes = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gLock</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            <span class="comment"># 如果已经达到10次了，就不再生产了</span></span><br><span class="line">            <span class="keyword">if</span> gTimes >= <span class="number">10</span>:</span><br><span class="line">                gLock.release()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            gMoney += money</span><br><span class="line">            print(<span class="string">'%s当前存入%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            gLock.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gLock</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">500</span>)</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            <span class="keyword">if</span> gMoney > money:</span><br><span class="line">                gMoney -= money</span><br><span class="line">                print(<span class="string">'%s当前取出%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">                time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 如果钱不够了，有可能是已经超过了次数，这时候就判断一下</span></span><br><span class="line">                <span class="keyword">if</span> gTimes >= <span class="number">10</span>:</span><br><span class="line">                    gLock.release()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                print(<span class="string">"%s当前想取%s元钱，剩余%s元钱，不足！"</span> % (threading.current_thread(),money,gMoney))</span><br><span class="line">            gLock.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Consumer(name=<span class="string">'消费者线程%d'</span>%x).start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Producer(name=<span class="string">'生产者线程%d'</span>%x).start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h2 id="Condition版的生产者与消费者模式："><a href="#Condition版的生产者与消费者模式：" class="headerlink" title="Condition版的生产者与消费者模式："></a>Condition版的生产者与消费者模式：</h2><p><code>Lock</code>版本的生产者与消费者模式可以正常的运行。但是存在一个不足，在消费者中，总是通过<code>while True</code>死循环并且上锁的方式去判断钱够不够。上锁是一个很耗费CPU资源的行为。因此这种方式不是最好的。还有一种更好的方式便是使用<code>threading.Condition</code>来实现。<code>threading.Condition</code>可以在没有数据的时候处于阻塞等待状态。一旦有合适的数据了，还可以使用<code>notify</code>相关的函数来通知其他处于等待状态的线程。这样就可以不用做一些无用的上锁和解锁的操作。可以提高程序的性能。首先对<code>threading.Condition</code>相关的函数做个介绍，<code>threading.Condition</code>类似<code>threading.Lock</code>，可以在修改全局数据的时候进行上锁，也可以在修改完毕后进行解锁。以下将一些常用的函数做个简单的介绍：</p><ol><li><code>acquire</code>：上锁。</li><li><code>release</code>：解锁。</li><li><code>wait</code>：将当前线程处于等待状态，并且会释放锁。可以被其他线程使用<code>notify</code>和<code>notify_all</code>函数唤醒。被唤醒后会继续等待上锁，上锁后继续执行下面的代码。</li><li><code>notify</code>：通知某个正在等待的线程，默认是第1个等待的线程。</li><li><code>notify_all</code>：通知所有正在等待的线程。<code>notify</code>和<code>notify_all</code>不会释放锁。并且需要在<code>release</code>之前调用。</li></ol><p><code>Condition</code>版的生产者与消费者模式代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">1000</span></span><br><span class="line">gCondition = threading.Condition()</span><br><span class="line">gTimes = <span class="number">0</span></span><br><span class="line">gTotalTimes = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gCondition</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            <span class="keyword">if</span> gTimes >= gTotalTimes:</span><br><span class="line">                gCondition.release()</span><br><span class="line">                print(<span class="string">'当前生产者总共生产了%s次'</span>%gTimes)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            gMoney += money</span><br><span class="line">            print(<span class="string">'%s当前存入%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            gCondition.notify_all()</span><br><span class="line">            gCondition.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gCondition</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">500</span>)</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            <span class="comment"># 这里要给个while循环判断，因为等轮到这个线程的时候</span></span><br><span class="line">            <span class="comment"># 条件有可能又不满足了</span></span><br><span class="line">            <span class="keyword">while</span> gMoney < money:</span><br><span class="line">                <span class="keyword">if</span> gTimes >= gTotalTimes:</span><br><span class="line">                    gCondition.release()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                print(<span class="string">'%s准备取%s元钱，剩余%s元钱，不足！'</span>%(threading.current_thread(),money,gMoney))</span><br><span class="line">                gCondition.wait()</span><br><span class="line">            gMoney -= money</span><br><span class="line">            print(<span class="string">'%s当前取出%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            gCondition.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Consumer(name=<span class="string">'消费者线程%d'</span>%x).start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        Producer(name=<span class="string">'生产者线程%d'</span>%x).start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h2 id="Queue线程安全队列："><a href="#Queue线程安全队列：" class="headerlink" title="Queue线程安全队列："></a>Queue线程安全队列：</h2><p>在线程中，访问一些全局变量，加锁是一个经常的过程。如果你是想把一些数据存储到某个队列中，那么Python内置了一个线程安全的模块叫做<code>queue</code>模块。Python中的queue模块中提供了同步的、线程安全的队列类，包括FIFO（先进先出）队列Queue，LIFO（后入先出）队列LifoQueue。这些队列都实现了锁原语（可以理解为原子操作，即要么不做，要么都做完），能够在多线程中直接使用。可以使用队列来实现线程间的同步。相关的函数如下：</p><ol><li>初始化Queue(maxsize)：创建一个先进先出的队列。</li><li>qsize()：返回队列的大小。</li><li>empty()：判断队列是否为空。</li><li>full()：判断队列是否满了。</li><li>get()：从队列中取最后一个数据。</li><li>put()：将一个数据放到队列中。</li></ol><h2 id="使用生产者与消费者模式多线程下载表情包："><a href="#使用生产者与消费者模式多线程下载表情包：" class="headerlink" title="使用生产者与消费者模式多线程下载表情包："></a>使用生产者与消费者模式多线程下载表情包：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    headers = {</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page_queue,img_queue,*args,**kwargs)</span>:</span></span><br><span class="line">        super(Producer, self).__init__(*args,**kwargs)</span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        self.img_queue = img_queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.page_queue.empty():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            url = self.page_queue.get()</span><br><span class="line">            self.parse_page(url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        response = requests.get(url,headers=self.headers)</span><br><span class="line">        text = response.text</span><br><span class="line">        html = etree.HTML(text)</span><br><span class="line">        imgs = html.xpath(<span class="string">"//div[@class='page-content text-center']//a//img"</span>)</span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> imgs:</span><br><span class="line">            <span class="keyword">if</span> img.get(<span class="string">'class'</span>) == <span class="string">'gif'</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            img_url = img.xpath(<span class="string">".//@data-original"</span>)[<span class="number">0</span>]</span><br><span class="line">            suffix = os.path.splitext(img_url)[<span class="number">1</span>]</span><br><span class="line">            alt = img.xpath(<span class="string">".//@alt"</span>)[<span class="number">0</span>]</span><br><span class="line">            alt = re.sub(<span class="string">r'[，。？?,/\\·]'</span>,<span class="string">''</span>,alt)</span><br><span class="line">            img_name = alt + suffix</span><br><span class="line">            self.img_queue.put((img_url,img_name))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page_queue,img_queue,*args,**kwargs)</span>:</span></span><br><span class="line">        super(Consumer, self).__init__(*args,**kwargs)</span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        self.img_queue = img_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.img_queue.empty():</span><br><span class="line">                <span class="keyword">if</span> self.page_queue.empty():</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            img = self.img_queue.get(block=<span class="literal">True</span>)</span><br><span class="line">            url,filename = img</span><br><span class="line">            request.urlretrieve(url,<span class="string">'images/'</span>+filename)</span><br><span class="line">            print(filename+<span class="string">'  下载完成！'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    page_queue = Queue(<span class="number">100</span>)</span><br><span class="line">    img_queue = Queue(<span class="number">500</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">        url = <span class="string">"http://www.doutula.com/photo/list/?page=%d"</span> % x</span><br><span class="line">        page_queue.put(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = Producer(page_queue,img_queue)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = Consumer(page_queue,img_queue)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h2 id="GIL全局解释器锁："><a href="#GIL全局解释器锁：" class="headerlink" title="GIL全局解释器锁："></a>GIL全局解释器锁：</h2><p>Python自带的解释器是<code>CPython</code>。<code>CPython</code>解释器的多线程实际上是一个假的多线程（在多核CPU中，只能利用一核，不能利用多核）。同一时刻只有一个线程在执行，为了保证同一时刻只有一个线程在执行，在<code>CPython</code>解释器中有一个东西叫做<code>GIL（Global Intepreter Lock）</code>，叫做全局解释器锁。这个解释器锁是有必要的。因为<code>CPython</code>解释器的内存管理不是线程安全的。当然除了<code>CPython</code>解释器，还有其他的解释器，有些解释器是没有<code>GIL</code>锁的，见下面：</p><ol><li><code>Jython</code>：用Java实现的Python解释器。不存在GIL锁。更多详情请见：<a href="https://zh.wikipedia.org/wiki/Jython" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Jython</a></li><li><code>IronPython</code>：用<code>.net</code>实现的Python解释器。不存在GIL锁。更多详情请见：<a href="https://zh.wikipedia.org/wiki/IronPython" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/IronPython</a></li><li><code>PyPy</code>：用<code>Python</code>实现的Python解释器。存在GIL锁。更多详情请见：<a href="https://zh.wikipedia.org/wiki/PyPy" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/PyPy</a><br>GIL虽然是一个假的多线程。但是在处理一些IO操作（比如文件读写和网络请求）还是可以在很大程度上提高效率的。在IO操作上建议使用多线程提高效率。在一些CPU计算操作上不建议使用多线程，而建议使用多进程。</li></ol><h2 id="多线程下载百思不得姐段子作业："><a href="#多线程下载百思不得姐段子作业：" class="headerlink" title="多线程下载百思不得姐段子作业："></a>多线程下载百思不得姐段子作业：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSSpider</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    headers = {</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page_queue,joke_queue,*args,**kwargs)</span>:</span></span><br><span class="line">        super(BSSpider, self).__init__(*args,**kwargs)</span><br><span class="line">        self.base_domain = <span class="string">'http://www.budejie.com'</span></span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        self.joke_queue = joke_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.page_queue.empty():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            url = self.page_queue.get()</span><br><span class="line">            response = requests.get(url, headers=self.headers)</span><br><span class="line">            text = response.text</span><br><span class="line">            html = etree.HTML(text)</span><br><span class="line">            descs = html.xpath(<span class="string">"//div[@class='j-r-list-c-desc']"</span>)</span><br><span class="line">            <span class="keyword">for</span> desc <span class="keyword">in</span> descs:</span><br><span class="line">                jokes = desc.xpath(<span class="string">".//text()"</span>)</span><br><span class="line">                joke = <span class="string">"\n"</span>.join(jokes).strip()</span><br><span class="line">                link = self.base_domain+desc.xpath(<span class="string">".//a/@href"</span>)[<span class="number">0</span>]</span><br><span class="line">                self.joke_queue.put((joke,link))</span><br><span class="line">            print(<span class="string">'='</span>*<span class="number">30</span>+<span class="string">"第%s页下载完成！"</span>%url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]+<span class="string">"="</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSWriter</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    headers = {</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, joke_queue, writer,gLock, *args, **kwargs)</span>:</span></span><br><span class="line">        super(BSWriter, self).__init__(*args, **kwargs)</span><br><span class="line">        self.joke_queue = joke_queue</span><br><span class="line">        self.writer = writer</span><br><span class="line">        self.lock = gLock</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                joke_info = self.joke_queue.get(timeout=<span class="number">40</span>)</span><br><span class="line">                joke,link = joke_info</span><br><span class="line">                self.lock.acquire()</span><br><span class="line">                self.writer.writerow((joke,link))</span><br><span class="line">                self.lock.release()</span><br><span class="line">                print(<span class="string">'保存一条'</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    page_queue = Queue(<span class="number">10</span>)</span><br><span class="line">    joke_queue = Queue(<span class="number">500</span>)</span><br><span class="line">    gLock = threading.Lock()</span><br><span class="line">    fp = open(<span class="string">'bsbdj.csv'</span>, <span class="string">'a'</span>,newline=<span class="string">''</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    writer = csv.writer(fp)</span><br><span class="line">    writer.writerow((<span class="string">'content'</span>, <span class="string">'link'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">        url = <span class="string">'http://www.budejie.com/text/%d'</span> % x</span><br><span class="line">        page_queue.put(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = BSSpider(page_queue,joke_queue)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = BSWriter(joke_queue,writer,gLock)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多线程爬虫&quot;&gt;&lt;a href=&quot;#多线程爬虫&quot; class=&quot;headerlink&quot; title=&quot;多线程爬虫&quot;&gt;&lt;/a&gt;多线程爬虫&lt;/h1&gt;&lt;p&gt;有些时候，比如下载图片，因为下载图片是一个耗时的操作。如果采用之前那种同步的方式下载。那效率肯会特别慢。这时候我们就可以考虑使用多线程的方式来下载图片。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.cn/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.cn/tags/python/"/>
    
      <category term="python爬虫" scheme="http://philxling.cn/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>csv文件处理</title>
    <link href="http://philxling.cn/2020/04/11/python%E7%88%AC%E8%99%AB/12-csv%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>http://philxling.cn/2020/04/11/python%E7%88%AC%E8%99%AB/12-csv%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</id>
    <published>2020-04-11T15:40:12.000Z</published>
    <updated>2020-04-11T16:02:50.040Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="csv文件处理"><a href="#csv文件处理" class="headerlink" title="csv文件处理"></a>csv文件处理</h1><h2 id="读取csv文件："><a href="#读取csv文件：" class="headerlink" title="读取csv文件："></a>读取csv文件：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'stock.csv'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    reader = csv.reader(fp)</span><br><span class="line">    titles = next(reader)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> reader:</span><br><span class="line">        print(x)</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>这样操作，以后获取数据的时候，就要通过下表来获取数据。如果想要在获取数据的时候通过标题来获取。那么可以使用<code>DictReader</code>。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'stock.csv'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    reader = csv.DictReader(fp)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> reader:</span><br><span class="line">        print(x[<span class="string">'turnoverVol'</span>])</span><br></pre></td></tr></tbody></table></figure><h2 id="写入数据到csv文件："><a href="#写入数据到csv文件：" class="headerlink" title="写入数据到csv文件："></a>写入数据到csv文件：</h2><p>写入数据到csv文件，需要创建一个<code>writer</code>对象，主要用到两个方法。一个是<code>writerow</code>，这个是写入一行。一个是<code>writerows</code>，这个是写入多行。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">headers = [<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'classroom'</span>]</span><br><span class="line">values = [</span><br><span class="line">    (<span class="string">'zhiliao'</span>,<span class="number">18</span>,<span class="string">'111'</span>),</span><br><span class="line">    (<span class="string">'wena'</span>,<span class="number">20</span>,<span class="string">'222'</span>),</span><br><span class="line">    (<span class="string">'bbc'</span>,<span class="number">21</span>,<span class="string">'111'</span>)</span><br><span class="line">]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.csv'</span>,<span class="string">'w'</span>,newline=<span class="string">''</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    writer = csv.writer(fp)</span><br><span class="line">    writer.writerow(headers)</span><br><span class="line">    writer.writerows(values)</span><br></pre></td></tr></tbody></table></figure><p>也可以使用字典的方式把数据写入进去。这时候就需要使用<code>DictWriter</code>了。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">headers = [<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'classroom'</span>]</span><br><span class="line">values = [</span><br><span class="line">    {<span class="string">"name"</span>:<span class="string">'wenn'</span>,<span class="string">"age"</span>:<span class="number">20</span>,<span class="string">"classroom"</span>:<span class="string">'222'</span>},</span><br><span class="line">    {<span class="string">"name"</span>:<span class="string">'abc'</span>,<span class="string">"age"</span>:<span class="number">30</span>,<span class="string">"classroom"</span>:<span class="string">'333'</span>}</span><br><span class="line">]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.csv'</span>,<span class="string">'w'</span>,newline=<span class="string">''</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    writer = csv.DictWriter(fp,headers)</span><br><span class="line">    writer = csv.writeheader()</span><br><span class="line">    writer.writerow({<span class="string">'name'</span>:<span class="string">'zhiliao'</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"classroom"</span>:<span class="string">'111'</span>})</span><br><span class="line">    writer.writerows(values</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;csv文件处理&quot;&gt;&lt;a href=&quot;#csv文件处理&quot; class=&quot;headerlink&quot; title=&quot;csv文件处理&quot;&gt;&lt;/a&gt;csv文件处理&lt;/h1&gt;&lt;h2 id=&quot;读取csv文件：&quot;&gt;&lt;a href=&quot;#读取csv文件：&quot; class=&quot;headerlink&quot; title=&quot;读取csv文件：&quot;&gt;&lt;/a&gt;读取csv文件：&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; csv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&#39;stock.csv&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;r&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; fp:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reader = csv.reader(fp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    titles = next(reader)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; reader:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.cn/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.cn/tags/python/"/>
    
      <category term="python爬虫" scheme="http://philxling.cn/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>继承和多态</title>
    <link href="http://philxling.cn/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/"/>
    <id>http://philxling.cn/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/</id>
    <published>2020-04-10T15:15:56.000Z</published>
    <updated>2020-04-02T14:51:03.383Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承的构造和析构的循序:先父类再子类,然后子类析构父类析构</p><p>访问同名的成员变量需要加作用域其为:</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">Base(){</span><br><span class="line">a=<span class="number">100</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"父类同名函数"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a)</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"父类同名函数"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">}; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span><span class="keyword">public</span> Base{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A(){</span><br><span class="line">a=<span class="number">23</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"子类同名函数"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">protected</span> Base{</span><br><span class="line">}; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">private</span> Base{</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">A a1;</span><br><span class="line"><span class="built_in">cout</span><<a1.a<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><<a1.Base::a<<<span class="built_in">endl</span>;</span><br><span class="line">a1.fun();</span><br><span class="line">a1.Base::fun();</span><br><span class="line"><span class="comment">//若想访问到父类的同名成员函数加作用域 </span></span><br><span class="line">a1.Base::fun(<span class="number">1000</span>); </span><br><span class="line">    <span class="comment">//访问静态成员</span></span><br><span class="line">    <span class="comment">//子类::父类::静态变量;表示通过类名访问父类作用域下的静态变量</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>多继承</p><p>子类:继承方式 父类,继承方式 父类…</p><p>菱形继承问题</p><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191117222518708.png" alt="image-20191117222518708"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Base{</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Base{</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> A,<span class="keyword">public</span> B{</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">C c;</span><br><span class="line">c.age=<span class="number">100</span>;</span><br><span class="line">c.age=<span class="number">23</span>;</span><br><span class="line"><span class="built_in">cout</span><<c.age<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态的条件: 1 继承 2 子类覆写父类的方法 </p><p>使用 父类的引用指向子类的对象</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Annimal</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>{ <span class="comment">//虚函数实现多态</span></span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"动物在说话"</span><<<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span><span class="keyword">public</span> Annimal{</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"小猫在说话"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">}; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span><span class="keyword">public</span> Annimal{</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"小狗在说话"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSpeak</span><span class="params">(Annimal &annimal)</span></span>{</span><br><span class="line">annimal.speak();</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">Cat cat;</span><br><span class="line">doSpeak(cat);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>纯虚函数和抽象类</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>=<span class="number">0</span>;有了纯虚函数我们城为抽象类,无法实例化对象</span><br><span class="line">子类必须重写父类的方法;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractDrinking</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//煮水 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//冲泡</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//倒入杯中</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//加料 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeDrink</span><span class="params">()</span></span>{</span><br><span class="line">Boil();</span><br><span class="line">Brew();</span><br><span class="line">PourInCup();</span><br><span class="line">PutSomething();</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffee</span>:</span><span class="keyword">public</span> AbstractDrinking{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//煮水 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"煮水"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="comment">//冲泡</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"冲泡"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="comment">//倒入杯中</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"导入杯中"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="comment">//加料 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"加料"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">}; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tea</span>:</span><span class="keyword">public</span> AbstractDrinking{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//煮水 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"煮水"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="comment">//冲泡</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"冲泡茶叶"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="comment">//倒入杯中</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"导入杯中"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="comment">//加料 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"加料"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doWork</span><span class="params">(AbstractDrinking *<span class="built_in">abs</span>)</span></span>{</span><br><span class="line"><span class="built_in">abs</span>->makeDrink();</span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">abs</span>; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">doWork(<span class="keyword">new</span> Coffee);</span><br><span class="line">doWork(<span class="keyword">new</span> Tea);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>纯虚析构需要声明也需要实现</p><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191121160323393.png" alt="image-20191121160323393"></p><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191121160358800.png" alt="image-20191121160358800"></p><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191121160431500.png" alt="image-20191121160431500"></p><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191121160500114.png" alt="image-20191121160500114"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cpu</span>{</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">caculate</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoCard</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span>{</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span>=<span class="number">0</span>; </span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Computer(Cpu *cpu,VideoCard *videoCard,Memory *memory){</span><br><span class="line"><span class="keyword">this</span>->cpu=cpu;</span><br><span class="line"><span class="keyword">this</span>->videoCard=videoCard;</span><br><span class="line"><span class="keyword">this</span>->memory=memory;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Work</span><span class="params">()</span></span>{</span><br><span class="line">cpu->caculate();</span><br><span class="line">videoCard-><span class="built_in">display</span>();</span><br><span class="line">memory->storage();</span><br><span class="line">}</span><br><span class="line">~Computer(){</span><br><span class="line"><span class="keyword">if</span>(cpu!=<span class="literal">NULL</span>){</span><br><span class="line"><span class="keyword">delete</span> cpu;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(videoCard!=<span class="literal">NULL</span>){</span><br><span class="line"><span class="keyword">delete</span> videoCard;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(memory!=<span class="literal">NULL</span>){</span><br><span class="line"><span class="keyword">delete</span> memory;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Cpu *cpu;</span><br><span class="line">VideoCard *videoCard;</span><br><span class="line">Memory *memory;</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelCpu</span>:</span><span class="keyword">public</span> Cpu{</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">caculate</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"Intel的cpu"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelVideoCard</span>:</span><span class="keyword">public</span> VideoCard{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"Intel的显示器"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelMemory</span>:</span><span class="keyword">public</span> Memory{</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"Intel的内存"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoCpu</span>:</span><span class="keyword">public</span> Cpu{</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">caculate</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"Lenovo的cpu"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoVideoCard</span>:</span><span class="keyword">public</span> VideoCard{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"Lenovo的显示器"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoMemory</span>:</span><span class="keyword">public</span> Memory{</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"Lenovo的内存"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">Computer *com=<span class="keyword">new</span> Computer(<span class="keyword">new</span> IntelCpu,<span class="keyword">new</span> LenovoVideoCard,<span class="keyword">new</span> IntelMemory);</span><br><span class="line">com->Work();</span><br><span class="line"><span class="keyword">delete</span> com; </span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>文件操作</p><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191121164144152.png" alt="image-20191121164144152"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><fstream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>{</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.<span class="built_in">open</span>(<span class="string">"test.txt"</span>,ios::app);</span><br><span class="line">ofs<<<span class="string">"张三"</span><<<span class="built_in">endl</span>;</span><br><span class="line">ofs<<<span class="string">"李四"</span><<<span class="built_in">endl</span>;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>{</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(<span class="string">"test.txt"</span>,ios::in);</span><br><span class="line"><span class="keyword">if</span>(!ifs.is_open()){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"文件打开失败"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="comment">//四种方式读取</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>]={<span class="number">0</span>};</span><br><span class="line"><span class="keyword">while</span>(ifs>>buf){</span><br><span class="line"><span class="built_in">cout</span><<buf<<<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="keyword">char</span> buf2[<span class="number">1024</span>]={<span class="number">0</span>};</span><br><span class="line"><span class="keyword">while</span>(ifs.getline(buf2,<span class="keyword">sizeof</span>(buf2))){</span><br><span class="line"><span class="built_in">cout</span><<buf2<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="built_in">string</span> <span class="built_in">buffer</span>;</span><br><span class="line"><span class="keyword">while</span>(getline(ifs,<span class="built_in">buffer</span>)){</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">buffer</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//4单个读取</span></span><br><span class="line"> <span class="keyword">char</span> c;</span><br><span class="line"> <span class="keyword">while</span>(c=ifs.<span class="built_in">get</span>()!=EOF){</span><br><span class="line"> <span class="built_in">cout</span><<c<<<span class="built_in">endl</span>;</span><br><span class="line"> } </span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">write</span>();</span><br><span class="line"><span class="built_in">read</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>模板必须推导出数据类型才可以使用</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">add</span>(<span class="title">T</span> <span class="title">a</span>,<span class="title">T</span> <span class="title">b</span>){</span></span><br><span class="line"><span class="built_in">cout</span><<a+b<<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">add<<span class="keyword">int</span>>(<span class="number">23</span>,<span class="number">12</span>);<span class="comment">//显示</span></span><br><span class="line">add(<span class="number">12.2</span>,<span class="number">34.2</span>);<span class="comment">//自动类型推导</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>普通函数与函数模板的区别</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myadd01</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">myadd</span>(<span class="title">T</span> <span class="title">a</span>,<span class="title">T</span> <span class="title">b</span>){</span></span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">12</span>,b=<span class="number">23</span>;</span><br><span class="line"><span class="keyword">char</span> c=<span class="string">'a'</span>;</span><br><span class="line"><span class="built_in">cout</span><<myadd01(a,b)<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><<myadd01(a,c)<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><<myadd(a,b)<<<span class="built_in">endl</span>;<span class="comment">//函数模板自动类型推导,不会发生自动类型转换 </span></span><br><span class="line"><span class="built_in">cout</span><<myadd<<span class="keyword">int</span>>(a,c)<<<span class="built_in">endl</span>;<span class="comment">//不能类型转换,需要指定类型 </span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191205175241874.png" alt="image-20191205175241874"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过空模板参数调用函数模板</span></span><br><span class="line"><span class="comment">//函数模板也能发生函数重载</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">add</span>(<span class="title">T</span> <span class="title">a</span>,<span class="title">T</span> <span class="title">b</span>){</span></span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"函数模板1"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">add</span>(<span class="title">T</span> <span class="title">a</span>,<span class="title">T</span> <span class="title">b</span>,<span class="title">T</span> <span class="title">c</span>){</span></span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"函数模板2"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"普通函数"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">add(<span class="number">12</span>,<span class="number">30</span>);</span><br><span class="line">add<>(<span class="number">12</span>,<span class="number">30</span>);</span><br><span class="line">add(<span class="number">12</span>,<span class="number">30</span>,<span class="number">23</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>函数模板的类对象的对比</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="keyword">int</span> age,<span class="built_in">string</span> name){</span><br><span class="line"><span class="keyword">this</span>->age=age;</span><br><span class="line"><span class="keyword">this</span>->name=name;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">mycompare</span>(<span class="title">T</span> &<span class="title">a</span>,<span class="title">T</span> &<span class="title">b</span>){</span></span><br><span class="line"><span class="keyword">if</span>(a==b){</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">template</span><> <span class="keyword">bool</span> <span class="title">mycompare</span><span class="params">(Person &a,Person &b)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(a.age==b.age&&a.name==b.name){</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">12</span>,<span class="string">"java"</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">12</span>,<span class="string">"java"</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span><<mycompare(p1,p2)<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>类模板</p><p>语法</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class">类</span></span><br></pre></td></tr></tbody></table></figure><p>类模板与函数模板的区别</p><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191205183118841.png" alt="image-20191205183118841"></p><p>类模板中成员函数的创建时机是模板调用时才创建</p><p>类模板的对象作为函数参数</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><typeinfo></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(T1 name,T2 age){</span><br><span class="line"><span class="keyword">this</span>->name=name;</span><br><span class="line"><span class="keyword">this</span>->age=age;</span><br><span class="line">}</span><br><span class="line">T1 name;</span><br><span class="line">T2 age;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="keyword">this</span>->name<<<span class="string">" "</span><<<span class="keyword">this</span>->age<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="comment">//1 指定传入类型 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPerson</span><span class="params">(Person<<span class="built_in">string</span>,<span class="keyword">int</span>> &p)</span></span>{<span class="comment">//1 指定传入类型 </span></span><br><span class="line">p.showPerson();</span><br><span class="line">}</span><br><span class="line"><span class="comment">//2 参数模板化</span></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>> </span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">printPerson2</span>(<span class="title">Person</span><T1,T2> &<span class="title">p</span>){</span><span class="comment">//1 指定传入类型 </span></span><br><span class="line">p.showPerson();</span><br><span class="line">}</span><br><span class="line"><span class="comment">//3 整个类模板化</span></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span>  <span class="title">printPerson3</span>(<span class="title">T</span> &<span class="title">p</span>){</span></span><br><span class="line">p.showPerson();</span><br><span class="line"><span class="built_in">cout</span><<<span class="keyword">typeid</span>(T).name()<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{<span class="comment">//类模板的对象做函数的参数 </span></span><br><span class="line">Person<string,int> p1("java",12);</span><br><span class="line">printPerson(p1);</span><br><span class="line">printPerson2(p1);</span><br><span class="line">printPerson3(p1);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>类模板与继承</p><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191205205213805.png" alt="image-20191205205213805"></p><p>类模板成员函数类外实现</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(T1 name,T2 age);</span><br><span class="line">T1 name;</span><br><span class="line">T2 age;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>></span></span><br><span class="line"><span class="class"><span class="title">Person</span><T1,T2>:</span>:Person(T1 name,T2 age){<span class="comment">//类模板构造函数类外实现 </span></span><br><span class="line"><span class="keyword">this</span>->name=name;</span><br><span class="line"><span class="keyword">this</span>->age=age;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Person</span><T1,T2>:</span>:showPerson(){<span class="comment">//模板类成员函数类外实现 </span></span><br><span class="line"><span class="built_in">cout</span><<<span class="keyword">this</span>->name<<<span class="keyword">this</span>->age<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">Person<string,int> p1("c++",12);</span><br><span class="line">p1.showPerson();</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>类模板的的分文件编写</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//将类模板和实现放在同一个文件中并命名为.hpp的文件,然后再.cpp中包含.hpp文件.</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191205213840891.png" alt="image-20191205213840891"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"person.hpp"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">Person<string,int> p1("java",12);</span><br><span class="line">p1.showPerson();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>全局函数类外实现</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>>//声明模板 </span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span>;</span> <span class="comment">//声明类 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>>//声明这个函数 </span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">showPerson1</span>(<span class="title">Person</span><T1,T2> <span class="title">p</span>){</span></span><br><span class="line"><span class="built_in">cout</span><<p.name<<p.age<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">showPerson</span><span class="params">(Person<T1,T2> p)</span></span>{<span class="comment">//全局函数类内实现</span></span><br><span class="line"><span class="built_in">cout</span><<p.name<<p.age<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//加空参数列表 </span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">void</span> showPerson1<>(Person<T1,T2> p);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T1 name;</span><br><span class="line">T2 age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(T1 name,T2 age){</span><br><span class="line"><span class="keyword">this</span>->name=name;</span><br><span class="line"><span class="keyword">this</span>->age=age;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">Person<string,int> p1("c++",12);</span><br><span class="line">showPerson(p1);</span><br><span class="line">showPerson1(p1);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id><a href="#" class="headerlink" title></a></h3></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;p&gt;继承的构造和析构的循序:先父类再子类,然后子类析构父类析构&lt;/p&gt;
&lt;p&gt;访问同名的成员变量需要加作用域其为:&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://philxling.cn/categories/c/"/>
    
    
      <category term="c++" scheme="http://philxling.cn/tags/c/"/>
    
      <category term="面向对象" scheme="http://philxling.cn/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>json文件处理</title>
    <link href="http://philxling.cn/2020/04/10/python%E7%88%AC%E8%99%AB/11-json%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>http://philxling.cn/2020/04/10/python%E7%88%AC%E8%99%AB/11-json%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</id>
    <published>2020-04-09T19:00:12.000Z</published>
    <updated>2020-04-09T18:59:35.033Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="json文件处理"><a href="#json文件处理" class="headerlink" title="json文件处理"></a>json文件处理</h1><h2 id="什么是json："><a href="#什么是json：" class="headerlink" title="什么是json："></a>什么是json：</h2><p>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript (w3c制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。更多解释请见：<a href="https://baike.baidu.com/item/JSON/2462549?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/JSON/2462549?fr=aladdin</a></p><a id="more"></a><h2 id="JSON支持数据格式："><a href="#JSON支持数据格式：" class="headerlink" title="JSON支持数据格式："></a>JSON支持数据格式：</h2><ol><li>对象（字典）。使用花括号。</li><li>数组（列表）。使用方括号。</li><li>整形、浮点型、布尔类型还有null类型。</li><li>字符串类型（字符串必须要用双引号，不能用单引号）。</li></ol><p>多个数据之间使用逗号分开。<br><strong>注意：json本质上就是一个字符串。</strong></p><h2 id="字典和列表转JSON："><a href="#字典和列表转JSON：" class="headerlink" title="字典和列表转JSON："></a>字典和列表转JSON：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">books = [</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'钢铁是怎样练成的'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">9.8</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'红楼梦'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">9.9</span></span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">json_str = json.dumps(books,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">print(json_str)</span><br></pre></td></tr></tbody></table></figure><p>因为<code>json</code>在<code>dump</code>的时候，只能存放<code>ascii</code>的字符，因此会将中文进行转义，这时候我们可以使用<code>ensure_ascii=False</code>关闭这个特性。<br>在<code>Python</code>中。只有基本数据类型才能转换成<code>JSON</code>格式的字符串。也即：<code>int</code>、<code>float</code>、<code>str</code>、<code>list</code>、<code>dict</code>、<code>tuple</code>。</p><h3 id="将json数据直接dump到文件中："><a href="#将json数据直接dump到文件中：" class="headerlink" title="将json数据直接dump到文件中："></a>将json数据直接<code>dump</code>到文件中：</h3><p><code>json</code>模块中除了<code>dumps</code>函数，还有一个<code>dump</code>函数，这个函数可以传入一个文件指针，直接将字符串<code>dump</code>到文件中。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">books = [</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'钢铁是怎样练成的'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">9.8</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'红楼梦'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">9.9</span></span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.json'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json.dump(books,fp)</span><br></pre></td></tr></tbody></table></figure><h2 id="将一个json字符串load成Python对象："><a href="#将一个json字符串load成Python对象：" class="headerlink" title="将一个json字符串load成Python对象："></a>将一个json字符串load成Python对象：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">json_str = <span class="string">'[{"title": "钢铁是怎样练成的", "price": 9.8}, {"title": "红楼梦", "price": 9.9}]'</span></span><br><span class="line">books = json.loads(json_str,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(type(books))</span><br><span class="line">print(books)</span><br></pre></td></tr></tbody></table></figure><h3 id="直接从文件中读取json："><a href="#直接从文件中读取json：" class="headerlink" title="直接从文件中读取json："></a>直接从文件中读取json：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.json'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json_str = json.load(fp)</span><br><span class="line">    print(json_str)</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;json文件处理&quot;&gt;&lt;a href=&quot;#json文件处理&quot; class=&quot;headerlink&quot; title=&quot;json文件处理&quot;&gt;&lt;/a&gt;json文件处理&lt;/h1&gt;&lt;h2 id=&quot;什么是json：&quot;&gt;&lt;a href=&quot;#什么是json：&quot; class=&quot;headerlink&quot; title=&quot;什么是json：&quot;&gt;&lt;/a&gt;什么是json：&lt;/h2&gt;&lt;p&gt;JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript (w3c制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。更多解释请见：&lt;a href=&quot;https://baike.baidu.com/item/JSON/2462549?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://baike.baidu.com/item/JSON/2462549?fr=aladdin&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.cn/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.cn/tags/python/"/>
    
      <category term="python爬虫" scheme="http://philxling.cn/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB数据库</title>
    <link href="http://philxling.cn/2020/04/08/python%E7%88%AC%E8%99%AB/10-MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://philxling.cn/2020/04/08/python%E7%88%AC%E8%99%AB/10-MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-04-08T13:15:12.000Z</published>
    <updated>2020-04-08T13:16:52.804Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="MongoDB数据库"><a href="#MongoDB数据库" class="headerlink" title="MongoDB数据库"></a>MongoDB数据库</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>官方文档：<a href="http://www.mongoing.com/docs/" target="_blank" rel="noopener">http://www.mongoing.com/docs/</a></p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>MongoDB是一个面向文档的数据库<br> 举例：{“foo”:3, “greeting”:“Hello,world!”}<br> 区分大小写，且key唯一，不可重复，文档可嵌套</p><a id="more"></a><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合就是一组文档<br> 文档类似于关系型数据库里的行<br> 集合类似于关系型数据库里的表<br> 集合中的文档无需固定额结构（与关系型数据库的区别）</p><h3 id="集合的命名"><a href="#集合的命名" class="headerlink" title="集合的命名"></a>集合的命名</h3><ol><li>不能有空字符串（” “）</li><li>不能包含\0字符（空字符）</li><li>不能使用system.的前缀（系统保留）</li><li>建议不包含保留字 “$”</li><li>用 .  分割不懂命名空间的子集合（如：blog.users， blog.posts）</li></ol><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ol><li>多个文档组成集合，多个集合组成数据库</li><li>一个实例可以承载多个数据库</li><li>每个数据库都有独立的权限</li><li>保留的数据名称（admin,local,config）</li></ol><h2 id="MongoDB安装启动"><a href="#MongoDB安装启动" class="headerlink" title="MongoDB安装启动"></a>MongoDB安装启动</h2><p>下载mis包，安装在根目录下MongoDB文件夹里就OK，例如：D：\MongDB……。切记一开始安装不要选择附带安装compass图形工具，这个下载很慢可能直接卡死。</p><p>启动：<br> 配置数据路径<br> 在目录D:\MongoDB\Server\4.0的bin文件使用’Shift’+’右键’选择在此处打开cmd，然后再cmd中输入：monogod –dbpath D:\MongoDB\Server\4.0\data<br> 回车，来到NETWORK  [thread1] waiting for connections on port 27017<br> 此时，在bin里打开另一个cmd，输入mongo，回车，就OK啦<br> 可以使用 show databases 试一试</p><h3 id="使用命令行操作数据库（CRUD）"><a href="#使用命令行操作数据库（CRUD）" class="headerlink" title="使用命令行操作数据库（CRUD）"></a>使用命令行操作数据库（CRUD）</h3><p>新增数据（Create）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入数据库，如果没有该数据库，会自动创建</span></span><br><span class="line">use students； </span><br><span class="line"><span class="comment"># 新增数据</span></span><br><span class="line">stu = {</span><br><span class="line">  name:<span class="string">'Jhon'</span>,</span><br><span class="line">  age:21}</span><br><span class="line"><span class="comment"># 插入数据到数据库</span></span><br><span class="line">db.students.insert(stu)</span><br></pre></td></tr></tbody></table></figure><p>查询数据（Read）</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查询<span class="selector-tag">students</span>中的所有数据</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.find</span>()</span><br><span class="line"># 查询<span class="selector-tag">students</span>中的一条数据</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.findOne</span>()</span><br></pre></td></tr></tbody></table></figure><p>修改数据（Update）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要先查询这条数据</span></span><br><span class="line">s = db.students.findOne()</span><br><span class="line"><span class="comment"># 修改数据=替换数据，替换后的数据没有年龄</span></span><br><span class="line">db.students.update({name: <span class="string">'Jhon'</span>}, {name: <span class="string">'JhonC'</span>})</span><br></pre></td></tr></tbody></table></figure><p>删除数据（Delete）</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 删除该属性的数据</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.remove</span>({<span class="attribute">name</span>: <span class="string">'JhonC'</span>})</span><br><span class="line"># 删除<span class="selector-tag">students</span>中的所有数据</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.students</span><span class="selector-class">.remove</span>(())</span><br></pre></td></tr></tbody></table></figure><p>练习：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 新建并进入数据库</span></span><br><span class="line">use students</span><br><span class="line"><span class="meta"># 查看当前数据库</span></span><br><span class="line">db.log</span><br><span class="line"><span class="meta">#插入多条数据</span></span><br><span class="line">db.students.insertMany(</span><br><span class="line">    [<span class="meta"></span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"bob"</span>, age:16, sex: <span class="meta-string">"male"</span>, grade:95},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"ahn"</span>, age:18, sex: <span class="meta-string">"female"</span>, grade:45},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"xi"</span>, age:15, sex: <span class="meta-string">"male"</span>, grade:75},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"bob1"</span>, age:16, sex: <span class="meta-string">"male"</span>, grade:95},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"ahn1"</span>, age:18, sex: <span class="meta-string">"male"</span>, grade:45},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"xi1"</span>, age:15, sex: <span class="meta-string">"female"</span>, grade:55},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"bob2"</span>, age:16, sex: <span class="meta-string">"female"</span>, grade:95},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"ahn2"</span>, age:18, sex: <span class="meta-string">"male"</span>, grade:60},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"xi2"</span>, age:15, sex: <span class="meta-string">"male"</span>, grade:75},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"bob3"</span>, age:16, sex: <span class="meta-string">"male"</span>, grade:95},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"ahn3"</span>, age:18, sex: <span class="meta-string">"female"</span>, grade:45},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"xi3"</span>, age:15, sex: <span class="meta-string">"male"</span>, grade:85},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"bob4"</span>, age:16, sex: <span class="meta-string">"female"</span>, grade:95},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"ahn4"</span>, age:18, sex: <span class="meta-string">"male"</span>, grade:45},</span></span><br><span class="line"><span class="meta">        { name:<span class="meta-string">"xi4"</span>, age:15, sex: <span class="meta-string">"male"</span>, grade:75}</span></span><br><span class="line"><span class="meta">    </span>]</span><br><span class="line">)</span><br><span class="line"><span class="meta"># 查看所有数据</span></span><br><span class="line">db.students.find()</span><br><span class="line"><span class="meta"># 查看数据数量</span></span><br><span class="line">db.students.count()</span><br><span class="line"><span class="meta"># cls 清屏</span></span><br><span class="line"><span class="meta"># 查询所有男生数据</span></span><br><span class="line">db.students.find({sex: <span class="string">'male'</span>})</span><br><span class="line"><span class="meta"># 查询所有及格学生信息</span></span><br><span class="line">db.students.find({grade:{<span class="string">'$gte'</span>:<span class="number">60</span>}})</span><br><span class="line"><span class="meta"># 查询所有18岁男生和16岁女生的数据</span></span><br><span class="line">db.students.find({<span class="string">'$or'</span>:[{sex:<span class="string">'male'</span>, age:<span class="number">18</span>}, {sex: <span class="string">'female'</span>, age:<span class="number">16</span>}]})</span><br><span class="line"><span class="meta"># 按照学生的年龄进行排序（1代表升序，-1代表降序）</span></span><br><span class="line">db.students.find().sort({age: <span class="number">1</span>})</span><br><span class="line"><span class="meta"># 给所有学生都加一个地址=china的字段属性（修改器操作）</span></span><br><span class="line">db.students.update({}, {<span class="string">'$set'</span>:{adress:<span class="string">'china'</span>}}, {multi:<span class="literal">true</span>})</span><br><span class="line"><span class="meta"># 给所有女学生都加一岁（修改器操作）</span></span><br><span class="line">db.students.update({sex:<span class="string">'female'</span>}, {<span class="string">'$inc'</span>:{age:<span class="number">1</span>}}, {multi: <span class="literal">true</span>})</span><br></pre></td></tr></tbody></table></figure><h2 id="使用Python连接MongoDB"><a href="#使用Python连接MongoDB" class="headerlink" title="使用Python连接MongoDB"></a>使用Python连接MongoDB</h2><p>手动启动MongoDB<br> 在MongoDB的bin目录打开cmd 输入 monogod –dbpath D:\MongoDB\Server\4.0\data</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立客户端连接的三种方法</span></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">client = MongoClient()</span><br><span class="line"><span class="comment"># client2 = MongoClient('localhost', 27017)</span></span><br><span class="line"><span class="comment"># client3 = MongoClient('mongodb://localhost:27017')</span></span><br><span class="line"><span class="comment"># 显示数据库</span></span><br><span class="line">dbs = client.list_database_names()</span><br><span class="line">print(dbs)</span><br><span class="line"><span class="comment"># 进入某个数据库</span></span><br><span class="line">db = client.blog</span><br></pre></td></tr></tbody></table></figure><h3 id="curd完整示例代码"><a href="#curd完整示例代码" class="headerlink" title="curd完整示例代码"></a>curd完整示例代码</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">from</span> bson.objectid <span class="keyword">import</span> ObjectId</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMongo</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.client = MongoClient()</span><br><span class="line">        self.db = self.client[<span class="string">'students'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''新增数据'''</span></span><br><span class="line">        post ={</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'ben'</span>,</span><br><span class="line">            <span class="string">'age'</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="string">'sex'</span>: <span class="string">"male"</span>,</span><br><span class="line">            <span class="string">'grade'</span>: <span class="number">80</span>,</span><br><span class="line">            <span class="string">'adress'</span>: <span class="string">"china"</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> self.db.students.insert_one(post)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_many</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''新增多条数据'''</span></span><br><span class="line">        infos = [</span><br><span class="line">            {<span class="string">'name'</span>: <span class="string">'ben'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">"male"</span>, <span class="string">'grade'</span>: <span class="number">80</span>, <span class="string">'adress'</span>: <span class="string">"china"</span>},</span><br><span class="line">            {<span class="string">'name'</span>: <span class="string">'sum'</span>, <span class="string">'age'</span>: <span class="number">19</span>, <span class="string">'sex'</span>: <span class="string">"male"</span>, <span class="string">'grade'</span>: <span class="number">75</span>, <span class="string">'adress'</span>: <span class="string">"china"</span>},</span><br><span class="line">            {<span class="string">'name'</span>: <span class="string">'lily'</span>, <span class="string">'age'</span>: <span class="number">16</span>, <span class="string">'sex'</span>: <span class="string">"female"</span>, <span class="string">'grade'</span>: <span class="number">90</span>, <span class="string">'adress'</span>: <span class="string">"china"</span>},</span><br><span class="line">            {<span class="string">'name'</span>: <span class="string">'teddy'</span>, <span class="string">'age'</span>: <span class="number">19</span>, <span class="string">'sex'</span>: <span class="string">"male"</span>, <span class="string">'grade'</span>: <span class="number">65</span>, <span class="string">'adress'</span>: <span class="string">"china"</span>},</span><br><span class="line">            {<span class="string">'name'</span>: <span class="string">'fluence'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'sex'</span>: <span class="string">"female"</span>, <span class="string">'grade'</span>: <span class="number">80</span>, <span class="string">'adress'</span>: <span class="string">"china"</span>}</span><br><span class="line">            ]</span><br><span class="line">        <span class="keyword">return</span> self.db.students.insert_many(infos)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''查询一条数据'''</span></span><br><span class="line">        <span class="keyword">return</span> self.db.students.find_one()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_more</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''查询多条数据'''</span></span><br><span class="line">        <span class="keyword">return</span> self.db.students.find({<span class="string">'age'</span>: <span class="number">18</span>})</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_one_from_oid</span><span class="params">(self, oid)</span>:</span></span><br><span class="line">        <span class="string">'''查询指定ID的数据'''</span></span><br><span class="line">        obj = ObjectId(oid)</span><br><span class="line">        <span class="keyword">return</span> self.db.students.find_one({<span class="string">'_id'</span>: obj})</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''修改一条数据'''</span></span><br><span class="line">        <span class="keyword">return</span> self.db.students.update_one({<span class="string">'age'</span>: <span class="number">20</span>}, {<span class="string">'$inc'</span>: {<span class="string">'x'</span>: <span class="number">10</span>}})</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_many</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''修改多条数据'''</span></span><br><span class="line">        <span class="keyword">return</span> self.db.students.update_many({}, {<span class="string">'$inc'</span>: {<span class="string">'age'</span>: <span class="number">5</span>}})</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dalete_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''删除一条数据'''</span></span><br><span class="line">        <span class="keyword">return</span> self.db.students.delete_one({<span class="string">'name'</span>: <span class="string">'ben'</span>})</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_many</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''删除多条数据'''</span></span><br><span class="line">        <span class="keyword">return</span> self.db.students.delete_many({<span class="string">'age'</span>: <span class="number">24</span>})</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    obj = TestMongo()</span><br><span class="line">    <span class="comment"># rest = obj.add_one()</span></span><br><span class="line">    <span class="comment"># print(rest)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># rest = obj.add_many()</span></span><br><span class="line">    <span class="comment"># print(rest)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># rest = obj.get_one()</span></span><br><span class="line">    <span class="comment"># print(rest)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># rest = obj.get_more()</span></span><br><span class="line">    <span class="comment"># for i in rest:</span></span><br><span class="line">    <span class="comment">#     print(i['_id'])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># rest = obj.get_one_from_oid('5c68b5cb5a49891b40b8a18e')</span></span><br><span class="line">    <span class="comment"># print(rest)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># rest = obj.update_one()</span></span><br><span class="line">    <span class="comment"># print(rest)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># rest = obj.update_many()</span></span><br><span class="line">    <span class="comment"># print(rest)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># rest = obj.delete_one()</span></span><br><span class="line">    <span class="comment"># print(rest.delete_count)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># rest = obj.delete_many()</span></span><br><span class="line">    <span class="comment"># print(rest.delete_count)</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MongoDB数据库&quot;&gt;&lt;a href=&quot;#MongoDB数据库&quot; class=&quot;headerlink&quot; title=&quot;MongoDB数据库&quot;&gt;&lt;/a&gt;MongoDB数据库&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;官方文档：&lt;a href=&quot;http://www.mongoing.com/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.mongoing.com/docs/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;文档&quot;&gt;&lt;a href=&quot;#文档&quot; class=&quot;headerlink&quot; title=&quot;文档&quot;&gt;&lt;/a&gt;文档&lt;/h3&gt;&lt;p&gt;MongoDB是一个面向文档的数据库&lt;br&gt; 举例：{“foo”:3, “greeting”:“Hello,world!”}&lt;br&gt; 区分大小写，且key唯一，不可重复，文档可嵌套&lt;/p&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.cn/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.cn/tags/python/"/>
    
      <category term="python爬虫" scheme="http://philxling.cn/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库</title>
    <link href="http://philxling.cn/2020/04/08/python%E7%88%AC%E8%99%AB/9-MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://philxling.cn/2020/04/08/python%E7%88%AC%E8%99%AB/9-MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-04-07T16:00:00.000Z</published>
    <updated>2020-04-07T14:47:39.792Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h1><h2 id="安装mysql："><a href="#安装mysql：" class="headerlink" title="安装mysql："></a>安装mysql：</h2><ol><li>在官网：<a href="https://dev.mysql.com/downloads/windows/installer/5.7.html" target="_blank" rel="noopener">https://dev.mysql.com/downloads/windows/installer/5.7.html</a></li><li>如果提示没有<code>.NET Framework</code>框架。那么就在提示框中找到下载链接，下载一个就可以了。</li><li>如果提示没有<code>Microsoft Virtual C++ x64(x86)</code>，那么百度或者谷歌这个软件安装即可。</li></ol><a id="more"></a><p>​    4. 如果没有找到。那么私聊我。</p><h2 id="navicat："><a href="#navicat：" class="headerlink" title="navicat："></a>navicat：</h2><p>navicat是一个操作mysql数据库非常方便的软件。使用他操作数据库，就跟使用excel操作数据是一样的。</p><h2 id="安装驱动程序："><a href="#安装驱动程序：" class="headerlink" title="安装驱动程序："></a>安装驱动程序：</h2><p>Python要想操作MySQL。必须要有一个中间件，或者叫做驱动程序。驱动程序有很多。比如有<code>mysqldb</code>、<code>mysqlclient</code>、<code>pymysql</code>等。在这里，我们选择用<code>pymysql</code>。安装方式也是非常简单，通过命令<code>pip install pymysql</code>即可安装。</p><h2 id="数据库连接："><a href="#数据库连接：" class="headerlink" title="数据库连接："></a>数据库连接：</h2><p>数据库连接之前。首先先确认以下工作完成，这里我们以一个<code>pymysql_test</code>数据库.以下将介绍连接<code>mysql</code>的示例代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(</span><br><span class="line">    host=<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    user=<span class="string">'root'</span>,</span><br><span class="line">    password=<span class="string">'root'</span>,</span><br><span class="line">    database=<span class="string">'pymysql_test'</span>,</span><br><span class="line">    port=<span class="number">3306</span></span><br><span class="line">)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">cursor.execute(<span class="string">"select 1"</span>)</span><br><span class="line">data = cursor.fetchone()</span><br><span class="line">print(data)</span><br><span class="line">db.close()</span><br></pre></td></tr></tbody></table></figure><h2 id="插入数据："><a href="#插入数据：" class="headerlink" title="插入数据："></a>插入数据：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(</span><br><span class="line">    host=<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    user=<span class="string">'root'</span>,</span><br><span class="line">    password=<span class="string">'root'</span>,</span><br><span class="line">    database=<span class="string">'pymysql_test'</span>,</span><br><span class="line">    port=<span class="number">3306</span></span><br><span class="line">)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">insert into user(</span></span><br><span class="line"><span class="string">    id,username,gender,age,password</span></span><br><span class="line"><span class="string">  ) </span></span><br><span class="line"><span class="string">  values(null,'abc',1,18,'111111');</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.commit()</span><br><span class="line">db.close()</span><br></pre></td></tr></tbody></table></figure><p>如果在数据还不能保证的情况下，可以使用以下方式来插入数据：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">insert into user(</span></span><br><span class="line"><span class="string">    id,username,gender,age,password</span></span><br><span class="line"><span class="string">  ) </span></span><br><span class="line"><span class="string">  values(null,%s,%s,%s,%s);</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql,(<span class="string">'spider'</span>,<span class="number">1</span>,<span class="number">20</span>,<span class="string">'222222'</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="查找数据："><a href="#查找数据：" class="headerlink" title="查找数据："></a>查找数据：</h2><p>使用<code>pymysql</code>查询数据。可以使用<code>fetch*</code>方法。</p><ol><li><code>fetchone()</code>：这个方法每次之获取一条数据。</li><li><code>fetchall()</code>：这个方法接收全部的返回结果。</li><li><code>fetchmany(size)</code>：可以获取指定条数的数据。<br>示例代码如下：</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">select * from user</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    result = cursor.fetchone()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(result)</span><br><span class="line">db.close()</span><br></pre></td></tr></tbody></table></figure><p>或者是直接使用<code>fetchall</code>，一次性可以把所有满足条件的数据都取出来：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">select * from user</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">results = cursor.fetchall()</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br><span class="line">db.close()</span><br></pre></td></tr></tbody></table></figure><p>或者是使用<code>fetchmany</code>，指定获取多少条数据：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">select * from user</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">results = cursor.fetchmany(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br><span class="line">db.close()</span><br></pre></td></tr></tbody></table></figure><h2 id="删除数据："><a href="#删除数据：" class="headerlink" title="删除数据："></a>删除数据：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">delete from user where id=1</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.commit()</span><br><span class="line">db.close()</span><br></pre></td></tr></tbody></table></figure><h2 id="更新数据："><a href="#更新数据：" class="headerlink" title="更新数据："></a>更新数据：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">conn = pymysql.connect(host=<span class="string">'localhost'</span>,user=<span class="string">'root'</span>,password=<span class="string">'root'</span>,database=<span class="string">'pymysql_demo'</span>,port=<span class="number">3306</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">sql = <span class="string">"""</span></span><br><span class="line"><span class="string">update user set username='aaa' where id=1</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">conn.close()</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySQL数据库&quot;&gt;&lt;a href=&quot;#MySQL数据库&quot; class=&quot;headerlink&quot; title=&quot;MySQL数据库&quot;&gt;&lt;/a&gt;MySQL数据库&lt;/h1&gt;&lt;h2 id=&quot;安装mysql：&quot;&gt;&lt;a href=&quot;#安装mysql：&quot; class=&quot;headerlink&quot; title=&quot;安装mysql：&quot;&gt;&lt;/a&gt;安装mysql：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在官网：&lt;a href=&quot;https://dev.mysql.com/downloads/windows/installer/5.7.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://dev.mysql.com/downloads/windows/installer/5.7.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;如果提示没有&lt;code&gt;.NET Framework&lt;/code&gt;框架。那么就在提示框中找到下载链接，下载一个就可以了。&lt;/li&gt;
&lt;li&gt;如果提示没有&lt;code&gt;Microsoft Virtual C++ x64(x86)&lt;/code&gt;，那么百度或者谷歌这个软件安装即可。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.cn/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.cn/tags/python/"/>
    
      <category term="mysql" scheme="http://philxling.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>excel文件处理</title>
    <link href="http://philxling.cn/2020/04/06/python%E7%88%AC%E8%99%AB/8-excel%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>http://philxling.cn/2020/04/06/python%E7%88%AC%E8%99%AB/8-excel%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</id>
    <published>2020-04-06T12:32:12.000Z</published>
    <updated>2020-04-06T16:31:06.503Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="excel文件处理"><a href="#excel文件处理" class="headerlink" title="excel文件处理"></a>excel文件处理</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ol><li>pandas依赖处理Excel的xlrd模块，所以我们需要提前安装这个，安装命令是：pip install xlrd</li><li>安装pandas模块还需要一定的编码环境，所以我们自己在安装的时候，确保你的电脑有这些环境：Net.4 、VC-Compiler以及winsdk_web，如果大家没有这些软件~可以咨询我们的辅导员索要相关安装工具。</li><li>步骤1和2 准备好了之后，我们就可以开始安装pandas了，安装命令是：pip install pandas</li></ol><a id="more"></a><h2 id="pandas操作Excel表单"><a href="#pandas操作Excel表单" class="headerlink" title="pandas操作Excel表单"></a>pandas操作Excel表单</h2><p> 数据准备，有一个Excel文件：lemon.xlsx有两个表单，表单名分别为：Python 以及student，</p><p>Python的表单数据如下所示：</p><p><img src="/2020/04/06/python%E7%88%AC%E8%99%AB/8-excel%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/pandas-01.png" alt></p><p>student的表单数据如下所示：</p><p><img src="/2020/04/06/python%E7%88%AC%E8%99%AB/8-excel%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/pandas-02.png" alt></p><p> 1：在利用pandas模块进行操作前，可以先引入这个模块，如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import  pandas  as pd</span><br></pre></td></tr></tbody></table></figure><p>   2:读取Excel文件的两种方式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#方法一：默认读取第一个表单df=pd.read_excel('lemon.xlsx')#这个会直接默认读取到这个Excel的第一个表单</span><br><span class="line">data=df.head()#默认读取前5行的数据</span><br><span class="line">print("获取到所有的值:\n{0}".format(data))#格式化输出</span><br></pre></td></tr></tbody></table></figure><p>得到的结果是一个二维矩阵，如下所示：</p><p><img src="/2020/04/06/python%E7%88%AC%E8%99%AB/8-excel%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/pandas-03.png" alt></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#方法二：通过指定表单名的方式来读取</span><br><span class="line">df=pd.read_excel('lemon.xlsx',sheet_name='student')#可以通过sheet_name来指定读取的表单</span><br><span class="line">data=df.head()#默认读取前5行的数据</span><br><span class="line">print("获取到所有的值:\n{0}".format(data))#格式化输出</span><br></pre></td></tr></tbody></table></figure><p>得到的结果如下所示，也是一个二维矩阵：<br><img src="/2020/04/06/python%E7%88%AC%E8%99%AB/8-excel%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/pandas-04.png" alt></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">方法三：通过表单索引来指定要访问的表单，0表示第一个表单</span></span><br><span class="line"><span class="meta">#</span><span class="bash">也可以采用表单名和索引的双重方式来定位表单</span></span><br><span class="line"><span class="meta">#</span><span class="bash">也可以同时定位多个表单，方式都罗列如下所示</span></span><br><span class="line">df=pd.read_excel('lemon.xlsx',sheet_name=['python','student'])#可以通过表单名同时指定多个</span><br><span class="line"><span class="meta">#</span><span class="bash"> df=pd.read_excel(<span class="string">'lemon.xlsx'</span>,sheet_name=0)<span class="comment">#可以通过表单索引来指定读取的表单</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> df=pd.read_excel(<span class="string">'lemon.xlsx'</span>,sheet_name=[<span class="string">'python'</span>,1])<span class="comment">#可以混合的方式来指定</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> df=pd.read_excel(<span class="string">'lemon.xlsx'</span>,sheet_name=[1,2])<span class="comment">#可以通过索引 同时指定多个</span></span></span><br><span class="line">data=df.values#获取所有的数据，注意这里不能用head()方法哦~</span><br><span class="line">print("获取到所有的值:\n{0}".format(data))#格式化输出</span><br></pre></td></tr></tbody></table></figure><h2 id="pandas操作Excel的行列"><a href="#pandas操作Excel的行列" class="headerlink" title="pandas操作Excel的行列"></a>pandas操作Excel的行列</h2><p><strong>1：读取指定的单行，数据会存在列表里面</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#1：读取指定行df=pd.read_excel('lemon.xlsx')#这个会直接默认读取到这个Excel的第一个表单</span><br><span class="line">data=df.ix[0].values#0表示第一行 这里读取数据并不包含表头，要注意哦！</span><br><span class="line">print("读取指定行的数据：\n{0}".format(data))</span><br></pre></td></tr></tbody></table></figure><p>得到的结果如下所示:</p><p><img src="/2020/04/06/python%E7%88%AC%E8%99%AB/8-excel%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/pandas-05.png" alt></p><p><strong>2：读取指定的多行，数据会存在嵌套的列表里面：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">data=df.ix[[1,2]].values#读取指定多行的话，就要在ix[]里面嵌套列表指定行数</span><br><span class="line">print("读取指定行的数据：\n{0}".format(data))</span><br></pre></td></tr></tbody></table></figure><p><strong>3：读取指定的行列：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">data=df.ix[1,2]#读取第一行第二列的值，这里不需要嵌套列表</span><br><span class="line">print("读取指定行的数据：\n{0}".format(data))</span><br></pre></td></tr></tbody></table></figure><p><strong>4：读取指定的多行多列值：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">data=df.ix[[1,2],['title','data']].values#读取第一行第二行的title以及data列的值，这里需要嵌套列表</span><br><span class="line">print("读取指定行的数据：\n{0}".format(data))</span><br></pre></td></tr></tbody></table></figure><p><strong>5：获取所有行的指定列</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">data=df.ix[:,['title','data']].values#读所有行的title以及data列的值，这里需要嵌套列表</span><br><span class="line">print("读取指定行的数据：\n{0}".format(data))</span><br></pre></td></tr></tbody></table></figure><p><strong>6：获取行号并打印输出</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">print("输出行号列表",df.index.values)</span><br><span class="line"></span><br><span class="line">输出结果是：</span><br><span class="line">输出行号列表 [0 1 2 3]</span><br></pre></td></tr></tbody></table></figure><p><strong>7：获取列名并打印输出</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">print("输出列标题",df.columns.values)</span><br><span class="line"></span><br><span class="line">运行结果如下所示：</span><br><span class="line">输出列标题 ['case_id' 'title' 'data']</span><br></pre></td></tr></tbody></table></figure><p><strong>8：获取指定行数的值：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">print("输出值",df.sample(3).values)#这个方法类似于head()方法以及df.values方法</span><br><span class="line"></span><br><span class="line">输出值</span><br><span class="line"> [[2 '输入错误的密码' '{"mobilephone":"18688773467","pwd":"12345678"}']</span><br><span class="line"> [3 '正常充值' '{"mobilephone":"18688773467","amount":"1000"}']</span><br><span class="line"> [1 '正常登录' '{"mobilephone":"18688773467","pwd":"123456"}']]</span><br></pre></td></tr></tbody></table></figure><p><strong>9：获取指定列的值：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">print("输出值\n",df['data'].values)</span><br></pre></td></tr></tbody></table></figure><h2 id="pandas处理Excel数据成为字典"><a href="#pandas处理Excel数据成为字典" class="headerlink" title="pandas处理Excel数据成为字典"></a>pandas处理Excel数据成为字典</h2><p> 有如下的数据，处理成列表嵌套字典，且字典的key为表头名。</p><h2 id><a href="#" class="headerlink" title></a><img src="8-excel%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86//pandas-06.png" alt></h2><p>实现的代码如下所示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df=pd.read_excel('lemon.xlsx')</span><br><span class="line">test_data=[]</span><br><span class="line">for i in df.index.values:#获取行号的索引，并对其进行遍历：</span><br><span class="line">    #根据i来获取每一行指定的数据 并利用to_dict转成字典</span><br><span class="line">    row_data=df.ix[i,['case_id','module','title','http_method','url','data','expected']].to_dict()</span><br><span class="line">    test_data.append(row_data)</span><br><span class="line">print("最终获取到的数据是：{0}".format(test_data))</span><br></pre></td></tr></tbody></table></figure><p>最后得到的结果是：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">最终获取到的数据是：</span><br><span class="line">[{'title': '正常登录', 'case_id': 1, 'data': '{"mobilephone":"18688773467","pwd":"123456"}'}, </span><br><span class="line">{'title': '输入错误的密码', 'case_id': 2, 'data': '{"mobilephone":"18688773467","pwd":"12345678"}'}, </span><br><span class="line">{'title': '正常充值', 'case_id': 3, 'data': '{"mobilephone":"18688773467","amount":"1000"}'}, </span><br><span class="line">{'title': '充值输入负数', 'case_id': 4, 'data': '{"mobilephone":"18688773467","amount":"-100"}'}]</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;excel文件处理&quot;&gt;&lt;a href=&quot;#excel文件处理&quot; class=&quot;headerlink&quot; title=&quot;excel文件处理&quot;&gt;&lt;/a&gt;excel文件处理&lt;/h1&gt;&lt;h2 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安装环境&quot;&gt;&lt;/a&gt;安装环境&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;pandas依赖处理Excel的xlrd模块，所以我们需要提前安装这个，安装命令是：pip install xlrd&lt;/li&gt;
&lt;li&gt;安装pandas模块还需要一定的编码环境，所以我们自己在安装的时候，确保你的电脑有这些环境：Net.4 、VC-Compiler以及winsdk_web，如果大家没有这些软件~可以咨询我们的辅导员索要相关安装工具。&lt;/li&gt;
&lt;li&gt;步骤1和2 准备好了之后，我们就可以开始安装pandas了，安装命令是：pip install pandas&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.cn/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.cn/tags/python/"/>
    
      <category term="python爬虫" scheme="http://philxling.cn/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>运算符重载</title>
    <link href="http://philxling.cn/2020/04/05/c++/3-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <id>http://philxling.cn/2020/04/05/c++/3-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</id>
    <published>2020-04-05T15:11:21.000Z</published>
    <updated>2020-04-02T14:50:45.137Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>运算符重载</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//加号运算符重载</span></span><br><span class="line"><span class="comment">//全局函数重载加号</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="comment">//Person operator+(Person &p){//成员函数的本质 </span></span><br><span class="line"><span class="comment">//Person temp;</span></span><br><span class="line"><span class="comment">//temp.a=p.a+this->a;</span></span><br><span class="line"><span class="comment">//temp.b=p.b+this->b;</span></span><br><span class="line"><span class="comment">//return temp;</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">Person <span class="keyword">operator</span>+(Person &p1,Person &p2){</span><br><span class="line">Person temp;</span><br><span class="line">temp.a=p1.a+p2.a;</span><br><span class="line">temp.b=p1.b+p2.b;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">Person p1;</span><br><span class="line">Person p2;</span><br><span class="line">p2.a=<span class="number">12</span>;</span><br><span class="line">p2.b=<span class="number">23</span>;</span><br><span class="line">p1.a=<span class="number">10</span>;</span><br><span class="line">p1.b=<span class="number">10</span>;</span><br><span class="line">Person p3=p1+p2;</span><br><span class="line"><span class="built_in">cout</span><<p3.a<<<span class="string">"------------"</span><<p3.b<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>左移运算符重载</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">friend</span> ostream & <span class="keyword">operator</span><<(ostream &<span class="built_in">cout</span>,Person &p);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="keyword">int</span> a,<span class="keyword">int</span> b){</span><br><span class="line"><span class="keyword">this</span>->a=a;</span><br><span class="line"><span class="keyword">this</span>->b=b;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">ostream & <span class="keyword">operator</span><<(ostream &<span class="built_in">cout</span>,Person &p){</span><br><span class="line"><span class="built_in">cout</span><<p.a<<<span class="string">"-----------"</span><<p.b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">12</span>,<span class="number">23</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span><<p1<<<span class="built_in">endl</span>;<span class="comment">//直接输出对象</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>递增运算符重载</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自增运算符重载 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span>{</span></span><br><span class="line"><span class="keyword">friend</span> ostream & <span class="keyword">operator</span><<(ostream &<span class="built_in">cout</span>,MyInteger Integer);<span class="comment">//为什么不传引用 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MyInteger(){</span><br><span class="line">num=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">MyInteger& <span class="keyword">operator</span>++(){<span class="comment">//前置++</span></span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">MyInteger <span class="keyword">operator</span>++(<span class="keyword">int</span>){<span class="comment">//后置++</span></span><br><span class="line">MyInteger temp=*<span class="keyword">this</span>;</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line">}; </span><br><span class="line">ostream & <span class="keyword">operator</span><<(ostream &<span class="built_in">cout</span>,MyInteger Integer){</span><br><span class="line"><span class="built_in">cout</span><<Integer.num;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//重载++运算符</span></span><br><span class="line"> <span class="comment">//前置++,后置++;</span></span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"> MyInteger myint;</span><br><span class="line"><span class="built_in">cout</span><<myint++<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><<myint<<<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"> }</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">MyInteger num;</span><br><span class="line"><span class="built_in">cout</span><<num<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><<++num<<<span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">cout</span><<num<<<span class="built_in">endl</span>;</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>赋值运算符重载</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> *a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="keyword">int</span> age){</span><br><span class="line">a=<span class="keyword">new</span> <span class="keyword">int</span>(age);</span><br><span class="line">}</span><br><span class="line">~Person(){</span><br><span class="line"><span class="keyword">if</span>(a!=<span class="literal">NULL</span>){</span><br><span class="line"><span class="keyword">delete</span>(a);</span><br><span class="line">a=<span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">Person & <span class="keyword">operator</span>=(Person &p){</span><br><span class="line"><span class="keyword">if</span>(a!=<span class="literal">NULL</span>){</span><br><span class="line"><span class="keyword">delete</span>(a);</span><br><span class="line">} </span><br><span class="line">a=<span class="keyword">new</span> <span class="keyword">int</span>(*p.a);<span class="comment">//深拷贝 </span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">} </span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">p3=p2=p1;</span><br><span class="line"><span class="built_in">cout</span><< *p2.a<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><< *p3.a<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>关系运算符重载</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="keyword">int</span> age,<span class="built_in">string</span> name){</span><br><span class="line"><span class="keyword">this</span>->age=age;</span><br><span class="line"><span class="keyword">this</span>->name=name;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(Person &p){</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>->age==p.age&&<span class="keyword">this</span>->name==p.name){</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">12</span>,<span class="string">"java"</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">12</span>,<span class="string">"java"</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(p1==p2){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"p1=p2"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"p1!=p2"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>仿函数</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="built_in">string</span> <span class="built_in">text</span>)</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">text</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">Person p1;</span><br><span class="line">p1(<span class="string">"Hello world"</span>);</span><br><span class="line">    Person()(<span class="string">"123"</span>);<span class="comment">//匿名对象 </span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;运算符重载&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://philxling.cn/categories/c/"/>
    
    
      <category term="c++" scheme="http://philxling.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>mysql服务消失问题</title>
    <link href="http://philxling.cn/2020/04/05/problem/mysql%E6%9C%8D%E5%8A%A1%E6%B6%88%E5%A4%B1%E9%97%AE%E9%A2%98/"/>
    <id>http://philxling.cn/2020/04/05/problem/mysql%E6%9C%8D%E5%8A%A1%E6%B6%88%E5%A4%B1%E9%97%AE%E9%A2%98/</id>
    <published>2020-04-04T18:42:00.000Z</published>
    <updated>2020-04-06T16:31:38.745Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="mysql服务消失问题"><a href="#mysql服务消失问题" class="headerlink" title="mysql服务消失问题"></a>mysql服务消失问题</h2><p>今天想着从数据库复制一篇文章,然后命令行连接报错,我一看服务消失,应该是装多个没改端口造成的,直接卸载重装</p><h4 id="1-官网下载"><a href="#1-官网下载" class="headerlink" title="1 官网下载"></a>1 官网下载</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dev.mysql.com/downloads/file/?id=492456</span><br></pre></td></tr></tbody></table></figure><p>然后本地卸载mysql后会保留data目录,</p><a id="more"></a><h4 id="2-卸载本地mysql-保留data目录"><a href="#2-卸载本地mysql-保留data目录" class="headerlink" title="2 卸载本地mysql,保留data目录"></a>2 卸载本地mysql,保留data目录</h4><h4 id="3-将data目录复制到新的data目录中"><a href="#3-将data目录复制到新的data目录中" class="headerlink" title="3 将data目录复制到新的data目录中"></a>3 将data目录复制到新的data目录中</h4><p>注意覆盖文件,(应该新旧mysql版本要一致)mysql5.7的数据库文件都是opt类型,mysql8.0是ibd类型</p><h4 id="4-重启mysql服务"><a href="#4-重启mysql服务" class="headerlink" title="4 重启mysql服务"></a>4 重启mysql服务</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></tbody></table></figure><p>或者到服务中启动(运行<code>service.msc</code>)</p><p>有可能会报错</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">某些服务在未由其他服务或程序使用时将自动停止</span><br></pre></td></tr></tbody></table></figure><p>这是配置文件有问题,或者data目录文件有错,我是data目录下还有Data目录,将里面的数据库文件复制到data层然后删除Data</p><p>重启服务解决.而且数据没有丢失.</p><p>mysql8.0的data目录在这个文件下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\ProgramData\MySQL\MySQL Server 8.0\Data</span><br></pre></td></tr></tbody></table></figure><p>安装目录</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\MySQL\MySQL Server 8.0</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/05/problem/mysql%E6%9C%8D%E5%8A%A1%E6%B6%88%E5%A4%B1%E9%97%AE%E9%A2%98/image-20200405030817266.png" alt="image-20200405030817266"></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mysql服务消失问题&quot;&gt;&lt;a href=&quot;#mysql服务消失问题&quot; class=&quot;headerlink&quot; title=&quot;mysql服务消失问题&quot;&gt;&lt;/a&gt;mysql服务消失问题&lt;/h2&gt;&lt;p&gt;今天想着从数据库复制一篇文章,然后命令行连接报错,我一看服务消失,应该是装多个没改端口造成的,直接卸载重装&lt;/p&gt;
&lt;h4 id=&quot;1-官网下载&quot;&gt;&lt;a href=&quot;#1-官网下载&quot; class=&quot;headerlink&quot; title=&quot;1 官网下载&quot;&gt;&lt;/a&gt;1 官网下载&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;https:&amp;#x2F;&amp;#x2F;dev.mysql.com&amp;#x2F;downloads&amp;#x2F;file&amp;#x2F;?id&amp;#x3D;492456&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后本地卸载mysql后会保留data目录,&lt;/p&gt;
    
    </summary>
    
    
      <category term="problem" scheme="http://philxling.cn/categories/problem/"/>
    
    
      <category term="problem" scheme="http://philxling.cn/tags/problem/"/>
    
      <category term="mysql" scheme="http://philxling.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>c语言指针</title>
    <link href="http://philxling.cn/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/"/>
    <id>http://philxling.cn/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/</id>
    <published>2020-04-03T21:41:58.000Z</published>
    <updated>2020-04-03T21:58:32.101Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>C语言用三种方式打印数组</p><a id="more"></a><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pointarray2</span><span class="params">(<span class="keyword">int</span> a[])</span></span>{<span class="comment">//用指针变量指向数组元素</span></span><br><span class="line"><span class="keyword">int</span> *<span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line"><span class="built_in">point</span>=&a[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,*<span class="built_in">point</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pointarray</span><span class="params">(<span class="keyword">int</span> a[])</span></span>{<span class="comment">//通过数组名计算数组的元素地址,找出元素的值</span></span><br><span class="line"><span class="keyword">int</span> *<span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">point</span>=a;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,*(<span class="built_in">point</span>+i));</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]={<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>};</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<<span class="number">10</span>;i++){<span class="comment">//下标法</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">pointarray(a);</span><br><span class="line">pointarray2(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>实现数组倒序存储</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p1,<span class="keyword">int</span> *p2)</span></span>{</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">temp=*p1;</span><br><span class="line">*p1=*p2;</span><br><span class="line">*p2=temp;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> *low,*high;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<=(n<span class="number">-1</span>)/<span class="number">2</span>;i++){</span><br><span class="line">low=&a[i];</span><br><span class="line">high=&a[n<span class="number">-1</span>-i];<span class="comment">//n-1-i指向对应的元素</span></span><br><span class="line">swap(low,high);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]={<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>};</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">10</span>,i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<n;i++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"reverse later---------\n"</span>);</span><br><span class="line">reverse(a,<span class="number">10</span>);<span class="comment">//将数组倒叙排放</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<n;i++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>max min search</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="keyword">int</span> *<span class="built_in">max</span>,*<span class="built_in">min</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Max_Min_Search</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">max</span>=a;</span><br><span class="line"><span class="built_in">min</span>=a;</span><br><span class="line"><span class="keyword">for</span>(;i<n;i++){</span><br><span class="line"><span class="keyword">if</span>(a[i]>*<span class="built_in">max</span>){</span><br><span class="line"><span class="built_in">max</span>=&a[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(a[i]<*<span class="built_in">min</span>){</span><br><span class="line"><span class="built_in">min</span>=&a[i];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]={<span class="number">24</span>,<span class="number">10</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">540</span>,<span class="number">26</span>,<span class="number">30</span>,<span class="number">34</span>,<span class="number">35</span>};</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;i<<span class="number">10</span>;i++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---------------Searching------------------\n"</span>);</span><br><span class="line">Max_Min_Search(a,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"max=%d min=%d\n"</span>,*<span class="built_in">max</span>,*<span class="built_in">min</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191024163739066.png" alt="image-20191024163739066"></p><p>打印二维数组</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTwoArray</span><span class="params">(<span class="keyword">int</span> (*a)[<span class="number">4</span>],<span class="keyword">int</span> row,<span class="keyword">int</span> len)</span></span>{<span class="comment">//(*a)[4]必须要传递列值,数组指针变量</span></span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<row;i++){</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j<len;j++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,*(*(a+i)+j));</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]={<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>};</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a的地址:%d\n"</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a: %d\n"</span>,&a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a[0]:%d\n"</span>,a[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*(*(a+1)):%d\n"</span>,*(*(a+<span class="number">1</span>)));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*(*(a+1)+2):%d\n"</span>,*(*(a+<span class="number">1</span>)+<span class="number">2</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&a[1][0]:%d\n"</span>,&a[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------------\n"</span>);</span><br><span class="line">PrintTwoArray(a,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>copy字符串</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_string</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">string</span>)</span></span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----------------string b is------\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(;*<span class="built_in">string</span>!=<span class="string">'\0'</span>;<span class="built_in">string</span>++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,*<span class="built_in">string</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string5</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span></span>{</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line">p=b;</span><br><span class="line"><span class="keyword">while</span>(*p++=*a++){}</span><br><span class="line">p=b;</span><br><span class="line">print_string(p);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string4</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span></span>{</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line">p=b;</span><br><span class="line"><span class="keyword">while</span>(*a!=<span class="string">'\0'</span>){</span><br><span class="line">*p++=*a++;</span><br><span class="line">}</span><br><span class="line">p=b;</span><br><span class="line">print_string(p);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string3</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span></span>{</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line">p=b;</span><br><span class="line"><span class="keyword">while</span>((*p++=*a++)!=<span class="string">'\0'</span>){</span><br><span class="line">}</span><br><span class="line">p=b;</span><br><span class="line">print_string(p);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string2</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span></span>{</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line">p=b;</span><br><span class="line"><span class="keyword">while</span>((*p=*a)!=<span class="string">'\0'</span>){</span><br><span class="line">p++;</span><br><span class="line">a++;</span><br><span class="line">}</span><br><span class="line">p=b;</span><br><span class="line">print_string(p);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_string1</span><span class="params">(<span class="keyword">char</span> *a,<span class="keyword">char</span> *b)</span></span>{</span><br><span class="line"><span class="keyword">char</span> *p1,*p2;</span><br><span class="line">p2=b;</span><br><span class="line">p1=a;</span><br><span class="line"><span class="keyword">for</span>(;*p1!=<span class="string">'\0'</span>;p1++,p2++){</span><br><span class="line">*p2=*p1;</span><br><span class="line">}</span><br><span class="line">*p2=<span class="string">'\0'</span>;</span><br><span class="line">p2=b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------------------------\n"</span>);</span><br><span class="line">print_string(p2);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">string</span>[]=<span class="string">"hello world"</span>;</span><br><span class="line"><span class="keyword">char</span> *a=<span class="string">"i love you"</span>,b[]=<span class="string">"hello world "</span>,*p1,*p2;<span class="comment">//此处应该定义为char b[] 而不能用char  *b;因为char *b放在了常量区,不能被修改.</span></span><br><span class="line"><span class="keyword">char</span> *s=<span class="string">"hello "</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="built_in">string</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s);</span><br><span class="line"></span><br><span class="line">p1=a;</span><br><span class="line">p2=b;</span><br><span class="line"><span class="keyword">for</span>(;*p1!=<span class="string">'\0'</span>;p1++,p2++){</span><br><span class="line">*p2=*p1;</span><br><span class="line">}</span><br><span class="line">*p2=<span class="string">'\0'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----------------string b is-------\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;b[i]!=<span class="string">'\0'</span>;i++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,b[i]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---------------------\n"</span>);</span><br><span class="line">copy_string1(a,b);</span><br><span class="line">copy_string2(a,b);</span><br><span class="line">copy_string3(a,b);</span><br><span class="line">copy_string4(a,b);</span><br><span class="line">copy_string5(a,b);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191025192914077.png" alt="image-20191025192914077"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191025200423203.png" alt="image-20191025200423203"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191025200537661.png" alt="image-20191025200537661"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191025200650572.png" alt="image-20191025200650572"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191025201016685.png" alt="image-20191025201016685"></p><p>指针函数传递参数</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>{</span><br><span class="line"><span class="keyword">return</span> x+y;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(x>y){</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(x>y){</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prosess</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> (*fun)())</span></span>{<span class="comment">///////////////////</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,fun(x,y));</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prosess</span><span class="params">(<span class="keyword">int</span> ,<span class="keyword">int</span> ,<span class="keyword">int</span> (*fun)())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&a,&b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"max="</span>);</span><br><span class="line">prosess(a,b,<span class="built_in">max</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"min="</span>);</span><br><span class="line">prosess(a,b,<span class="built_in">min</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"sum="</span>);</span><br><span class="line">prosess(a,b,add);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输入序号打印学生各科成绩</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">search</span><span class="params">(<span class="keyword">int</span> (*score)[<span class="number">4</span>],<span class="keyword">int</span> id)</span></span>{</span><br><span class="line"><span class="keyword">return</span> *(score+id);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> score[][<span class="number">4</span>]={<span class="number">12</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">25</span>,<span class="number">63</span>,<span class="number">90</span>,<span class="number">12</span>,<span class="number">57</span>,<span class="number">63</span>,<span class="number">27</span>};</span><br><span class="line"><span class="keyword">int</span> id,i;</span><br><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&id);</span><br><span class="line"><span class="keyword">if</span>(id<span class="number">-1</span>><span class="number">0</span>&&id<span class="number">-1</span><<span class="number">3</span>){</span><br><span class="line">p=search(score,id<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<<span class="number">4</span>;i++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,*(p+i));</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>判断不及格的学生</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">search</span><span class="params">(<span class="keyword">int</span> (*score)[<span class="number">4</span>],<span class="keyword">int</span> id)</span></span>{</span><br><span class="line"><span class="keyword">return</span> *(score+id);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">print_score1</span><span class="params">(<span class="keyword">int</span> (*score)[<span class="number">4</span>],<span class="keyword">int</span> i)</span></span>{</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j<<span class="number">4</span>;j++){</span><br><span class="line"><span class="keyword">if</span>(*(*(score+i)+j)<<span class="number">60</span>){</span><br><span class="line"><span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_score</span><span class="params">(<span class="keyword">int</span> *p)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;i<<span class="number">4</span>;i++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,*(p+i));</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> score[][<span class="number">4</span>]={<span class="number">12</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">54</span>,<span class="number">70</span>,<span class="number">89</span>,<span class="number">63</span>,<span class="number">90</span>,<span class="number">12</span>,<span class="number">57</span>,<span class="number">63</span>,<span class="number">27</span>};</span><br><span class="line"><span class="keyword">int</span> id,i;</span><br><span class="line"><span class="keyword">int</span> *p1;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&id);</span><br><span class="line"><span class="keyword">if</span>(id<span class="number">-1</span>>=<span class="number">0</span>&&id<span class="number">-1</span><<span class="number">3</span>){</span><br><span class="line">p1=search(score,id<span class="number">-1</span>);</span><br><span class="line">print_score(p1);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<<span class="number">3</span>;i++){</span><br><span class="line"><span class="keyword">if</span>(print_score1(score,i)><span class="number">0</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d号不及格 "</span>,print_score1(score,i));</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"及格 "</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026001020291.png" alt="image-20191026001020291"></p><p>字符串排序</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><string.h></span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">char</span> *name[],<span class="keyword">int</span> n)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<n<span class="number">-1</span>;i++){</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j<n;j++){</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(name[i],name[j])><span class="number">0</span>){</span><br><span class="line">p=name[i];</span><br><span class="line">name[i]=name[j];</span><br><span class="line">name[j]=p;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> *name[] , <span class="keyword">int</span> n)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<n;i++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s "</span>,name[i]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{<span class="comment">//指针数组</span></span><br><span class="line"><span class="keyword">char</span> *name[]={<span class="string">"php"</span>,<span class="string">"go"</span>,<span class="string">"c++"</span>,<span class="string">"java"</span>,<span class="string">"c"</span>};</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">5</span>;</span><br><span class="line">sort(name,n);</span><br><span class="line"><span class="built_in">print</span>(name,n);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026004814972.png" alt="image-20191026004814972"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *name[]={<span class="string">"php"</span>,<span class="string">"go"</span>,<span class="string">"c++"</span>,<span class="string">"java"</span>,<span class="string">"c"</span>};</span><br><span class="line"><span class="keyword">char</span> **p;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<n;i++){</span><br><span class="line">p=name+i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%5s"</span>,*p);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026005311004.png" alt="image-20191026005311004"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026005650753.png" alt="image-20191026005650753"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026010454116.png" alt="image-20191026010454116"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026010537453.png" alt="image-20191026010537453"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026010620952.png" alt="image-20191026010620952"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> name[]={<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">53</span>,<span class="number">3</span>};</span><br><span class="line"><span class="keyword">int</span> *p1,*p2;</span><br><span class="line">p1=&name[<span class="number">1</span>];</span><br><span class="line">p2=&name[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,p2-p1);<span class="comment">//3</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026011538963.png" alt="image-20191026011538963"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026011736366.png" alt="image-20191026011736366"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191026011836077.png" alt="image-20191026011836077"></p><p>带参数的宏定义</p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027135958486.png" alt="image-20191027135958486"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027140124000.png" alt="image-20191027140124000"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M(a,b) (a>b)?a:b</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&a,&b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"max=%d"</span>,M(a,b));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027140729793.png" alt="image-20191027140729793"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027140848028.png" alt="image-20191027140848028"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027141110205.png" alt="image-20191027141110205"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027141521576.png" alt="image-20191027141521576"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027142416728.png" alt="image-20191027142416728"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027142443507.png" alt="image-20191027142443507"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027143938237.png" alt="image-20191027143938237"></p><p>结构体</p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027144701230.png" alt="image-20191027144701230"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027150035130.png" alt="image-20191027150035130"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span>{</span></span><br><span class="line"><span class="keyword">int</span> year;</span><br><span class="line"><span class="keyword">int</span> month;</span><br><span class="line"><span class="keyword">int</span> day;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">struct</span>{</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">char</span> gender;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="keyword">char</span> *addr;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">date</span> <span class="title">birthday</span>;</span></span><br><span class="line">}student1,student2={<span class="number">1</span>,<span class="string">"hanmeimei"</span>,<span class="string">'m'</span>,<span class="number">45</span>,<span class="number">22.2f</span>,<span class="string">"hubei"</span>,<span class="number">2019</span>,<span class="number">12</span>,<span class="number">12</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">student1=student2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"number=%d\nname=%s\ngender=%c\nage=%d\nscore=%f\naddr=%s\nbirthday=%d-%d-%d\n"</span>,student1.id,student1.name,student1.gender,student1.age,student1.score,student1.addr,student1.birthday.year,student1.birthday.month,student1.birthday.day);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>实现投票</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><string.h></span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PushTicket</span>{</span></span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">int</span> ticket;</span><br><span class="line">}*<span class="built_in">point</span>,ticket[<span class="number">5</span>]={{<span class="string">"hanmeimei"</span>,<span class="number">0</span>},{<span class="string">"lilei"</span>,<span class="number">0</span>},{<span class="string">"lili"</span>,<span class="number">0</span>},{<span class="string">"c"</span>,<span class="number">0</span>},{<span class="string">"java"</span>,<span class="number">0</span>}};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTicket</span><span class="params">(struct PushTicket *<span class="built_in">point</span>)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">point</span>=ticket;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"------------候选人的票-----------\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<<span class="number">5</span>;i++,<span class="built_in">point</span>++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s-----:%d\n"</span>,<span class="built_in">point</span>->name,<span class="built_in">point</span>->ticket);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">compare</span><span class="params">(<span class="keyword">char</span> *input)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">point</span>=ticket;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<<span class="number">5</span>;i++,<span class="built_in">point</span>++){</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(input,<span class="built_in">point</span>->name)==<span class="number">0</span>){</span><br><span class="line">(<span class="built_in">point</span>->ticket)++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">char</span> input[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">point</span>=ticket;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"------------候选人-----------\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<<span class="number">5</span>;i++,<span class="built_in">point</span>++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s "</span>,<span class="built_in">point</span>->name);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---------------\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入候选人名称投票:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,&input);</span><br><span class="line">compare(input);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(input,<span class="string">"-1"</span>)==<span class="number">0</span>){</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">PrintTicket(<span class="built_in">point</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>动态数组</p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027183935021.png" alt="image-20191027183935021"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027184043371.png" alt="image-20191027184043371"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027184110721.png" alt="image-20191027184110721"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027184156656.png" alt="image-20191027184156656"></p><p>链表</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>{</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintLink</span><span class="params">(struct student *p)</span></span>{</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"num=%d,score=%f"</span>,p->num,p->score);</span><br><span class="line">p=p->next;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">a</span>,<span class="title">b</span>,<span class="title">c</span>,*<span class="title">head</span>;</span></span><br><span class="line">a.num=<span class="number">1</span>;</span><br><span class="line">a.score=<span class="number">89.0f</span>;</span><br><span class="line">a.next=&b;</span><br><span class="line">b.num=<span class="number">2</span>;</span><br><span class="line">b.score=<span class="number">90</span>;</span><br><span class="line">b.next=&c;</span><br><span class="line">c.num=<span class="number">3</span>;</span><br><span class="line">c.score=<span class="number">100</span>;</span><br><span class="line">c.next=<span class="literal">NULL</span>;</span><br><span class="line">head=&a;</span><br><span class="line">PrintLink(head);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191027223049024.png" alt="image-20191027223049024"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><malloc.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN sizeof(struct student)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>{</span><span class="comment">//定义链表</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct student *head)</span></span>{<span class="comment">//打印链表</span></span><br><span class="line"><span class="keyword">while</span>(head!=<span class="literal">NULL</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"num=%d,score=%f\n"</span>,head->num,head->score);</span><br><span class="line">head=head->next;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function">struct student *<span class="title">DeleteNode</span><span class="params">(<span class="keyword">int</span> input,struct student *head)</span></span>{</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"空链表\n"</span>);</span><br><span class="line">}</span><br><span class="line">p1=head;</span><br><span class="line"><span class="keyword">while</span>(p1->num!=input&&p1->next!=<span class="literal">NULL</span>){<span class="comment">//当输入的shu和链表的书不相等时.</span></span><br><span class="line">p2=p1;</span><br><span class="line">p1=p1->next;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(p1->num==input){</span><br><span class="line"><span class="keyword">if</span>(p1==head){</span><br><span class="line">head=p1->next;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">p2->next=p1->next;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">}</span><br><span class="line"><span class="function">struct student *<span class="title">insert</span><span class="params">(struct student *stu,struct student *head)</span></span>{<span class="comment">//有bug</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>,*<span class="title">p2</span>,*<span class="title">p0</span>;</span></span><br><span class="line">p0=stu;</span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NUll linktable\n"</span>);</span><br><span class="line">}</span><br><span class="line">p1=head;</span><br><span class="line"><span class="keyword">while</span>(p0->num>p1->num&&(p1->next!=<span class="literal">NULL</span>)){</span><br><span class="line">p2=p1;</span><br><span class="line">p1=p1->next;</span><br><span class="line"><span class="keyword">if</span>(p0->num<=p1->num){</span><br><span class="line"><span class="keyword">if</span>(head==p1){</span><br><span class="line">head=p0;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">p2->next=p0;</span><br><span class="line">p0->next=p1;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">p1->next=p0;</span><br><span class="line">p0->next=<span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">p1=head;</span><br><span class="line">p2=p1;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function">struct student *<span class="title">create</span><span class="params">()</span></span>{<span class="comment">//创建链表</span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">head</span>,*<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line">p1=p2=(struct student *)<span class="built_in">malloc</span>(LEN);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input num-------------:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&p1->num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input score-----------:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f"</span>,&p1->score);</span><br><span class="line">head=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(p1->num!=<span class="number">0</span>){</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>){</span><br><span class="line">head=p1;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">p2->next=p1;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p2=p1;</span><br><span class="line">p1=(struct student *)<span class="built_in">malloc</span>(LEN);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input num-------------:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&p1->num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input score-----------:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f"</span>,&p1->score);</span><br><span class="line">}</span><br><span class="line">p2->next=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> input;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">stu</span>,*<span class="title">p</span>,<span class="title">stu1</span>;</span></span><br><span class="line">stu=create();</span><br><span class="line">p=stu;</span><br><span class="line"><span class="built_in">print</span>(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"删除节点-----:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&input);</span><br><span class="line"><span class="built_in">print</span>(DeleteNode(input,p));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"插入节点"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input num-------------:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&stu1.num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input score-----------:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f"</span>,&stu1.score);</span><br><span class="line"><span class="built_in">print</span>(insert(&stu1,stu));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"插入节点"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input num-------------:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&stu1.num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"input score-----------:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f"</span>,&stu1.score);</span><br><span class="line"><span class="built_in">print</span>(insert(&stu1,stu));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191028182743903.png" alt="image-20191028182743903"></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdlib.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">FILE *file;</span><br><span class="line"><span class="keyword">if</span>(!(file=fopen(<span class="string">"d:\\hello.txt"</span>,<span class="string">"w"</span>))){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"error"</span>);</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"success!!!\n"</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029131827023.png" alt="image-20191029131827023"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029142743283.png" alt="image-20191029142743283"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029144251829.png" alt="image-20191029144251829"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029144350161.png" alt="image-20191029144350161"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029144636084.png" alt="image-20191029144636084"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029144811799.png" alt="image-20191029144811799"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029144847446.png" alt="image-20191029144847446"></p><p>用位运算实现大小写转换</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please input char:"</span>);</span><br><span class="line">ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(!(ch><span class="string">'A'</span>&&ch<<span class="string">'z'</span>)||(ch><span class="string">'Z'</span>&&ch<<span class="string">'a'</span>)){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"error please input:\n"</span>);</span><br><span class="line">ch=getchar();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(ch & <span class="number">32</span>){<span class="comment">//32的二进制位是100000 ch&100000得到第五位数是0,然后就换转大写</span></span><br><span class="line">ch=ch&<span class="number">223</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"></span><br><span class="line">ch=ch|<span class="number">255</span>;<span class="comment">//得到第五位数是1 转小写.</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line"></span><br><span class="line">ch=getchar();<span class="comment">//打印回车</span></span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029151159306.png" alt="image-20191029151159306"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029151309955.png" alt="image-20191029151309955"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029151500290.png" alt="image-20191029151500290"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029151813040.png" alt="image-20191029151813040"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029152251623.png" alt="image-20191029152251623"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029152632086.png" alt="image-20191029152632086"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029152726176.png" alt="image-20191029152726176"></p><p><img src="/2020/04/04/c++/1-c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/image-20191029153550877.png" alt="image-20191029153550877"></p><p>struct与malloc</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><malloc.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEN sizeof(struct student)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>{</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(struct student *p)</span></span>{</span><br><span class="line">(*p).id=<span class="number">12</span>;</span><br><span class="line">p->name=<span class="string">"hello"</span>;</span><br><span class="line">p->score=<span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(struct student *p)</span></span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s %d\n"</span>,p->id,p->name,p->score);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">stu</span>;</span></span><br><span class="line">stu=(struct student *)<span class="built_in">malloc</span>(LEN);</span><br><span class="line">fun(stu);</span><br><span class="line"><span class="comment">//printf("%d %s %d",stu.id,stu.name,stu.score);</span></span><br><span class="line">show(stu);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>动态数组的增删排</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><malloc.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdlib.h></span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Arr</span>{</span></span><br><span class="line"><span class="keyword">int</span> *pBase;<span class="comment">//数组的首地址</span></span><br><span class="line"><span class="keyword">int</span> len;<span class="comment">//数组的长度</span></span><br><span class="line"><span class="keyword">int</span> cnt;<span class="comment">//当前有效元素的个数</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_arr</span><span class="params">(struct Arr *,<span class="keyword">int</span> length)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">append_arr</span><span class="params">(struct Arr *,<span class="keyword">int</span> val)</span></span>;<span class="comment">//追加</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert_arr</span><span class="params">(struct Arr *,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete_arr</span><span class="params">(struct Arr *,<span class="keyword">int</span> pos,<span class="keyword">int</span> *val)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int get();</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_empty</span><span class="params">(struct Arr *p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_full</span><span class="params">(struct Arr *p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sort_arr</span><span class="params">(struct Arr *p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_arr</span><span class="params">(struct Arr *p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reverse_arr</span><span class="params">(struct Arr *p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Arr</span> <span class="title">arr</span>;</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">init_arr(&arr,<span class="number">6</span>);</span><br><span class="line">append_arr(&arr,<span class="number">100</span>);</span><br><span class="line">append_arr(&arr,<span class="number">99</span>);</span><br><span class="line">append_arr(&arr,<span class="number">80</span>);</span><br><span class="line">append_arr(&arr,<span class="number">23</span>);</span><br><span class="line"><span class="keyword">if</span>(append_arr(&arr,<span class="number">45</span>)){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"append success\n"</span>);</span><br><span class="line">}</span><br><span class="line">insert_arr(&arr,<span class="number">7</span>,<span class="number">555</span>);</span><br><span class="line"><span class="keyword">if</span>(append_arr(&arr,<span class="number">567</span>)){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"append success\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(append_arr(&arr,<span class="number">1000</span>)==<span class="number">1</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"append success\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,arr.cnt);</span><br><span class="line">show_arr(&arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----------删除元素-------\n"</span>);</span><br><span class="line">delete_arr(&arr,<span class="number">3</span>,&val);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------删除的元素是:%d\n"</span>,val);</span><br><span class="line">show_arr(&arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----------倒置元素--------\n"</span>);</span><br><span class="line">reverse_arr(&arr);</span><br><span class="line">show_arr(&arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"----------排序-------------\n"</span>);</span><br><span class="line">sort_arr(&arr);</span><br><span class="line">show_arr(&arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,arr.cnt);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_arr</span><span class="params">(struct Arr *p,<span class="keyword">int</span> length)</span></span>{</span><br><span class="line">p->pBase=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*length);</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span>==p->pBase){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"error\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line">p->len=length;</span><br><span class="line">p->cnt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_empty</span><span class="params">(struct Arr *p)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(p->cnt==<span class="number">0</span>){</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_arr</span><span class="params">(struct Arr *p)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(is_empty(p)==<span class="number">1</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"数组为空\n"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<p->cnt;i++){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,*(p->pBase+i));</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_full</span><span class="params">(struct Arr *p)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(p->cnt==p->len){</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">append_arr</span><span class="params">(struct Arr *p,<span class="keyword">int</span> val)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(is_full(p)==<span class="number">1</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"数组已满\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//不满时</span></span><br><span class="line">p->pBase[p->cnt]=val;</span><br><span class="line">(p->cnt)++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert_arr</span><span class="params">(struct Arr *p,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i=(p->cnt)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos<<span class="number">1</span>||pos>(p->cnt)+<span class="number">1</span>){<span class="comment">//<1或者大于当前有效元素</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(is_full(p)==<span class="number">1</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"数组已满\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//pos的值从1开始,且从pos的位置之前插入</span></span><br><span class="line"><span class="keyword">for</span>(;i>=pos<span class="number">-1</span>;i--){</span><br><span class="line">p->pBase[i+<span class="number">1</span>]=p->pBase[i];</span><br><span class="line">}</span><br><span class="line">p->pBase[pos<span class="number">-1</span>]=val;</span><br><span class="line">(p->cnt)++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete_arr</span><span class="params">(struct Arr *p,<span class="keyword">int</span> pos,<span class="keyword">int</span> *val)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(is_empty(p)==<span class="number">1</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"数组为空\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(pos<<span class="number">1</span>||pos>p->cnt){</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">*val=p->pBase[pos<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(i=pos;i<=p->cnt;i++){</span><br><span class="line">p->pBase[i<span class="number">-1</span>]=p->pBase[i];</span><br><span class="line">}</span><br><span class="line">(p->cnt)--;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reverse_arr</span><span class="params">(struct Arr *p)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,temp,j=p->cnt<span class="number">-1</span>;</span><br><span class="line"><span class="comment">//int *low,*high;</span></span><br><span class="line"><span class="keyword">if</span>(is_empty(p)==<span class="number">1</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"数组为空\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(i<j){</span><br><span class="line">temp=p->pBase[i];</span><br><span class="line">p->pBase[i]=p->pBase[j];</span><br><span class="line">p->pBase[j]=temp;</span><br><span class="line">i++;</span><br><span class="line">j--;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*low=&(p->pBase[0]);</span></span><br><span class="line"><span class="comment">high=&(p->pBase[p->cnt]);</span></span><br><span class="line"><span class="comment">for(i=0;i<=(high-low)/4;i++){</span></span><br><span class="line"><span class="comment">low=&(p->pBase[i]);</span></span><br><span class="line"><span class="comment">high=&(p->pBase[p->cnt-1-i]);</span></span><br><span class="line"><span class="comment">temp=*low;</span></span><br><span class="line"><span class="comment">*low=*high;</span></span><br><span class="line"><span class="comment">*high=temp;</span></span><br><span class="line"><span class="comment">}*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sort_arr</span><span class="params">(struct Arr *p)</span></span>{</span><br><span class="line"><span class="keyword">int</span> i,<span class="built_in">min</span>,j,temp;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j<p->cnt;j++){</span><br><span class="line"><span class="built_in">min</span>=p->pBase[j];</span><br><span class="line"><span class="keyword">for</span>(i=j+<span class="number">1</span>;i<p->cnt;i++){</span><br><span class="line"><span class="keyword">if</span>(p->pBase[i]<<span class="built_in">min</span>){</span><br><span class="line">temp=p->pBase[i];</span><br><span class="line">p->pBase[i]=<span class="built_in">min</span>;</span><br><span class="line"><span class="built_in">min</span>=temp;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">p->pBase[j]=<span class="built_in">min</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言用三种方式打印数组&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://philxling.cn/categories/c/"/>
    
    
      <category term="c++" scheme="http://philxling.cn/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Hexo用gulp压缩静态资源的问题</title>
    <link href="http://philxling.cn/2020/04/04/problem/Hexo%E7%94%A8gulp%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://philxling.cn/2020/04/04/problem/Hexo%E7%94%A8gulp%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-04-03T21:40:48.000Z</published>
    <updated>2020-04-06T16:32:01.628Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h3 id="Hexo-建站面临的访问缓慢问题一直不得其解-经过大量的搜索后解决一半"><a href="#Hexo-建站面临的访问缓慢问题一直不得其解-经过大量的搜索后解决一半" class="headerlink" title="Hexo 建站面临的访问缓慢问题一直不得其解,经过大量的搜索后解决一半"></a>Hexo 建站面临的访问缓慢问题一直不得其解,经过大量的搜索后解决一半</h3><p>搜索几乎都是用neat和gulp,但是都是老版本的js,运行一直报错</p><h4 id="1-安装-gulp"><a href="#1-安装-gulp" class="headerlink" title="1 安装 gulp"></a>1 安装 gulp</h4><p>站点目录下执行</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h4 id="2-安装gulp插件"><a href="#2-安装gulp插件" class="headerlink" title="2 安装gulp插件"></a>2 安装gulp插件</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-minify-css --save</span><br><span class="line">npm install gulp-uglify --save</span><br><span class="line">npm install gulp-htmlmin --save</span><br><span class="line">npm install gulp-htmlclean --save</span><br><span class="line">npm install gulp-imagemin --save</span><br></pre></td></tr></tbody></table></figure><p>执行一次安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br></pre></td></tr></tbody></table></figure><p>安装其他一些插件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 解决【Gulp打包问题】 GulpUglifyError: unable to minify JavaScript</span><br><span class="line"># 解决 gulp-uglify 压缩JavaScript 不兼容 es5 语法的问题</span><br><span class="line">npm install babel-core@6.26.3 --save</span><br><span class="line">npm install gulp-babel@7.0.1 --save</span><br><span class="line">npm install babel-preset-es2015@6.24.1 --save</span><br><span class="line"># gulp-babel 取消严格模式方法("use strict")</span><br><span class="line">npm install babel-plugin-transform-remove-strict-mode --save</span><br></pre></td></tr></tbody></table></figure><h4 id="3-根目录创建gulpfile-js并加入一下代码"><a href="#3-根目录创建gulpfile-js并加入一下代码" class="headerlink" title="3 根目录创建gulpfile.js并加入一下代码"></a>3 根目录创建gulpfile.js并加入一下代码</h4><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩css文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="keyword">async</span>(done)=> {</span><br><span class="line">    <span class="keyword">await</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">    done();</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="keyword">async</span>(done)=> {</span><br><span class="line">    <span class="keyword">await</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin({</span><br><span class="line">            removeComments: <span class="literal">true</span>,</span><br><span class="line">            minifyJS: <span class="literal">true</span>,</span><br><span class="line">            minifyCSS: <span class="literal">true</span>,</span><br><span class="line">            minifyURLs: <span class="literal">true</span>,</span><br><span class="line">        }))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">    done();</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="keyword">async</span>(done)=>{</span><br><span class="line">    <span class="keyword">await</span> gulp.src([<span class="string">'./public/**/*.js'</span>, <span class="string">'!./public/**/*.min.js'</span>])</span><br><span class="line">        .pipe(babel({</span><br><span class="line">            <span class="comment">//将ES6代码转译为可执行的JS代码</span></span><br><span class="line">            presets: [<span class="string">'es2015'</span>] <span class="comment">// es5检查机制</span></span><br><span class="line">        }))</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">    done();</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/images 目录内图片(Version<3)</span></span><br><span class="line"><span class="comment">// gulp.task('minify-images', function () {</span></span><br><span class="line"><span class="comment">//     gulp.src('./public/images/**/*.*')</span></span><br><span class="line"><span class="comment">//         .pipe(imagemin({</span></span><br><span class="line"><span class="comment">//             optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</span></span><br><span class="line"><span class="comment">//             progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</span></span><br><span class="line"><span class="comment">//             interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span><br><span class="line"><span class="comment">//             multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化</span></span><br><span class="line"><span class="comment">//         }))</span></span><br><span class="line"><span class="comment">//         .pipe(gulp.dest('./public/images'));</span></span><br><span class="line"><span class="comment">// });</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/images 目录内图片(Version>3)</span></span><br><span class="line">gulp.task(<span class="string">'minify-images'</span>, <span class="keyword">async</span>(done)=> {</span><br><span class="line">    <span class="keyword">await</span> gulp.src(<span class="string">'./public/images/**/*.*'</span>)</span><br><span class="line">        .pipe(imagemin([</span><br><span class="line">            imagemin.gifsicle({<span class="attr">interlaced</span>: <span class="literal">true</span>}),</span><br><span class="line">            <span class="comment">//imagemin.jpegtran({progressive: true}),</span></span><br><span class="line">            imagemin.optipng({<span class="attr">optimizationLevel</span>: <span class="number">5</span>}),</span><br><span class="line">            imagemin.svgo({</span><br><span class="line">                plugins: [</span><br><span class="line">                    {<span class="attr">removeViewBox</span>: <span class="literal">true</span>},</span><br><span class="line">                    {<span class="attr">cleanupIDs</span>: <span class="literal">false</span>}</span><br><span class="line">                ]</span><br><span class="line">            })</span><br><span class="line">        ]))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public/images'</span>));</span><br><span class="line">    done();</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.0以前的写法 </span></span><br><span class="line"><span class="comment">//gulp.task('default', [</span></span><br><span class="line"><span class="comment">//  'minify-html', 'minify-css', 'minify-js', 'minify-images'</span></span><br><span class="line"><span class="comment">//]);</span></span><br><span class="line"><span class="comment">//4.0以后的写法</span></span><br><span class="line"><span class="comment">// 执行 gulp 命令时执行的任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.series(gulp.parallel(<span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>, <span class="string">'minify-js'</span>, <span class="string">'minify-images'</span>)), <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----------gulp Finished----------"</span>);</span><br><span class="line">    <span class="comment">// Do something after a, b, and c are finished.</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h4 id="4-执行"><a href="#4-执行" class="headerlink" title="4 执行"></a>4 执行</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">gulp default</span><br></pre></td></tr></tbody></table></figure><p>你会发现有这个错误</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ gulp default</span><br><span class="line">[05:53:37] Using gulpfile E:\博客\philxling\gulpfile.js</span><br><span class="line">[05:53:37] Starting 'default'...</span><br><span class="line">[05:53:37] Starting 'minify-html'...</span><br><span class="line">[05:53:37] Starting 'minify-css'...</span><br><span class="line">[05:53:37] Starting 'minify-js'...</span><br><span class="line">[05:53:37] Starting 'minify-images'...</span><br><span class="line">[05:53:37] Finished 'minify-html' after 78 ms</span><br><span class="line">[05:53:37] Finished 'minify-css' after 79 ms</span><br><span class="line">[05:53:37] Finished 'minify-js' after 79 ms</span><br><span class="line">[05:53:37] 'minify-images' errored after 79 ms</span><br><span class="line">[05:53:37] TypeError: imagemin.jpegtran is not a function</span><br><span class="line">    at E:\博客\philxling\gulpfile.js:60:22</span><br><span class="line">    at minify-images (E:\博客\philxling\node_modules\undertaker\lib\set-task.js:13:15)</span><br><span class="line">    at bound (domain.js:426:14)</span><br><span class="line">    at runBound (domain.js:439:12)</span><br><span class="line">    at asyncRunner (E:\博客\philxling\node_modules\async-done\index.js:55:18)</span><br><span class="line">    at processTicksAndRejections (internal/process/task_queues.js:79:11)</span><br><span class="line">[05:53:37] 'default' errored after 82 ms</span><br></pre></td></tr></tbody></table></figure><p>注释掉<code>imagemin.jpegtran({progressive: true}),</code>并且修改代码, 将所有的function和return替换为async和await</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">    done();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>改为</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="keyword">async</span>(done)=> {</span><br><span class="line">    <span class="keyword">await</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">    done();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>再次<code>gulp</code>出现</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ gulp default</span><br><span class="line">[05:32:10] Using gulpfile E:\博客\philxling\gulpfile.js</span><br><span class="line">[05:32:10] Starting 'default'...</span><br><span class="line">[05:32:10] Starting 'minify-html'...</span><br><span class="line">[05:32:10] Starting 'minify-css'...</span><br><span class="line">[05:32:10] Starting 'minify-js'...</span><br><span class="line">[05:32:10] Starting 'minify-images'...</span><br><span class="line">[05:32:11] Finished 'minify-html' after 434 ms</span><br><span class="line">[05:32:11] Finished 'minify-css' after 435 ms</span><br><span class="line">[05:32:11] Finished 'minify-js' after 435 ms</span><br><span class="line">[05:32:11] Finished 'minify-images' after 434 ms</span><br><span class="line">[05:32:11] Finished 'default' after 437 ms</span><br><span class="line"></span><br><span class="line">events.js:288</span><br><span class="line">      throw er; // Unhandled 'error' event</span><br><span class="line">      ^</span><br><span class="line">PluginError: ....</span><br></pre></td></tr></tbody></table></figure><p>这些是js的一些问题,自己慢慢解决</p><p>我出现的是</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> at new HTMLParser (E:\博客\philxling\node_modules\gulp-htmlmin\node_modules\</span><br><span class="line">    at minify (E:\博客\philxling\node_modules\gulp-htmlmin\node_modules\html-min</span><br><span class="line">    at Object.exports.minify (E:\博客\philxling\node_modules\gulp-htmlmin\node_m</span><br><span class="line">    at minify (E:\博客\philxling\node_modules\gulp-htmlmin\index.js:16:44)</span><br><span class="line">    at DestroyableTransform._transform (E:\博客\philxling\node_modules\gulp-html</span><br><span class="line">    at DestroyableTransform.Transform._read (E:\博客\philxling\node_modules\read</span><br><span class="line">    at DestroyableTransform.Transform._write (E:\博客\philxling\node_modules\rea</span><br><span class="line">    at doWrite (E:\博客\philxling\node_modules\readable-stream\lib\_stream_writa</span><br><span class="line">    at writeOrBuffer (E:\博客\philxling\node_modules\readable-stream\lib\_stream</span><br><span class="line">    at DestroyableTransform.Writable.write (E:\博客\philxling\node_modules\reada</span><br><span class="line">Emitted 'error' event on Domain instance at:</span><br><span class="line">    at DestroyableTransform.EventEmitter.emit (domain.js:500:12)</span><br><span class="line">    at DestroyableTransform.onerror (E:\博客\philxling\node_modules\readable-str</span><br><span class="line">    at DestroyableTransform.emit (events.js:311:20)</span><br><span class="line">    at DestroyableTransform.EventEmitter.emit (domain.js:482:12)</span><br><span class="line">    at onwriteError (E:\博客\philxling\node_modules\readable-stream\lib\_stream_</span><br><span class="line">    at onwrite (E:\博客\philxling\node_modules\readable-stream\lib\_stream_writa</span><br><span class="line">    at WritableState.onwrite (E:\博客\philxling\node_modules\readable-stream\lib</span><br><span class="line">    at DestroyableTransform.afterTransform (E:\博客\philxling\node_modules\reada</span><br><span class="line">    at minify (E:\博客\philxling\node_modules\gulp-htmlmin\index.js:31:9)</span><br><span class="line">    at DestroyableTransform._transform (E:\博客\philxling\node_modules\gulp-html</span><br></pre></td></tr></tbody></table></figure><p>未解,但是能够<code>hexo d</code></p><p>睡了,2020-4-4,祝大家好,祖国好.</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hexo-建站面临的访问缓慢问题一直不得其解-经过大量的搜索后解决一半&quot;&gt;&lt;a href=&quot;#Hexo-建站面临的访问缓慢问题一直不得其解-经过大量的搜索后解决一半&quot; class=&quot;headerlink&quot; title=&quot;Hexo 建站面临的访问缓慢问题一直不得其解,经过大量的搜索后解决一半&quot;&gt;&lt;/a&gt;Hexo 建站面临的访问缓慢问题一直不得其解,经过大量的搜索后解决一半&lt;/h3&gt;&lt;p&gt;搜索几乎都是用neat和gulp,但是都是老版本的js,运行一直报错&lt;/p&gt;
&lt;h4 id=&quot;1-安装-gulp&quot;&gt;&lt;a href=&quot;#1-安装-gulp&quot; class=&quot;headerlink&quot; title=&quot;1 安装 gulp&quot;&gt;&lt;/a&gt;1 安装 gulp&lt;/h4&gt;&lt;p&gt;站点目录下执行&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install gulp -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="problem" scheme="http://philxling.cn/categories/problem/"/>
    
    
      <category term="problem" scheme="http://philxling.cn/tags/problem/"/>
    
      <category term="Hexo" scheme="http://philxling.cn/tags/Hexo/"/>
    
      <category term="gulp" scheme="http://philxling.cn/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>BeautifulSoup4库</title>
    <link href="http://philxling.cn/2020/04/04/python%E7%88%AC%E8%99%AB/7-BeautifulSoup4%E5%BA%93/"/>
    <id>http://philxling.cn/2020/04/04/python%E7%88%AC%E8%99%AB/7-BeautifulSoup4%E5%BA%93/</id>
    <published>2020-04-03T16:00:00.000Z</published>
    <updated>2020-04-06T12:21:53.866Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="BeautifulSoup4库"><a href="#BeautifulSoup4库" class="headerlink" title="BeautifulSoup4库"></a>BeautifulSoup4库</h1><p>和 lxml 一样，Beautiful Soup 也是一个HTML/XML的解析器，主要的功能也是如何解析和提取 HTML/XML 数据。<br>lxml 只会局部遍历，而Beautiful Soup 是基于HTML DOM（Document Object Model）的，会载入整个文档，解析整个DOM树，因此时间和内存开销都会大很多，所以性能要低于lxml。<br>BeautifulSoup 用来解析 HTML 比较简单，API非常人性化，支持CSS选择器、Python标准库中的HTML解析器，也支持 lxml 的 XML解析器。<br>Beautiful Soup 3 目前已经停止开发，推荐现在的项目使用Beautiful Soup 4。</p><a id="more"></a><h2 id="安装和文档："><a href="#安装和文档：" class="headerlink" title="安装和文档："></a>安装和文档：</h2><ol><li>安装：<code>pip install bs4</code>。</li><li>中文文档：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></li></ol><h2 id="几大解析工具对比："><a href="#几大解析工具对比：" class="headerlink" title="几大解析工具对比："></a>几大解析工具对比：</h2><table><thead><tr><th>解析工具</th><th>解析速度</th><th>使用难度</th></tr></thead><tbody><tr><td>BeautifulSoup</td><td>最慢</td><td>最简单</td></tr><tr><td>lxml</td><td>快</td><td>简单</td></tr><tr><td>正则</td><td>最快</td><td>最难</td></tr></tbody></table><h2 id="简单使用："><a href="#简单使用：" class="headerlink" title="简单使用："></a>简单使用：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string"><html><head><title>The Dormouse's story</title></head></span></span><br><span class="line"><span class="string"><body></span></span><br><span class="line"><span class="string"><p class="title" name="dromouse"><b>The Dormouse's story</b></p></span></span><br><span class="line"><span class="string"><p class="story">Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string"><a href="http://example.com/elsie" class="sister" id="link1"><!-- Elsie --></a>,</span></span><br><span class="line"><span class="string"><a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and</span></span><br><span class="line"><span class="string"><a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.</p></span></span><br><span class="line"><span class="string"><p class="story">...</p></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建 Beautiful Soup 对象</span></span><br><span class="line"><span class="comment"># 使用lxml来进行解析</span></span><br><span class="line">soup = BeautifulSoup(html,<span class="string">"lxml"</span>)</span><br><span class="line"></span><br><span class="line">print(soup.prettify())</span><br></pre></td></tr></tbody></table></figure><h2 id="四个常用的对象："><a href="#四个常用的对象：" class="headerlink" title="四个常用的对象："></a>四个常用的对象：</h2><p>Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种:</p><ol><li>Tag</li><li>NavigatableString</li><li>BeautifulSoup</li><li>Comment</li></ol><h3 id="1-Tag："><a href="#1-Tag：" class="headerlink" title="1. Tag："></a>1. Tag：</h3><p>Tag 通俗点讲就是 HTML 中的一个个标签。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup)</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string"><html><head><title>The Dormouse's story</title></head></span></span><br><span class="line"><span class="string"><body></span></span><br><span class="line"><span class="string"><p class="title" name="dromouse"><b>The Dormouse's story</b></p></span></span><br><span class="line"><span class="string"><p class="story">Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string"><a href="http://example.com/elsie" class="sister" id="link1"><!-- Elsie --></a>,</span></span><br><span class="line"><span class="string"><a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and</span></span><br><span class="line"><span class="string"><a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.</p></span></span><br><span class="line"><span class="string"><p class="story">...</p></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建 Beautiful Soup 对象</span></span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (soup.title)</span><br><span class="line"><span class="comment"># <title>The Dormouse's story</title></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (soup.head)</span><br><span class="line"><span class="comment"># <head><title>The Dormouse's story</title></head></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (soup.a)</span><br><span class="line"><span class="comment"># <a class="sister" href="http://example.com/elsie" id="link1"><!-- Elsie --></a></span></span><br><span class="line"></span><br><span class="line">print( soup.p)</span><br><span class="line"><span class="comment"># <p class="title" name="dromouse"><b>The Dormouse's story</b></p></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (type(soup.p))</span><br><span class="line"><span class="comment"># <class 'bs4.element.Tag'></span></span><br></pre></td></tr></tbody></table></figure><p>我们可以利用 soup 加标签名轻松地获取这些标签的内容，这些对象的类型是bs4.element.Tag。但是注意，它查找的是在所有内容中的第一个符合要求的标签。如果要查询所有的标签，后面会进行介绍。<br>对于Tag，它有两个重要的属性，分别是name和attrs。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> soup.name</span><br><span class="line"><span class="comment"># [document] #soup 对象本身比较特殊，它的 name 即为 [document]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> soup.head.name</span><br><span class="line"><span class="comment"># head #对于其他内部标签，输出的值便为标签本身的名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> soup.p.attrs</span><br><span class="line"><span class="comment"># {'class': ['title'], 'name': 'dromouse'}</span></span><br><span class="line"><span class="comment"># 在这里，我们把 p 标签的所有属性打印输出了出来，得到的类型是一个字典。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> soup.p[<span class="string">'class'</span>] <span class="comment"># soup.p.get('class')</span></span><br><span class="line"><span class="comment"># ['title'] #还可以利用get方法，传入属性的名称，二者是等价的</span></span><br><span class="line"></span><br><span class="line">soup.p[<span class="string">'class'</span>] = <span class="string">"newClass"</span></span><br><span class="line"><span class="keyword">print</span> soup.p <span class="comment"># 可以对这些属性和内容等等进行修改</span></span><br><span class="line"><span class="comment"># <p class="newClass" name="dromouse"><b>The Dormouse's story</b></p></span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-NavigableString："><a href="#2-NavigableString：" class="headerlink" title="2. NavigableString："></a>2. NavigableString：</h3><p>如果拿到标签后，还想获取标签中的内容。那么可以通过<code>tag.string</code>获取标签中的文字。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (soup.p.string)</span><br><span class="line"><span class="comment"># The Dormouse's story</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (type(soup.p.string))</span><br><span class="line"><span class="comment"># <class 'bs4.element.NavigableString'>thon</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-BeautifulSoup："><a href="#3-BeautifulSoup：" class="headerlink" title="3. BeautifulSoup："></a>3. BeautifulSoup：</h3><p>BeautifulSoup 对象表示的是一个文档的全部内容.大部分时候,可以把它当作 Tag 对象,它支持 遍历文档树 和 搜索文档树 中描述的大部分的方法.<br>因为 BeautifulSoup 对象并不是真正的HTML或XML的tag,所以它没有name和attribute属性.但有时查看它的 .name 属性是很方便的,所以 BeautifulSoup 对象包含了一个值为 “[document]” 的特殊属性 .name</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soup.name</span><br><span class="line"><span class="comment"># '[document]'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-Comment："><a href="#4-Comment：" class="headerlink" title="4. Comment："></a>4. Comment：</h3><p>Tag , NavigableString , BeautifulSoup 几乎覆盖了html和xml中的所有内容,但是还有一些特殊对象.容易让人担心的内容是文档的注释部分:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">markup = <span class="string">"<b><!--Hey, buddy. Want to buy a used parser?--></b>"</span></span><br><span class="line">soup = BeautifulSoup(markup)</span><br><span class="line">comment = soup.b.string</span><br><span class="line">type(comment)</span><br><span class="line"><span class="comment"># <class 'bs4.element.Comment'></span></span><br></pre></td></tr></tbody></table></figure><p>Comment 对象是一个特殊类型的 NavigableString 对象:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">comment</span><br><span class="line"><span class="comment"># 'Hey, buddy. Want to buy a used parser'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="遍历文档树："><a href="#遍历文档树：" class="headerlink" title="遍历文档树："></a>遍历文档树：</h2><h3 id="1-contents和children："><a href="#1-contents和children：" class="headerlink" title="1. contents和children："></a>1. contents和children：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">html_doc = <span class="string">"""</span></span><br><span class="line"><span class="string"><html><head><title>The Dormouse's story</title></head></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><p class="title"><b>The Dormouse's story</b></p></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><p class="story">Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string"><a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>,</span></span><br><span class="line"><span class="string"><a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and</span></span><br><span class="line"><span class="string"><a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.</p></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><p class="story">...</p></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc,<span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">head_tag = soup.head</span><br><span class="line"><span class="comment"># 返回所有子节点的列表</span></span><br><span class="line">print(head_tag.contents)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回所有子节点的迭代器</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> head_tag.children:</span><br><span class="line">    print(child)</span><br></pre></td></tr></tbody></table></figure><h3 id="2-strings-和-stripped-strings"><a href="#2-strings-和-stripped-strings" class="headerlink" title="2. strings 和 stripped_strings"></a>2. strings 和 stripped_strings</h3><p>如果tag中包含多个字符串 [2] ,可以使用 .strings 来循环获取：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> soup.strings:</span><br><span class="line">    print(repr(string))</span><br><span class="line">    <span class="comment"># u"The Dormouse's story"</span></span><br><span class="line">    <span class="comment"># u'\n\n'</span></span><br><span class="line">    <span class="comment"># u"The Dormouse's story"</span></span><br><span class="line">    <span class="comment"># u'\n\n'</span></span><br><span class="line">    <span class="comment"># u'Once upon a time there were three little sisters; and their names were\n'</span></span><br><span class="line">    <span class="comment"># u'Elsie'</span></span><br><span class="line">    <span class="comment"># u',\n'</span></span><br><span class="line">    <span class="comment"># u'Lacie'</span></span><br><span class="line">    <span class="comment"># u' and\n'</span></span><br><span class="line">    <span class="comment"># u'Tillie'</span></span><br><span class="line">    <span class="comment"># u';\nand they lived at the bottom of a well.'</span></span><br><span class="line">    <span class="comment"># u'\n\n'</span></span><br><span class="line">    <span class="comment"># u'...'</span></span><br><span class="line">    <span class="comment"># u'\n'</span></span><br></pre></td></tr></tbody></table></figure><p>输出的字符串中可能包含了很多空格或空行,使用 .stripped_strings 可以去除多余空白内容：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> string <span class="keyword">in</span> soup.stripped_strings:</span><br><span class="line">    print(repr(string))</span><br><span class="line">    <span class="comment"># u"The Dormouse's story"</span></span><br><span class="line">    <span class="comment"># u"The Dormouse's story"</span></span><br><span class="line">    <span class="comment"># u'Once upon a time there were three little sisters; and their names were'</span></span><br><span class="line">    <span class="comment"># u'Elsie'</span></span><br><span class="line">    <span class="comment"># u','</span></span><br><span class="line">    <span class="comment"># u'Lacie'</span></span><br><span class="line">    <span class="comment"># u'and'</span></span><br><span class="line">    <span class="comment"># u'Tillie'</span></span><br><span class="line">    <span class="comment"># u';\nand they lived at the bottom of a well.'</span></span><br><span class="line">    <span class="comment"># u'...'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="获取标签属性"><a href="#获取标签属性" class="headerlink" title="获取标签属性"></a>获取标签属性</h3><p>1.通过下标获取</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">href = a[<span class="string">'href'</span>]</span><br></pre></td></tr></tbody></table></figure><p>2.通过attrs属性获取</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">href=a.attrs[<span class="string">'href'</span>]</span><br></pre></td></tr></tbody></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>string: 获取某个标签下的非标签字符串。返回来的是个字符串。</li><li>strings: 获取某个标签下的子孙非标签字符串。返回来的是个生成器。</li><li>stripped_strings:获取某个标签下的子孙非标签字符串，会去掉空白字符。返回来的<br>是个生成器。</li><li>get_ _text:获取某个标签下的子孙非标签字符串。不是以列表的形式返回，是以普通字<br>符串返回。</li></ol><h2 id="搜索文档树："><a href="#搜索文档树：" class="headerlink" title="搜索文档树："></a>搜索文档树：</h2><h3 id="1-find和find-all方法："><a href="#1-find和find-all方法：" class="headerlink" title="1. find和find_all方法："></a>1. find和find_all方法：</h3><p>搜索文档树，一般用得比较多的就是两个方法，一个是<code>find</code>，一个是<code>find_all</code>。<code>find</code>方法是找到第一个满足条件的标签后就立即返回，只返回一个元素。<code>find_all</code>方法是把所有满足条件的标签都选到，然后返回回去。使用这两个方法，最常用的用法是出入<code>name</code>以及<code>attr</code>参数找出符合要求的标签。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">"a"</span>,attrs={<span class="string">"id"</span>:<span class="string">"link2"</span>})</span><br></pre></td></tr></tbody></table></figure><p>或者是直接传入属性的的名字作为关键字参数：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">"a"</span>,id=<span class="string">'link2'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="2-select方法："><a href="#2-select方法：" class="headerlink" title="2. select方法："></a>2. select方法：</h3><p>使用以上方法可以方便的找出元素。但有时候使用<code>css</code>选择器的方式可以更加的方便。使用<code>css</code>选择器的语法，应该使用<code>select</code>方法。以下列出几种常用的<code>css</code>选择器方法：</p><h4 id="（1）通过标签名查找："><a href="#（1）通过标签名查找：" class="headerlink" title="（1）通过标签名查找："></a>（1）通过标签名查找：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">'a'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="（2）通过类名查找："><a href="#（2）通过类名查找：" class="headerlink" title="（2）通过类名查找："></a>（2）通过类名查找：</h4><p>通过类名，则应该在类的前面加一个<code>.</code>。比如要查找<code>class=sister</code>的标签。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">'.sister'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="（3）通过id查找："><a href="#（3）通过id查找：" class="headerlink" title="（3）通过id查找："></a>（3）通过id查找：</h4><p>通过id查找，应该在id的名字前面加一个＃号。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">"#link1"</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="（4）组合查找："><a href="#（4）组合查找：" class="headerlink" title="（4）组合查找："></a>（4）组合查找：</h4><p>组合查找即和写 class 文件时，标签名与类名、id名进行的组合原理是一样的，例如查找 p 标签中，id 等于 link1的内容，二者需要用空格分开：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">"p #link1"</span>))</span><br></pre></td></tr></tbody></table></figure><p>直接子标签查找，则使用 > 分隔：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">"head > title"</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="（5）通过属性查找："><a href="#（5）通过属性查找：" class="headerlink" title="（5）通过属性查找："></a>（5）通过属性查找：</h4><p>查找时还可以加入属性元素，属性需要用中括号括起来，注意属性和标签属于同一节点，所以中间不能加空格，否则会无法匹配到。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(soup.select(<span class="string">'a[href="http://example.com/elsie"]'</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="（6）获取内容"><a href="#（6）获取内容" class="headerlink" title="（6）获取内容"></a>（6）获取内容</h4><p>以上的 select 方法返回的结果都是列表形式，可以遍历形式输出，然后用 get_text() 方法来获取它的内容。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="keyword">print</span> type(soup.select(<span class="string">'title'</span>))</span><br><span class="line"><span class="keyword">print</span> soup.select(<span class="string">'title'</span>)[<span class="number">0</span>].get_text()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> title <span class="keyword">in</span> soup.select(<span class="string">'title'</span>):</span><br><span class="line">    <span class="keyword">print</span> title.get_text()</span><br></pre></td></tr></tbody></table></figure><p>祝祖国繁荣昌盛……</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;BeautifulSoup4库&quot;&gt;&lt;a href=&quot;#BeautifulSoup4库&quot; class=&quot;headerlink&quot; title=&quot;BeautifulSoup4库&quot;&gt;&lt;/a&gt;BeautifulSoup4库&lt;/h1&gt;&lt;p&gt;和 lxml 一样，Beautiful Soup 也是一个HTML/XML的解析器，主要的功能也是如何解析和提取 HTML/XML 数据。&lt;br&gt;lxml 只会局部遍历，而Beautiful Soup 是基于HTML DOM（Document Object Model）的，会载入整个文档，解析整个DOM树，因此时间和内存开销都会大很多，所以性能要低于lxml。&lt;br&gt;BeautifulSoup 用来解析 HTML 比较简单，API非常人性化，支持CSS选择器、Python标准库中的HTML解析器，也支持 lxml 的 XML解析器。&lt;br&gt;Beautiful Soup 3 目前已经停止开发，推荐现在的项目使用Beautiful Soup 4。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.cn/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.cn/tags/python/"/>
    
      <category term="python爬虫" scheme="http://philxling.cn/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>c++面向对象</title>
    <link href="http://philxling.cn/2020/04/02/c++/2-c-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://philxling.cn/2020/04/02/c++/2-c-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-04-02T15:05:41.000Z</published>
    <updated>2020-04-02T14:53:49.424Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h3 id="c-面向对象"><a href="#c-面向对象" class="headerlink" title="c++面向对象"></a>c++面向对象</h3><a id="more"></a><p><img src="/2020/04/02/c++/2-c-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20191108170627836.png" alt="image-20191108170627836"></p><p><img src="/2020/04/02/c++/2-c-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20191108171009756.png" alt="image-20191108171009756"></p><p><img src="/2020/04/02/c++/2-c-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20191108171843986.png" alt="image-20191108171843986"></p><p><img src="/2020/04/02/c++/2-c-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20191108172250542.png" alt="image-20191108172250542"></p><p>引用是指针常量</p><p>如:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> &b=a;</span><br></pre></td></tr></tbody></table></figure><p>即:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span> b=&a;</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/02/c++/2-c-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20191108205932273.png" alt="image-20191108205932273"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> ,<span class="keyword">int</span> =<span class="number">10</span>)</span></span>;<span class="comment">//占位参数,且可以有默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b=<span class="number">10000</span>,<span class="keyword">int</span> c=<span class="number">100</span>)</span></span>{<span class="comment">//若我们自己传入数据,就用自己的数据,如果没有,就用默认值 </span></span><br><span class="line"><span class="keyword">return</span> a+b+c;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//注意事项,若某个位置有了默认参数,那么从这个位置后的参数都必须要有默认值</span></span><br><span class="line"><span class="comment">//如果函数声明和函数实现只能有一个有默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<fun(<span class="number">10</span>,<span class="number">20</span>)<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>函数重载</strong></p><p>1 必须在同一个作用域下</p><p>2 函数名称相同</p><p>3 函数参数类型不同,或者个数不同,或者顺序不同</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">cout</span><<<span class="string">"fun"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span>)</span></span>{</span><br><span class="line">    <span class="built_in">cout</span><<<span class="string">"fun!"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//返回值不能作为函数重载的条件</span></span><br><span class="line"><span class="comment">//注意事项</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1 引用作为重载的条件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> &a)</span></span>{</span><br><span class="line">    <span class="built_in">cout</span><<<span class="string">"引用作为重载"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &a)</span></span>{</span><br><span class="line">    <span class="built_in">cout</span><<<span class="string">"const int &a作为重载"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">func(a);<span class="comment">//调用的是func(int &a)</span></span><br><span class="line">func(<span class="number">10</span>);<span class="comment">//调用的是func(const int &a)</span></span><br><span class="line"><span class="comment">//2 函数重载作为默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b=<span class="number">10</span>)</span></span>{</span><br><span class="line">    <span class="built_in">cout</span><<<span class="string">"func2(int a,int b=10)"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a)</span></span>{</span><br><span class="line">    <span class="built_in">cout</span><<<span class="string">"func2(int a)"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//出现歧义</span></span><br><span class="line"><span class="comment">//应该避免这种情况</span></span><br></pre></td></tr></tbody></table></figure><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//圆类</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>{</span></span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//权限,访问权限:public protected,private</span></span><br><span class="line"><span class="keyword">int</span> r ;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calculateZC</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>*PI*r;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"> Circle c1;</span><br><span class="line"> c1.r=<span class="number">3</span>;</span><br><span class="line"> <span class="built_in">cout</span><<<span class="string">"圆的周长:"</span><<c1.calculateZC()<<<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">} </span><br><span class="line"><span class="comment">//struct和class的区别:</span></span><br><span class="line"><span class="comment">//struct默认权限是public</span></span><br><span class="line"><span class="comment">//class默认权限是private</span></span><br></pre></td></tr></tbody></table></figure><p>构造函数</p><p>1 构造函数没有返回值,不用写void</p><p>2 函数名与类名相同</p><p>3 构造函数可以有参数,可以发生重载</p><p>4 创建对象的时候,构造函数会自动调用,且只调用一次</p><p>1 析构函数 进行清理的操作</p><p>2 没有返回值,不写void</p><p>3 函数名与类名相同,在名称前加~</p><p>4 对象在销毁前会自动调用析构函数,且只会调用一次</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="keyword">int</span> a){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"person构造函数的调用"</span><<<span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">cout</span><<a<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">~Person(){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"析构函数的调用"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">12</span>)</span></span>;<span class="comment">//在栈上的数据 </span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>拷贝构造</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数的分类和调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"无参"</span><<<span class="built_in">endl</span>; </span><br><span class="line">};<span class="comment">//无参构造 </span></span><br><span class="line">Person(<span class="keyword">int</span> a){<span class="comment">//有参构造 </span></span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"有参"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line">Person(<span class="keyword">const</span> Person &p){</span><br><span class="line"><span class="comment">//将传入的对象的所有属性拷贝到自己身上.</span></span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"拷贝构造"</span><<<span class="built_in">endl</span>; </span><br><span class="line">} </span><br><span class="line">~Person(){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"析构"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//括号法</span></span><br><span class="line">Person p1;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">12</span>)</span></span>; </span><br><span class="line"><span class="comment">//调用拷贝构造函数</span></span><br><span class="line"><span class="function">Person  <span class="title">p3</span><span class="params">(p1)</span></span>;</span><br><span class="line"><span class="comment">//注意事项:</span></span><br><span class="line"><span class="comment">//不能用Person p1()调用,编译器会认为一个函数,不会认为是创建对象 </span></span><br><span class="line"><span class="comment">//显示法</span></span><br><span class="line">Person p4=p1; </span><br><span class="line">Person(<span class="number">10</span>);<span class="comment">//匿名对象 ,当前行执行结束,系统会立即回收掉匿名对象 </span></span><br><span class="line"><span class="comment">//不要利用拷贝构造函数初始化匿名对象如: Person(p1); 编译器会认为Person (p1)==Person p1 ,对象声明 </span></span><br><span class="line"><span class="comment">//隐式转换法 </span></span><br><span class="line">Person  p5=<span class="number">10</span>;<span class="comment">//等价于 Person p5=Person(10); 有参构造 </span></span><br><span class="line">Person p6=p5;<span class="comment">//拷贝 </span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>拷贝构造函数使用时机</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造函数调用时机 </span></span><br><span class="line"><span class="comment">//1 使用一个已经创建的对象来初始化一个新对象 </span></span><br><span class="line"><span class="comment">//2 值传递的方式给函数传值</span></span><br><span class="line"><span class="comment">//3 值返回局部对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"默认"</span><<<span class="built_in">endl</span>; </span><br><span class="line">};</span><br><span class="line">Person(<span class="keyword">const</span> Person &p){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"拷贝构造"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">~Person(){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"析构"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">Person p1;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dowork</span><span class="params">(Person p)</span></span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>{</span><br><span class="line">Person p3;</span><br><span class="line">dowork(p3);</span><br><span class="line">}</span><br><span class="line"><span class="function">Person <span class="title">dowork1</span><span class="params">()</span></span>{</span><br><span class="line">Person p4;</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"p4--"</span><<(<span class="keyword">int</span>*)&p4<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> p4;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>{</span><br><span class="line">Person p5=dowork1();</span><br><span class="line"><span class="built_in">cout</span><<(<span class="keyword">int</span>*)&p5<<<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test1();</span><br><span class="line">test2();</span><br><span class="line">test3();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">} </span><br><span class="line"><span class="comment">/*默认</span></span><br><span class="line"><span class="comment">拷贝构造</span></span><br><span class="line"><span class="comment">析构</span></span><br><span class="line"><span class="comment">析构</span></span><br><span class="line"><span class="comment">默认</span></span><br><span class="line"><span class="comment">拷贝构造</span></span><br><span class="line"><span class="comment">析构</span></span><br><span class="line"><span class="comment">析构</span></span><br><span class="line"><span class="comment">默认</span></span><br><span class="line"><span class="comment">p4--0019FE64</span></span><br><span class="line"><span class="comment">拷贝构造</span></span><br><span class="line"><span class="comment">析构</span></span><br><span class="line"><span class="comment">0019FECC</span></span><br><span class="line"><span class="comment">析构</span></span><br><span class="line"><span class="comment">Press any key to continue</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//如果写了有参构造,编译器不提供无参</span></span><br><span class="line"><span class="comment">//写了拷贝构造,不提供其他构造函数</span></span><br></pre></td></tr></tbody></table></figure><p>深拷贝浅拷贝</p><p>浅拷贝:简单的赋值拷贝操作</p><p>深拷贝:在堆区重新申请空间,进行拷贝操作</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝,浅拷贝</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(){</span><br><span class="line">}</span><br><span class="line">~Person(){</span><br><span class="line"><span class="comment">//将堆区开辟的数据释放</span></span><br><span class="line"> <span class="keyword">if</span>(P_height!=<span class="literal">NULL</span>){</span><br><span class="line"> <span class="keyword">delete</span> P_height;</span><br><span class="line"> P_height=<span class="literal">NULL</span>;</span><br><span class="line"> } </span><br><span class="line">}</span><br><span class="line">Person(<span class="keyword">int</span> age,<span class="keyword">int</span> <span class="built_in">height</span>){</span><br><span class="line">P_height=<span class="keyword">new</span> <span class="keyword">int</span>(<span class="built_in">height</span>);</span><br><span class="line">P_age=age;</span><br><span class="line">}</span><br><span class="line">Person(<span class="keyword">const</span> Person &p){</span><br><span class="line">P_age=p.P_age;</span><br><span class="line"><span class="comment">//p_height=p.P_height;编译器执行的是这种</span></span><br><span class="line"><span class="comment">//用深拷贝解决</span></span><br><span class="line"> P_height=<span class="keyword">new</span> <span class="keyword">int</span>(*p.P_height); </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> P_age;</span><br><span class="line"><span class="keyword">int</span> *P_height;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span>{</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">12</span>,<span class="number">150</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(p)</span></span>;</span><br><span class="line"><span class="built_in">cout</span><<p.P_age<<*p.P_height<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><<p1.P_age<<*p1.P_height<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">Test1();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>初始化列表</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c):a(a),b(b),c(c){<span class="comment">//初始化列表 </span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span><<p.a<<p.b<<<span class="string">" "</span><<p.c<<<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>对象成员</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><string></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Phone(<span class="built_in">string</span> Phone_name):name(Phone_name){ </span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"Phone的构造"</span>; </span><br><span class="line">}</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="built_in">string</span> name,<span class="keyword">int</span> id):phone(name),P_id(id){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"Person的构造"</span>; </span><br><span class="line">}</span><br><span class="line">Phone phone;</span><br><span class="line"><span class="keyword">int</span> P_id;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="string">"apple"</span>,<span class="number">12</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span><<p.phone.name<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">} </span><br><span class="line"><span class="comment">//Phone的构造 Person的构造 apple</span></span><br><span class="line"><span class="comment">//先初始化Phone再初始化Person</span></span><br></pre></td></tr></tbody></table></figure><p>static成员</p><p>静态成员函数:所有对象共享,只能访问静态变量</p><p>静态成员变量:所有对象共有,类内声明,类外定义</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"静态成员函数"</span><<<span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">cout</span><<a++<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a; </span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="keyword">int</span> Person::a=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//对象访问</span></span><br><span class="line">Person p;</span><br><span class="line">p.fun(); </span><br><span class="line">Person::fun();<span class="comment">//类访问 </span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>只有非静态成员变量属于对象</p><p>空对象的内存占用为1个字节</p><p>this指针: this指针指向被调用的成员函数所属的对象,this指针是指针常量其指向不可以修改</p><p>1 可以解决名称冲突</p><p>2 返回此对象 return *this;</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">Person(<span class="keyword">int</span> age):age(age){</span><br><span class="line">}</span><br><span class="line"><span class="function">Person& <span class="title">addPersonAge</span><span class="params">(Person &p)</span></span>{</span><br><span class="line"><span class="keyword">this</span>->age+=p.age;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">p2.addPersonAge(p1).addPersonAge(p1).addPersonAge(p1);</span><br><span class="line"><span class="built_in">cout</span><<p1.age<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><<p2.age<<<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>常函数 :不能修改指针指向和值.</p><p>常对象:只能调用常函数</p><p><img src="/2020/04/02/c++/2-c-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20191110010838064.png" alt="image-20191110010838064"></p><p><img src="/2020/04/02/c++/2-c-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20191110011503286.png" alt="image-20191110011503286"></p><p>友元函数</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>{</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Building &b)</span></span>;<span class="comment">//友元函数//友元类 firend class GoodGay;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> sittingRoom;</span><br><span class="line">Building(){</span><br><span class="line">sittingRoom=<span class="string">"客厅"</span>;</span><br><span class="line">bedRoom=<span class="string">"卧室"</span>; </span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> bedRoom; </span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Building &b)</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<b.sittingRoom<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><<b.bedRoom<<<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">Building b;</span><br><span class="line">visit(b);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>{</span></span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodGay</span>;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> sittingRoom;</span><br><span class="line">Building(); </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> bedRoom; </span><br><span class="line">};</span><br><span class="line">Building::Building(){</span><br><span class="line">sittingRoom=<span class="string">"客厅"</span>;</span><br><span class="line">bedRoom=<span class="string">"卧室"</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodGay</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">GoodGay();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line">Building *building; </span><br><span class="line">}; </span><br><span class="line">GoodGay::GoodGay(){</span><br><span class="line">building=<span class="keyword">new</span> Building;</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<building->sittingRoom<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><<building->bedRoom<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">GoodGay gay;</span><br><span class="line">gay.visit();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>成员函数做友元</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="comment">//此处若要将哪个类的成员函数做右元,其类应放在前面,此乃大坑</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodGay</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">GoodGay();</span><br><span class="line">Building *building;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>{</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span>;<span class="comment">//将GoodGay类的visit作为BUilding的友元,GoodGay应该先定义.注意与友元类的区别</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Building();</span><br><span class="line"><span class="built_in">string</span> sitRoom;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> bedRoom;</span><br><span class="line"></span><br><span class="line">}; </span><br><span class="line">Building::Building(){</span><br><span class="line">sitRoom=<span class="string">"客厅"</span>;</span><br><span class="line">bedRoom=<span class="string">"卧室"</span>; </span><br><span class="line">}</span><br><span class="line">GoodGay::GoodGay(){</span><br><span class="line">building=<span class="keyword">new</span> Building;</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GoodGay::visit</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<building->sitRoom<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><<building->bedRoom<<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">GoodGay gay;</span><br><span class="line">gay.visit();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;c-面向对象&quot;&gt;&lt;a href=&quot;#c-面向对象&quot; class=&quot;headerlink&quot; title=&quot;c++面向对象&quot;&gt;&lt;/a&gt;c++面向对象&lt;/h3&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://philxling.cn/categories/c/"/>
    
    
      <category term="c++" scheme="http://philxling.cn/tags/c/"/>
    
      <category term="面向对象" scheme="http://philxling.cn/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式和re模块</title>
    <link href="http://philxling.cn/2020/03/24/python%E7%88%AC%E8%99%AB/6-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8Cre%E6%A8%A1%E5%9D%97/"/>
    <id>http://philxling.cn/2020/03/24/python%E7%88%AC%E8%99%AB/6-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8Cre%E6%A8%A1%E5%9D%97/</id>
    <published>2020-03-24T05:56:23.000Z</published>
    <updated>2020-04-02T15:13:29.141Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="3-正则表达式和re模块"><a href="#3-正则表达式和re模块" class="headerlink" title="3-正则表达式和re模块"></a>3-正则表达式和re模块</h1><h2 id="什么是正则表达式："><a href="#什么是正则表达式：" class="headerlink" title="什么是正则表达式："></a>什么是正则表达式：</h2><p>通俗理解：按照一定的规则，从某个字符串中匹配出想要的数据。这个规则就是正则表达式。<br>标准答案：<a href="https://baike.baidu.com/item/正则表达式/1700215?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/正则表达式/1700215?fr=aladdin</a></p><h2 id="一个段子："><a href="#一个段子：" class="headerlink" title="一个段子："></a>一个段子：</h2><p>世界是分为两种人，一种是懂正则表达式的，一种是不懂正则表达式的.</p><a id="more"></a><h2 id="正则表达式常用匹配规则："><a href="#正则表达式常用匹配规则：" class="headerlink" title="正则表达式常用匹配规则："></a>正则表达式常用匹配规则：</h2><h3 id="匹配某个字符串："><a href="#匹配某个字符串：" class="headerlink" title="匹配某个字符串："></a>匹配某个字符串：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'hello'</span></span><br><span class="line">ret = re.match(<span class="string">'he'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> he</span><br></pre></td></tr></tbody></table></figure><p>以上便可以在<code>hello</code>中，匹配出<code>he</code>。</p><h3 id="点（-）匹配任意的字符："><a href="#点（-）匹配任意的字符：" class="headerlink" title="点（.）匹配任意的字符："></a>点（.）匹配任意的字符：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"ab"</span></span><br><span class="line">ret = re.match(<span class="string">'.'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> a</span><br></pre></td></tr></tbody></table></figure><p>但是点（.）不能匹配不到换行符。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"ab"</span></span><br><span class="line">ret = re.match(<span class="string">'.'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="d匹配任意的数字："><a href="#d匹配任意的数字：" class="headerlink" title="\d匹配任意的数字："></a>\d匹配任意的数字：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"123"</span></span><br><span class="line">ret = re.match(<span class="string">'\d'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h3 id="D匹配任意的非数字："><a href="#D匹配任意的非数字：" class="headerlink" title="\D匹配任意的非数字："></a>\D匹配任意的非数字：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"a"</span></span><br><span class="line">ret = re.match(<span class="string">'\D'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> a</span><br></pre></td></tr></tbody></table></figure><p>而如果text是等于一个数字，那么就匹配不成功了。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"1"</span></span><br><span class="line">ret = re.match(<span class="string">'\D'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="s匹配的是空白字符（包括：-n，-t，-r和空格）："><a href="#s匹配的是空白字符（包括：-n，-t，-r和空格）：" class="headerlink" title="\s匹配的是空白字符（包括：\n，\t，\r和空格）："></a>\s匹配的是空白字符（包括：\n，\t，\r和空格）：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"\t"</span></span><br><span class="line">ret = re.match(<span class="string">'\s'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> 空白</span><br></pre></td></tr></tbody></table></figure><h3 id="w匹配的是a-z和A-Z以及数字和下划线："><a href="#w匹配的是a-z和A-Z以及数字和下划线：" class="headerlink" title="\w匹配的是a-z和A-Z以及数字和下划线："></a>\w匹配的是<code>a-z</code>和<code>A-Z</code>以及数字和下划线：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"_"</span></span><br><span class="line">ret = re.match(<span class="string">'\w'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> _</span><br></pre></td></tr></tbody></table></figure><p>而如果要匹配一个其他的字符，那么就匹配不到。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"+"</span></span><br><span class="line">ret = re.match(<span class="string">'\w'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> AttributeError: <span class="string">'NoneType'</span> object has no attribute</span><br></pre></td></tr></tbody></table></figure><h3 id="W匹配的是和-w相反的："><a href="#W匹配的是和-w相反的：" class="headerlink" title="\W匹配的是和\w相反的："></a>\W匹配的是和\w相反的：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"+"</span></span><br><span class="line">ret = re.match(<span class="string">'\W'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> +</span><br></pre></td></tr></tbody></table></figure><p>而如果你的text是一个下划线或者英文字符，那么就匹配不到了。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"_"</span></span><br><span class="line">ret = re.match(<span class="string">'\W'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> AttributeError: <span class="string">'NoneType'</span> object has no attribute</span><br></pre></td></tr></tbody></table></figure><h3 id="组合的方式，只要满足中括号中的某一项都算匹配成功："><a href="#组合的方式，只要满足中括号中的某一项都算匹配成功：" class="headerlink" title="[]组合的方式，只要满足中括号中的某一项都算匹配成功："></a>[]组合的方式，只要满足中括号中的某一项都算匹配成功：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"0731-88888888"</span></span><br><span class="line">ret = re.match(<span class="string">'[\d\-]+'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> <span class="number">0731</span><span class="number">-88888888</span></span><br></pre></td></tr></tbody></table></figure><p>之前讲到的几种匹配规则，其实可以使用中括号的形式来进行替代：</p><ul><li>\d：[0-9]</li><li>\D：<a href="#fn_0-9">0-9</a></li><li>\w：[0-9a-zA-Z_]</li><li>\W：[^0-9a-zA-Z_]</li></ul><h3 id="匹配多个字符："><a href="#匹配多个字符：" class="headerlink" title="匹配多个字符："></a>匹配多个字符：</h3><ol><li><p><code>*</code>：可以匹配0或者任意多个字符。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"0731"</span></span><br><span class="line">ret = re.match(<span class="string">'\d*'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> <span class="number">0731</span></span><br></pre></td></tr></tbody></table></figure><p>以上因为匹配的要求是<code>\d</code>，那么就要求是数字，后面跟了一个星号，就可以匹配到0731这四个字符。</p></li><li><p><code>+</code>：可以匹配1个或者多个字符。最少一个。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"abc"</span></span><br><span class="line">ret = re.match(<span class="string">'\w+'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> abc</span><br></pre></td></tr></tbody></table></figure><p>因为匹配的是<code>\w</code>，那么就要求是英文字符，后面跟了一个加号，意味着最少要有一个满足<code>\w</code>的字符才能够匹配到。如果text是一个空白字符或者是一个不满足\w的字符，那么就会报错。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">""</span></span><br><span class="line">ret = re.match(<span class="string">'\w+'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> AttributeError: <span class="string">'NoneType'</span> object has no attribute</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>?</code>：匹配的字符可以出现一次或者不出现（0或者1）。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"123"</span></span><br><span class="line">ret = re.match(<span class="string">'\d?'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><code>{m}</code>：匹配m个字符。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"123"</span></span><br><span class="line">ret = re.match(<span class="string">'\d{2}'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> <span class="number">12</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><code>{m,n}</code>：匹配m-n个字符。在这中间的字符都可以匹配到。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"123"</span></span><br><span class="line">ret = re.match(<span class="string">'\d{1,2}'</span>,text)</span><br><span class="line">prit(ret.group())</span><br><span class="line">>> <span class="number">12</span></span><br></pre></td></tr></tbody></table></figure><p>如果text只有一个字符，那么也可以匹配出来。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"1"</span></span><br><span class="line">ret = re.match(<span class="string">'\d{1,2}'</span>,text)</span><br><span class="line">prit(ret.group())</span><br><span class="line">>> <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="小案例："><a href="#小案例：" class="headerlink" title="小案例："></a>小案例：</h3><ol><li><p>验证手机号码：手机号码的规则是以<code>1</code>开头，第二位可以是<code>34587</code>，后面那9位就可以随意了。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"18570631587"</span></span><br><span class="line">ret = re.match(<span class="string">'1[34587]\d{9}'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> <span class="number">18570631587</span></span><br></pre></td></tr></tbody></table></figure><p>而如果是个不满足条件的手机号码。那么就匹配不到了。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"1857063158"</span></span><br><span class="line">ret = re.match(<span class="string">'1[34587]\d{9}'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> AttributeError: <span class="string">'NoneType'</span> object has no attribute</span><br></pre></td></tr></tbody></table></figure></li><li><p>验证邮箱：邮箱的规则是邮箱名称是用<code>数字、数字、下划线</code>组成的，然后是<code>@</code>符号，后面就是域名了。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"hynever@163.com"</span></span><br><span class="line">ret = re.match(<span class="string">'\w+@\w+\.[a-zA-Z\.]+'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure></li><li><p>验证URL：URL的规则是前面是<code>http</code>或者<code>https</code>或者是<code>ftp</code>然后再加上一个冒号，再加上一个斜杠，再后面就是可以出现任意非空白字符了。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"http://www.baidu.com/"</span></span><br><span class="line">ret = re.match(<span class="string">'(http|https|ftp)://[^\s]+'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure></li><li><p>验证身份证：身份证的规则是，总共有18位，前面17位都是数字，后面一位可以是数字，也可以是小写的x，也可以是大写的X。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"3113111890812323X"</span></span><br><span class="line">ret = re.match(<span class="string">'\d{17}[\dxX]'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="（脱字号）：表示以…开始："><a href="#（脱字号）：表示以…开始：" class="headerlink" title="^（脱字号）：表示以…开始："></a>^（脱字号）：表示以…开始：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"hello"</span></span><br><span class="line">ret = re.match(<span class="string">'^h'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure><p>如果是在中括号中，那么代表的是取反操作.</p><h3 id="：表示以…结束："><a href="#：表示以…结束：" class="headerlink" title="$：表示以…结束："></a>$：表示以…结束：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配163.com的邮箱</span></span><br><span class="line">text = <span class="string">"xxx@163.com"</span></span><br><span class="line">ret = re.search(<span class="string">'\w+@163\.com$'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> xxx@<span class="number">163.</span>com</span><br></pre></td></tr></tbody></table></figure><h3 id="：匹配多个表达式或者字符串："><a href="#：匹配多个表达式或者字符串：" class="headerlink" title="|：匹配多个表达式或者字符串："></a>|：匹配多个表达式或者字符串：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"hello|world"</span></span><br><span class="line">ret = re.search(<span class="string">'hello'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> hello</span><br></pre></td></tr></tbody></table></figure><h3 id="贪婪模式和非贪婪模式："><a href="#贪婪模式和非贪婪模式：" class="headerlink" title="贪婪模式和非贪婪模式："></a>贪婪模式和非贪婪模式：</h3><p>贪婪模式：正则表达式会匹配尽量多的字符。默认是贪婪模式。<br>非贪婪模式：正则表达式会尽量少的匹配字符。<br>示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"0123456"</span></span><br><span class="line">ret = re.match(<span class="string">'\d+'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line"><span class="comment"># 因为默认采用贪婪模式，所以会输出0123456</span></span><br><span class="line">>> <span class="number">0123456</span></span><br></pre></td></tr></tbody></table></figure><p>可以改成非贪婪模式，那么就只会匹配到0。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"0123456"</span></span><br><span class="line">ret = re.match(<span class="string">'\d+?'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure><h3 id="案例：匹配0-100之间的数字："><a href="#案例：匹配0-100之间的数字：" class="headerlink" title="案例：匹配0-100之间的数字："></a>案例：匹配<code>0-100</code>之间的数字：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'99'</span></span><br><span class="line">ret = re.match(<span class="string">'[1-9]?\d$|100$'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> <span class="number">99</span></span><br></pre></td></tr></tbody></table></figure><p>而如果<code>text=101</code>，那么就会抛出一个异常。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'101'</span></span><br><span class="line">ret = re.match(<span class="string">'[1-9]?\d$|100$'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="转义字符和原生字符串："><a href="#转义字符和原生字符串：" class="headerlink" title="转义字符和原生字符串："></a>转义字符和原生字符串：</h3><p>在正则表达式中，有些字符是有特殊意义的字符。因此如果想要匹配这些字符，那么就必须使用反斜杠进行转义。比如<code>$</code>代表的是以…结尾，如果想要匹配<code>$</code>，那么就必须使用<code>\$</code>。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"apple price is \$99,orange paice is $88"</span></span><br><span class="line">ret = re.search(<span class="string">'\$(\d+)'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> $<span class="number">99</span></span><br></pre></td></tr></tbody></table></figure><p>原生字符串：<br>在正则表达式中，<code>\</code>是专门用来做转义的。在Python中<code>\</code>也是用来做转义的。因此如果想要在普通的字符串中匹配出<code>\</code>，那么要给出四个<code>\</code>。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"apple \c"</span></span><br><span class="line">ret = re.search(<span class="string">'\\\\c'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure><p>因此要使用原生字符串就可以解决这个问题：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"apple \c"</span></span><br><span class="line">ret = re.search(<span class="string">r'\\c'</span>,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="re模块中常用函数："><a href="#re模块中常用函数：" class="headerlink" title="re模块中常用函数："></a>re模块中常用函数：</h2><h3 id="match："><a href="#match：" class="headerlink" title="match："></a>match：</h3><p>从开始的位置进行匹配。如果开始的位置没有匹配到。就直接失败了。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'hello'</span></span><br><span class="line">ret = re.match(<span class="string">'h'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> h</span><br></pre></td></tr></tbody></table></figure><p>如果第一个字母不是<code>h</code>，那么就会失败。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'ahello'</span></span><br><span class="line">ret = re.match(<span class="string">'h'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></tbody></table></figure><p>如果想要匹配换行的数据，那么就要传入一个<code>flag=re.DOTALL</code>，就可以匹配换行符了。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"abc\nabc"</span></span><br><span class="line">ret = re.match(<span class="string">'abc.*abc'</span>,text,re.DOTALL)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure><h3 id="search："><a href="#search：" class="headerlink" title="search："></a>search：</h3><p>在字符串中找满足条件的字符。如果找到，就返回。说白了，就是只会找到第一个满足条件的。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'apple price $99 orange price $88'</span></span><br><span class="line">ret = re.search(<span class="string">'\d+'</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">>> <span class="number">99</span></span><br></pre></td></tr></tbody></table></figure><h3 id="分组："><a href="#分组：" class="headerlink" title="分组："></a>分组：</h3><p>在正则表达式中，可以对过滤到的字符串进行分组。分组使用圆括号的方式。</p><ol><li><code>group</code>：和<code>group(0)</code>是等价的，返回的是整个满足条件的字符串。</li><li><code>groups</code>：返回的是里面的子组。索引从1开始。</li><li><code>group(1)</code>：返回的是第一个子组，可以传入多个。<br>示例代码如下：</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"apple price is $99,orange price is $10"</span></span><br><span class="line">ret = re.search(<span class="string">r".*(\$\d+).*(\$\d+)"</span>,text)</span><br><span class="line">print(ret.group())</span><br><span class="line">print(ret.group(<span class="number">0</span>))</span><br><span class="line">print(ret.group(<span class="number">1</span>))</span><br><span class="line">print(ret.group(<span class="number">2</span>))</span><br><span class="line">print(ret.groups())</span><br></pre></td></tr></tbody></table></figure><h3 id="findall："><a href="#findall：" class="headerlink" title="findall："></a>findall：</h3><p>找出所有满足条件的，返回的是一个列表。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'apple price $99 orange price $88'</span></span><br><span class="line">ret = re.findall(<span class="string">'\d+'</span>,text)</span><br><span class="line">print(ret)</span><br><span class="line">>> [<span class="string">'99'</span>, <span class="string">'88'</span>]</span><br></pre></td></tr></tbody></table></figure><h3 id="sub："><a href="#sub：" class="headerlink" title="sub："></a>sub：</h3><p>用来替换字符串。将匹配到的字符串替换为其他字符串。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'apple price $99 orange price $88'</span></span><br><span class="line">ret = re.sub(<span class="string">'\d+'</span>,<span class="string">'0'</span>,text)</span><br><span class="line">print(ret)</span><br><span class="line">>> apple price $<span class="number">0</span> orange price $<span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><p><code>sub</code>函数的案例，获取拉勾网中的数据：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string"><div></span></span><br><span class="line"><span class="string"><p>基本要求：</p></span></span><br><span class="line"><span class="string"><p>1、精通HTML5、CSS3、 JavaScript等Web前端开发技术，对html5页面适配充分了解，熟悉不同浏览器间的差异，熟练写出兼容各种浏览器的代码；</p></span></span><br><span class="line"><span class="string"><p>2、熟悉运用常见JS开发框架，如JQuery、vue、angular，能快速高效实现各种交互效果；</p></span></span><br><span class="line"><span class="string"><p>3、熟悉编写能够自动适应HTML5界面，能让网页格式自动适应各款各大小的手机；</p></span></span><br><span class="line"><span class="string"><p>4、利用HTML5相关技术开发移动平台、PC终端的前端页面，实现HTML5模板化；</p></span></span><br><span class="line"><span class="string"><p>5、熟悉手机端和PC端web实现的差异，有移动平台web前端开发经验，了解移动互联网产品和行业，有在Android,iOS等平台下HTML5+CSS+JavaScript（或移动JS框架）开发经验者优先考虑；6、良好的沟通能力和团队协作精神，对移动互联网行业有浓厚兴趣，有较强的研究能力和学习能力；</p></span></span><br><span class="line"><span class="string"><p>7、能够承担公司前端培训工作，对公司各业务线的前端（HTML5\CSS3）工作进行支撑和指导。</p></span></span><br><span class="line"><span class="string"><p><br></p></span></span><br><span class="line"><span class="string"><p>岗位职责：</p></span></span><br><span class="line"><span class="string"><p>1、利用html5及相关技术开发移动平台、微信、APP等前端页面，各类交互的实现；</p></span></span><br><span class="line"><span class="string"><p>2、持续的优化前端体验和页面响应速度，并保证兼容性和执行效率；</p></span></span><br><span class="line"><span class="string"><p>3、根据产品需求，分析并给出最优的页面前端结构解决方案；</p></span></span><br><span class="line"><span class="string"><p>4、协助后台及客户端开发人员完成功能开发和调试；</p></span></span><br><span class="line"><span class="string"><p>5、移动端主流浏览器的适配、移动端界面自适应研发。</p></span></span><br><span class="line"><span class="string"></div></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">ret = re.sub(<span class="string">'</?[a-zA-Z0-9]+>'</span>,<span class="string">""</span>,html)</span><br><span class="line">print(ret)</span><br></pre></td></tr></tbody></table></figure><h3 id="split："><a href="#split：" class="headerlink" title="split："></a>split：</h3><p>使用正则表达式来分割字符串。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"hello world ni hao"</span></span><br><span class="line">ret = re.split(<span class="string">'\W'</span>,text)</span><br><span class="line">print(ret)</span><br><span class="line">>> [<span class="string">"hello"</span>,<span class="string">"world"</span>,<span class="string">"ni"</span>,<span class="string">"hao"</span>]</span><br></pre></td></tr></tbody></table></figure><h3 id="compile："><a href="#compile：" class="headerlink" title="compile："></a>compile：</h3><p>对于一些经常要用到的正则表达式，可以使用<code>compile</code>进行编译，后期再使用的时候可以直接拿过来用，执行效率会更快。而且<code>compile</code>还可以指定<code>flag=re.VERBOSE</code>，在写正则表达式的时候可以做好注释。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"the number is 20.50"</span></span><br><span class="line">r = re.compile(<span class="string">r"""</span></span><br><span class="line"><span class="string">                \d+ # 小数点前面的数字</span></span><br><span class="line"><span class="string">                \.? # 小数点</span></span><br><span class="line"><span class="string">                \d* # 小数点后面的数字</span></span><br><span class="line"><span class="string">                """</span>,re.VERBOSE)</span><br><span class="line">ret = re.search(r,text)</span><br><span class="line">print(ret.group())</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;3-正则表达式和re模块&quot;&gt;&lt;a href=&quot;#3-正则表达式和re模块&quot; class=&quot;headerlink&quot; title=&quot;3-正则表达式和re模块&quot;&gt;&lt;/a&gt;3-正则表达式和re模块&lt;/h1&gt;&lt;h2 id=&quot;什么是正则表达式：&quot;&gt;&lt;a href=&quot;#什么是正则表达式：&quot; class=&quot;headerlink&quot; title=&quot;什么是正则表达式：&quot;&gt;&lt;/a&gt;什么是正则表达式：&lt;/h2&gt;&lt;p&gt;通俗理解：按照一定的规则，从某个字符串中匹配出想要的数据。这个规则就是正则表达式。&lt;br&gt;标准答案：&lt;a href=&quot;https://baike.baidu.com/item/正则表达式/1700215?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://baike.baidu.com/item/正则表达式/1700215?fr=aladdin&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一个段子：&quot;&gt;&lt;a href=&quot;#一个段子：&quot; class=&quot;headerlink&quot; title=&quot;一个段子：&quot;&gt;&lt;/a&gt;一个段子：&lt;/h2&gt;&lt;p&gt;世界是分为两种人，一种是懂正则表达式的，一种是不懂正则表达式的.&lt;/p&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.cn/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.cn/tags/python/"/>
    
      <category term="python爬虫" scheme="http://philxling.cn/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>xpath语法与lxml库</title>
    <link href="http://philxling.cn/2020/03/24/python%E7%88%AC%E8%99%AB/5-xpath%E8%AF%AD%E6%B3%95%E4%B8%8Elxml%E5%BA%93/"/>
    <id>http://philxling.cn/2020/03/24/python%E7%88%AC%E8%99%AB/5-xpath%E8%AF%AD%E6%B3%95%E4%B8%8Elxml%E5%BA%93/</id>
    <published>2020-03-24T04:43:56.000Z</published>
    <updated>2020-04-02T15:13:16.758Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="xpath语法与lxml库"><a href="#xpath语法与lxml库" class="headerlink" title="xpath语法与lxml库"></a>xpath语法与lxml库</h1><h2 id="什么是XPath？"><a href="#什么是XPath？" class="headerlink" title="什么是XPath？"></a>什么是XPath？</h2><p>xpath（XML Path Language）是一门在XML和HTML文档中查找信息的语言，可用来在XML和HTML文档中对元素和属性进行遍历。</p><a id="more"></a><h2 id="XPath开发工具"><a href="#XPath开发工具" class="headerlink" title="XPath开发工具"></a>XPath开发工具</h2><ol><li>Chrome插件XPath Helper。</li><li>Firefox插件Try XPath。</li></ol><h2 id="XPath语法"><a href="#XPath语法" class="headerlink" title="XPath语法"></a>XPath语法</h2><h3 id="选取节点："><a href="#选取节点：" class="headerlink" title="选取节点："></a>选取节点：</h3><p>XPath 使用路径表达式来选取 XML 文档中的节点或者节点集。这些路径表达式和我们在常规的电脑文件系统中看到的表达式非常相似。</p><table><thead><tr><th>表达式</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点</td><td>bookstore</td><td>选取bookstore下所有的子节点</td></tr><tr><td>/</td><td>如果是在最前面，代表从根节点选取。否则选择某节点下的某个节点</td><td>/bookstore</td><td>选取根元素下所有的bookstore节点</td></tr><tr><td>//</td><td>从全局节点中选择节点，随便在哪个位置</td><td>//book</td><td>从全局节点中找到所有的book节点</td></tr><tr><td>@</td><td>选取某个节点的属性</td><td>//book[@price]</td><td>选择所有拥有price属性的book节点</td></tr><tr><td>.</td><td>当前节点</td><td>./a</td><td>选取当前节点下的a标签</td></tr></tbody></table><h3 id="谓语："><a href="#谓语：" class="headerlink" title="谓语："></a>谓语：</h3><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点，被嵌在方括号中。<br>在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：</p><table><thead><tr><th>路径表达式</th><th>描述</th></tr></thead><tbody><tr><td>/bookstore/book[1]</td><td>选取bookstore下的第一个子元素</td></tr><tr><td>/bookstore/book[last()]</td><td>选取bookstore下的倒数第二个book元素。</td></tr><tr><td>bookstore/book[position()<3]</td><td>选取bookstore下前面两个子元素。</td></tr><tr><td>//book[@price]</td><td>选取拥有price属性的book元素</td></tr><tr><td>//book[@price=10]</td><td>选取所有属性price等于10的book元素</td></tr></tbody></table><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>*表示通配符。</p><table><thead><tr><th align="left">通配符</th><th align="left">描述</th><th align="left">示例</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">匹配任意节点</td><td align="left">/bookstore/*</td><td align="left">选取bookstore下的所有子元素。</td></tr><tr><td align="left">@*</td><td align="left">匹配节点中的任何属性</td><td align="left">//book[@*]</td><td align="left">选取所有带有属性的book元素。</td></tr></tbody></table><h3 id="选取多个路径："><a href="#选取多个路径：" class="headerlink" title="选取多个路径："></a>选取多个路径：</h3><p>通过在路径表达式中使用“|”运算符，可以选取若干个路径。<br>示例如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//bookstore/book | //book/title</span><br><span class="line"># 选取所有book元素以及book元素下所有的title元素</span><br></pre></td></tr></tbody></table></figure><h3 id="运算符："><a href="#运算符：" class="headerlink" title="运算符："></a>运算符：</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th><th align="left">返回值</th></tr></thead><tbody><tr><td align="left">|</td><td align="left">计算两个节点集</td><td align="left">//book | //cd</td><td align="left">返回所有拥有 book 和 cd 元素的节点集</td></tr><tr><td align="left">+</td><td align="left">加法</td><td align="left">6 + 4</td><td align="left">10</td></tr><tr><td align="left">-</td><td align="left">减法</td><td align="left">6 - 4</td><td align="left">2</td></tr><tr><td align="left">*</td><td align="left">乘法</td><td align="left">6 * 4</td><td align="left">24</td></tr><tr><td align="left">div</td><td align="left">除法</td><td align="left">8 div 4</td><td align="left">2</td></tr><tr><td align="left">=</td><td align="left">等于</td><td align="left">price=9.80</td><td align="left">如果 price 是 9.80，则返回 true。如果 price 是 9.90，则返回 false。</td></tr><tr><td align="left">!=</td><td align="left">不等于</td><td align="left">price!=9.80</td><td align="left">如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td></tr><tr><td align="left"><</td><td align="left">小于</td><td align="left">price<9.80</td><td align="left">如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td></tr><tr><td align="left"><=</td><td align="left">小于或等于</td><td align="left">price<=9.80</td><td align="left">如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td></tr><tr><td align="left">></td><td align="left">大于</td><td align="left">price>9.80</td><td align="left">如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td></tr><tr><td align="left">>=</td><td align="left">大于或等于</td><td align="left">price>=9.80</td><td align="left">如果 price 是 9.90，则返回 true。如果 price 是 9.70，则返回 false。</td></tr><tr><td align="left">or</td><td align="left">或</td><td align="left">price=9.80 or price=9.70</td><td align="left">如果 price 是 9.80，则返回 true。如果 price 是 9.50，则返回 false。</td></tr><tr><td align="left">and</td><td align="left">与</td><td align="left">price>9.00 and price<9.90</td><td align="left">如果 price 是 9.80，则返回 true。如果 price 是 8.50，则返回 false。</td></tr><tr><td align="left">mod</td><td align="left">计算除法的余数</td><td align="left">5 mod 2</td><td align="left">1</td></tr></tbody></table><h2 id="lxml库"><a href="#lxml库" class="headerlink" title="lxml库"></a>lxml库</h2><p>lxml 是 一个HTML/XML的解析器，主要的功能是如何解析和提取 HTML/XML 数据。</p><p>lxml和正则一样，也是用 C 实现的，是一款高性能的 Python HTML/XML 解析器，我们可以利用之前学习的XPath语法，来快速的定位特定元素以及节点信息。</p><p>lxml python 官方文档：<a href="http://lxml.de/index.html" target="_blank" rel="noopener">http://lxml.de/index.html</a></p><p>需要安装C语言库，可使用 pip 安装：pip install lxml</p><h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><p>我们可以利用他来解析HTML代码，并且在解析HTML代码的时候，如果HTML代码不规范，他会自动的进行补全。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 lxml 的 etree 库</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree </span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string"><div></span></span><br><span class="line"><span class="string">    <ul></span></span><br><span class="line"><span class="string">         <li class="item-0"><a href="link1.html">first item</a></li></span></span><br><span class="line"><span class="string">         <li class="item-1"><a href="link2.html">second item</a></li></span></span><br><span class="line"><span class="string">         <li class="item-inactive"><a href="link3.html">third item</a></li></span></span><br><span class="line"><span class="string">         <li class="item-1"><a href="link4.html">fourth item</a></li></span></span><br><span class="line"><span class="string">         <li class="item-0"><a href="link5.html">fifth item</a> # 注意，此处缺少一个 </li> 闭合标签</span></span><br><span class="line"><span class="string">     </ul></span></span><br><span class="line"><span class="string"> </div></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#利用etree.HTML，将字符串解析为HTML文档</span></span><br><span class="line">html = etree.HTML(text) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 按字符串序列化HTML文档</span></span><br><span class="line">result = etree.tostring(html) </span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></tbody></table></figure><p>输入结果如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">html</span>></span><span class="tag"><<span class="name">body</span>></span></span><br><span class="line"><span class="tag"><<span class="name">div</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">ul</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link1.html"</span>></span>first item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>></span>second item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-inactive"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>></span>third item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>></span>fourth item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>></span>fifth item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line"><span class="tag"></<span class="name">ul</span>></span></span><br><span class="line"> <span class="tag"></<span class="name">div</span>></span></span><br><span class="line"><span class="tag"></<span class="name">body</span>></span><span class="tag"></<span class="name">html</span>></span></span><br></pre></td></tr></tbody></table></figure><p>可以看到。lxml会自动修改HTML代码。例子中不仅补全了li标签，还添加了body，html标签。</p><h3 id="从文件中读取html代码："><a href="#从文件中读取html代码：" class="headerlink" title="从文件中读取html代码："></a>从文件中读取html代码：</h3><p>除了直接使用字符串进行解析，lxml还支持从文件中读取内容。我们新建一个hello.html文件：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><!-- hello.html --></span></span><br><span class="line"><span class="tag"><<span class="name">div</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">ul</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link1.html"</span>></span>first item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link2.html"</span>></span>second item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-inactive"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link3.html"</span>></span><span class="tag"><<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bold"</span>></span>third item<span class="tag"></<span class="name">span</span>></span><span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-1"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link4.html"</span>></span>fourth item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">         <span class="tag"><<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>></span><span class="tag"><<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>></span>fifth item<span class="tag"></<span class="name">a</span>></span><span class="tag"></<span class="name">li</span>></span></span><br><span class="line">     <span class="tag"></<span class="name">ul</span>></span></span><br><span class="line"> <span class="tag"></<span class="name">div</span>></span></span><br></pre></td></tr></tbody></table></figure><p>然后利用<code>etree.parse()</code>方法来读取文件。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取外部文件 hello.html</span></span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = etree.tostring(html, pretty_print=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></tbody></table></figure><p>输入结果和之前是相同的。</p><h3 id="在lxml中使用XPath语法："><a href="#在lxml中使用XPath语法：" class="headerlink" title="在lxml中使用XPath语法："></a>在lxml中使用XPath语法：</h3><ol><li><p>获取所有li标签：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line"><span class="keyword">print</span> type(html)  <span class="comment"># 显示etree.parse() 返回类型</span></span><br><span class="line">   </span><br><span class="line">result = html.xpath(<span class="string">'//li'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)  <span class="comment"># 打印<li>标签的元素集合</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>获取所有li元素下的所有class属性的值：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li/@class'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></tbody></table></figure></li><li><p>获取li标签下href为<code>www.baidu.com</code>的a标签：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li/a[@href="www.baidu.com"]'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></tbody></table></figure></li><li><p>获取li标签下所有span标签：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment">#result = html.xpath('//li/span')</span></span><br><span class="line"><span class="comment">#注意这么写是不对的：</span></span><br><span class="line"><span class="comment">#因为 / 是用来获取子元素的，而 <span> 并不是 <li> 的子元素，所以，要用双斜杠</span></span><br><span class="line">   </span><br><span class="line">result = html.xpath(<span class="string">'//li//span'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></tbody></table></figure></li><li><p>获取li标签下的a标签里的所有class：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li/a//@class'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></tbody></table></figure></li><li><p>获取最后一个li的a的href属性对应的值：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">   </span><br><span class="line">result = html.xpath(<span class="string">'//li[last()]/a/@href'</span>)</span><br><span class="line"><span class="comment"># 谓语 [last()] 可以找到最后一个元素</span></span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></tbody></table></figure></li><li><p>获取倒数第二个li元素的内容：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li[last()-1]/a'</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># text 方法可以获取元素内容</span></span><br><span class="line">print(result[<span class="number">0</span>].text)</span><br></pre></td></tr></tbody></table></figure></li><li><p>获取倒数第二个li元素的内容的第二种方式：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">   </span><br><span class="line">html = etree.parse(<span class="string">'hello.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li[last()-1]/a/text()'</span>)</span><br><span class="line">   </span><br><span class="line">print(result)</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="使用requests和xpath爬取电影天堂"><a href="#使用requests和xpath爬取电影天堂" class="headerlink" title="使用requests和xpath爬取电影天堂"></a>使用requests和xpath爬取电影天堂</h2><p>示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">BASE_DOMAIN = <span class="string">'http://www.dytt8.net'</span></span><br><span class="line">HEADERS = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'http://www.dytt8.net/html/gndy/dyzz/list_23_2.html'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spider</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://www.dytt8.net/html/gndy/dyzz/list_23_1.html'</span></span><br><span class="line">    resp = requests.get(url,headers=HEADERS)</span><br><span class="line">    <span class="comment"># resp.content：经过编码后的字符串</span></span><br><span class="line">    <span class="comment"># resp.text：没有经过编码，也就是unicode字符串</span></span><br><span class="line">    <span class="comment"># text：相当于是网页中的源代码了</span></span><br><span class="line">    text = resp.content.decode(<span class="string">'gbk'</span>)</span><br><span class="line">    <span class="comment"># tree：经过lxml解析后的一个对象，以后使用这个对象的xpath方法，就可以</span></span><br><span class="line">    <span class="comment"># 提取一些想要的数据了</span></span><br><span class="line">    tree = etree.HTML(text)</span><br><span class="line">    <span class="comment"># xpath/beautifulsou4</span></span><br><span class="line">    all_a = tree.xpath(<span class="string">"//div[@class='co_content8']//a"</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> all_a:</span><br><span class="line">        title = a.xpath(<span class="string">"text()"</span>)[<span class="number">0</span>]</span><br><span class="line">        href = a.xpath(<span class="string">"@href"</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> href.startswith(<span class="string">'/'</span>):</span><br><span class="line">            detail_url = BASE_DOMAIN + href</span><br><span class="line">            crawl_detail(detail_url)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl_detail</span><span class="params">(url)</span>:</span></span><br><span class="line">    resp = requests.get(url,headers=HEADERS)</span><br><span class="line">    text = resp.content.decode(<span class="string">'gbk'</span>)</span><br><span class="line">    tree = etree.HTML(text)</span><br><span class="line">    create_time = tree.xpath(<span class="string">"//div[@class='co_content8']/ul/text()"</span>)[<span class="number">0</span>].strip()</span><br><span class="line">    imgs = tree.xpath(<span class="string">"//div[@id='Zoom']//img/@src"</span>)</span><br><span class="line">    <span class="comment"># 电影海报</span></span><br><span class="line">    cover = imgs[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 电影截图</span></span><br><span class="line">    screenshoot = imgs[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 获取span标签下所有的文本</span></span><br><span class="line">    infos = tree.xpath(<span class="string">"//div[@id='Zoom']//text()"</span>)</span><br><span class="line">    <span class="keyword">for</span> index,info <span class="keyword">in</span> enumerate(infos):</span><br><span class="line">        <span class="keyword">if</span> info.startswith(<span class="string">"◎年　　代"</span>):</span><br><span class="line">            year = info.replace(<span class="string">"◎年　　代"</span>,<span class="string">""</span>).strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> info.startswith(<span class="string">"◎豆瓣评分"</span>):</span><br><span class="line">            douban_rating = info.replace(<span class="string">"◎豆瓣评分"</span>,<span class="string">''</span>).strip()</span><br><span class="line">            print(douban_rating)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> info.startswith(<span class="string">"◎主　　演"</span>):</span><br><span class="line">            <span class="comment"># 从当前位置，一直往下面遍历</span></span><br><span class="line">            actors = [info]</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(index+<span class="number">1</span>,len(infos)):</span><br><span class="line">                actor = infos[x]</span><br><span class="line">                <span class="keyword">if</span> actor.startswith(<span class="string">"◎"</span>):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                actors.append(actor.strip())</span><br><span class="line">            print(<span class="string">","</span>.join(actors))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    spider()</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;xpath语法与lxml库&quot;&gt;&lt;a href=&quot;#xpath语法与lxml库&quot; class=&quot;headerlink&quot; title=&quot;xpath语法与lxml库&quot;&gt;&lt;/a&gt;xpath语法与lxml库&lt;/h1&gt;&lt;h2 id=&quot;什么是XPath？&quot;&gt;&lt;a href=&quot;#什么是XPath？&quot; class=&quot;headerlink&quot; title=&quot;什么是XPath？&quot;&gt;&lt;/a&gt;什么是XPath？&lt;/h2&gt;&lt;p&gt;xpath（XML Path Language）是一门在XML和HTML文档中查找信息的语言，可用来在XML和HTML文档中对元素和属性进行遍历。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.cn/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.cn/tags/python/"/>
    
      <category term="python爬虫" scheme="http://philxling.cn/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>requests库</title>
    <link href="http://philxling.cn/2020/03/21/python%E7%88%AC%E8%99%AB/4-requests%E5%BA%93/"/>
    <id>http://philxling.cn/2020/03/21/python%E7%88%AC%E8%99%AB/4-requests%E5%BA%93/</id>
    <published>2020-03-21T06:45:23.000Z</published>
    <updated>2020-04-02T15:13:04.657Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="4-requests库"><a href="#4-requests库" class="headerlink" title="4-requests库"></a>4-requests库</h1><p>虽然Python的标准库中 urllib模块已经包含了平常我们使用的大多数功能，但是它的 API 使用起来让人感觉不太好，而 Requests宣传是 “HTTP for Humans”，说明使用更简洁方便。</p><a id="more"></a><h2 id="安装和文档地址："><a href="#安装和文档地址：" class="headerlink" title="安装和文档地址："></a>安装和文档地址：</h2><p>利用<code>pip</code>可以非常方便的安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></tbody></table></figure><p>中文文档：<a href="http://docs.python-requests.org/zh_CN/latest/index.html" target="_blank" rel="noopener">http://docs.python-requests.org/zh_CN/latest/index.html</a><br>github地址：<a href="https://github.com/requests/requests" target="_blank" rel="noopener">https://github.com/requests/requests</a></p><h2 id="发送GET请求："><a href="#发送GET请求：" class="headerlink" title="发送GET请求："></a>发送GET请求：</h2><ol><li><p>最简单的发送<code>get</code>请求就是通过<code>requests.get</code>来调用：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(<span class="string">"http://www.baidu.com/"</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p>添加headers和查询参数：<br>如果想添加 headers，可以传入headers参数来增加请求头中的headers信息。如果要将参数放在url中传递，可以利用 params 参数。相关示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">   </span><br><span class="line">kw = {<span class="string">'wd'</span>:<span class="string">'中国'</span>}</span><br><span class="line">   </span><br><span class="line">headers = {<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span>}</span><br><span class="line">   </span><br><span class="line"><span class="comment"># params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()</span></span><br><span class="line">response = requests.get(<span class="string">"http://www.baidu.com/s"</span>, params = kw, headers = headers)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查看响应内容，response.text 返回的是Unicode格式的数据</span></span><br><span class="line">print(response.text)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查看响应内容，response.content返回的字节流数据</span></span><br><span class="line">print(response.content)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查看完整url地址</span></span><br><span class="line">print(response.url)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查看响应头部字符编码</span></span><br><span class="line">print(response.encoding)</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查看响应码</span></span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="发送POST请求："><a href="#发送POST请求：" class="headerlink" title="发送POST请求："></a>发送POST请求：</h2><ol><li><p>最基本的POST请求可以使用<code>post</code>方法：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = requests.post(<span class="string">"http://www.baidu.com/"</span>,data=data)</span><br></pre></td></tr></tbody></table></figure></li><li><p>传入data数据：<br>这时候就不要再使用<code>urlencode</code>进行编码了，直接传入一个字典进去就可以了。比如请求拉勾网的数据的代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">   </span><br><span class="line">url = <span class="string">"https://www.lagou.com/jobs/positionAjax.json?city=%E6%B7%B1%E5%9C%B3&needAddtionalResult=false&isSchoolJob=0"</span></span><br><span class="line">   </span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'https://www.lagou.com/jobs/list_python?labelWords=&fromSearch=true&suginput='</span></span><br><span class="line">}</span><br><span class="line">   </span><br><span class="line">data = {</span><br><span class="line">    <span class="string">'first'</span>: <span class="string">'true'</span>,</span><br><span class="line">    <span class="string">'pn'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'kd'</span>: <span class="string">'python'</span></span><br><span class="line">}</span><br><span class="line">   </span><br><span class="line">resp = requests.post(url,headers=headers,data=data)</span><br><span class="line"><span class="comment"># 如果是json数据，直接可以调用json方法</span></span><br><span class="line">print(resp.json())</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="使用代理："><a href="#使用代理：" class="headerlink" title="使用代理："></a>使用代理：</h2><p>使用<code>requests</code>添加代理也非常简单，只要在请求的方法中（比如<code>get</code>或者<code>post</code>）传递<code>proxies</code>参数就可以了。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://httpbin.org/get"</span></span><br><span class="line"></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">proxy = {</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'171.14.209.180:27829'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">resp = requests.get(url,headers=headers,proxies=proxy)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xx.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(resp.text)</span><br></pre></td></tr></tbody></table></figure><h2 id="cookie："><a href="#cookie：" class="headerlink" title="cookie："></a>cookie：</h2><p>如果在一个响应中包含了<code>cookie</code>，那么可以利用<code>cookies</code>属性拿到这个返回的<code>cookie</code>值：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">data = {<span class="string">"email"</span>:<span class="string">"970138074@qq.com"</span>,<span class="string">'password'</span>:<span class="string">"pythonspider"</span>}</span><br><span class="line">resp = requests.get(<span class="string">'http://www.baidu.com/'</span>)</span><br><span class="line">print(resp.cookies)</span><br><span class="line">print(resp.cookies.get_dict())</span><br></pre></td></tr></tbody></table></figure><h2 id="session："><a href="#session：" class="headerlink" title="session："></a>session：</h2><p>之前使用<code>urllib</code>库，是可以使用<code>opener</code>发送多个请求，多个请求之间是可以共享<code>cookie</code>的。那么如果使用<code>requests</code>，也要达到共享<code>cookie</code>的目的，那么可以使用<code>requests</code>库给我们提供的<code>session</code>对象。注意，这里的<code>session</code>不是web开发中的那个session，这个地方只是一个会话的对象而已。还是以登录人人网为例，使用<code>requests</code>来实现。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">data = {<span class="string">"email"</span>:<span class="string">"970138074@qq.com"</span>,<span class="string">'password'</span>:<span class="string">"pythonspider"</span>}</span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">session = requests.session()</span><br><span class="line">session.post(url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问大鹏个人中心</span></span><br><span class="line">resp = session.get(<span class="string">'http://www.renren.com/880151247/profile'</span>)</span><br><span class="line"></span><br><span class="line">print(resp.text)</span><br></pre></td></tr></tbody></table></figure><h2 id="处理不信任的SSL证书："><a href="#处理不信任的SSL证书：" class="headerlink" title="处理不信任的SSL证书："></a>处理不信任的SSL证书：</h2><p>对于那些已经被信任的SSL整数的网站，比如<code>https://www.baidu.com/</code>，那么使用<code>requests</code>直接就可以正常的返回响应。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resp = requests.get(<span class="string">'http://www.12306.cn/mormhweb/'</span>,verify=<span class="literal">False</span>)</span><br><span class="line">print(resp.content.decode())</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;4-requests库&quot;&gt;&lt;a href=&quot;#4-requests库&quot; class=&quot;headerlink&quot; title=&quot;4-requests库&quot;&gt;&lt;/a&gt;4-requests库&lt;/h1&gt;&lt;p&gt;虽然Python的标准库中 urllib模块已经包含了平常我们使用的大多数功能，但是它的 API 使用起来让人感觉不太好，而 Requests宣传是 “HTTP for Humans”，说明使用更简洁方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.cn/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.cn/tags/python/"/>
    
      <category term="python爬虫" scheme="http://philxling.cn/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>urllib库</title>
    <link href="http://philxling.cn/2020/03/20/python%E7%88%AC%E8%99%AB/3-urllib%E5%BA%93/"/>
    <id>http://philxling.cn/2020/03/20/python%E7%88%AC%E8%99%AB/3-urllib%E5%BA%93/</id>
    <published>2020-03-20T09:32:34.000Z</published>
    <updated>2020-04-02T15:12:54.195Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="3-urllib库"><a href="#3-urllib库" class="headerlink" title="3-urllib库"></a>3-urllib库</h1><p><code>urllib</code>库是<code>Python</code>中一个最基本的网络请求库。可以模拟浏览器的行为，向指定的服务器发送一个请求，并可以保存服务器返回的数据。</p><a id="more"></a><h3 id="urlopen函数："><a href="#urlopen函数：" class="headerlink" title="urlopen函数："></a>urlopen函数：</h3><p>在<code>Python3</code>的<code>urllib</code>库中，所有和网络请求相关的方法，都被集到<code>urllib.request</code>模块下面了，以先来看下<code>urlopen</code>函数基本的使用：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">resp = request.urlopen(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></tbody></table></figure><p>实际上，使用浏览器访问百度，右键查看源代码。你会发现，跟我们刚才打印出来的数据是一模一样的。也就是说，上面的三行代码就已经帮我们把百度的首页的全部代码爬下来了。一个基本的url请求对应的python代码真的非常简单。<br>以下对<code>urlopen</code>函数的进行详细讲解：</p><ol><li><code>url</code>：请求的url。</li><li><code>data</code>：请求的<code>data</code>，如果设置了这个值，那么将变成<code>post</code>请求。</li><li>返回值：返回值是一个<code>http.client.HTTPResponse</code>对象，这个对象是一个类文件句柄对象。有<code>read(size)</code>、<code>readline</code>、<code>readlines</code>以及<code>getcode</code>等方法。</li></ol><h3 id="urlretrieve函数："><a href="#urlretrieve函数：" class="headerlink" title="urlretrieve函数："></a>urlretrieve函数：</h3><p>这个函数可以方便的将网页上的一个文件保存到本地。以下代码可以非常方便的将百度的首页下载到本地：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">request.urlretrieve(<span class="string">'http://www.baidu.com/'</span>,<span class="string">'baidu.html'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="urlencode函数："><a href="#urlencode函数：" class="headerlink" title="urlencode函数："></a>urlencode函数：</h3><p>用浏览器发送请求的时候，如果url中包含了中文或者其他特殊字符，那么浏览器会自动的给我们进行编码。而如果使用代码发送请求，那么就必须手动的进行编码，这时候就应该使用<code>urlencode</code>函数来实现。<code>urlencode</code>可以把字典数据转换为<code>URL</code>编码的数据。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">data = {<span class="string">'name'</span>:<span class="string">'爬虫基础'</span>,<span class="string">'greet'</span>:<span class="string">'hello world'</span>,<span class="string">'age'</span>:<span class="number">100</span>}</span><br><span class="line">qs = parse.urlencode(data)</span><br><span class="line">print(qs)</span><br></pre></td></tr></tbody></table></figure><h3 id="parse-qs函数："><a href="#parse-qs函数：" class="headerlink" title="parse_qs函数："></a>parse_qs函数：</h3><p>可以将经过编码后的url参数进行解码。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">qs = <span class="string">"name=%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80&greet=hello+world&age=100"</span></span><br><span class="line">print(parse.parse_qs(qs))</span><br></pre></td></tr></tbody></table></figure><h3 id="urlparse和urlsplit："><a href="#urlparse和urlsplit：" class="headerlink" title="urlparse和urlsplit："></a>urlparse和urlsplit：</h3><p>有时候拿到一个url，想要对这个url中的各个组成部分进行分割，那么这时候就可以使用<code>urlparse</code>或者是<code>urlsplit</code>来进行分割。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com/s?username=python'</span></span><br><span class="line"></span><br><span class="line">result = parse.urlsplit(url)</span><br><span class="line"><span class="comment"># result = parse.urlparse(url)</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'scheme:'</span>,result.scheme)</span><br><span class="line">print(<span class="string">'netloc:'</span>,result.netloc)</span><br><span class="line">print(<span class="string">'path:'</span>,result.path)</span><br><span class="line">print(<span class="string">'query:'</span>,result.query)</span><br></pre></td></tr></tbody></table></figure><p><code>urlparse</code>和<code>urlsplit</code>基本上是一模一样的。唯一不一样的地方是，<code>urlparse</code>里面多了一个<code>params</code>属性，而<code>urlsplit</code>没有这个<code>params</code>属性。比如有一个<code>url</code>为：<code>url = 'http://www.baidu.com/s;hello?wd=python&username=abc#1'</code>，<br>那么<code>urlparse</code>可以获取到<code>hello</code>，而<code>urlsplit</code>不可以获取到。<code>url</code>中的<code>params</code>也用得比较少。</p><h3 id="request-Request类："><a href="#request-Request类：" class="headerlink" title="request.Request类："></a>request.Request类：</h3><p>如果想要在请求的时候增加一些请求头，那么就必须使用<code>request.Request</code>类来实现。比如要增加一个<code>User-Agent</code>，示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">headers = {</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">}</span><br><span class="line">req = request.Request(<span class="string">"http://www.baidu.com/"</span>,headers=headers)</span><br><span class="line">resp = request.urlopen(req)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></tbody></table></figure><h3 id="内涵段子爬虫实战作业："><a href="#内涵段子爬虫实战作业：" class="headerlink" title="内涵段子爬虫实战作业："></a>内涵段子爬虫实战作业：</h3><ol><li>url链接：<a href="http://neihanshequ.com/bar/1/" target="_blank" rel="noopener">http://neihanshequ.com/bar/1/</a></li><li>要求：能爬取一页的数据就可以了。</li></ol><h3 id="ProxyHandler处理器（代理设置）"><a href="#ProxyHandler处理器（代理设置）" class="headerlink" title="ProxyHandler处理器（代理设置）"></a>ProxyHandler处理器（代理设置）</h3><p>很多网站会检测某一段时间某个IP的访问次数(通过流量统计，系统日志等)，如果访问次数多的不像正常人，它会禁止这个IP的访问。<br>所以我们可以设置一些代理服务器，每隔一段时间换一个代理，就算IP被禁止，依然可以换个IP继续爬取。<br>urllib中通过ProxyHandler来设置使用代理服务器，下面代码说明如何使用自定义opener来使用代理：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是没有使用代理的</span></span><br><span class="line"><span class="comment"># resp = request.urlopen('http://httpbin.org/get')</span></span><br><span class="line"><span class="comment"># print(resp.read().decode("utf-8"))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是使用了代理的</span></span><br><span class="line">handler = request.ProxyHandler({<span class="string">"http"</span>:<span class="string">"218.66.161.88:31769"</span>})</span><br><span class="line"></span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line">req = request.Request(<span class="string">"http://httpbin.org/ip"</span>)</span><br><span class="line">resp = opener.open(req)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></tbody></table></figure><p>常用的代理有：</p><ul><li>西刺免费代理IP：<a href="http://www.xicidaili.com/" target="_blank" rel="noopener">http://www.xicidaili.com/</a></li><li>快代理：<a href="http://www.kuaidaili.com/" target="_blank" rel="noopener">http://www.kuaidaili.com/</a></li><li>代理云：<a href="http://www.dailiyun.com/" target="_blank" rel="noopener">http://www.dailiyun.com/</a></li></ul><h3 id="什么是cookie："><a href="#什么是cookie：" class="headerlink" title="什么是cookie："></a>什么是cookie：</h3><p>在网站中，http请求是无状态的。也就是说即使第一次和服务器连接后并且登录成功后，第二次请求服务器依然不能知道当前请求是哪个用户。<code>cookie</code>的出现就是为了解决这个问题，第一次登录后服务器返回一些数据（cookie）给浏览器，然后浏览器保存在本地，当该用户发送第二次请求的时候，就会自动的把上次请求存储的<code>cookie</code>数据自动的携带给服务器，服务器通过浏览器携带的数据就能判断当前用户是哪个了。<code>cookie</code>存储的数据量有限，不同的浏览器有不同的存储大小，但一般不超过4KB。因此使用<code>cookie</code>只能存储一些小量的数据。</p><h4 id="cookie的格式："><a href="#cookie的格式：" class="headerlink" title="cookie的格式："></a>cookie的格式：</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: NAME=VALUE；Expires/Max-age=DATE；Path=PATH；Domain=DOMAIN_NAME；SECURE</span><br></pre></td></tr></tbody></table></figure><p>参数意义：</p><ul><li>NAME：cookie的名字。</li><li>VALUE：cookie的值。</li><li>Expires：cookie的过期时间。</li><li>Path：cookie作用的路径。</li><li>Domain：cookie作用的域名。</li><li>SECURE：是否只在https协议下起作用。</li></ul><h3 id="使用cookielib库和HTTPCookieProcessor模拟登录："><a href="#使用cookielib库和HTTPCookieProcessor模拟登录：" class="headerlink" title="使用cookielib库和HTTPCookieProcessor模拟登录："></a>使用cookielib库和HTTPCookieProcessor模拟登录：</h3><p>Cookie 是指网站服务器为了辨别用户身份和进行Session跟踪，而储存在用户浏览器上的文本文件，Cookie可以保持登录信息到用户下次与服务器的会话。<br>这里以人人网为例。人人网中，要访问某个人的主页，必须先登录才能访问，登录说白了就是要有cookie信息。那么如果我们想要用代码的方式访问，就必须要有正确的cookie信息才能访问。解决方案有两种，第一种是使用浏览器访问，然后将cookie信息复制下来，放到headers中。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'anonymid=jacdwz2x-8bjldx; depovince=GW; _r01_=1; _ga=GA1.2.1455063316.1511436360; _gid=GA1.2.862627163.1511436360; wp=1; JSESSIONID=abczwY8ecd4xz8RJcyP-v; jebecookies=d4497791-9d41-4269-9e2b-3858d4989785|||||; ick_login=884e75d4-f361-4cff-94bb-81fe6c42b220; _de=EA5778F44555C091303554EBBEB4676C696BF75400CE19CC; p=61a3c7d0d4b2d1e991095353f83fa2141; first_login_flag=1; ln_uact=970138074@qq.com; ln_hurl=http://hdn.xnimg.cn/photos/hdn121/20170428/1700/main_nhiB_aebd0000854a1986.jpg; t=3dd84a3117737e819dd2c32f1cdb91d01; societyguester=3dd84a3117737e819dd2c32f1cdb91d01; id=443362311; xnsid=169efdc0; loginfrom=syshome; ch_id=10016; jebe_key=9c062f5a-4335-4a91-bf7a-970f8b86a64e%7Ca022c303305d1b2ab6b5089643e4b5de%7C1511449232839%7C1; wp_fold=0'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.renren.com/880151247/profile'</span></span><br><span class="line"></span><br><span class="line">req = request.Request(url,headers=headers)</span><br><span class="line">resp = request.urlopen(req)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'renren.html'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(resp.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></tbody></table></figure><p>但是每次在访问需要cookie的页面都要从浏览器中复制cookie比较麻烦。在Python处理Cookie，一般是通过<code>http.cookiejar</code>模块和<code>urllib模块的HTTPCookieProcessor</code>处理器类一起使用。<code>http.cookiejar</code>模块主要作用是提供用于存储cookie的对象。而<code>HTTPCookieProcessor</code>处理器主要作用是处理这些cookie对象，并构建handler对象。</p><h4 id="http-cookiejar模块："><a href="#http-cookiejar模块：" class="headerlink" title="http.cookiejar模块："></a>http.cookiejar模块：</h4><p>该模块主要的类有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。这四个类的作用分别如下：</p><ol><li>CookieJar：管理HTTP cookie值、存储HTTP请求生成的cookie、向传出的HTTP请求添加cookie的对象。整个cookie都存储在内存中，对CookieJar实例进行垃圾回收后cookie也将丢失。</li><li>FileCookieJar (filename,delayload=None,policy=None)：从CookieJar派生而来，用来创建FileCookieJar实例，检索cookie信息并将cookie存储到文件中。filename是存储cookie的文件名。delayload为True时支持延迟访问访问文件，即只有在需要时才读取文件或在文件中存储数据。</li><li>MozillaCookieJar (filename,delayload=None,policy=None)：从FileCookieJar派生而来，创建与Mozilla浏览器 cookies.txt兼容的FileCookieJar实例。</li><li>LWPCookieJar (filename,delayload=None,policy=None)：从FileCookieJar派生而来，创建与libwww-perl标准的 Set-Cookie3 文件格式兼容的FileCookieJar实例。</li></ol><h4 id="登录人人网："><a href="#登录人人网：" class="headerlink" title="登录人人网："></a>登录人人网：</h4><p>利用<code>http.cookiejar</code>和<code>request.HTTPCookieProcessor</code>登录人人网。相关示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,parse</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> CookieJar</span><br><span class="line"></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_opener</span><span class="params">()</span>:</span></span><br><span class="line">    cookiejar = CookieJar()</span><br><span class="line">    handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">    opener = request.build_opener(handler)</span><br><span class="line">    <span class="keyword">return</span> opener</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_renren</span><span class="params">(opener)</span>:</span></span><br><span class="line">    data = {<span class="string">"email"</span>: <span class="string">"970138074@qq.com"</span>, <span class="string">"password"</span>: <span class="string">"pythonspider"</span>}</span><br><span class="line">    data = parse.urlencode(data).encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    login_url = <span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">    req = request.Request(login_url, headers=headers, data=data)</span><br><span class="line">    opener.open(req)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit_profile</span><span class="params">(opener)</span>:</span></span><br><span class="line">    url = <span class="string">'http://www.renren.com/880151247/profile'</span></span><br><span class="line">    req = request.Request(url,headers=headers)</span><br><span class="line">    resp = opener.open(req)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'renren.html'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(resp.read().decode(<span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    opener = get_opener()</span><br><span class="line">    login_renren(opener)</span><br><span class="line">    visit_profile(opener)</span><br></pre></td></tr></tbody></table></figure><h4 id="保存cookie到本地："><a href="#保存cookie到本地：" class="headerlink" title="保存cookie到本地："></a>保存cookie到本地：</h4><p>保存<code>cookie</code>到本地，可以使用<code>cookiejar</code>的<code>save</code>方法，并且需要指定一个文件名：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookiejar = MozillaCookieJar(<span class="string">"cookie.txt"</span>)</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">}</span><br><span class="line">req = request.Request(<span class="string">'http://httpbin.org/cookies'</span>,headers=headers)</span><br><span class="line"></span><br><span class="line">resp = opener.open(req)</span><br><span class="line">print(resp.read())</span><br><span class="line">cookiejar.save(ignore_discard=<span class="literal">True</span>,ignore_expires=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="从本地加载cookie："><a href="#从本地加载cookie：" class="headerlink" title="从本地加载cookie："></a>从本地加载cookie：</h4><p>从本地加载<code>cookie</code>，需要使用<code>cookiejar</code>的<code>load</code>方法，并且也需要指定方法：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookiejar = MozillaCookieJar(<span class="string">"cookie.txt"</span>)</span><br><span class="line">cookiejar.load(ignore_expires=<span class="literal">True</span>,ignore_discard=<span class="literal">True</span>)</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">}</span><br><span class="line">req = request.Request(<span class="string">'http://httpbin.org/cookies'</span>,headers=headers)</span><br><span class="line"></span><br><span class="line">resp = opener.open(req)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;3-urllib库&quot;&gt;&lt;a href=&quot;#3-urllib库&quot; class=&quot;headerlink&quot; title=&quot;3-urllib库&quot;&gt;&lt;/a&gt;3-urllib库&lt;/h1&gt;&lt;p&gt;&lt;code&gt;urllib&lt;/code&gt;库是&lt;code&gt;Python&lt;/code&gt;中一个最基本的网络请求库。可以模拟浏览器的行为，向指定的服务器发送一个请求，并可以保存服务器返回的数据。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.cn/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.cn/tags/python/"/>
    
      <category term="python爬虫" scheme="http://philxling.cn/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
