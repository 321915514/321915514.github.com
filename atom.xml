<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>philxling</title>
  <icon>https://www.gravatar.com/avatar/295a5284129a41f836e900ffd2bcd96b</icon>
  <subtitle>Sometimes,Nowhere means &quot;Now&quot;&quot;Here&quot;</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://philxling.club/"/>
  <updated>2022-11-18T03:03:26.465Z</updated>
  <id>http://philxling.club/</id>
  
  <author>
    <name>philxling</name>
    <email>321915514wx@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>蒙特卡洛树搜索MCTS实现五子棋</title>
    <link href="http://philxling.club/2022/10/10/%E5%8D%9A%E5%BC%88/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A0%91%E6%90%9C%E7%B4%A2MCTS/"/>
    <id>http://philxling.club/2022/10/10/%E5%8D%9A%E5%BC%88/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A0%91%E6%90%9C%E7%B4%A2MCTS/</id>
    <published>2022-10-10T08:48:54.000Z</published>
    <updated>2022-11-18T03:03:26.465Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="蒙特卡洛树"><a href="#蒙特卡洛树" class="headerlink" title="蒙特卡洛树"></a>蒙特卡洛树</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>1 蒙特卡洛树搜索是一类树搜索算法的统称,称为MCTS,是一种启发式搜索算法,在搜索空间极大的游戏中比较有效,它的目标是给定一个游戏状态,选择最佳的一步,如Alpha Go.</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1 选择: 选择能够最大化UCB值的节点</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UCB = Vi+c*sqot(lnN/ni) c=2</span><br></pre></td></tr></tbody></table></figure><p>2 扩展: 创建一个或多个子节点</p><p>3 仿真: 在某一结点用随机策略进行游戏</p><p>4 反向传播: 使用随机搜索的结果更新整个搜索树</p><p>5 在棋类游戏中应用mcts，本例将用五子棋应用mcts实现，实现五子棋的文件目录如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---gomoku</span><br><span class="line">--board.py</span><br><span class="line">--mcts.py</span><br><span class="line">--node.py</span><br><span class="line">--play.py</span><br></pre></td></tr></tbody></table></figure><p> 然后就可以一个一个实现了，首先是board，我们需要首先实现board类其需要一些属性</p><figure class="highlight plain"><figcaption><span>```表示棋盘大小</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```board ```传入一个board，若为空，则用numpy初始化一个</span><br><span class="line"></span><br><span class="line">```cur_player``` 当前游戏玩家</span><br><span class="line"></span><br><span class="line">其代码如下：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">class Board():</span><br><span class="line">    def __init__(self, board=None, size=8, cur_player=-1):</span><br><span class="line">        self.size = size</span><br><span class="line">        self.board = np.zeros((self.size, self.size), int) if board is None else board</span><br><span class="line">        self.cur_player = cur_player</span><br></pre></td></tr></tbody></table></figure><p>然后需要实现几个函数：</p><figure class="highlight plain"><figcaption><span>判断棋子是否合法</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```get_legal_pos``` 返回列表，得到棋盘位置为0点返回</span><br><span class="line"></span><br><span class="line">```move```  落子操作，先判断棋子是否合法，则新生成一个Board对象，并将当前的move位置添加到棋盘上返回</span><br><span class="line"></span><br><span class="line">```board_result``` 判断哪方赢。</span><br><span class="line"></span><br><span class="line">```game_over``` 判定游戏是否结束</span><br><span class="line"></span><br><span class="line">接下来一一实现，其代码如下：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">    def is_move_legal(self, move_pos):</span><br><span class="line">        """</span><br><span class="line">        :param move_pos: 元组得到位置</span><br><span class="line">        :return: true or false</span><br><span class="line">        """</span><br><span class="line">        x, y = -100, -100</span><br><span class="line">        if move_pos is not None:</span><br><span class="line">            x, y = move_pos[0], move_pos[1]</span><br><span class="line">        if x < 0 or x > self.size or y < 0 or y > self.size:  # 判断是否溢出棋盘边界</span><br><span class="line">            return False</span><br><span class="line">        if self.board[x, y] != 0:  # 判断是否下在已经有棋子的位置上</span><br><span class="line">            return False</span><br><span class="line">        return True</span><br><span class="line"></span><br><span class="line">    def get_legal_pos(self):</span><br><span class="line">        """</span><br><span class="line">        :return: 返回列表</span><br><span class="line">        """</span><br><span class="line">        pos_list = []</span><br><span class="line">        for i in range(0, self.size):</span><br><span class="line">            for j in range(0, self.size):</span><br><span class="line">                if self.board[i][j] == 0:</span><br><span class="line">                    pos_list.append((i, j))</span><br><span class="line">        return pos_list</span><br><span class="line"></span><br><span class="line">    def move(self, move_pos):</span><br><span class="line">        """</span><br><span class="line">        走子</span><br><span class="line">        :param move_pos:</span><br><span class="line">        :return: board</span><br><span class="line">        """</span><br><span class="line">        if not self.is_move_legal(move_pos):  # 不合法</span><br><span class="line">            return '棋子不合法'</span><br><span class="line">        new_board = Board(np.copy(self.board), cur_player=-self.cur_player)</span><br><span class="line">        new_board.board[move_pos[0]][move_pos[1]] = self.cur_player</span><br><span class="line">        return new_board</span><br><span class="line"></span><br><span class="line">    def board_result(self, move_pos):</span><br><span class="line">        """</span><br><span class="line">        :param move_pos:</span><br><span class="line">        :return: 判断哪方赢</span><br><span class="line">        """</span><br><span class="line"></span><br><span class="line">        x, y = move_pos[0], move_pos[1]</span><br><span class="line">        # print(x,y)</span><br><span class="line">        player = self.board[x,y]</span><br><span class="line">        direction = list([[self.board[i][y] for i in range(self.size)]])  # 纵向是否有五颗连子</span><br><span class="line">        direction.append([self.board[x][j] for j in range(self.size)])  # 横向是否有五颗连子</span><br><span class="line">        direction.append(self.board.diagonal(y - x))  # 该点正对角是否有五颗连子</span><br><span class="line">        direction.append(np.fliplr(self.board).diagonal(self.size - 1 - y - x))  # 该点反对角是否有五颗连子</span><br><span class="line">        for i in direction:</span><br><span class="line">            count = 0</span><br><span class="line">            for v in i:</span><br><span class="line">                if v == player:</span><br><span class="line">                    count += 1</span><br><span class="line">                    if count == 5:</span><br><span class="line">                        return True</span><br><span class="line">                else:</span><br><span class="line">                    count = 0</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    def game_over(self, move_pos):</span><br><span class="line">        """</span><br><span class="line">        判断游戏是否结束，</span><br><span class="line">        :param move_pos:</span><br><span class="line">        :return:</span><br><span class="line">        """</span><br><span class="line">        if self.board_result(move_pos):</span><br><span class="line">            return "win"</span><br><span class="line">        elif len(self.get_legal_pos()) == 0:</span><br><span class="line">            return 'tie'</span><br><span class="line">        else:</span><br><span class="line">            return None</span><br></pre></td></tr></tbody></table></figure><p>实现完棋盘后，还需要实现游戏树节点，也就是<code>node</code>文件，其包含判定游戏树节点的一些操作，定义```Node其属性具体如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, board=None, parent=None, pre_pos=None)</span>:</span></span><br><span class="line">    self.pre_pos = pre_pos <span class="comment"># 最后一次落子位置</span></span><br><span class="line">    self.board = board  <span class="comment"># 棋盘</span></span><br><span class="line">    self.parent = parent  <span class="comment"># 父节点</span></span><br><span class="line">    self.children = list()</span><br><span class="line">    self.not_visit_pos = <span class="literal">None</span>  <span class="comment"># 未访问节点</span></span><br><span class="line">    self.num_of_visit = <span class="number">0</span>  <span class="comment"># 该节点访问次数</span></span><br><span class="line">    self.num_of_wins = defaultdict(int)  <span class="comment"># 该节点胜利次数</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><figcaption><span>判断节点是否完全展开</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```non_terminal``` 是否为终端节点，即该节点对应的格局是否已分出胜负</span><br><span class="line"></span><br><span class="line">```pick_unvisited``` 选择一个未访问的节点并加入当前节点的孩子中</span><br><span class="line"></span><br><span class="line">```pick_random``` 随机选择该节点的一个孩子扩展</span><br><span class="line"></span><br><span class="line">```num_of_win ``` 判断该节点的胜负情况，利用一个实数即可代表黑白二子的胜负差值</span><br><span class="line"></span><br><span class="line">```best_uct``` 根据uct公式计算最优的孩子节点</span><br><span class="line"></span><br><span class="line">具体实现如下：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">    def fully_expended(self):</span><br><span class="line">        """</span><br><span class="line">        判断节点是否完全展开</span><br><span class="line">        :return: TRUE FALSE</span><br><span class="line">        """</span><br><span class="line">        if self.not_visit_pos is None:</span><br><span class="line">            self.not_visit_pos = self.board.get_legal_pos()</span><br><span class="line">        return True if len(self.not_visit_pos) == 0 and len(self.children) != 0 else False</span><br><span class="line"></span><br><span class="line">    def non_terminal(self):</span><br><span class="line">        """</span><br><span class="line">        是否为终端节点，即该节点对应的格局是否已分出胜负</span><br><span class="line">        :return:</span><br><span class="line">        """</span><br><span class="line">        game_result = self.board.game_over(self.pre_pos)</span><br><span class="line">        return game_result</span><br><span class="line"></span><br><span class="line">    def pick_unvisited(self):</span><br><span class="line">        """</span><br><span class="line">        选择一个未访问的节点并加入当前节点的孩子中</span><br><span class="line">        :return:</span><br><span class="line">        """</span><br><span class="line">        random_index = random.randint(0, len(self.not_visit_pos) - 1)</span><br><span class="line">        move_pos = self.not_visit_pos.pop(random_index)</span><br><span class="line">        new_board = self.board.move(move_pos)</span><br><span class="line">        new_node = Node(new_board, self, move_pos)</span><br><span class="line">        self.children.append(new_node)</span><br><span class="line">        return new_node</span><br><span class="line"></span><br><span class="line">    def pick_random(self):</span><br><span class="line">        """</span><br><span class="line">        随即选择该节点的一个孩子扩展</span><br><span class="line">        :return:</span><br><span class="line">        """</span><br><span class="line">        possible_moves = self.board.get_legal_pos()</span><br><span class="line">        random_index = random.randint(0,len(possible_moves) - 1)</span><br><span class="line">        new_board = self.board.move(possible_moves[random_index])</span><br><span class="line">        new_node = Node(new_board, self, possible_moves[random_index])</span><br><span class="line">        return new_node</span><br><span class="line"></span><br><span class="line">    def num_of_win(self):</span><br><span class="line">        """</span><br><span class="line">        判断该节点的胜负情况，利用一个实数即可代表黑白二子的胜负差值</span><br><span class="line">        :return:</span><br><span class="line">        """</span><br><span class="line">        win = self.num_of_wins[-self.board.cur_player]</span><br><span class="line">        lose = self.num_of_wins[self.board.cur_player]</span><br><span class="line"></span><br><span class="line">        return win - lose</span><br><span class="line"></span><br><span class="line">    def best_uct(self, c_param=1.98):</span><br><span class="line">        uct_of_child = np.array(list(</span><br><span class="line">            [child.num_of_win() / child.num_of_visit + c_param * np.sqrt(self.num_of_visit) / child.num_of_visit for</span><br><span class="line">             child in self.children]))</span><br><span class="line">        best_index = np.argmax(uct_of_child)</span><br><span class="line">        return self.children[best_index]</span><br></pre></td></tr></tbody></table></figure><p>接下来是mcts实现，mcts其具体包含四个步骤，开篇已经提到了，接下来我们将具体实现</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 到达叶结点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">traverse</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> node.fully_expended():</span><br><span class="line">        node = node.best_uct()</span><br><span class="line">    <span class="keyword">if</span> node.non_terminal() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>: <span class="comment">#</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> node.pick_unvisited()</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 然后进行随机模拟</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rollout</span><span class="params">(node)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        game_result = node.non_terminal()</span><br><span class="line">        <span class="keyword">if</span> game_result <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            node = node.pick_random()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> game_result == <span class="string">'win'</span> <span class="keyword">and</span> -node.board.cur_player == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> game_result == <span class="string">'win'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"> <span class="comment"># 回溯，将模拟的值依次回溯至父节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backpropagate</span><span class="params">(node, result)</span>:</span></span><br><span class="line">    node.num_of_visit += <span class="number">1</span></span><br><span class="line">    node.num_of_wins[result] += <span class="number">1</span></span><br><span class="line">    <span class="comment"># print("backpropagate run")</span></span><br><span class="line">    <span class="keyword">if</span> node.parent:</span><br><span class="line">        backpropagate(node.parent, result)</span><br><span class="line">        <span class="comment"># print("backpropagate run")</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"> <span class="comment"># 根据uct公式选择最好的下一步</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_child</span><span class="params">(node)</span>:</span></span><br><span class="line">    visit_num_of_children = np.array(list([child.num_of_visit <span class="keyword">for</span> child <span class="keyword">in</span> node.children]))</span><br><span class="line">    <span class="comment"># print(visit_num_of_children)</span></span><br><span class="line">    best_index = np.argmax(visit_num_of_children)</span><br><span class="line">    node = node.children[best_index]</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mcts 可以循环很多次，进而促进多的模拟对局，才能选出更好的下一步</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mcts</span><span class="params">(board, pre_pos)</span>:</span></span><br><span class="line">    root = Node(board=board, pre_pos=pre_pos)  <span class="comment"># 根节点作为第一个node</span></span><br><span class="line">    <span class="comment"># print('mcts pre_pos:{}'.format(root.pre_pos))</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, mcts_times): <span class="comment"># 循环 mcts_times为你要模拟多少次</span></span><br><span class="line">        leaf = traverse(root)  <span class="comment"># 到达叶结点</span></span><br><span class="line">        <span class="comment"># print("----------traverse run")</span></span><br><span class="line">        simulation_result = rollout(leaf) <span class="comment"># 随机模拟</span></span><br><span class="line">        <span class="comment"># print(simulation_result)</span></span><br><span class="line">        backpropagate(leaf, simulation_result) <span class="comment"># 回溯</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> best_child(root).pre_pos <span class="comment"># 返回最好的下一步</span></span><br></pre></td></tr></tbody></table></figure><p>定义完成之后接下来就可以进行对局了，也就是<code>play</code>文件，其具体实现如下：</p><p>定义<code>play</code>,其属性包含<code>board</code>,然后实现<code>print_board</code>打印棋盘,<code>startplay</code> 开始对局，依次实现，代码如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> board <span class="keyword">import</span> Board</span><br><span class="line"><span class="keyword">from</span> board <span class="keyword">import</span> Human</span><br><span class="line"><span class="keyword">from</span> board <span class="keyword">import</span> AI</span><br><span class="line">ALPHABET = <span class="string">'A B C D E F G H I J K L M N O'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">play</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.board = Board()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_board</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># width, height = self.board.size, self.board.size  # 棋盘大小</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">"黑子(-1) 用 X 表示\t白子(1) 用 O 表示"</span>)</span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># for x in range(width):  # 打印行坐标</span></span><br><span class="line">        <span class="comment">#     print("{0:8}".format(x), end='')</span></span><br><span class="line">        board_str = <span class="string">'\n   '</span> + ALPHABET[:self.board.size * <span class="number">2</span> - <span class="number">1</span>] + <span class="string">'\n'</span></span><br><span class="line">        board = self.board</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.board.size):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(self.board.size):</span><br><span class="line">                <span class="keyword">if</span> j == <span class="number">0</span>:</span><br><span class="line">                    board_str += <span class="string">'{:2}'</span>.format(i + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> board.board[i, j] == <span class="number">-1</span>:</span><br><span class="line">                    board_str += <span class="string">' X'</span></span><br><span class="line">                <span class="keyword">elif</span> board.board[i, j] == <span class="number">1</span>:</span><br><span class="line">                    board_str += <span class="string">' O'</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    board_str += <span class="string">' .'</span></span><br><span class="line">                <span class="keyword">if</span> j == self.board.size - <span class="number">1</span>:</span><br><span class="line">                    board_str += <span class="string">'\n'</span></span><br><span class="line">        <span class="comment"># board_str += '  '</span></span><br><span class="line">        print(board_str)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startplay</span><span class="params">(self)</span>:</span></span><br><span class="line">        human,ai = Human(),AI()</span><br><span class="line">        self.print_board()</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            self.board,move_pos = human.action(self.board)</span><br><span class="line">            game_result = self.board.game_over(move_pos)</span><br><span class="line">            self.print_board()</span><br><span class="line">            <span class="keyword">if</span> game_result == <span class="string">'win'</span> <span class="keyword">or</span> game_result==<span class="string">'tie'</span>:</span><br><span class="line">                print(<span class="string">'黑子落棋:{},(-1)胜利，game over\n'</span>.format(move_pos)) <span class="keyword">if</span> game_result == <span class="string">'win'</span> <span class="keyword">else</span> print(<span class="string">'黑子落棋:{}, 平局\n'</span>.format(move_pos))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'黑子落棋:{},未分胜利\n'</span>.format(move_pos))</span><br><span class="line">            start = time.time()</span><br><span class="line">            self.board, move_pos = ai.action(self.board,move_pos)</span><br><span class="line">            finish = time.time()-start</span><br><span class="line">            <span class="comment"># print('ai')</span></span><br><span class="line">            <span class="comment"># print(move_pos)</span></span><br><span class="line">            game_result = self.board.game_over(move_pos)</span><br><span class="line">            self.print_board()</span><br><span class="line">            <span class="keyword">if</span> game_result == <span class="string">'win'</span> <span class="keyword">or</span> game_result==<span class="string">'tie'</span>:</span><br><span class="line">                print(<span class="string">'白子落棋:{},(1)胜利，time:{:0.0f}s game over\n'</span>.format(move_pos,finish)) <span class="keyword">if</span> game_result == <span class="string">'win'</span> <span class="keyword">else</span> print(<span class="string">'白子落棋:{}, time:{:0.0f}s 平局\n'</span>.format(move_pos,finish))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'白子落棋:{}, time:{:0.0f}s 未分胜利\n'</span>.format(move_pos,finish))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><figcaption><span>中包含两个角色，所以在```board```中定义两个角色，分别实现```action```的动作，也就是先通过```mcts```找到最好的```move```,然后走子，返回棋盘和当前的走子位置。</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">定义```human```类:</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">class Human():</span><br><span class="line">    def __init__(self, player=-1):</span><br><span class="line">        self.player = player</span><br><span class="line"></span><br><span class="line">    def get_action_pos(self, board):</span><br><span class="line">        """</span><br><span class="line">        读取用户输入的数据</span><br><span class="line">        :param board:</span><br><span class="line">        :return:</span><br><span class="line">        """</span><br><span class="line">        try:</span><br><span class="line">            location = input("输入坐标x,y:")</span><br><span class="line">            if isinstance(location, str) and len(location.split(",")) == 2:</span><br><span class="line">                move_pos = tuple([int(i) for i in location.split(',')])</span><br><span class="line">            else:</span><br><span class="line">                move_pos = -1</span><br><span class="line">        except:</span><br><span class="line">            move_pos = -1</span><br><span class="line"></span><br><span class="line">        if move_pos == -1 or move_pos not in board.get_legal_pos():</span><br><span class="line">            print('落子位置错误')</span><br><span class="line">            move_pos = self.get_action_pos(board)</span><br><span class="line"></span><br><span class="line">        # print('get_action_pos----{}'.format(move_pos))</span><br><span class="line">        return move_pos</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    def action(self, board):</span><br><span class="line">        """</span><br><span class="line">        获得用户落子后的棋盘格局</span><br><span class="line">        :param board:</span><br><span class="line">        :return:board,move_pos</span><br><span class="line">        """</span><br><span class="line">        move_pos = self.get_action_pos(board)</span><br><span class="line">        board = board.move(move_pos)</span><br><span class="line">        return board, move_pos</span><br></pre></td></tr></tbody></table></figure><p>定义<code>AI</code>：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AI</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, player=<span class="number">1</span>)</span>:</span></span><br><span class="line">        self.player = player</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(self,board,pre_pos)</span>:</span></span><br><span class="line">        move_pos = mcts(board,pre_pos)</span><br><span class="line">        board = board.move(move_pos)</span><br><span class="line">        <span class="keyword">return</span> board,move_pos</span><br></pre></td></tr></tbody></table></figure><p>至此，一个以mcts实现的五子棋实现完毕！！！。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;蒙特卡洛树&quot;&gt;&lt;a href=&quot;#蒙特卡洛树&quot; class=&quot;headerlink&quot; title=&quot;蒙特卡洛树&quot;&gt;&lt;/a&gt;蒙特卡洛树&lt;/h1&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="博弈" scheme="http://philxling.club/categories/%E5%8D%9A%E5%BC%88/"/>
    
    
      <category term="算法" scheme="http://philxling.club/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="博弈" scheme="http://philxling.club/tags/%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫/18-CrawlSpider</title>
    <link href="http://philxling.club/2022/03/22/python%E7%88%AC%E8%99%AB/18-CrawlSpider/"/>
    <id>http://philxling.club/2022/03/22/python%E7%88%AC%E8%99%AB/18-CrawlSpider/</id>
    <published>2022-03-22T01:46:36.193Z</published>
    <updated>2022-03-22T01:44:18.630Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: CrawlSpider</span><br><span class="line">date: 2022-3-20 1:22:23</span><br><span class="line">tags: [python,python爬虫]</span><br><span class="line">categories: python爬虫</span><br><span class="line">copyright: philxling</span><br><span class="line">top: 16</span><br></pre></td></tr></tbody></table></figure><h1 id="3-CrawlSpider"><a href="#3-CrawlSpider" class="headerlink" title="3-CrawlSpider"></a>3-CrawlSpider</h1><p>在上一个糗事百科的爬虫案例中。我们是自己在解析完整个页面后获取下一页的url，然后重新发送一个请求。有时候我们想要这样做，只要满足某个条件的url，都给我进行爬取。那么这时候我们就可以通过<code>CrawlSpider</code>来帮我们完成了。<code>CrawlSpider</code>继承自<code>Spider</code>，只不过是在之前的基础之上增加了新的功能，可以定义爬取的url的规则，以后scrapy碰到满足条件的url都进行爬取，而不用手动的<code>yield Request</code>。</p><h2 id="CrawlSpider爬虫："><a href="#CrawlSpider爬虫：" class="headerlink" title="CrawlSpider爬虫："></a>CrawlSpider爬虫：</h2><h3 id="创建CrawlSpider爬虫："><a href="#创建CrawlSpider爬虫：" class="headerlink" title="创建CrawlSpider爬虫："></a>创建CrawlSpider爬虫：</h3><p>之前创建爬虫的方式是通过<code>scrapy genspider [爬虫名字] [域名]</code>的方式创建的。如果想要创建<code>CrawlSpider</code>爬虫，那么应该通过以下命令创建：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider -c crawl [爬虫名字] [域名]</span><br></pre></td></tr></tbody></table></figure><h3 id="LinkExtractors链接提取器："><a href="#LinkExtractors链接提取器：" class="headerlink" title="LinkExtractors链接提取器："></a>LinkExtractors链接提取器：</h3><p>使用<code>LinkExtractors</code>可以不用程序员自己提取想要的url，然后发送请求。这些工作都可以交给<code>LinkExtractors</code>，他会在所有爬的页面中找到满足规则的<code>url</code>，实现自动的爬取。以下对<code>LinkExtractors</code>类做一个简单的介绍：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">linkextractors</span>.<span class="title">LinkExtractor</span><span class="params">(</span></span></span><br><span class="line"><span class="class"><span class="params">    allow = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    deny = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    allow_domains = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    deny_domains = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    deny_extensions = None,</span></span></span><br><span class="line"><span class="class"><span class="params">    restrict_xpaths = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    tags = <span class="params">(<span class="string">'a'</span>,<span class="string">'area'</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    attrs = <span class="params">(<span class="string">'href'</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    canonicalize = True,</span></span></span><br><span class="line"><span class="class"><span class="params">    unique = True,</span></span></span><br><span class="line"><span class="class"><span class="params">    process_value = None</span></span></span><br><span class="line"><span class="class"><span class="params">)</span></span></span><br></pre></td></tr></tbody></table></figure><p>主要参数讲解：</p><ul><li>allow：允许的url。所有满足这个正则表达式的url都会被提取。</li><li>deny：禁止的url。所有满足这个正则表达式的url都不会被提取。</li><li>allow_domains：允许的域名。只有在这个里面指定的域名的url才会被提取。</li><li>deny_domains：禁止的域名。所有在这个里面指定的域名的url都不会被提取。</li><li>restrict_xpaths：严格的xpath。和allow共同过滤链接。</li></ul><h3 id="Rule规则类："><a href="#Rule规则类：" class="headerlink" title="Rule规则类："></a>Rule规则类：</h3><p>定义爬虫的规则类。以下对这个类做一个简单的介绍：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">spiders</span>.<span class="title">Rule</span><span class="params">(</span></span></span><br><span class="line"><span class="class"><span class="params">    link_extractor, </span></span></span><br><span class="line"><span class="class"><span class="params">    callback = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    cb_kwargs = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    follow = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    process_links = None, </span></span></span><br><span class="line"><span class="class"><span class="params">    process_request = None</span></span></span><br><span class="line"><span class="class"><span class="params">)</span></span></span><br></pre></td></tr></tbody></table></figure><p>主要参数讲解：</p><ul><li>link_extractor：一个<code>LinkExtractor</code>对象，用于定义爬取规则。</li><li>callback：满足这个规则的url，应该要执行哪个回调函数。因为<code>CrawlSpider</code>使用了<code>parse</code>作为回调函数，因此不要覆盖<code>parse</code>作为回调函数自己的回调函数。</li><li>follow：指定根据该规则从response中提取的链接是否需要跟进。</li><li>process_links：从link_extractor中获取到链接后会传递给这个函数，用来过滤不需要爬取的链接。</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>链表</title>
    <link href="http://philxling.club/2020/10/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/"/>
    <id>http://philxling.club/2020/10/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/</id>
    <published>2020-10-15T05:45:10.000Z</published>
    <updated>2020-10-15T06:12:33.079Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>有头节点的单链表的增删查</p><a id="more"></a><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链表</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdlib.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>{</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">}LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function">LNode* <span class="title">initList</span><span class="params">()</span></span>{ <span class="comment">// 初始化</span></span><br><span class="line">LNode *L = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line"><span class="keyword">if</span>(L == <span class="literal">NULL</span>){</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line">L->next = <span class="literal">NULL</span>; <span class="comment">// 头节点没有数据</span></span><br><span class="line"><span class="keyword">return</span> L;</span><br><span class="line">}</span><br><span class="line"><span class="function">LNode* <span class="title">makeNode</span><span class="params">(<span class="keyword">int</span> data)</span></span>{ <span class="comment">// 生成节点</span></span><br><span class="line">LNode *Node = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">Node->next = <span class="literal">NULL</span>;</span><br><span class="line">Node->data = data;</span><br><span class="line"><span class="keyword">return</span> Node;</span><br><span class="line">}</span><br><span class="line"><span class="function">LNode * <span class="title">createList</span><span class="params">(struct LNode *L)</span></span>{ <span class="comment">// 创建单链表</span></span><br><span class="line"><span class="keyword">int</span> a[] = {<span class="number">12</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">54</span>,<span class="number">6</span>,<span class="number">34</span>};</span><br><span class="line"><span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">LNode *tile = <span class="literal">NULL</span>;</span><br><span class="line">LNode *head = <span class="literal">NULL</span>;</span><br><span class="line">head = L;</span><br><span class="line"><span class="keyword">for</span>(i =<span class="number">0</span>;i<=<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);i++){</span><br><span class="line">LNode * temp = makeNode(a[i]);</span><br><span class="line"><span class="keyword">if</span>(!head->next){</span><br><span class="line">head->next = temp;</span><br><span class="line">tile= temp;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">tile->next = temp;</span><br><span class="line">tile = temp;</span><br><span class="line">}</span><br><span class="line">tile = temp;</span><br><span class="line">tile->next = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(LinkList L)</span></span>{ <span class="comment">// 打印链表</span></span><br><span class="line">LNode *p = L->next;</span><br><span class="line"><span class="keyword">while</span>(p->next != <span class="literal">NULL</span>){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%10d"</span>,p->data);</span><br><span class="line">p = p->next;</span><br><span class="line">} </span><br><span class="line">}</span><br><span class="line"><span class="function">LNode* <span class="title">search</span><span class="params">(struct LNode *L,<span class="keyword">int</span> data)</span></span>{ <span class="comment">// 查找</span></span><br><span class="line">LNode *p = L->next;</span><br><span class="line"><span class="keyword">while</span>(p->next != <span class="literal">NULL</span>){</span><br><span class="line"><span class="keyword">if</span>(p && p->data == data){</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">p =p->next;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getListLength</span><span class="params">(LinkList L)</span></span>{ <span class="comment">// 计算链表的长度</span></span><br><span class="line"><span class="keyword">int</span> length =<span class="number">0</span>,i;</span><br><span class="line">LNode *p =L->next; </span><br><span class="line"><span class="keyword">while</span>(p->next != <span class="literal">NULL</span>){</span><br><span class="line">p = p->next;</span><br><span class="line">length++; </span><br><span class="line">} </span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertList</span><span class="params">(LinkList L,<span class="keyword">int</span> data,<span class="keyword">int</span> index)</span></span>{ <span class="comment">// 插入链表</span></span><br><span class="line">LNode *p = L;</span><br><span class="line"><span class="keyword">if</span>(index<<span class="number">0</span> || index >getListLength(L)){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"blunder\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> j =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p&& j<index){</span><br><span class="line">p =p->next;</span><br><span class="line">j++;</span><br><span class="line">}</span><br><span class="line">LNode *newNode = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">newNode->data = data;</span><br><span class="line">newNode->next = <span class="literal">NULL</span>;</span><br><span class="line">newNode->next = p->next;</span><br><span class="line">p->next = newNode;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>   <span class="title">deleteList</span><span class="params">(LinkList L,<span class="keyword">int</span> data)</span></span>{　</span><br><span class="line">LNode *p = L->next; <span class="comment">// p 要删除元素的指针 </span></span><br><span class="line">LNode *temp = L->next; <span class="comment">//  删除元素的前一个位置 </span></span><br><span class="line"><span class="keyword">int</span> length=<span class="number">0</span>;　　　　　　　</span><br><span class="line"><span class="keyword">while</span>(p->next != <span class="literal">NULL</span>){　　　<span class="comment">// 查找元素位置</span></span><br><span class="line"><span class="keyword">if</span>(p && p->data == data){</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">p =p->next;</span><br><span class="line">length++;</span><br><span class="line">}</span><br><span class="line">} </span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i<length<span class="number">-1</span>;i++){ <span class="comment">// 找到元素的前一个位置</span></span><br><span class="line">temp = temp->next;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//printf(" length %d\n",length);</span></span><br><span class="line"><span class="comment">//printf("p 的位置 %d\n",p->data);</span></span><br><span class="line"><span class="comment">//printf("q 的位置 %d\n",q->data);</span></span><br><span class="line"><span class="comment">//printf("temp 的位置 %d\n",temp->data);</span></span><br><span class="line">temp->next = p->next; <span class="comment">// 将此元素的前一个位置的指针指向此元素的后一个元素</span></span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">LNode *List;</span><br><span class="line">List = initList();</span><br><span class="line">List = createList(List); </span><br><span class="line">printList(List);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"search %d\n"</span>,search(List,<span class="number">1</span>)->data);</span><br><span class="line">printList(List);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">deleteList(List,<span class="number">34</span>);</span><br><span class="line">deleteList(List,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">InsertList(List,<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"InsertList\n"</span>);</span><br><span class="line">printList(List);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 链表: 适合很多次插入删除操作</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有头节点的单链表的增删查&lt;/p&gt;
    
    </summary>
    
    
      <category term="c" scheme="http://philxling.club/categories/c/"/>
    
    
      <category term="c" scheme="http://philxling.club/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Android布局属性</title>
    <link href="http://philxling.club/2020/08/10/Android/Android%E5%B8%83%E5%B1%80%E5%B1%9E%E6%80%A7/"/>
    <id>http://philxling.club/2020/08/10/Android/Android%E5%B8%83%E5%B1%80%E5%B1%9E%E6%80%A7/</id>
    <published>2020-08-10T09:28:00.000Z</published>
    <updated>2020-10-15T04:26:41.689Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>转载：<a href="http://blog.csdn.net/xiaole0313" target="_blank" rel="noopener">http://blog.csdn.net/xiaole0313</a><br>第一类:属性值为true或false<br>android:layout_centerHrizontal 水平居中 （Hrizontal表示水平）<br>android:layout_centerVertical 垂直居中 （Vertiacl表示垂直）<br>android:layout_centerInparent 相对于父元素完全居中android:layout_alignParentBottom 贴紧父元素的下边缘 （align 表示使什么成为一行）</p><a id="more"></a><p>android:layout_alignParentLeft 贴紧父元素的左边缘<br>android:layout_alignParentRight 贴紧父元素的右边缘<br>android:layout_alignParentTop 贴紧父元素的上边缘<br>android:layout_alignWithParentIfMissing 如果对应的兄弟元素找不到的话就以父元素做参照物<br>第二类：属性值必须为id的引用名”@id/id-name”<br>android:layout_below 在某元素的下方<br>android:layout_above 在某元素的的上方<br>android:layout_toLeftOf 在某元素的左边<br>android:layout_toRightOf 在某元素的右边<br>android:layout_alignTop 本元素的上边缘和某元素的的上边缘对齐<br>android:layout_alignLeft 本元素的左边缘和某元素的的左边缘对齐<br>android:layout_alignBottom 本元素的下边缘和某元素的的下边缘对齐<br>android:layout_alignRight 本元素的右边缘和某元素的的右边缘对齐<br>第三类：属性值为具体的像素值，如30dip，40px<br>android:layout_marginBottom 离某元素底边缘的距离 margin英文是边缘的意思<br>android:layout_marginLeft 离某元素左边缘的距离<br>android:layout_marginRight 离某元素右边缘的距离<br>android:layout_marginTop 离某元素上边缘的距离<br>EditText的属性<br>android:hint 设置EditText为空时输入框内的提示信息。<br>android:gravity属性是对该view 内容的限定．比如一个button 上面的text. 你可以设置该text 在view的靠左，靠右等位置．以button为例，android:gravity=”right”则button上面的文字靠右<br>android:layout_gravity<br>android:layout_gravity是用来设置该view相对与起父view 的位置．比如一个button 在linearlayout里，你想把该button放在靠左、靠右等位置就可以通过该属性设置．以button为例，android:layout_gravity=”right”则button靠右<br>android:scaleType：<br>android:scaleType是控制图片如何resized/moved来匹对ImageView的size。<br>ImageView.ScaleType / android:scaleType值的意义区别：<br>CENTER /center 按图片的原来size居中显示，当图片长/宽超过View的长/宽，则截取图片的居中部分显示<br>CENTER_CROP / centerCrop 按比例扩大图片的size居中显示，使得图片长(宽)等于或大于View的长(宽)<br>CENTER_INSIDE / centerInside 将图片的内容完整居中显示，通过按比例缩小或原来的size使得图片长/宽等于或小于View的长/宽<br>FIT_CENTER / fitCenter 把图片按比例扩大/缩小到View的宽度，居中显示<br>FIT_END / fitEnd 把图片按比例扩大/缩小到View的宽度，显示在View的下部分位置<br>FIT_START / fitStart 把图片按比例扩大/缩小到View的宽度，显示在View的上部分位置<br>FIT_XY / fitXY 把图片�不按比例扩大/缩小到View的大小显示<br>MATRIX / matrix 用矩阵来绘制，动态缩小放大图片来显示。<br>要注意一点，Drawable文件夹里面的图片命名是不能大写的。<br>android:id 为控件指定相应的ID<br>android:text 指定控件当中显示的文字，需要注意的是，这里尽量使用strings.xml文件当中的字符串<br>android:gravity 指定View组件的对齐方式，比如说居中，居右等位置 这里指的是控件中的文本位置并不是控件本身<br>android:layout_gravity 指定Container组件的对齐方式．比如一个button 在linearlayout里，你想把该button放在靠左、靠右等位置就可以通过该属性设置．以button为 例，android:layout_gravity=”right”则button靠右<br>android:textSize 指定控件当中字体的大小<br>android:background 指定该控件所使用的背景色，RGB命名法<br>android:width 指定控件的宽度 控件与组件<br>android:height 指定控件的高度<br>android:layout_width 指定Container组件的宽度<br>android:layout_height 指定Container组件的高度<br>android:layout_weight View中很重要的属性，按比例划分空间<br>android:padding* 指定控件的内边距，也就是说控件当中的内容<br>android:sigleLine 如果设置为真的话，则控件的内容在同一行中进行显示<br>android:scaleType 是控制图片如何resized/moved来匹对ImageView的siz<br>android:layout_centerHrizontal 水平居中<br>android:layout_centerVertical 垂直居中<br>android:layout_centerInparent 相对于父元素完全居中<br>android:layout_alignParentBottom 贴紧父元素的下边缘<br>android:layout_alignParentLeft 贴紧父元素的左边缘<br>android:layout_alignParentRight 贴紧父元素的右边缘<br>android:layout_alignParentTop 贴紧父元素的上边缘<br>android:layout_alignWithParentIfMissing 如果对应的兄弟元素找不到的话就以父元素做参照物<br>android:layout_below 在某元素的下方<br>android:layout_above 在某元素的的上方<br>android:layout_toLeftOf 在某元素的左边<br>android:layout_toRightOf 在某元素的右边<br>android:layout_alignTop 本元素的上边缘和某元素的的上边缘对齐<br>android:layout_alignLeft 本元素的左边缘和某元素的的左边缘对齐<br>android:layout_alignBottom 本元素的下边缘和某元素的的下边缘对齐<br>android:layout_alignRight 本元素的右边缘和某元素的的右边缘对齐<br>android:layout_marginBottom 离某元素底边缘的距离<br>android:layout_marginLeft 离某元素左边缘的距离<br>android:layout_marginRight 离某元素右边缘的距离<br>android:layout_marginTop 离某元素上边缘的距离<br>android:paddingLeft 本元素内容离本元素右边缘的距离<br>android:paddingRight 本元素内容离本元素上边缘的距离<br>android:hint 设置EditText为空时输入框内的提示信息<br>android:LinearLayout 它确定了LinearLayout的方向，其值可以为vertical， 表示垂直布局horizontal， 表示水平布局<br>android:interpolator 可能有很多人不理解它的用法，文档里说的也不太清楚，其实很简单，看下面：interpolator定义一个动画的变化率（the rate of change）。这使得基本的动画效果(alpha, scale, translate, rotate）得以加速，减速，重复等。用通俗的一点的话理解就是：动画的进度使用 Interpolator 控制。interpolator 定义了动画的变化速度，可以实现匀速、正加速、负加速、无规则变加速等。Interpolator 是基类，封装了所有 Interpolator 的共同方法，它只有一个方法，即 getInterpolation (float input)，该方法 maps a point on the timeline to a multiplier to be applied to the transformations of an animation。Android 提供了几个 Interpolator 子类，实现了不同的速度曲线，如下：<br>AccelerateDecelerateInterpolator 在动画开始与介绍的地方速率改变比较慢，在中间的时侯加速<br>AccelerateInterpolator 在动画开始的地方速率改变比较慢，然后开始加速<br>CycleInterpolator 动画循环播放特定的次数，速率改变沿着正弦曲线<br>DecelerateInterpolator 在动画开始的地方速率改变比较慢，然后开始减速<br>LinearInterpolator 在动画的以均匀的速率改变<br>对于 LinearInterpolator ，变化率是个常数，即 f (x) = x.</p><figure class="highlight plain"><figcaption><span>float getInterpolation(float input) {</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">return input;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Interpolator其他的几个子类，也都是按照特定的算法，实现了对变化率。还可以定义自己的 Interpolator 子类，实现抛物线、自由落体等物理效果。<br><strong>TextView属性汇总</strong><br>android:autoLink 设置是否当文本为URL链接/email/电话号码/map时，文本显示为可点击的链接。可选值(none/web/email/phone/map/all)<br>android:autoText 如果设置，将自动执行输入值的拼写纠正。此处无效果，在显示输入法并输入的时候起作用。<br>android:bufferType 指定getText()方式取得的文本类别。选项editable 类似于StringBuilder可追加字符，也就是说getText后可调用append方法设置文本内容。spannable 则可在给定的字符区域使用样式，参见这里1、这里2。<br>android:capitalize 设置英文字母大写类型。此处无效果，需要弹出输入法才能看得到，参见EditView此属性说明。<br>android:cursorVisible 设定光标为显示/隐藏，默认显示。<br>android:digits 设置允许输入哪些字符。如”1234567890.+-*/% ()”<br>android:drawableBottom 在text的下方输出一个drawable，如图片。如果指定一个颜色的话会把text的背景设为该颜色，并且同时和background使用时覆盖后者。<br>android:drawableLeft 在text的左边输出一个drawable，如图片。<br>android:drawablePadding 设置text与drawable(图片)的间隔，与drawableLeft、 drawableRight、drawableTop、drawableBottom一起使用，可设置为负数，单独使用没有效果。<br>android:drawableRight 在text的右边输出一个drawable。<br>android:drawableTop 在text的正上方输出一个drawable。<br>android:editable 设置是否可编辑。<br>android:editorExtras 设置文本的额外的输入数据。<br>android:ellipsize 设置当文字过长时,该控件该如何显示。有如下值设置：”start”—-省略号显示在开头;”end” ——省略号显示在结尾;”middle”—-省略号显示在中间;”marquee” ——以跑马灯的方式显示(动画横向移动)<br>android:freezesText 设置保存文本的内容以及光标的位置。<br>android:gravity 设置文本位置，如设置成”center”，文本将居中显示。<br>android:hintText 为空时显示的文字提示信息，可通过textColorHint设置提示信息的颜色。此属性在 EditView中使用，但是这里也可以用。<br>android:imeOptions 附加功能，设置右下角IME动作与编辑框相关的动作，如actionDone右下角将显示一个”完成”，而不设置默认是一个回车符号。这个在EditView中再详细说明，此处无用。<br>android:imeActionId 设置IME动作ID。<br>android:imeActionLabel 设置IME动作标签。<br>android:includeFontPadding 设置文本是否包含顶部和底部额外空白，默认为true。<br>android:inputMethod 为文本指定输入法，需要完全限定名(完整的包名)。例如：com.google.android.inputmethod.pinyin，但是这里报错找不到。<br>android:inputType设置文本的类型，用于帮助输入法显示合适的键盘类型。在EditView中再详细说明，这里无效果。<br>android:linksClickable 设置链接是否点击连接，即使设置了autoLink。<br>android:marqueeRepeatLimit 在ellipsize指定marquee的情况下，设置重复滚动的次数，当设置为 marquee_forever时表示无限次。<br>android:ems 设置TextView的宽度为N个字符的宽度。这里测试为一个汉字字符宽度<br>android:maxEms 设置TextView的宽度为最长为N个字符的宽度。与ems同时使用时覆盖ems选项。<br>android:minEms 设置TextView的宽度为最短为N个字符的宽度。与ems同时使用时覆盖ems选项。<br>android:maxLength 限制显示的文本长度，超出部分不显示。<br>android:lines 设置文本的行数，设置两行就显示两行，即使第二行没有数据。<br>android:maxLines 设置文本的最大显示行数，与width或者layout_width结合使用，超出部分自动换行，超出行数将不显示。<br>android:minLines 设置文本的最小行数，与lines类似。<br>android:lineSpacingExtra 设置行间距。<br>android:lineSpacingMultiplier 设置行间距的倍数。如”1.2″<br>android:numeric 如果被设置，该TextView有一个数字输入法。此处无用，设置后唯一效果是TextView有点击效果，此属性在EdtiView将详细说明。<br>android:password 以小点”.”显示文本<br>android:phoneNumber 设置为电话号码的输入方式。<br>android:privateImeOptions 设置输入法选项，此处无用，在EditText将进一步讨论。<br>android:scrollHorizontally 设置文本超出TextView的宽度的情况下，是否出现横拉条。<br>android:selectAllOnFocus 如果文本是可选择的，让他获取焦点而不是将光标移动为文本的开始位置或者末尾位置。 TextView中设置后无效果。<br>android:shadowColor 指定文本阴影的颜色，需要与shadowRadius一起使用。<br>android:shadowDx 设置阴影横向坐标开始位置。<br>android:shadowDy 设置阴影纵向坐标开始位置。<br>android:shadowRadius 设置阴影的半径。设置为0.1就变成字体的颜色了，一般设置为3.0的效果比较好。<br>android:singleLine 设置单行显示。如果和layout_width一起使用，当文本不能全部显示时，后面用”…”来表示。如android:text=”test_ singleLine ”<br>android:singleLine=”true” android:layout_width=”20dp”将只显示”t…”。如果不设置singleLine或者设置为false，文本将自动换行<br>android:text 设置显示文本.<br>android:textAppearance 设置文字外观。如 “?android:attr/textAppearanceLargeInverse”这里引用的是系统自带的一个外观，?表示系统是否有这种外观，否则使用默认的外观。可    </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>android:textColor 设置文本颜色<br>android:textColorHighlight 被选中文字的底色，默认为蓝色<br>android:textColorHint 设置提示信息文字的颜色，默认为灰色。与hint一起使用。<br>android:textColorLink 文字链接的颜色.<br>android:textScaleX 设置文字之间间隔，默认为1.0f。<br>android:textSize 设置文字大小，推荐度量单位”sp”，如”15sp”<br>android:textStyle 设置字形[bold(粗体) 0, italic(斜体) 1, bolditalic(又粗又斜) 2] 可以设置一个或多个，用”|”隔开<br>android:typeface 设置文本字体，必须是以下常量值之一：normal 0, sans 1, serif 2, monospace(等宽字体) 3]<br>android:height 设置文本区域的高度，支持度量单位：px(像素)/dp/sp/in/mm(毫米)<br>android:maxHeight 设置文本区域的最大高度<br>android:minHeight 设置文本区域的最小高度<br>android:width 设置文本区域的宽度，支持度量单位：px(像素)/dp/sp/in/mm(毫米)，与layout_width 的区别看这里。<br>android:maxWidth 设置文本区域的最大宽度<br>android:minWidth 设置文本区域的最小宽度<br>Android activity 属性汇总<br>android:allowTaskReparenting<br>是否允许activity更换从属的任务，比如从短信息任务切换到浏览器任务。<br>android:alwaysRetainTaskState<br>是否保留状态不变， 比如切换回home, 再从新打开， activity处于最后的状态<br>android:clearTaskOnLanunch<br>比如 P 是 activity, Q 是被P 触发的 activity, 然后返回Home, 从新启动 P，是否显示 Q<br>android:configChanges<br>当配置list发生修改时，是否调用 onConfigurationChanged() 方法 比如 “locale|navigation|orientation”.<br>android:enabled activity 是否可以被实例化,<br>android:excludeFromRecents 是否可被显示在最近打开的activity列表里<br>android:exported 是否允许activity被其它程序调用<br>android:finishOnTaskLaunch 是否关闭已打开的activity当用户重新启动这个任务的时候<br>android.icon<br>android:label<br>android:launchMode activity启动方式， “standard” “singleTop” “singleTask” “singleInstance”<br>其中前两个为一组， 后两个为一组<br>android:multiprocess 允许多进程<br>android:name activity的类名， 必须指定<br>androidnHistory 是否需要移除这个activity当用户切换到其他屏幕时。这个属性是 API level 3 中引入的<br>android:permission<br>android:process 一 个activity运行时所在的进程名，所有程序组件运行在应用程序默认的进程中，这个进程名跟应用程序的包名一致。中的元素process属性能够为所有组件设定一个新的默认值。但是任何组件都可以覆盖这个默认值，允许你将你的程序放在多进程中运行。 如果这个属性被分配的名字以:开头，当这个activity运行时, 一个新的专属于这个程序的进程将会被创建。如果这个进程名以小写字母开头，这个activity将会运行在全局的进程中，被它的许可所提供。<br>android:screenOrientation activity显示的模式, “unspecified” 默认值 “landscape” 风景画模式，宽度比高度大一些 “portrait” 肖像模式, 高度比宽度大。 “user” 用户的设置 “behind” “sensor” “nosensor”<br>android:stateNotNeeded 是否 activity被销毁和成功重启并不保存状态<br>android:taskAffinity activity的亲属关系， 默认情况同一个应用程序下的activity有相同的关系<br>android:theme activity的样式主题, 如果没有设置，则activity的主题样式从属于应用程序，参见元素的theme属性<br>android:windowSoftInputMode<br>activity主窗口与软键盘的交互模式, 自从API level 3 被引入<br>活动的主窗口如何与包含屏幕上的软键盘窗口交互。这个属性的设置将会影响两件事情:<br>1> 软键盘的状态——是否它是隐藏或显示——当活动(Activity)成为用户关注的焦点。<br>2> 活动的主窗口调整——是否减少活动主窗口大小以便腾出空间放软键盘或是否当活动窗口的部分被软键盘覆盖时它的内容的当前焦点是可见的。<br>它的设置必须是下面列表中的一个值，或一个”state…”值加一个”adjust…”值的组合。在任一组设置多个值——多个”state…”values，例如＆mdash有未定义的结果。各个值之间用|分开。例如:<br>在这设置的值(除”stateUnspecified”和”adjustUnspecified”以外)将覆盖在主题中设置的值<br>值 描述<br>“stateUnspecified” 软键盘的状态(是否它是隐藏或可见)没有被指定。系统将选择一个合适的状态或依赖于主题的设置。这个是为了软件盘行为默认的设置。<br>“stateUnchanged” 软键盘被保持无论它上次是什么状态，是否可见或隐藏，当主窗口出现在前面时。<br>“stateHidden” 当用户选择该Activity时，软键盘被隐藏——也就是，当用户确定导航到该Activity时，而不是返回到它由于离开另一个Activity。<br>“stateAlwaysHidden” 软键盘总是被隐藏的，当该Activity主窗口获取焦点时。<br>“stateVisible” 软键盘是可见的，当那个是正常合适的时(当用户导航到Activity主窗口时)。<br>“stateAlwaysVisible” 当用户选择这个Activity时，软键盘是可见的——也就是，也就是，当用户确定导航到该Activity时，而不是返回到它由于离开另一个Activity。<br>“adjustUnspecified” 它不被指定是否该Activity主窗口调整大小以便留出软键盘的空间，或是否窗口上的内容得到屏幕上当前的焦点是可见的。系统将自动选择这些模式中一种主要依赖于是否窗口的内容有任何布局视图能够滚动他们的内容。如果有这样的一个视图，这个窗口将调整大小，这样的假设可以使滚动窗口的内容在一个较小的区域中可见的。这个是主窗口默认的行为设置。<br>“adjustResize” 该Activity主窗口总是被调整屏幕的大小以便留出软键盘的空间。<br>“adjustPan” 该Activity主窗口并不调整屏幕的大小以便留出软键盘的空间。相反，当前窗口的内容将自动移动以便当前焦点从不被键盘覆盖和用户能总是看到输入内容的部分。这个通常是不期望比调整大小，因为用户可能关闭软键盘以便获得与被覆盖内容的交互操作。<br>Android EditText 属性汇总<br>android:layout_gravity=”center_vertical” 设置控件显示的位置：默认top，这里居中显示，还有bottom<br>android:hint=”请输入数字！” 设置显示在空间上的提示信息<br>android:numeric=”integer” 设置只能输入整数，如果是小数则是：decimal<br>android:singleLine=”true” 设置单行输入，一旦设置为true，则文字不会自动换行。<br>android:password=”true” 设置只能输入密码<br>android:textColor = “#ff8c00″ 字体颜色<br>android:textStyle=”bold” 字体，bold, italic, bolditalic<br>android:textSize=”20dip” 大小<br>android:capitalize = “characters” 以大写字母写<br>android:textAlign=”center” EditText没有这个属性，但TextView有<br>android:textColorHighlight=”#cccccc” 被选中文字的底色，默认为蓝色<br>android:textColorHint=”#ffff00″ 设置提示信息文字的颜色，默认为灰色<br>android:textScaleX=”1.5″ 控制字与字之间的间距<br>android:typeface=”monospace” 字型，normal, sans, serif, monospace<br>android:background=”@null” 空间背景，这里没有，指透明<br>android:layout_weight=”1″ 权重，控制控件之间的地位,在控制控件显示的大小时蛮有用的。<br>android:textAppearance=”?android:attr/textAppearanceLargeInverse”<br>文字外观，这里引用的是系统自带的一个外观，？表示系统是否有这种外观，否则使用默认的外观。不知道这样理解对不对？<br>通过EditText的layout xml文件中的相关属性来实现:</p><ol><li>密码框属性 android:password=”true” 这条可以让EditText显示的内容自动为星号，输入时内容会在1秒内变成*字样。</li><li>纯数字 android:numeric=”true” 这条可以让输入法自动变为数字输入键盘，同时仅允许0-9的数字输入</li><li>仅允许 android:capitalize=”cwj1987″ 这样仅允许接受输入cwj1987，一般用于密码验证<br>下面是一些扩展的风格属性<br>android:editable=”false” 设置EditText不可编辑<br>android:singleLine=”true” 强制输入的内容在单行<br>android:ellipsize=”end” 自动隐藏尾部溢出数据，一般用于文字内容过长一行无法全部显示时<br>RelativeLayout布局<br>android:layout_marginTop=”25dip” //顶部距离<br>android:gravity=”left” //空间布局位置<br>android:layout_marginLeft=”15dip //距离左边距<br>// 相对于给定ID控件<br>android:layout_above 将该控件的底部置于给定ID的控件之上;<br>android:layout_below 将该控件的底部置于给定ID的控件之下;<br>android:layout_toLeftOf 将该控件的右边缘与给定ID的控件左边缘对齐;<br>android:layout_toRightOf 将该控件的左边缘与给定ID的控件右边缘对齐;<br>android:layout_alignBaseline 将该控件的baseline与给定ID的baseline对齐;<br>android:layout_alignTop 将该控件的顶部边缘与给定ID的顶部边缘对齐;<br>android:layout_alignBottom 将该控件的底部边缘与给定ID的底部边缘对齐;<br>android:layout_alignLeft 将该控件的左边缘与给定ID的左边缘对齐;<br>android:layout_alignRight 将该控件的右边缘与给定ID的右边缘对齐;<br>// 相对于父组件<br>android:layout_alignParentTop 如果为true,将该控件的顶部与其父控件的顶部对齐;<br>android:layout_alignParentBottom 如果为true,将该控件的底部与其父控件的底部对齐;<br>android:layout_alignParentLeft 如果为true,将该控件的左部与其父控件的左部对齐;<br>android:layout_alignParentRight 如果为true,将该控件的右部与其父控件的右部对齐;<br>// 居中<br>android:layout_centerHorizontal 如果为true,将该控件的置于水平居中;<br>android:layout_centerVertical 如果为true,将该控件的置于垂直居中;<br>android:layout_centerInParent 如果为true,将该控件的置于父控件的中央;<br>// 指定移动像素<br>android:layout_marginTop 上偏移的值;<br>android:layout_marginBottom 下偏移的值;<br>android:layout_marginLeft 左偏移的值;<br>android:layout_marginRight 　 右偏移的值;<br>android:id — 为控件指定相应的ID<br>android:text — 指定控件当中显示的文字，需要注意的是，这里尽量使用strings.xml文件当中的字符串<br>android:grivity — 指定控件的基本位置，比如说居中，居右等位置这里指的是控件中的文本位置并不是控件本身。<br>android:textSize — 指定控件当中字体的大小<br>android:background — 指定该控件所使用的背景色，RGB命名法<br>android:width — 指定控件的宽度<br>android:height — 指定控件的高度<br>android:padding* — 指定控件的内边距，也就是说控件当中的内容<br>android:sigleLine — 如果设置为真的话，则控件的内容在同一行中进行显示<br>下边是相对布局属性的说明：RelativeLayout<br>android:layout_above 将该控件的底部至于给定ID控件之上<br>android:layout_below 将该控件的顶部至于给定ID的控件之下<br>android:layout_toLeftOf 将该控件的右边缘和给定ID的控件左边缘对齐<br>android:layout_toRightOf 将该控件的左边缘和给定ID的控件的右边缘对齐<br>android:layout_alignBaseline 该控件的baseline和给定ID的控件的baseline对齐<br>android:layout_alignBottom 将该控件的底部边缘与给定ID控件的底部边缘对齐<br>android:layout_alignLeft 将该控件的左边缘与给定ID控件的左边缘对齐<br>android:layout_alignRight 将该控件的右边缘与给定ID控件的右边缘对齐<br>android:layout_alignTop 将该控件的顶部边缘与给定ID控件的顶部对齐<br>android:alignParentBottom 如果该值为true,则将该控件的底部和父控件的底部对齐<br>android:layout_alignParentLeft 如果该值为true,则将该控件左边与父控件的左边对齐<br>android:layout_alignParentRight 如果该值为true,则将该控件的右边与父控件的右边对齐<br>android:layout_alignParentTop 如果该值为true,则将该控件的顶部与父控件的顶部对齐<br>android:layout_centerHorizontal 如果为真，该控件将被至于水平方向的中央<br>android:layout_centerInParent 如果为真，该控件将被至于父控件水平方向和垂直方向的中央<br>android:layout_centerVertical 如果为真，该控件将被至于垂直方向的中央<br>android:layout_marginLeft此属性用来设置控件之间的间隙（控件和控件之间和内边距不同）<br>android:padding=”3dip”说明了四边的内边距是3dip<br>TableLayout<br>android:orientation=”vertical”<br>android:layout_width=”fill_parent”<br>android:layout_height=”fill_parent”<br>android:stretchColumns=”0″<blockquote></blockquote>android:stretchColumns=”0″第一列作为拉伸列填满整行<br>Java中修饰符总结：<br>1、访问控制修饰符<br>public的访问级别是最高的，其次是protected、默认和private<br>成员变量和成员方法可以处于4个访问级别中的一个：公开、受保护、默认或私有<br>顶层类可以处于公开或默认级别，顶层类不能被protected和private修饰<br>局部变量不能被访问控制修饰符修饰<br>2、abstract修饰符<br>抽象类不能被实例化<br>抽象类中可以没有抽象方法，但包含了抽象方法的类必须被定义为抽象方法<br>如果子类没有实现父类中所有的抽象方法，子类也必须定义为抽象类<br>抽象类不能被定义为private、final、和static类型<br>没有抽象的构造方法<br>抽象方法没有方法体<br>3、final修饰符<br>用final修饰的类不能被继承<br>用final修饰的方法不能被子类的方法覆盖<br>private类型的方法都默认为是final方法，因而不能被子类的方法覆盖<br>final变量必须被显式初始化，并且只能被赋值一次值<br>4、static修饰符<br>静态变量在内存中只有一个拷贝，在类的所有实例中共享<br>在静态方法中不能直接访问实例方法和实例变量<br>在静态方法中不能使用this和super关键字<br>静态方法不能被abstract修饰<br>静态方法和静态变量都可以通过类名直接访问<br>当类被加载时，静态代码块只能被执行一次。类中不同的静态方法代码块按他们在类中出现的顺序被依次执行<br>当多个修饰符连用时，修饰符的顺序可以颠倒，不过作为普遍遵守的编程规范，通常把访问控制修饰符放在首位，其次是static或abstact修饰符，接着就是其他的修饰符<br>5、以下修饰符连用是无意义的，会导致编译错误：<br>abstract与private<br>abstract与final<br>abstract与static</li></ol></body></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载：&lt;a href=&quot;http://blog.csdn.net/xiaole0313&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/xiaole0313&lt;/a&gt;&lt;br&gt;第一类:属性值为true或false&lt;br&gt;android:layout_centerHrizontal 水平居中 （Hrizontal表示水平）&lt;br&gt;android:layout_centerVertical 垂直居中 （Vertiacl表示垂直）&lt;br&gt;android:layout_centerInparent 相对于父元素完全居中android:layout_alignParentBottom 贴紧父元素的下边缘 （align 表示使什么成为一行）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://philxling.club/categories/Android/"/>
    
    
      <category term="Android" scheme="http://philxling.club/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android开发</title>
    <link href="http://philxling.club/2020/07/06/Android/Android/"/>
    <id>http://philxling.club/2020/07/06/Android/Android/</id>
    <published>2020-07-05T16:00:00.000Z</published>
    <updated>2020-10-15T04:26:41.689Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><pre><code>Even miracle take a moment Do what feels right to you</code></pre><h3 id="安卓开发功能"><a href="#安卓开发功能" class="headerlink" title="安卓开发功能"></a>安卓开发功能</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AlbumMainActivity(专辑主页面)，首先初始化页面，获取AlbumList，得到专辑id，onActivityResult用于页面传值。onResume和onPause调用友盟。</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NetHelper 解析，创建单例，用于调用，初始化检查设备在线的状态，如果是wifi，开始局域网扫描，扫描先shotdownNow()，然后通过广播地址（255.255.255.255）,通过定时执行0秒延时，隔3秒，执行线程池中执行发送信号（也就是url，DEVICE_DISCOVERY = "/discovery?param=xiaotingting&port=255.255.255.255";）线程执行sendBroadcast（数据，ip），通过DatagramPacket（就像通信的船），（DatagramSocket是两个港口），其中DatagramPacket会使用四个参数，字节，长度，广播地址（255...），端口号</span></span><br><span class="line"><span class="comment">// 发送广播</span></span><br><span class="line">        mSendSocket.setBroadcast(<span class="keyword">true</span>);</span><br><span class="line">            mSendSocket.setSoTimeout(<span class="number">5000</span>);</span><br><span class="line">            mSendSocket.send(sendPacket);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startVboxPoll</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (mPollExecutor != <span class="keyword">null</span> || mDeviceId == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> period = isSendLAN ? <span class="number">1</span> : <span class="number">3</span>; <span class="comment">//局域网1秒轮询，远程3秒轮询</span></span><br><span class="line">        mDateCheckOnline = <span class="keyword">new</span> Date();</span><br><span class="line">        mPollExecutor = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>);</span><br><span class="line">        mPollExecutor.scheduleAtFixedRate(<span class="keyword">this</span>::doPollRunnable, <span class="number">0</span>, period, TimeUnit.SECONDS);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"CheckResult"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDiscoverRunnable</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (isInWIFI && !isSendLAN) {</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送discovery命令</span></span><br><span class="line">            sendDeviceDiscovery();</span><br><span class="line">            <span class="comment">// 此方法用于轮询若是局域网，则1秒轮询，若是远程3秒执行轮询</span></span><br><span class="line">            startVboxPoll();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">        mPollExecutor = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>);</span><br><span class="line">        mPollExecutor.scheduleAtFixedRate(<span class="keyword">this</span>::doPollRunnable, <span class="number">0</span>, period, TimeUnit.SECONDS);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">long</span> userId)</span> </span>{</span><br><span class="line">        LogUtils.d(<span class="string">"NetHelper 初始化 userId:"</span> + userId);</span><br><span class="line">        <span class="keyword">if</span> (userId == <span class="number">0</span>) {</span><br><span class="line">            closeConnect();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (mLanBusiness == <span class="keyword">null</span>) mLanBusiness = <span class="keyword">new</span> LANBusiness();</span><br><span class="line">        <span class="keyword">if</span> (mNetDataHelper == <span class="keyword">null</span>) mNetDataHelper = <span class="keyword">new</span> NetDataHelper();</span><br><span class="line">        <span class="keyword">if</span> (mMQTTBusiness == <span class="keyword">null</span>) mMQTTBusiness = <span class="keyword">new</span> MQTTBusiness();</span><br><span class="line">        mDateRecData = <span class="keyword">null</span>;</span><br><span class="line">        mDateSendPoll = <span class="keyword">null</span>;</span><br><span class="line">        mDateCheckOnline = <span class="keyword">null</span>;</span><br><span class="line">        mNetDataHelper.init(userId);</span><br><span class="line">        mLanBusiness.startListen();</span><br><span class="line">        mMQTTBusiness.init(userId);</span><br><span class="line">        checkDeviceOnline();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置设备Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deviceId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeviceId</span><span class="params">(<span class="keyword">long</span> deviceId)</span> </span>{</span><br><span class="line">        mDeviceId = deviceId;</span><br><span class="line">        <span class="keyword">if</span> (mLanBusiness != <span class="keyword">null</span>) mLanBusiness.setDeviceId(deviceId);</span><br><span class="line">        <span class="keyword">if</span> (mMQTTBusiness != <span class="keyword">null</span>) mMQTTBusiness.setDeviceId(deviceId);</span><br><span class="line">        checkDeviceOnline();<span class="comment">//重新切换局域网设备发现</span></span><br><span class="line">        <span class="comment">// 切换设备的话需要重新链接</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过局域网的广播发送数据，同网段都能收到</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">play</span><br><span class="line"></span><br><span class="line"> 初始化</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVboxPoll</span><span class="params">(<span class="keyword">boolean</span> isVboxPoll)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.isVboxPoll = isVboxPoll;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isVboxPoll) {</span><br><span class="line">            startVboxPoll();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            stopVboxPoll();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//如果设备不是真待机的情况下就打开轮训开关</span></span><br><span class="line">    NetHelper.getInstance().setVboxPoll(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//处理子线程发送的信息</span></span><br><span class="line">    handleMessage() </span><br><span class="line">    <span class="comment">//其余是处理各种点击事件，但是真正的处理逻辑是在AppPlayControlManager里面</span></span><br><span class="line">    <span class="comment">//AppPlayControlManager用于处理真正的逻辑，创建单例，进度条监视器，播放监听，</span></span><br><span class="line"><span class="comment">// PlayManager.getInstance().setAppPlayState(state);设置播放状态为正常或者其他.</span></span><br><span class="line">    <span class="comment">// 初始化PhonePlayView()</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPhonePlayView</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 初始化界面信息</span></span><br><span class="line">        setAppPlayInfoAndUi(PlayManager.getInstance().getPhoneCurrentVoiceInfo());</span><br><span class="line">        <span class="comment">// 得到播放状态 播放状态可以分为normal playing，pause，error</span></span><br><span class="line">        setAppPlayStateAndUi(PlayManager.getInstance().getAppPlayState());</span><br><span class="line">        <span class="comment">// 得到播放顺序的模式</span></span><br><span class="line">        setAppPlayModeAndUi(PlayManager.getInstance().getPhonePlayMode());</span><br><span class="line">        <span class="comment">// 进度条</span></span><br><span class="line">        setAppUiPlayProgressUi(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//        initPhonePlayKeyView();</span></span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        playGifControlTop();</span><br><span class="line">        <span class="comment">//mPlayCoverTopGif.setImageDrawable(mGifDrawable);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(PlayManager.getInstance().getAppPlayState() == PlayData.APP_PLAY_STATE_PAUSE){</span><br><span class="line">            pauseGifControlTop();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"><span class="comment">// 其余为各种事件的处理</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//高斯模糊</span></span><br><span class="line"><span class="comment">//        Glide.with(mContext).load(voiceInfo.getCoverUrl()).apply(RequestOptions.bitmapTransform(new BlurTransformation(25,5))).into(new CustomTarget<Drawable>() {</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void onResourceReady(@NonNull Drawable resource, @Nullable Transition<? super Drawable> transition) {</span></span><br><span class="line"><span class="comment">//                Drawable drawable = resource.getCurrent();</span></span><br><span class="line"><span class="comment">//                drawable = DrawableCompat.wrap(drawable);</span></span><br><span class="line"><span class="comment">//                drawable.setColorFilter(Color.GRAY, PorterDuff.Mode.MULTIPLY);</span></span><br><span class="line"><span class="comment">//                mPlayMainLayout.setBackground(drawable);</span></span><br><span class="line"><span class="comment">//            }</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void onLoadCleared(@Nullable Drawable placeholder) {</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            }</span></span><br><span class="line"><span class="comment">//        });</span></span><br></pre></td></tr></tbody></table></figure><p>登陆接口采用jbush，采用rustful接口方式，对接后台比较方便，<br>绑定订阅到rxjava </p><p>rxjava的原理，被观察者产生一系列的事件，通过订阅者传递给观察者，观察者通过一些列的事件作出响应的模式（特点：链式调用）</p><p>Rxjava 的优雅实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe<Integer>() {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter<Integer> emitter)</span> </span>{</span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    }</span><br><span class="line">}).subscribe(<span class="keyword">new</span> Observer<Integer>() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>{</span><br><span class="line">        Log.e(<span class="string">"TAG"</span>,<span class="string">"onSubscribe"</span>+d);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull Integer integer)</span> </span>{</span><br><span class="line">        Log.e(<span class="string">"TAG"</span>,<span class="string">"onNext"</span>+integer);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable e)</span> </span>{</span><br><span class="line">        Log.e(<span class="string">"TAG"</span>,<span class="string">"onError"</span>+e);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>{</span><br><span class="line">        Log.e(<span class="string">"TAG"</span>,<span class="string">"onComplete"</span>);</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"><span class="comment">// 基本形式，被观察者.subscribe(观察者)，subscribe 有多个重载版本</span></span><br><span class="line"></span><br><span class="line">Disposable disposable <span class="comment">// 可切断观察者和被观察者的链接</span></span><br></pre></td></tr></tbody></table></figure><img src="/2020/07/06/Android/Android/Rxjava1.png"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Observer<Integer>() {</span><br><span class="line">            <span class="keyword">private</span> Disposable disposable;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>{</span><br><span class="line">                Log.e(<span class="string">"TAG"</span>,<span class="string">"onSubscribe"</span>+d);</span><br><span class="line">                <span class="keyword">this</span>.disposable = d;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull Integer integer)</span> </span>{</span><br><span class="line">                Log.e(<span class="string">"TAG"</span>,<span class="string">"onNext"</span>+integer);</span><br><span class="line">                <span class="keyword">if</span> (integer == <span class="number">2</span>){</span><br><span class="line">                    disposable.dispose();</span><br><span class="line">                    Log.e(<span class="string">"TAG"</span>,<span class="string">"断开链接"</span>);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">            }</span><br></pre></td></tr></tbody></table></figure><img src="/2020/07/06/Android/Android/Rxjava2.png"><h4 id="Rxjava创建操作符"><a href="#Rxjava创建操作符" class="headerlink" title="Rxjava创建操作符"></a>Rxjava创建操作符</h4><p>Rxjava 快速创建observable<code>just()</code>快速创建，最多发送10个参数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>).subscribe(<span class="keyword">new</span> Observer<Integer>(){</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    ...</span><br></pre></td></tr></tbody></table></figure><p>​    <code>fromArray()</code>快速创建一个被观察者对象，发送10个以上事件数组形式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer[] items = {<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>};</span><br><span class="line">Observable.fromArray(items).subscribe(...)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">额外方法：</span><br><span class="line"></span><br><span class="line">![image-20200814151328887](/Users/philxling/Library/Application Support/typora-user-images/image-20200814151328887.png)</span><br><span class="line"></span><br><span class="line">延迟创建(经过x秒后，自动执行某操作或周期行任务)</span><br><span class="line"></span><br><span class="line">```defer```(直到有观察者时，才动态创建被观察者&发送事件)</span><br><span class="line"></span><br><span class="line">```timer``` 延迟后发送一个事件</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">        Observable.timer(2, TimeUnit.SECONDS).subscribe(new Observer<Long>() {</span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(@NonNull Disposable d) {</span><br><span class="line">                </span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(@NonNull Long aLong) {</span><br><span class="line"></span><br><span class="line">            }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">//interval(第一次延迟时间，间隔时间数字，时间单位)</span><br><span class="line">Observable.interval(3,1,TimeUnit.SECONDS).subscribe(...)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">// 参数1 事件序列起始点没，参数2 事件数量，参数3 第一次事件延迟发送时间，参数4 时间间隔，参数5 时间单位</span><br><span class="line">Observable.interval(3,10,2,1,TimeUnit.SECONDS).subscribe(...)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">/**</span><br><span class="line">* 1 起始点</span><br><span class="line">* 2 事件数量</span><br><span class="line">*/</span><br><span class="line">Observable.range(3,10).subscribe(...)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><figcaption><span>支持long数据类型</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Rxjava + Retrofit 轮询发送请求</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">implementation 'io.reactivex.rxjava3:rxjava:3.0.4'</span><br><span class="line">implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'</span><br><span class="line"></span><br><span class="line">    // Android 支持 Retrofit</span><br><span class="line">implementation'com.squareup.retrofit2:retrofit:2.1.0'</span><br><span class="line"></span><br><span class="line">    // 支持Gson解析</span><br><span class="line">implementation 'com.squareup.retrofit2:converter-gson:2.1.0'</span><br><span class="line"></span><br><span class="line">implementation 'com.squareup.retrofit2:adapter-rxjava3:2.9.0'</span><br><span class="line">// 添加Rxjava+Retrofit+adapter</span><br></pre></td></tr></tbody></table></figure><p>创建请求接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GetRequest_Interface</span> </span>{</span><br><span class="line">  <span class="meta">@GET</span>(<span class="string">"ajax.php?a=fy&f=auto&t=auto&w=hei%20world"</span>)</span><br><span class="line">  <span class="function">Observable<Translation> <span class="title">getCall</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 会自动封装url</span></span><br><span class="line">提供model</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Translation</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> content content;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">content</span></span>{</span><br><span class="line">      <span class="keyword">private</span> String from;</span><br><span class="line">      <span class="keyword">private</span> String to;</span><br><span class="line">      <span class="keyword">private</span> String vendor;</span><br><span class="line">      <span class="keyword">private</span> String out;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">int</span> errNo;     </span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>{</span><br><span class="line">      Log.e(<span class="string">"Rxjava"</span>,content.out);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"><span class="comment">// 执行请求 2 秒后执行吗，每隔一秒执行请求</span></span><br><span class="line">Observable.interval(<span class="number">2</span>,<span class="number">1</span>,TimeUnit.SECONDS).doOnNext(<span class="keyword">new</span> Consumer<Long>() {</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">    Log.e(<span class="string">"TAG"</span>,<span class="string">"第"</span> + aLong + <span class="string">"次轮询"</span>);</span><br><span class="line"></span><br><span class="line">    Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder().baseUrl(<span class="string">"https://fy.iciba.com/"</span>).addConverterFactory(GsonConverterFactory.create()).addCallAdapterFactory(RxJava3CallAdapterFactory.create()).build();</span><br><span class="line">    <span class="comment">// 创建网络请求接口</span></span><br><span class="line">    GetRequest_Interface request_interface = retrofit.create(GetRequest_Interface<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 封装</span></span><br><span class="line">    Observable<Translation> observable = request_interface.getCall();</span><br><span class="line">    <span class="comment">// 先在io线程执行，在mainThread处理结果</span></span><br><span class="line">    observable.subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(<span class="keyword">new</span> Observer<Translation>() {</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>{</span><br><span class="line"></span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull Translation translation)</span> </span>{</span><br><span class="line">        translation.show();</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable e)</span> </span>{</span><br><span class="line">        Log.e(<span class="string">"TAG"</span>,<span class="string">"请求失败"</span>+e);</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">      }</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line">}).subscribe(<span class="keyword">new</span> Observer<Long>() {</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(@NonNull Disposable d)</span> </span>{</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(@NonNull Long aLong)</span> </span>{</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(@NonNull Throwable e)</span> </span>{</span><br><span class="line">    Log.e(<span class="string">"error"</span>,<span class="string">"处理error"</span>+e);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/944365-71eb569b296c1f18.png" alt></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![](https://upload-images.jianshu.io/upload_images/944365-a6f852c071db2f15.png)</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">// 采用RxJava基于事件流的链式操作</span><br><span class="line">        Observable.create(new ObservableOnSubscribe<Integer>() {</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {</span><br><span class="line">                emitter.onNext(1);</span><br><span class="line">                emitter.onNext(2);</span><br><span class="line">                emitter.onNext(3);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            // 采用flatMap（）变换操作符</span><br><span class="line">        }).flatMap(new Function<Integer, ObservableSource<String>>() {</span><br><span class="line">            @Override</span><br><span class="line">            public ObservableSource<String> apply(Integer integer) throws Exception {</span><br><span class="line">                final List<String> list = new ArrayList<>();</span><br><span class="line">                for (int i = 0; i < 3; i++) {</span><br><span class="line">                    list.add("我是事件 " + integer + "拆分后的子事件" + i);</span><br><span class="line">                    // 通过flatMap中将被观察者生产的事件序列先进行拆分，再将每个事件转换为一个新的发送三个String事件</span><br><span class="line">                    // 最终合并，再发送给被观察者</span><br><span class="line">                }</span><br><span class="line">                return Observable.fromIterable(list);</span><br><span class="line">            }</span><br><span class="line">        }).subscribe(new Consumer<String>() {</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(String s) throws Exception {</span><br><span class="line">                Log.d(TAG, s);</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![](https://upload-images.jianshu.io/upload_images/944365-f4340f283e5a954d.png)</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">.concatMap(new Function<Integer, ObservableSource<String>>() {</span><br><span class="line">            @Override</span><br><span class="line">            public ObservableSource<String> apply(Integer integer) throws Exception {</span><br><span class="line">                final List<String> list = new ArrayList<>();</span><br><span class="line">                for (int i = 0; i < 3; i++) {</span><br><span class="line">                    list.add("我是事件 " + integer + "拆分后的子事件" + i);</span><br><span class="line">                    // 通过concatMap中将被观察者生产的事件序列先进行拆分，再将每个事件转换为一个新的发送三个String事件</span><br><span class="line">                    // 最终合并，再发送给被观察者</span><br><span class="line">                }</span><br><span class="line">                return Observable.fromIterable(list);</span><br><span class="line">            }</span><br><span class="line">        }).</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![](https://upload-images.jianshu.io/upload_images/944365-5278a339e4337494.png)</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">        Observable.just(1,2,3,4,5).buffer(3,1).subscribe(new Observer<List<Integer>>() {</span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(@NonNull Disposable d) {</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(@NonNull List<Integer> integers) {</span><br><span class="line">                Log.e("TAG","buffer"+integers);</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(@NonNull Throwable e) {</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() {</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/07/06/Android/Android/philxling/blog/source/_posts/Android/image-20200817110844146.png" alt="image-20200817110844146"></p><p>原理：一次接收3个事件，并且步长为一，所以每次指针向后移动一个。</p><p><img src="https://upload-images.jianshu.io/upload_images/944365-33a49ffd2ec60794.png" alt></p><p><img src="https://upload-images.jianshu.io/upload_images/944365-dc0a7df673324e21.png" alt></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组合多个观察者</span></span><br><span class="line">concat()/concatArray()<span class="comment">// 组合多个Observable对象 串行发送，concat组合被观察者数量<=4,而concatArray()则可>4</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        Observable.concat(Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">                           Observable.just(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">                           Observable.just(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>),</span><br><span class="line">                           Observable.just(<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>))</span><br><span class="line">          <span class="comment">// 注：串行执行</span></span><br><span class="line">        Observable.concatArray(Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">                           Observable.just(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">                           Observable.just(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>),</span><br><span class="line">                           Observable.just(<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>),</span><br><span class="line">                           Observable.just(<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>))</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// marge</span></span><br><span class="line">  merge()<span class="comment">// 数量< = 4</span></span><br><span class="line">  mergeArray() <span class="comment">//数量>4 组合被观察者并行执行</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// merge（）：组合多个被观察者（＜4个）一起发送数据</span></span><br><span class="line">        <span class="comment">// 注：合并后按照时间线并行执行</span></span><br><span class="line">        Observable.merge(</span><br><span class="line">                Observable.intervalRange(<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS), <span class="comment">// 从0开始发送、共发送3个数据、第1次事件延迟发送时间 = 1s、间隔时间 = 1s</span></span><br><span class="line">                Observable.intervalRange(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS)) <span class="comment">// 从2开始发送、共发送3个数据、第1次事件延迟发送时间 = 1s、间隔时间 = 1s</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><figcaption><span>mergeDelayError()```</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> ```java</span><br><span class="line">// 如果第一个事件发生error则会在后面的事发送完事件后再继续发送。</span><br><span class="line">Observable.concatArrayDelayError(</span><br><span class="line">                Observable.create(new ObservableOnSubscribe<Integer>() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {</span><br><span class="line"></span><br><span class="line">                        emitter.onNext(1);</span><br><span class="line">                        emitter.onNext(2);</span><br><span class="line">                        emitter.onNext(3);</span><br><span class="line">                        emitter.onError(new NullPointerException()); // 发送Error事件，因为使用了concatDelayError，所以第2个Observable将会发送事件，等发送完毕后，再发送错误事件</span><br><span class="line">                        emitter.onComplete();</span><br><span class="line">                    }</span><br><span class="line">                }),</span><br><span class="line">                Observable.just(4, 5, 6))</span><br></pre></td></tr></tbody></table></figure><p>Zip()合并多个事件</p><img src="https://upload-images.jianshu.io/upload_images/944365-3fa4b1fd4f561820.png" style="zoom:67%;"><p>组合方式严格按照原先事件序列，进行对位合并，最终合并的事件数量等于多个被观察者中数量最少的数量。</p><p><img src="/2020/07/06/Android/Android/philxling/blog/source/_posts/Android/image-20200817121034116.png" alt="image-20200817121034116"></p><p>在rxjava3中，不会发送没有合并的事件。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Observable.zip(Observable.create(<span class="keyword">new</span> ObservableOnSubscribe<Integer>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter<Integer> emitter)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">                emitter.onNext(<span class="number">1</span>);</span><br><span class="line">                emitter.onNext(<span class="number">2</span>);</span><br><span class="line">                emitter.onNext(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }), Observable.create(<span class="keyword">new</span> ObservableOnSubscribe<String>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter<String> emitter)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">                emitter.onNext(<span class="string">"A"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                emitter.onNext(<span class="string">"B"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                emitter.onNext(<span class="string">"C"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                emitter.onNext(<span class="string">"D"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                emitter.onComplete();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }).subscribeOn(Schedulers.newThread()), <span class="keyword">new</span> BiFunction<Integer, String, String>() {</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Integer integer, String s)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">                <span class="keyword">return</span> integer+s;</span><br><span class="line">            }</span><br><span class="line">        }).subscribe(<span class="keyword">new</span> Consumer<String>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">                Log.e(<span class="string">"TAG"</span>,s);</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```combineLatestDelayError（）```错误处理</span><br><span class="line"></span><br><span class="line">```reduce()```把被观察者发送的事件聚合成一个事件，聚合的逻辑自己写</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">        // reduce()</span><br><span class="line">        Observable.just(1,2,3,4).reduce(new BiFunction<Integer, Integer, Integer>() {</span><br><span class="line">            @Override</span><br><span class="line">            public Integer apply(Integer integer, Integer integer2) throws Throwable {</span><br><span class="line">                return integer * integer2;</span><br><span class="line">            }</span><br><span class="line">        }).subscribe(new Consumer<Integer>() {</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer integer) throws Throwable {</span><br><span class="line">                Log.e("TAG","reduce"+"------------"+integer);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">// E/TAG: reduce------------24</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">collect()  <span class="comment">//事件收集到一个数据结构中</span></span><br><span class="line"></span><br><span class="line">startWith() <span class="comment">//  发送事件前追加单个数据</span></span><br><span class="line"></span><br><span class="line">startWithArray() <span class="comment">// 追加多个数据</span></span><br><span class="line"></span><br><span class="line">count() <span class="comment">// 统计被观察者发送事件的数量</span></span><br></pre></td></tr></tbody></table></figure><p>常见的合并/组合操作符</p><p><img src="https://upload-images.jianshu.io/upload_images/944365-214478680237ffb8.png" alt></p><p>例：获取数据，若缓存中有则取缓存，否则取磁盘，否则在请求网络获取数据。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">String memoryCache = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">String diskCache = <span class="string">"磁盘缓存"</span>;</span><br><span class="line"></span><br><span class="line">Observable memory = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe<String>() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter<String> emitter)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        <span class="keyword">if</span>(memoryCache != <span class="keyword">null</span>){</span><br><span class="line">            emitter.onNext(memoryCache);</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            emitter.onComplete();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">Observable disk = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe<String>() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(@NonNull ObservableEmitter<String> emitter)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        <span class="keyword">if</span>(diskCache != <span class="keyword">null</span>){</span><br><span class="line">            emitter.onNext(diskCache);</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            emitter.onComplete();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">Observable network = Observable.just(<span class="string">"从网络获取"</span>);</span><br><span class="line"></span><br><span class="line">Observable.concat(memory,disk,network).firstElement().subscribe(<span class="keyword">new</span> Consumer<String>() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        Log.e(<span class="string">"TAG"</span>,s);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>网络获取多个数据进行合并输出</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建retrofit</span></span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder().baseUrl(<span class="string">"https://fy.iciba.com/"</span>).addConverterFactory(GsonConverterFactory.create()).addCallAdapterFactory(RxJava3CallAdapterFactory.create()).build();</span><br><span class="line"><span class="comment">// 请求接口</span></span><br><span class="line">        GetRequest_Interface getRequest_interface = retrofit.create(GetRequest_Interface<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// 新建线程调用</span></span><br><span class="line">        Observable<Translation>  observable = getRequest_interface.getCall().subscribeOn(Schedulers.io());</span><br><span class="line">        Observable<Translation1>  observable1 = getRequest_interface.getCall_2().subscribeOn(Schedulers.io());</span><br><span class="line"><span class="comment">// 合并输出</span></span><br><span class="line">        Observable.zip(observable1, observable, <span class="keyword">new</span> BiFunction<Translation1, Translation, String>() {</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Translation1 translation1, Translation translation)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">                <span class="keyword">return</span> translation1.show()+translation.show();</span><br><span class="line">            }</span><br><span class="line">        }).subscribe(<span class="keyword">new</span> Consumer<String>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">                Log.e(<span class="string">"TAG"</span>, <span class="string">"最终返回的数据"</span> + s);</span><br><span class="line">            }</span><br><span class="line">        }, <span class="keyword">new</span> Consumer<Throwable>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">                Log.e(<span class="string">"TAG"</span>,<span class="string">"登陆失败"</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/07/06/Android/Android/philxling/blog/source/_posts/Android/image-20200817171213846.png" alt="image-20200817171213846"></p><p> 利用<code>conbineLatest()</code>进行空值判断：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 步骤1：设置控件变量 & 绑定</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">EditText name,age,job;</span><br><span class="line">Button list;</span><br><span class="line"></span><br><span class="line">name = (EditText) findViewById(R.id.name);</span><br><span class="line">age = (EditText) findViewById(R.id.age);</span><br><span class="line">job = (EditText) findViewById(R.id.job);</span><br><span class="line">list = (Button) findViewById(R.id.list);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 步骤2：为每个EditText设置被观察者，用于发送监听事件</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> * 1. 此处采用了RxBinding：RxTextView.textChanges(name) = 对对控件数据变更进行监听（功能类似TextWatcher），需要引入依赖：compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'</span></span><br><span class="line"><span class="comment"> * 2. 传入EditText控件，点击任1个EditText撰写时，都会发送数据事件 = Function3（）的返回值（下面会详细说明）</span></span><br><span class="line"><span class="comment"> * 3. 采用skip(1)原因：跳过 一开始EditText无任何输入时的空值</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">Observable<CharSequence> nameObservable = RxTextView.textChanges(name).skip(<span class="number">1</span>);</span><br><span class="line">Observable<CharSequence> ageObservable = RxTextView.textChanges(age).skip(<span class="number">1</span>);</span><br><span class="line">Observable<CharSequence> jobObservable = RxTextView.textChanges(job).skip(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 步骤3：通过combineLatest（）合并事件 & 联合判断</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">Observable.combineLatest(nameObservable,ageObservable,jobObservable,<span class="keyword">new</span> Function3<CharSequence, CharSequence, CharSequence,Boolean>() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">apply</span><span class="params">(@NonNull CharSequence charSequence, @NonNull CharSequence charSequence2, @NonNull CharSequence charSequence3)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 步骤4：规定表单信息输入不能为空</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        <span class="comment">// 1. 姓名信息</span></span><br><span class="line">        <span class="keyword">boolean</span> isUserNameValid = !TextUtils.isEmpty(name.getText()) ;</span><br><span class="line">        <span class="comment">// 除了设置为空，也可设置长度限制</span></span><br><span class="line">        <span class="comment">// boolean isUserNameValid = !TextUtils.isEmpty(name.getText()) && (name.getText().toString().length() > 2 && name.getText().toString().length() < 9);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 年龄信息</span></span><br><span class="line">        <span class="keyword">boolean</span> isUserAgeValid = !TextUtils.isEmpty(age.getText());</span><br><span class="line">        <span class="comment">// 3. 职业信息</span></span><br><span class="line">        <span class="keyword">boolean</span> isUserJobValid = !TextUtils.isEmpty(job.getText()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 步骤5：返回信息 = 联合判断，即3个信息同时已填写，"提交按钮"才可点击</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        <span class="keyword">return</span> isUserNameValid && isUserAgeValid && isUserJobValid;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">        }).subscribe(<span class="keyword">new</span> Consumer<Boolean>() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Boolean s)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 步骤6：返回结果 & 设置按钮可点击样式</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        Log.e(TAG, <span class="string">"提交按钮是否可点击： "</span>+s);</span><br><span class="line">        list.setEnabled(s);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>Rxjava 线程工作原理</p><p><img src="https://upload-images.jianshu.io/upload_images/944365-3997d7540acda975.png" alt></p><table><thead><tr><th>类型</th><th>含义</th><th>应用</th></tr></thead><tbody><tr><td>Schedulers.immediate()</td><td>当前线程=不指定线程</td><td>默认</td></tr><tr><td>AndroidSchedulers.mainThread()</td><td>Android主线程</td><td>main</td></tr><tr><td>Schedulers.newThread()</td><td>常规新线程</td><td>耗时的操作</td></tr><tr><td>Schedulers.io()</td><td>io操作线程</td><td>网络请求，读写文件等io密集型操作</td></tr><tr><td>Schedulers.compution()</td><td>cpu计算线程</td><td>大量计算</td></tr></tbody></table><p>使用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Observable.subscribeOn()指定</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 整体方法调用顺序：观察者.onSubscribe（）> 被观察者.subscribe（）> 观察者.doOnNext（）>观察者.onNext（）>观察者.onComplete() </span></span><br><span class="line"><span class="comment">// 2. 观察者.onSubscribe（）固定在主线程进行</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;Even miracle take a moment 
Do what feels right to you&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;安卓开发功能&quot;&gt;&lt;a href=&quot;#安卓开发功能&quot; class=&quot;headerlink&quot; title=&quot;安卓开发功能&quot;&gt;&lt;/a&gt;安卓开发功能&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AlbumMainActivity(专辑主页面)，首先初始化页面，获取AlbumList，得到专辑id，onActivityResult用于页面传值。onResume和onPause调用友盟。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://philxling.club/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>UML类图</title>
    <link href="http://philxling.club/2020/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML%E7%B1%BB%E5%9B%BE/"/>
    <id>http://philxling.club/2020/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML%E7%B1%BB%E5%9B%BE/</id>
    <published>2020-06-24T09:31:33.000Z</published>
    <updated>2020-06-24T10:52:38.083Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>UML类图用来表示类之间的关系: 采用starUML软件,下载安装,安装node.js,配置环境变量,配置 npm的镜像:<code>npm config set registry https://registry.npm.taobao.org</code>安装asar,<code>npm install -g asar</code>解压程序目录下的resources的app.asar,需要管理员权限<code>copy app.asar app.asar.bak;mkdir TMP; asar extract app.asar TMP;cd TMP/src/engin;修改license-manager.js文件;注释掉UnregisteredDialog.showDialog();修改setStatus(this,true);打包替换app.asar;asar pack TMP app.asar;破解成功</code></p><p><img src="/2020/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML%E7%B1%BB%E5%9B%BE/image-20200624174307086.png" alt="image-20200624174307086"></p><p><img src="/2020/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML%E7%B1%BB%E5%9B%BE/image-20200624174510124.png" alt="image-20200624174510124"></p><p>访问权限: + 表示public; - 表示 private; # 表示 protected; ~ 表示package 下划线表示static,斜体表示abstract; : 表示变量类型或方法的返回值;= 表示默认值.</p><p>接口: </p><p><img src="/2020/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML%E7%B1%BB%E5%9B%BE/image-20200624175352787.png" alt="image-20200624175352787"></p><p>关系:</p><p><img src="/2020/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML%E7%B1%BB%E5%9B%BE/image-20200624184945180.png" alt="image-20200624184945180"></p><p> <img src="/2020/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML%E7%B1%BB%E5%9B%BE/image-20200624183403664.png" alt="image-20200624183403664"></p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;UML类图用来表示类之间的关系: 采用starUML软件,下载安装,安装node.js,配置环境变量,配置 npm的镜像:&lt;code&gt;npm config set registry https://registry.npm.
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://philxling.club/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://philxling.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>linux库函数</title>
    <link href="http://philxling.club/2020/05/26/linux/linuxday2/"/>
    <id>http://philxling.club/2020/05/26/linux/linuxday2/</id>
    <published>2020-05-26T11:02:16.000Z</published>
    <updated>2020-10-15T03:51:03.216Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><figure class="highlight plain"><figcaption><span>man```用于查看linux文档，第1章shell命令，第二章库函数，等</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```alias ls```查看ls命令是否被封装</span><br><span class="line"></span><br><span class="line">```echo```输出如：```echo $PATH```输出path变量的值</span><br><span class="line"></span><br><span class="line">vim编辑器：命令模式，编辑模式，末行模式；</span><br><span class="line"></span><br><span class="line">![image-20200526193729409](assets/image-20200526193729409.png)</span><br><span class="line"></span><br><span class="line">![image-20200526194253885](assets/image-20200526194253885.png)</span><br><span class="line"></span><br><span class="line">查找```/字符;?字符;#;```/从光标向下查找，？从光标向上查找，#标注这个单词。遍历的快捷键```n/N</span><br></pre></td></tr></tbody></table></figure><p>缩进：向右>>；向左<<。</p><p><img src="/2020/05/26/linux/linuxday2/image-20200526201257734.png" alt="image-20200526201257734"></p><p>gcc编译器：</p><p>​        将文件编译为可执行程序：<code>gcc -E Test.c -o Test.i;gcc -S Test.i -o Test.s;gcc -c Test.s -o Test.o;gcc Test.o -o app;./app</code>也可以直接链接生成可执行程序：<code>gcc test.c -o app</code></p><p><img src="/2020/05/26/linux/linuxday2/image-20200526205940376.png" alt="image-20200526205940376"></p><p>包含头文件：-I  头文件的路径如：<code>gcc sum.c -I /include -o app</code>-D 定义宏；-g gdb调试；-Wail 警告信息</p><p>静态库：</p><p>​        命名：lib+名称+.a 制作步骤：生成.o文件，将.o文件打包。打包用<code>ar rcs 静态库的名字+*.o</code>；用户执行：<code>gcc main.c /lib/libtest.a -o app -Iinclude</code>(头文件)第二种：<code>gcc main.c -L ./lib(库所在的目录) -l test(库的名字，去掉头lib和后缀.a) -o app -Iinclude</code></p><figure class="highlight plain"><figcaption><span>+可执行程序```查看可执行程序。</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">共享库：</span><br><span class="line"></span><br><span class="line">​lib+名字+.so;生成与位置无关的代码如：```gcc -fPIC -c *.c -I +头文件```;打包：```gcc -shared  -o lib+名字.so *.o -I +头文件```;将so文件和include打包给用户。用户执行：```gcc main.c(测试) /lib/libtest.so(打包共享库) -o app -Iinclude(头文件)</span><br></pre></td></tr></tbody></table></figure><p>用户执行会产生：error while loading shared libraries: libtest.so: cannot open shared object file: No such file or directory；设置环境变量：1 将共享库的目录导入LD_LIBARY_PATH;如：<code>export LD_LIBARY_PATH=./lib</code>是暂时的，关闭终端就会失效2 永久设置：修改配置文件/etc/ld.so.conf 将动态库的目录添加进去(绝对路径)。更新：<code>sudo ldconfig -v</code></p><p>ldd 查看可执行程序在执行的所依赖的所有库。</p><p>gdb调试：</p><p>​        开始运行（r,start）,l 查看代码 l+行号或文件名 设置断点（b +行号或函数名）或者b filename：行号(函数名)n单步，s（stap）单步可以进入函数内部，c直接停在断点。设置条件断点：b +行号 if value=10；删除断点; d+断点编号（info b获取）；从函数体内部跳出：finish，退出当前循环：u；查看变量的值：p；查看变量的类型：ptype+变量名称；设置变量的值：set var+变量名=赋值；设置追踪变量：dispaly；取消追踪变量：undisplay +编号（info display); 退出gdb：quit。</p><p>mkfile的编写：</p><p>​        创建makefile，格式：目标：依赖文件</p><p>​                                                       (前必须有tab空格)命令</p><p>​        执行<code>make</code>,makefile中的变量：</p><p><img src="/2020/05/26/linux/linuxday2/image-20200527042758106.png" alt="image-20200527042758106"></p><p><img src="/2020/05/26/linux/linuxday2/image-20200528200215674.png" alt="image-20200528200215674"></p><p><img src="/2020/05/26/linux/linuxday2/image-20200528204843533.png" alt="image-20200528204843533"></p><p>c系统函数:</p><p>1.文件描述符: int 类型,</p><p>2.pcd: 进程控制块.其中有文件描述符(数组(1024)).</p><p>3.虚拟地址空间: 用户区(0-3G)分布(代码段,未初始化的全局变量,已初始化的全局变量,堆,共享库,栈,环境变量,内核区),内核区(3G-4G)(不允许用户操作)</p><p>open函数: <code>open(文件描述符,什么方式(Q_RDWR));open(文件描述符,什么方式并且创建(Q_RDWR | Q_CREAT),权限)</code></p><p>read函数,write函数:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">2</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"> <span class="number">1</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><sys/types.h></span></span></span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></span></span></span><br><span class="line"> <span class="number">3</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdlib.h></span></span></span><br><span class="line"> <span class="number">4</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><sys/stat.h></span></span></span><br><span class="line"> <span class="number">5</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><unistd.h></span></span></span><br><span class="line"> <span class="number">6</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><fcntl.h></span></span></span><br><span class="line"> <span class="number">7</span> </span><br><span class="line"> <span class="number">8</span> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"> <span class="number">9</span>         <span class="keyword">int</span> fp = <span class="built_in">open</span>(<span class="string">"english.txt"</span>,O_RDONLY);</span><br><span class="line"><span class="number">10</span>         <span class="keyword">if</span>(fp == <span class="number">-1</span>){</span><br><span class="line"><span class="number">11</span>                 perror(<span class="string">"open file"</span>);</span><br><span class="line"><span class="number">12</span>                 <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="number">13</span>         }</span><br><span class="line"><span class="number">14</span>         <span class="comment">// 创建新的文件</span></span><br><span class="line"><span class="number">15</span>         <span class="keyword">int</span> fp1 = <span class="built_in">open</span>(<span class="string">"english1.txt"</span>,O_CREAT | O_WRONLY ,<span class="number">0777</span>);</span><br><span class="line"><span class="number">16</span>         <span class="keyword">if</span>(fp1 == <span class="number">-1</span>){</span><br><span class="line"><span class="number">17</span>                 perror(<span class="string">"creat file"</span>);</span><br><span class="line"><span class="number">18</span>                 <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="number">19</span>         }</span><br><span class="line"><span class="number">20</span>         <span class="comment">// read file</span></span><br><span class="line"><span class="number">21</span>         <span class="keyword">char</span> buf[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line"><span class="number">22</span>         <span class="keyword">int</span> count = <span class="built_in">read</span>(fp,buf,<span class="keyword">sizeof</span>(buf));</span><br><span class="line"><span class="number">23</span>         <span class="keyword">if</span>(count == <span class="number">-1</span>){</span><br><span class="line"><span class="number">24</span>                 perror(<span class="string">"raed file"</span>);</span><br><span class="line"><span class="number">25</span>                 <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="number">26</span>         }</span><br><span class="line"><span class="number">27</span>         <span class="keyword">while</span>(count){</span><br><span class="line"><span class="number">28</span>                 <span class="keyword">int</span> ret = <span class="built_in">write</span>(fp1,buf,count);</span><br><span class="line"><span class="number">29</span>                 <span class="built_in">printf</span>(<span class="string">"write byte %d\n"</span>,ret);</span><br><span class="line"><span class="number">30</span>                 count = <span class="built_in">read</span>(fp,buf,<span class="keyword">sizeof</span>(buf));</span><br><span class="line"><span class="number">31</span>         }</span><br><span class="line"><span class="number">32</span>         <span class="comment">// close file</span></span><br><span class="line"><span class="number">33</span>         <span class="built_in">close</span>(fp);</span><br><span class="line"><span class="number">34</span>         <span class="built_in">close</span>(fp1);</span><br><span class="line"><span class="number">35</span> }</span><br></pre></td></tr></tbody></table></figure><p>lseek函数: 能够给文件扩展</p><p><img src="/2020/05/26/linux/linuxday2/image-20200628183100651.png" alt="image-20200628183100651"></p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;linux&quot;&gt;&lt;a href=&quot;#linux&quot; class=&quot;headerlink&quot; title=&quot;linux&quot;&gt;&lt;/a&gt;linux&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;fig
      
    
    </summary>
    
    
      <category term="linux" scheme="http://philxling.club/categories/linux/"/>
    
    
      <category term="linux" scheme="http://philxling.club/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux</title>
    <link href="http://philxling.club/2020/05/25/linux/linux/"/>
    <id>http://philxling.club/2020/05/25/linux/linux/</id>
    <published>2020-05-25T00:55:59.000Z</published>
    <updated>2020-10-15T04:26:41.909Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><p>day1</p><ol><li><p>tree 查看目录结构，需要安装 sudo apt-get install tree(ubuntu)</p></li><li><p>ls 查看指定目录下所有文件和目录信息 参数 -a 显示隐藏文件 -l 显示详细信息。</p></li><li><p>cd 非指令，在/bin目录下不能找到。</p></li><li><p>文件详细9个部分：</p><a id="more"></a><p><img src="/2020/05/25/linux/linux/image-20200525090438306.png" alt="image-20200525090438306"></p></li></ol><p>第一个字母表示文件类型，d：目录，-：普通目录，s：socket文件，p：管道，c：字符设备，l：链接目录 ，b:块设备。后面每三个字母表示文件所有者即：u，同组用户：g，其他人：o。w表示写权限数字2表示，r读权限数字4，x执行权限1.777表示所有者同组用户，其他人都有读写执行权限。后面的数字表示，文件节点，当文件节点为0，表示这块内存可以存放其他文件。</p><p>增加权限：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod u/g/o/a+/-/=rwx 文件名 权限的改变</span><br><span class="line">chown 改变文件所属组和文件所有者 如 chown alex:root Test.cpp</span><br><span class="line">chgrp 改变组</span><br></pre></td></tr></tbody></table></figure><p>which 查看命令所在目录<code>which cp</code></p><p>sudo apt-get  clean 清理文件安装包，所在目录<code>/var/cache/apt/archives/</code> </p><p>创建/删除目录  mkdir 目录名 创建多级 mkdir -r 目录名 如：<code>mkdir -r /aa/bb/cc</code>删除目录  rmdir  只能删除空目录或rm -r 递归删除目录以及下的文件。删除文件 rm file  参数 -i用于提示是否删除。</p><p>创建文件  touch  文件名。 </p><p>复制文件  cp file.txt file1.txt 将file的内容复制到file1 文件不存在则创建，文件存在覆盖，cp 复制目录 cp -r  dir1 dir2 递归复制，如果存在会放在dir2中。</p><p>查看文件 cat，more，less，head，tail如：<code>tail -5 Test.cpp</code></p><p>创建链接 软链接（快捷方式）文件路径是绝对路径 ，需要参数-s 如：<code>ln -s /home/a.txt a.test</code></p><p><img src="/2020/05/25/linux/linux/image-20200525093300101.png" alt="image-20200525093300101"></p><p>查找文件 find ，grep 语法： <code>find+路径+-type/-size/-name 类型/大小/名称</code>，如<code>find / -name hello;find /usr/ -name "Test.cpp";find /usr/ -size -10k ;find /usr/bin/ -size +10M -size -15M;find /usr/ -type p</code></p><p>grep 参数-r递归查找 语法：<code>grep -r "查找的关键字"+路径</code></p><p>u盘的挂载卸载：自动挂载在/media下面。手动挂载在/mnt下。<code>fdisk -l</code>查看磁盘 。<code>sudo mount /dev/sdb3 /mnt/</code>手动挂载。</p><p>卸载：不能在使用U盘的目录中卸载<code>umount /mnt</code></p><p>压缩工具：gzip，bzip2 语法：<code>gzip 文件名</code>。<code>bzip2 文件名</code>，bzip的参数-k可以保留文件。解压 <code>gunzip *.gz</code>,不能保留文件。解压：<code>bunzip2 *.bz2</code> 。两个都不能压缩目录。</p><p>tar 参数：c 创建，x释放（解压），v 查看，f 文件名，z使用gzip的方式生成.gz。j使用bzip生成.bz2。</p><p>压缩：<code>tar czvf 文件名.tar.gz+文件或目录；tar cjvf 文件名.tar.bz2+文件或目录</code>。解压缩: <code>tar zxvf  .gz的压缩包  -C（到指定目录）+路径;tar jxvf  .bz2的压缩包  -C（到指定目录）+路径;</code></p><p>rar压缩：需要安装sudo apt-get install rar. <code>rar a 压缩包名（不同后缀）+文件名或目录;rar x 压缩包+路径；</code></p><p>zip压缩：<code>zip 压缩包名（不要后缀）+文件名或目录(目录需要-r)；解压：unzip 压缩包名 -d(到指定目录) +路径;</code></p><p>进程：ps 参数a（列出当前所有用户的信息）u显示丰富，x查看没有终端的应用程序 <code>ps aux</code></p><p>使用管道管理进程：<code>ps aux | grep bash ;kill -l;kill -9 进程ID</code></p><p>查看当前的环境变量 env 并显示PATH <code>env | grep PATH</code> top显示进程滚动 <code>top</code></p><p>网络管理：<code>ifconfig</code> 通讯 ping 如：<code>ping 192.168.0.106 -c 4</code>-c表示回馈4条信息就cut。-i表示多少秒通信一次。</p><p>查看IP： nslookup 如：<code>nslookup www.baidu.com</code></p><p>用户管理：创建用户： <code>sudo adduser +用户名</code>,还可以使用<code>sudo useradd -s /bin/bash -g Robin -d /home/Robin -m Robin</code>会提示Robin组不存在。创建Robin组：<code>sudo groupadd Robin</code>,指定密码：<code>sudo passwd Robin</code>删除用户：<code>sudo deluser 用户名</code>未删除/home/用户名 的内容，需要自己删除。2 <code>sudo userdel -r 用户名</code>删除比较完全，推荐。查看所有用户：<code>vim /etc/passwd</code></p><p>ftp服务器：安装vsftpd 。<code>sudo apt-get install vsftpd;修改配置文件；vim /etc/vsftpd.conf ；listen=YES，anonymous_enable=YES，write_enable=YES，local_umask=022，anon_upload_enable=YES，anon_mkdir_write_enable=YES，重启服务： sudo service vsftpd restart,服务器配置完成</code>客户端的登录上传和下载：使用<code>ftp ip地址（ftp的服务器地址）</code>,上传(只能上传登录ftp服务器前的目录下的文件):put file;下载：get file。匿名用户登录：1 修改配置文件 增加 <code>anon_root=路径；重启服务。客户端登陆：ftp ip；name：anonymous;passwd:空；登录</code>匿名登录只会在anon_root的目录下切换。</p><p>lftp客户端：登录：<code>lftp IP地址;login；可以切换本地目录lcd，上传多个文件mput；下载目录：mirror 目录；上传目录mirror -R 多个目录及其子目录</code></p><p>nfs服务器（用于共享文件夹）：安装： <code>sudo apt-get install nfs-kernel-server;修改配置文件：vim /etc/exports;增加共享目录：/usr/nfsshare/ *(网段)（rw（可读可写）ro（read only）,ayns（同步到磁盘））；重启服务；客户端登陆挂载：mount ip：共享文件夹路径 /mnt；</code>取消挂载：<code>sudo umount /mnt</code></p><p>ssh服务器：<code>sudo apt-get install openssh-server;登陆：ssh 用户名称@ip</code></p><p>scp超级拷贝：<code>scp -r 目标用户名@目标ip：目标目录路径 /保存到本机的绝对路径</code></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linux&quot;&gt;&lt;a href=&quot;#linux&quot; class=&quot;headerlink&quot; title=&quot;linux&quot;&gt;&lt;/a&gt;linux&lt;/h1&gt;&lt;p&gt;day1&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;tree 查看目录结构，需要安装 sudo apt-get install tree(ubuntu)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ls 查看指定目录下所有文件和目录信息 参数 -a 显示隐藏文件 -l 显示详细信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cd 非指令，在/bin目录下不能找到。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文件详细9个部分：&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://philxling.club/categories/linux/"/>
    
    
      <category term="linux" scheme="http://philxling.club/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>mui框架</title>
    <link href="http://philxling.club/2020/05/22/%E5%89%8D%E7%AB%AF/mui%E6%A1%86%E6%9E%B6/"/>
    <id>http://philxling.club/2020/05/22/%E5%89%8D%E7%AB%AF/mui%E6%A1%86%E6%9E%B6/</id>
    <published>2020-05-22T15:17:02.000Z</published>
    <updated>2020-10-15T04:26:42.003Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="mui框架"><a href="#mui框架" class="headerlink" title="mui框架"></a>mui框架</h1><p>mui框架很坑。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;mui框架&quot;&gt;&lt;a href=&quot;#mui框架&quot; class=&quot;headerlink&quot; title=&quot;mui框架&quot;&gt;&lt;/a&gt;mui框架&lt;/h1&gt;&lt;p&gt;mui框架很坑。&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
      
    
    </summary>
    
    
      <category term="前端" scheme="http://philxling.club/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://philxling.club/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>框架快速入门</title>
    <link href="http://philxling.club/2020/04/29/python%E7%88%AC%E8%99%AB/17-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://philxling.club/2020/04/29/python%E7%88%AC%E8%99%AB/17-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2020-04-28T17:22:23.000Z</published>
    <updated>2020-10-15T04:26:41.928Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2-快速入门"></a>2-快速入门</h1><h2 id="安装和文档："><a href="#安装和文档：" class="headerlink" title="安装和文档："></a>安装和文档：</h2><ol><li><p>安装：通过<code>pip install scrapy</code>即可安装。</p></li><li><p>Scrapy官方文档：<a href="http://doc.scrapy.org/en/latest" target="_blank" rel="noopener">http://doc.scrapy.org/en/latest</a></p></li><li><p>Scrapy中文文档：<a href="http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html</a></p><a id="more"></a></li></ol><blockquote><p>注意：</p><ol><li>在<code>ubuntu</code>上安装<code>scrapy</code>之前，需要先安装以下依赖：<br><code>sudo apt-get install python3-dev build-essential python3-pip libxml2-dev libxslt1-dev zlib1g-dev libffi-dev libssl-dev</code>，然后再通过<code>pip install scrapy</code>安装。</li><li>如果在<code>windows</code>系统下，提示这个错误<code>ModuleNotFoundError: No module named 'win32api'</code>，那么使用以下命令可以解决：<code>pip install pypiwin32</code>。</li></ol></blockquote><h2 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h2><h3 id="创建项目："><a href="#创建项目：" class="headerlink" title="创建项目："></a>创建项目：</h3><p>要使用<code>Scrapy</code>框架创建项目，需要通过命令来创建。首先进入到你想把这个项目存放的目录。然后使用以下命令创建：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject [项目名称]</span><br></pre></td></tr></tbody></table></figure><h3 id="目录结构介绍："><a href="#目录结构介绍：" class="headerlink" title="目录结构介绍："></a>目录结构介绍：</h3><p><img src="/2020/04/29/python%E7%88%AC%E8%99%AB/17-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/assets/QQ%E6%88%AA%E5%9B%BE20171212213138.png" alt="img"><br>以下介绍下主要文件的作用：</p><ol><li>items.py：用来存放爬虫爬取下来数据的模型。</li><li>middlewares.py：用来存放各种中间件的文件。</li><li>pipelines.py：用来将<code>items</code>的模型存储到本地磁盘中。</li><li>settings.py：本爬虫的一些配置信息（比如请求头、多久发送一次请求、ip代理池等）。</li><li>scrapy.cfg：项目的配置文件。</li><li>spiders包：以后所有的爬虫，都是存放到这个里面。</li></ol><h3 id="使用Scrapy框架爬取糗事百科段子："><a href="#使用Scrapy框架爬取糗事百科段子：" class="headerlink" title="使用Scrapy框架爬取糗事百科段子："></a>使用Scrapy框架爬取糗事百科段子：</h3><h4 id="使用命令创建一个爬虫："><a href="#使用命令创建一个爬虫：" class="headerlink" title="使用命令创建一个爬虫："></a>使用命令创建一个爬虫：</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy gensipder qsbk "qiushibaike.com"</span><br></pre></td></tr></tbody></table></figure><p>创建了一个名字叫做<code>qsbk</code>的爬虫，并且能爬取的网页只会限制在<code>qiushibaike.com</code>这个域名下。</p><h4 id="爬虫代码解析："><a href="#爬虫代码解析：" class="headerlink" title="爬虫代码解析："></a>爬虫代码解析：</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'qsbk'</span></span><br><span class="line">    allowed_domains = [<span class="string">'qiushibaike.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://qiushibaike.com/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p>其实这些代码我们完全可以自己手动去写，而不用命令。只不过是不用命令，自己写这些代码比较麻烦。<br>要创建一个Spider，那么必须自定义一个类，继承自<code>scrapy.Spider</code>，然后在这个类中定义三个属性和一个方法。</p><ol><li>name：这个爬虫的名字，名字必须是唯一的。</li><li>allow_domains：允许的域名。爬虫只会爬取这个域名下的网页，其他不是这个域名下的网页会被自动忽略。</li><li>start_urls：爬虫从这个变量中的url开始。</li><li>parse：引擎会把下载器下载回来的数据扔给爬虫解析，爬虫再把数据传给这个<code>parse</code>方法。这个是个固定的写法。这个方法的作用有两个，第一个是提取想要的数据。第二个是生成下一个请求的url。</li></ol><h4 id="修改settings-py代码："><a href="#修改settings-py代码：" class="headerlink" title="修改settings.py代码："></a>修改<code>settings.py</code>代码：</h4><p>在做一个爬虫之前，一定要记得修改<code>setttings.py</code>中的设置。两个地方是强烈建议设置的。</p><ol><li><code>ROBOTSTXT_OBEY</code>设置为False。默认是True。即遵守机器协议，那么在爬虫的时候，scrapy首先去找robots.txt文件，如果没有找到。则直接停止爬取。</li><li><code>DEFAULT_REQUEST_HEADERS</code>添加<code>User-Agent</code>。这个也是告诉服务器，我这个请求是一个正常的请求，不是一个爬虫。</li></ol><h4 id="完成的爬虫代码："><a href="#完成的爬虫代码：" class="headerlink" title="完成的爬虫代码："></a>完成的爬虫代码：</h4><ol><li><p>爬虫部分代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> abcspider.items <span class="keyword">import</span> QsbkItem</span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'qsbk'</span></span><br><span class="line">    allowed_domains = [<span class="string">'qiushibaike.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'https://www.qiushibaike.com/text/'</span>]</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        outerbox = response.xpath(<span class="string">"//div[@id='content-left']/div"</span>)</span><br><span class="line">        items = []</span><br><span class="line">        <span class="keyword">for</span> box <span class="keyword">in</span> outerbox:</span><br><span class="line">            author = box.xpath(<span class="string">".//div[contains(@class,'author')]//h2/text()"</span>).extract_first().strip()</span><br><span class="line">            content = box.xpath(<span class="string">".//div[@class='content']/span/text()"</span>).extract_first().strip()</span><br><span class="line">            item = QsbkItem()</span><br><span class="line">            item[<span class="string">"author"</span>] = author</span><br><span class="line">            item[<span class="string">"content"</span>] = content</span><br><span class="line">            items.append(item)</span><br><span class="line">        <span class="keyword">return</span> items</span><br></pre></td></tr></tbody></table></figure></li><li><p>items.py部分代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QsbkItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    author = scrapy.Field()</span><br><span class="line">    content = scrapy.Field()</span><br></pre></td></tr></tbody></table></figure></li><li><p>pipeline部分代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbcspiderPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">   </span><br><span class="line">        self.items = []</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.items.append(dict(item))</span><br><span class="line">        print(<span class="string">"="</span>*<span class="number">40</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self,spider)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'qsbk.json'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            json.dump(self.items,fp,ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="运行scrapy项目："><a href="#运行scrapy项目：" class="headerlink" title="运行scrapy项目："></a>运行scrapy项目：</h4><p>运行scrapy项目。需要在终端，进入项目所在的路径，然后<code>scrapy crawl [爬虫名字]</code>即可运行指定的爬虫。如果不想每次都在命令行中运行，那么可以把这个命令写在一个文件中。以后就在pycharm中执行运行这个文件就可以了。比如现在新创建一个文件叫做<code>start.py</code>，然后在这个文件中填入以下代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line"></span><br><span class="line">cmdline.execute(<span class="string">"scrapy cra</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2-快速入门&quot;&gt;&lt;a href=&quot;#2-快速入门&quot; class=&quot;headerlink&quot; title=&quot;2-快速入门&quot;&gt;&lt;/a&gt;2-快速入门&lt;/h1&gt;&lt;h2 id=&quot;安装和文档：&quot;&gt;&lt;a href=&quot;#安装和文档：&quot; class=&quot;headerlink&quot; title=&quot;安装和文档：&quot;&gt;&lt;/a&gt;安装和文档：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装：通过&lt;code&gt;pip install scrapy&lt;/code&gt;即可安装。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scrapy官方文档：&lt;a href=&quot;http://doc.scrapy.org/en/latest&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://doc.scrapy.org/en/latest&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scrapy中文文档：&lt;a href=&quot;http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://scrapy-chs.readthedocs.io/zh_CN/latest/index.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.club/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.club/tags/python/"/>
    
      <category term="python爬虫" scheme="http://philxling.club/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>框架架构</title>
    <link href="http://philxling.club/2020/04/25/python%E7%88%AC%E8%99%AB/16-%E6%A1%86%E6%9E%B6%E6%9E%B6%E6%9E%84/"/>
    <id>http://philxling.club/2020/04/25/python%E7%88%AC%E8%99%AB/16-%E6%A1%86%E6%9E%B6%E6%9E%B6%E6%9E%84/</id>
    <published>2020-04-24T19:12:00.000Z</published>
    <updated>2020-10-15T04:26:41.927Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="框架架构"><a href="#框架架构" class="headerlink" title="框架架构"></a>框架架构</h1><h2 id="Scrapy框架介绍："><a href="#Scrapy框架介绍：" class="headerlink" title="Scrapy框架介绍："></a>Scrapy框架介绍：</h2><p>写一个爬虫，需要做很多的事情。比如：发送网络请求、数据解析、数据存储、反反爬虫机制（更换ip代理、设置请求头等）、异步请求等。这些工作如果每次都要自己从零开始写的话，比较浪费时间.<a id="more"></a>因此<code>Scrapy</code>把一些基础的东西封装好了，在他上面写爬虫可以变的更加的高效（爬取效率和开发效率）。因此真正在公司里，一些上了量的爬虫，都是使用<code>Scrapy</code>框架来解决。</p><h2 id="Scrapy架构图："><a href="#Scrapy架构图：" class="headerlink" title="Scrapy架构图："></a>Scrapy架构图：</h2><ol><li>流程图（1）：<br><img src="/2020/04/25/python%E7%88%AC%E8%99%AB/16-%E6%A1%86%E6%9E%B6%E6%9E%B6%E6%9E%84/assets/scrapy_all.png" alt="img"></li><li>流程图（2）：<br><img src="/2020/04/25/python%E7%88%AC%E8%99%AB/16-%E6%A1%86%E6%9E%B6%E6%9E%B6%E6%9E%84/assets/884863172-5985e0b48edf9.png" alt="img"></li></ol><h2 id="Scrapy框架模块功能："><a href="#Scrapy框架模块功能：" class="headerlink" title="Scrapy框架模块功能："></a>Scrapy框架模块功能：</h2><ol><li><code>Scrapy Engine（引擎）</code>：<code>Scrapy</code>框架的核心部分。负责在<code>Spider</code>和<code>ItemPipeline</code>、<code>Downloader</code>、<code>Scheduler</code>中间通信、传递数据等。</li><li><code>Spider（爬虫）</code>：发送需要爬取的链接给引擎，最后引擎把其他模块请求回来的数据再发送给爬虫，爬虫就去解析想要的数据。这个部分是我们开发者自己写的，因为要爬取哪些链接，页面中的哪些数据是我们需要的，都是由程序员自己决定。</li><li><code>Scheduler（调度器）</code>：负责接收引擎发送过来的请求，并按照一定的方式进行排列和整理，负责调度请求的顺序等。</li><li><code>Downloader（下载器）</code>：负责接收引擎传过来的下载请求，然后去网络上下载对应的数据再交还给引擎。</li><li><code>Item Pipeline（管道）</code>：负责将<code>Spider（爬虫）</code>传递过来的数据进行保存。具体保存在哪里，应该看开发者自己的需求。</li><li><code>Downloader Middlewares（下载中间件）</code>：可以扩展下载器和引擎之间通信功能的中间件。</li><li><code>Spider Middlewares（Spider中间件）</code>：可以扩展引擎和爬虫之间通信功能的中间件。</li></ol></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;框架架构&quot;&gt;&lt;a href=&quot;#框架架构&quot; class=&quot;headerlink&quot; title=&quot;框架架构&quot;&gt;&lt;/a&gt;框架架构&lt;/h1&gt;&lt;h2 id=&quot;Scrapy框架介绍：&quot;&gt;&lt;a href=&quot;#Scrapy框架介绍：&quot; class=&quot;headerlink&quot; title=&quot;Scrapy框架介绍：&quot;&gt;&lt;/a&gt;Scrapy框架介绍：&lt;/h2&gt;&lt;p&gt;写一个爬虫，需要做很多的事情。比如：发送网络请求、数据解析、数据存储、反反爬虫机制（更换ip代理、设置请求头等）、异步请求等。这些工作如果每次都要自己从零开始写的话，比较浪费时间.&lt;/p&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.club/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.club/tags/python/"/>
    
      <category term="python爬虫" scheme="http://philxling.club/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>图形验证码识别</title>
    <link href="http://philxling.club/2020/04/22/python%E7%88%AC%E8%99%AB/15-%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/"/>
    <id>http://philxling.club/2020/04/22/python%E7%88%AC%E8%99%AB/15-%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/</id>
    <published>2020-04-21T17:32:23.000Z</published>
    <updated>2020-10-15T04:26:41.927Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="图形验证码识别"><a href="#图形验证码识别" class="headerlink" title="图形验证码识别"></a>图形验证码识别</h1><p>阻碍我们爬虫的。有时候正是在登录或者请求一些数据时候的图形验证码。因此这里我们讲解一种能将图片翻译成文字的技术。将图片翻译成文字一般被成为光学文字识别（Optical Character Recognition），简写为<code>OCR</code>。<a id="more"></a>实现<code>OCR</code>的库不是很多，特别是开源的。因为这块存在一定的技术壁垒（需要大量的数据、算法、机器学习、深度学习知识等），并且如果做好了具有很高的商业价值。因此开源的比较少。这里介绍一个比较优秀的图像识别开源库：Tesseract。</p><h2 id="Tesseract："><a href="#Tesseract：" class="headerlink" title="Tesseract："></a>Tesseract：</h2><p>Tesseract是一个OCR库，目前由谷歌赞助。Tesseract是目前公认最优秀、最准确的开源OCR库。Tesseract具有很高的识别度，也具有很高的灵活性，他可以通过训练识别任何字体。</p><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><h4 id="Windows系统："><a href="#Windows系统：" class="headerlink" title="Windows系统："></a>Windows系统：</h4><p>在以下链接下载可执行文件，然后一顿点击下一步安装即可（放在不需要权限的纯英文路径下）：<br><a href="https://github.com/tesseract-ocr/" target="_blank" rel="noopener">https://github.com/tesseract-ocr/</a></p><h4 id="Linux系统："><a href="#Linux系统：" class="headerlink" title="Linux系统："></a>Linux系统：</h4><p>可以在以下链接下载源码自行编译。<br><a href="https://github.com/tesseract-ocr/tesseract/wiki/Compiling" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract/wiki/Compiling</a><br>或者在<code>ubuntu</code>下通过以下命令进行安装：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install tesseract-ocr</span><br></pre></td></tr></tbody></table></figure><h4 id="Mac系统："><a href="#Mac系统：" class="headerlink" title="Mac系统："></a>Mac系统：</h4><p>用<code>Homebrew</code>即可方便安装：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tesseract</span><br></pre></td></tr></tbody></table></figure><h4 id="设置环境变量："><a href="#设置环境变量：" class="headerlink" title="设置环境变量："></a>设置环境变量：</h4><p>安装完成后，如果想要在命令行中使用<code>Tesseract</code>，那么应该设置环境变量。<code>Mac</code>和<code>Linux</code>在安装的时候就默认已经设置好了。在<code>Windows</code>下把<code>tesseract.exe</code>所在的路径添加到<code>PATH</code>环境变量中。</p><p>还有一个环境变量需要设置的是，要把训练的数据文件路径也放到环境变量中。<br>在环境变量中，添加一个<code>TESSDATA_PREFIX=C:\path_to_tesseractdata\teseractdata</code>。</p><h3 id="在命令行中使用tesseract识别图像："><a href="#在命令行中使用tesseract识别图像：" class="headerlink" title="在命令行中使用tesseract识别图像："></a>在命令行中使用tesseract识别图像：</h3><p>如果想要在<code>cmd</code>下能够使用<code>tesseract</code>命令，那么需要把<code>tesseract.exe</code>所在的目录放到<code>PATH</code>环境变量中。然后使用命令：<code>tesseract 图片路径 文件路径</code>。<br>示例：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tesseract a.png a</span><br></pre></td></tr></tbody></table></figure><p>那么就会识别出<code>a.png</code>中的图片，并且把文字写入到<code>a.txt</code>中。如果不想写入文件直接想显示在终端，那么不要加文件名就可以了。</p><h3 id="在代码中使用tesseract识别图像："><a href="#在代码中使用tesseract识别图像：" class="headerlink" title="在代码中使用tesseract识别图像："></a>在代码中使用tesseract识别图像：</h3><p>在<code>Python</code>代码中操作<code>tesseract</code>。需要安装一个库，叫做<code>pytesseract</code>。通过<code>pip</code>的方式即可安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytesseract</span><br></pre></td></tr></tbody></table></figure><p>并且，需要读取图片，需要借助一个第三方库叫做<code>PIL</code>。通过<code>pip list</code>看下是否安装。如果没有安装，通过<code>pip</code>的方式安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PIL</span><br></pre></td></tr></tbody></table></figure><p>使用<code>pytesseract</code>将图片上的文字转换为文本文字的示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入pytesseract库</span></span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="comment"># 导入Image库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定tesseract.exe所在的路径</span></span><br><span class="line">pytesseract.pytesseract.tesseract_cmd = <span class="string">r'D:\ProgramApp\TesseractOCR\tesseract.exe'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开图片</span></span><br><span class="line">image = Image.open(<span class="string">"a.png"</span>)</span><br><span class="line"><span class="comment"># 调用image_to_string将图片转换为文字</span></span><br><span class="line">text = pytesseract.image_to_string(image)</span><br><span class="line">print(text)</span><br></pre></td></tr></tbody></table></figure><h2 id="用pytesseract处理拉勾网图形验证码："><a href="#用pytesseract处理拉勾网图形验证码：" class="headerlink" title="用pytesseract处理拉勾网图形验证码："></a>用<code>pytesseract</code>处理拉勾网图形验证码：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pytesseract.pytesseract.tesseract_cmd = <span class="string">r"D:\ProgramApp\TesseractOCR\tesseract.exe"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    captchaUrl = <span class="string">"https://passport.lagou.com/vcode/create?from=register&refresh=1513081451891"</span></span><br><span class="line">    request.urlretrieve(captchaUrl,<span class="string">'captcha.png'</span>)</span><br><span class="line">    image = Image.open(<span class="string">'captcha.png'</span>)</span><br><span class="line">    text = pytesseract.image_to_string(image,lang=<span class="string">'eng'</span>)</span><br><span class="line">    print(text)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;图形验证码识别&quot;&gt;&lt;a href=&quot;#图形验证码识别&quot; class=&quot;headerlink&quot; title=&quot;图形验证码识别&quot;&gt;&lt;/a&gt;图形验证码识别&lt;/h1&gt;&lt;p&gt;阻碍我们爬虫的。有时候正是在登录或者请求一些数据时候的图形验证码。因此这里我们讲解一种能将图片翻译成文字的技术。将图片翻译成文字一般被成为光学文字识别（Optical Character Recognition），简写为&lt;code&gt;OCR&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.club/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.club/tags/python/"/>
    
      <category term="python爬虫" scheme="http://philxling.club/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>常用算法和排序</title>
    <link href="http://philxling.club/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/"/>
    <id>http://philxling.club/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/</id>
    <published>2020-04-20T15:27:01.000Z</published>
    <updated>2020-10-15T05:42:56.537Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>函数对象</p><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325053739130.png" alt="image-20200325053739130"></p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myAdd</span>{</span> <span class="comment">// 函数对象 </span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">myAdd(){</span><br><span class="line"><span class="keyword">this</span>->count=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{</span><br><span class="line"><span class="keyword">this</span>->count++;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">} </span><br><span class="line"><span class="comment">//使用属性记录对象调用次数</span></span><br><span class="line"><span class="keyword">int</span> count; </span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">myAdd myadd;</span><br><span class="line"><span class="built_in">cout</span><< myadd(<span class="number">12</span>,<span class="number">43</span>) <<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><< myadd(<span class="number">12</span>,<span class="number">43</span>) <<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><<myadd.count<<<span class="built_in">endl</span>; <span class="comment">// 2</span></span><br><span class="line">}</span><br><span class="line"> <span class="comment">// 可以作为参数传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doAdd</span><span class="params">(myAdd &myadd,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<myadd(a,b)<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">test2</span><span class="params">()</span></span>{</span><br><span class="line">myAdd myadd;</span><br><span class="line">doAdd(myadd,<span class="number">12</span>,<span class="number">44</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//test1();</span></span><br><span class="line">test2();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>谓词</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 仿函数 返回值是bool类型, 成为谓词 </span></span><br><span class="line"><span class="comment">// 一元谓词 ,接收一个参数 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GreatorFind</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> val)</span></span>{ <span class="comment">// 一元谓词 </span></span><br><span class="line"><span class="keyword">return</span> val><span class="number">5</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myCompare</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{ <span class="comment">// 二元谓词 谓词指的是返回bool 二元指的是参数</span></span><br><span class="line"><span class="keyword">return</span> a>b;</span><br><span class="line">}</span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line">v.push_back(i);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=find_if(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),GreatorFind());</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="built_in">endl</span>;</span><br><span class="line">sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),myCompare());</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">} </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">9 8 7 6 5 4 3 2 1 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>内建仿函数</p><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325062750741.png" alt="image-20200325062750741"></p><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325063143207.png" alt="image-20200325063143207"></p><p>关系仿函数</p><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325063930278.png" alt="image-20200325063930278"></p><p>逻辑仿函数</p><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325064755552.png" alt="image-20200325064755552"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><functional> // 算数仿函数头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm> </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">plus<<span class="keyword">int</span>> p;</span><br><span class="line">negate<<span class="keyword">int</span>> n; </span><br><span class="line"><span class="built_in">cout</span><<p(<span class="number">12</span>,<span class="number">43</span>)<<<span class="built_in">endl</span>; <span class="comment">// 不支持匿名 </span></span><br><span class="line"><span class="built_in">cout</span><<n(<span class="number">129</span>)<<<span class="built_in">endl</span>; <span class="comment">//取反 </span></span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">9</span>;i++){</span><br><span class="line">v.push_back(i);</span><br><span class="line">}</span><br><span class="line">sort(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),greater<<span class="keyword">int</span>>()); <span class="comment">//关系仿函数  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;  </span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>; </span><br><span class="line"><span class="comment">// 逻辑运算符</span></span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">bool</span>> v1;</span><br><span class="line">v1.push_back(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">bool</span>> v2;</span><br><span class="line">v2.resize(v1.<span class="built_in">size</span>());</span><br><span class="line">transform(v1.<span class="built_in">begin</span>(),v1.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>(),logical_not<<span class="keyword">bool</span>>());</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">bool</span>>::iterator it=v2.<span class="built_in">begin</span>();it!=v2.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;  </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">55</span></span><br><span class="line"><span class="comment">-129</span></span><br><span class="line"><span class="comment">8 7 6 5 4 3 2 1 0</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test1();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>常用算法</p><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325070307861.png" alt="image-20200325070307861"></p><p>常用的遍历算法</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for_each(begin,end,func)</span><br><span class="line">transform()</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325072344750.png" alt="image-20200325072344750"></p><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325090358265.png" alt="image-20200325090358265"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">print1</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<val<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">Person(<span class="built_in">string</span> name,<span class="keyword">int</span> age){</span><br><span class="line"><span class="keyword">this</span>->age=age;</span><br><span class="line"><span class="keyword">this</span>->name=name;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Person&p){ <span class="comment">//比较规则 </span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>->name==p.name&&<span class="keyword">this</span>->age==p.age){</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line"><span class="built_in">cout</span><< val <<<span class="string">" "</span>; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">// for_each</span></span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">9</span>;i++){</span><br><span class="line">v.push_back(i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="built_in">print</span>); <span class="comment">//遍历</span></span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),print1()); <span class="comment">//遍历</span></span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//常用的查找算法</span></span><br><span class="line"><span class="comment">// find</span></span><br><span class="line"><span class="built_in">vector</span><Person> p;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">"12"</span>,<span class="number">32</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">"43"</span>,<span class="number">32</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">"45"</span>,<span class="number">32</span>)</span></span>;</span><br><span class="line">p.push_back(p1);</span><br><span class="line">p.push_back(p2);</span><br><span class="line">p.push_back(p3);</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=<span class="built_in">find</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">5</span>); <span class="comment">// 必返回一个迭代器,如果没找到,就返回end </span></span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">vector</span><Person>::iterator itp=<span class="built_in">find</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>(),p1); <span class="comment">//查找自定义数据类型 </span></span><br><span class="line"><span class="built_in">cout</span><<itp->name<<<span class="string">" "</span><<itp->age<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// find_if</span></span><br><span class="line"><span class="comment">// adjacent_find 查找相邻重复的元素</span></span><br><span class="line"><span class="comment">// binary_search 二分查找 返回值是true 和false  查找的元素必须为有序序列 </span></span><br><span class="line"><span class="built_in">cout</span><<binary_search(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">6</span>)<<<span class="built_in">endl</span>; </span><br><span class="line"><span class="comment">// count 统计 </span></span><br><span class="line"><span class="built_in">cout</span><<count(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">1</span>)<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// count_if</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test1();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200327005701055.png" alt="image-20200327005701055"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><ctime></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<val<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">9</span>;i++){</span><br><span class="line">v.push_back(i);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>  v2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">4</span>;i++){</span><br><span class="line">v2.push_back(i);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v3;</span><br><span class="line">v3.resize(v.<span class="built_in">size</span>()+v2.<span class="built_in">size</span>());</span><br><span class="line">merge(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),v3.<span class="built_in">begin</span>()); <span class="comment">// merge 合并, 将两个容器合并放到第三个容器中. 且两个容器是有序的,合并后也是有序的 </span></span><br><span class="line">for_each(v3.<span class="built_in">begin</span>(),v3.<span class="built_in">end</span>(),<span class="built_in">print</span>);  </span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">reverse(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="built_in">print</span>);</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">random_shuffle(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>()); <span class="comment">// random_shuffle 洗牌,将有序变无序 </span></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="built_in">print</span>);</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200327163741378.png" alt="image-20200327163741378"></p><p>copy算法</p><p>replace替换,将所有相同的都替换</p><p>swap交换同种类型的容器</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// copy(v.begin(),v.end(),v2.begin()); copy </span></span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line">v.push_back(<span class="number">10</span>);</span><br><span class="line">v.push_back(<span class="number">23</span>);</span><br><span class="line">v.push_back(<span class="number">23</span>);</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v2;</span><br><span class="line">v2.resize(v.<span class="built_in">size</span>());</span><br><span class="line">copy(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>());</span><br><span class="line">for_each(v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),<span class="built_in">print</span>);</span><br><span class="line"><span class="comment">// replace;</span></span><br><span class="line">replace(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">23</span>,<span class="number">2000</span>);</span><br><span class="line">copy(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>());</span><br><span class="line">for_each(v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),<span class="built_in">print</span>);</span><br></pre></td></tr></tbody></table></figure><p>算术生成算法</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><numeric> // 头文件 </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<=<span class="number">100</span>;i++){</span><br><span class="line">v.push_back(i);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 第三个参数是累加起始值. </span></span><br><span class="line"><span class="built_in">cout</span><<accumulate(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">0</span>)<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// fill() 填充新值</span></span><br><span class="line"><span class="comment">//fill()</span></span><br><span class="line"> </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>集合算法</p><p><img src="/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200327181910889.png" alt="image-20200327181910889"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> val)</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<val<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v;</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v2;</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v3;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line">v.push_back(i);</span><br><span class="line">v2.push_back(i+<span class="number">5</span>);</span><br><span class="line">} </span><br><span class="line">v3.resize(<span class="built_in">min</span>(v.<span class="built_in">size</span>(),v2.<span class="built_in">size</span>()));</span><br><span class="line"><span class="comment">// 交集 </span></span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=set_intersection(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),v3.<span class="built_in">begin</span>());</span><br><span class="line">for_each(v3.<span class="built_in">begin</span>(),it,<span class="built_in">print</span>); <span class="comment">// 注意 </span></span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>; </span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line">v3.resize(v.<span class="built_in">size</span>()+v2.<span class="built_in">size</span>());</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>::iterator vit=set_union(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),v3.<span class="built_in">begin</span>());</span><br><span class="line">for_each(v3.<span class="built_in">begin</span>(),vit,<span class="built_in">print</span>); <span class="comment">// 注意 </span></span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// 补集</span></span><br><span class="line">v3.resize(<span class="built_in">max</span>(v.<span class="built_in">size</span>(),v2.<span class="built_in">size</span>()));</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>::iterator vdit=set_difference(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),v3.<span class="built_in">begin</span>());</span><br><span class="line">for_each(v3.<span class="built_in">begin</span>(),vdit,<span class="built_in">print</span>); <span class="comment">// 注意 </span></span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">v3.resize(<span class="built_in">max</span>(v.<span class="built_in">size</span>(),v2.<span class="built_in">size</span>()));</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>::iterator vmaxit=set_difference(v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v3.<span class="built_in">begin</span>());</span><br><span class="line">for_each(v3.<span class="built_in">begin</span>(),vmaxit,<span class="built_in">print</span>); <span class="comment">// 注意 </span></span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 6 7 8 9</span></span><br><span class="line"><span class="comment">0 1 2 3 4 5 6 7 8 9 10 11 12 13 14</span></span><br><span class="line"><span class="comment">0 1 2 3 4</span></span><br><span class="line"><span class="comment">10 11 12 13 14</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数对象&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/04/20/c++/7-%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%8E%92%E5%BA%8F/image-20200325053739130.png&quot; alt=&quot;image-20200325053739130&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://philxling.club/categories/c/"/>
    
    
      <category term="c++" scheme="http://philxling.club/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>员工分类案例</title>
    <link href="http://philxling.club/2020/04/17/c++/6-%E5%91%98%E5%B7%A5%E5%88%86%E7%B1%BB%E6%A1%88%E4%BE%8B/"/>
    <id>http://philxling.club/2020/04/17/c++/6-%E5%91%98%E5%B7%A5%E5%88%86%E7%B1%BB%E6%A1%88%E4%BE%8B/</id>
    <published>2020-04-17T15:24:57.000Z</published>
    <updated>2020-10-15T04:26:41.897Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h3 id="员工分类案例"><a href="#员工分类案例" class="headerlink" title="员工分类案例"></a>员工分类案例</h3><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><map> </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><cstdio></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><cstdlib></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><ctime></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">有十个员工,将这些员工随机分配到每个岗位,然后输出每个岗位的人员信息</span></span><br><span class="line"><span class="comment">将10个人放在vector中,然后遍历vector将人随机分配到multimap的容器中</span></span><br><span class="line"><span class="comment">分部门显示员工信息</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> Salary;</span><br><span class="line"><span class="comment">//Worker(string name,int Salary){</span></span><br><span class="line"><span class="comment">//this->name=name;</span></span><br><span class="line"><span class="comment">//this->Salary=Salary;</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createWorker</span><span class="params">(<span class="built_in">vector</span><Worker> &worker)</span></span>{</span><br><span class="line"><span class="built_in">string</span> name_seed = <span class="string">"ABCDEFGHIJ"</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line">Worker w;</span><br><span class="line">w.name=<span class="string">"员工"</span>;</span><br><span class="line">w.name+=name_seed[i];</span><br><span class="line">w.Salary= rand()%<span class="number">10000</span>+<span class="number">10000</span>; <span class="comment">// 坑 , 一句还执行不了  worker.push_back(Worker("员工"+name_seed[i],rand()%10000+10000));</span></span><br><span class="line">worker.push_back(w); <span class="comment">// 10000-19999</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//for(vector<Worker>::iterator it=worker.begin();it!=Worker.end();it++){</span></span><br><span class="line"><span class="comment">//itWorker()</span></span><br><span class="line"><span class="comment">//}</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span><Worker> &worker)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><Worker>::iterator it=worker.<span class="built_in">begin</span>();it!=worker.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"姓名:"</span><< it->name<<<span class="string">" "</span><<<span class="string">"工资:"</span><<it->Salary<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setGroup</span><span class="params">(<span class="built_in">vector</span><Worker> &worker,<span class="built_in">multimap</span><<span class="keyword">int</span>,Worker> &mworker)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><Worker>::iterator it=worker.<span class="built_in">begin</span>();it!=worker.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="keyword">int</span> dept = rand()%<span class="number">3</span>; <span class="comment">// 0 1 2 </span></span><br><span class="line">mworker.insert(make_pair(dept,*it));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMworker</span><span class="params">(<span class="built_in">multimap</span><<span class="keyword">int</span>,Worker>&worker)</span></span>{ <span class="comment">//  0 A B C  1 F G  2 D E </span></span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"美术--------------"</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">multimap</span><<span class="keyword">int</span>,Worker>::iterator it=worker.<span class="built_in">begin</span>();it!=worker.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="keyword">if</span>((*it).first==<span class="number">0</span>){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"姓名:"</span><< it->second.name<<<span class="string">" "</span><<<span class="string">"工资:"</span><< it->second.Salary<<<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">} </span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"设计--------------"</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">multimap</span><<span class="keyword">int</span>,Worker>::iterator it=worker.<span class="built_in">begin</span>();it!=worker.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="keyword">if</span>((*it).first==<span class="number">1</span>){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"姓名:"</span><< it->second.name<<<span class="string">" "</span><<<span class="string">"工资:"</span><< it->second.Salary<<<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">} </span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"开发---------------"</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">multimap</span><<span class="keyword">int</span>,Worker>::iterator it=worker.<span class="built_in">begin</span>();it!=worker.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="keyword">if</span>((*it).first==<span class="number">2</span>){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"姓名:"</span><< it->second.name<<<span class="string">" "</span><<<span class="string">"工资:"</span><< it->second.Salary<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span> )time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="built_in">vector</span><Worker> vWorker;</span><br><span class="line">createWorker(vWorker);</span><br><span class="line">printVector(vWorker);</span><br><span class="line"><span class="comment">// 员工分组</span></span><br><span class="line"><span class="built_in">multimap</span><<span class="keyword">int</span>,Worker> mWorker;</span><br><span class="line">setGroup(vWorker,mWorker);</span><br><span class="line">printMworker(mWorker);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">姓名:员工A 工资:15799</span></span><br><span class="line"><span class="comment">姓名:员工B 工资:19029</span></span><br><span class="line"><span class="comment">姓名:员工C 工资:14589</span></span><br><span class="line"><span class="comment">姓名:员工D 工资:11870</span></span><br><span class="line"><span class="comment">姓名:员工E 工资:11106</span></span><br><span class="line"><span class="comment">姓名:员工F 工资:16145</span></span><br><span class="line"><span class="comment">姓名:员工G 工资:12290</span></span><br><span class="line"><span class="comment">姓名:员工H 工资:15171</span></span><br><span class="line"><span class="comment">姓名:员工I 工资:13026</span></span><br><span class="line"><span class="comment">姓名:员工J 工资:19923</span></span><br><span class="line"><span class="comment">美术--------------</span></span><br><span class="line"><span class="comment">姓名:员工B 工资:19029</span></span><br><span class="line"><span class="comment">姓名:员工C 工资:14589</span></span><br><span class="line"><span class="comment">姓名:员工D 工资:11870</span></span><br><span class="line"><span class="comment">姓名:员工F 工资:16145</span></span><br><span class="line"><span class="comment">设计--------------</span></span><br><span class="line"><span class="comment">姓名:员工A 工资:15799</span></span><br><span class="line"><span class="comment">姓名:员工E 工资:11106</span></span><br><span class="line"><span class="comment">姓名:员工J 工资:19923</span></span><br><span class="line"><span class="comment">开发---------------</span></span><br><span class="line"><span class="comment">姓名:员工G 工资:12290</span></span><br><span class="line"><span class="comment">姓名:员工H 工资:15171</span></span><br><span class="line"><span class="comment">姓名:员工I 工资:13026</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;员工分类案例&quot;&gt;&lt;a href=&quot;#员工分类案例&quot; class=&quot;headerlink&quot; title=&quot;员工分类案例&quot;&gt;&lt;/a&gt;员工分类案例&lt;/h3&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://philxling.club/categories/c/"/>
    
    
      <category term="c++" scheme="http://philxling.club/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>动态网页爬虫</title>
    <link href="http://philxling.club/2020/04/17/python%E7%88%AC%E8%99%AB/14-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB/"/>
    <id>http://philxling.club/2020/04/17/python%E7%88%AC%E8%99%AB/14-%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB/</id>
    <published>2020-04-17T15:23:12.000Z</published>
    <updated>2020-10-15T04:26:41.926Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="动态网页爬虫"><a href="#动态网页爬虫" class="headerlink" title="动态网页爬虫"></a>动态网页爬虫</h1><h2 id="什么是AJAX："><a href="#什么是AJAX：" class="headerlink" title="什么是AJAX："></a>什么是AJAX：</h2><p>AJAX（Asynchronouse JavaScript And XML）异步JavaScript和XML。过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用Ajax）如果需要更新内容，必须重载整个网页页面。<a id="more"></a>因为传统的在传输数据格式方面，使用的是<code>XML</code>语法。因此叫做<code>AJAX</code>，其实现在数据交互基本上都是使用<code>JSON</code>。使用AJAX加载的数据，即使使用了JS，将数据渲染到了浏览器中，在<code>右键->查看网页源代码</code>还是不能看到通过ajax加载的数据，只能看到使用这个url加载的html代码。</p><h2 id="获取ajax数据的方式："><a href="#获取ajax数据的方式：" class="headerlink" title="获取ajax数据的方式："></a>获取ajax数据的方式：</h2><ol><li>直接分析ajax调用的接口。然后通过代码请求这个接口。</li><li>使用Selenium+chromedriver模拟浏览器行为获取数据。</li></ol><table><thead><tr><th>方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>分析接口</td><td>直接可以请求到数据。不需要做一些解析工作。代码量少，性能高。</td><td>分析接口比较复杂，特别是一些通过js混淆的接口，要有一定的js功底。容易被发现是爬虫。</td></tr><tr><td>selenium</td><td>直接模拟浏览器的行为。浏览器能请求到的，使用selenium也能请求到。爬虫更稳定。</td><td>代码量多。性能低。</td></tr></tbody></table><h2 id="Selenium-chromedriver获取动态数据："><a href="#Selenium-chromedriver获取动态数据：" class="headerlink" title="Selenium+chromedriver获取动态数据："></a>Selenium+chromedriver获取动态数据：</h2><p><code>Selenium</code>相当于是一个机器人。可以模拟人类在浏览器上的一些行为，自动处理浏览器上的一些行为，比如点击，填充数据，删除cookie等。<code>chromedriver</code>是一个驱动<code>Chrome</code>浏览器的驱动程序，使用他才可以驱动浏览器。当然针对不同的浏览器有不同的driver。以下列出了不同浏览器及其对应的driver：</p><ol><li>Chrome：<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="noopener">https://sites.google.com/a/chromium.org/chromedriver/downloads</a></li><li>Firefox：<a href="https://github.com/mozilla/geckodriver/releases" target="_blank" rel="noopener">https://github.com/mozilla/geckodriver/releases</a></li><li>Edge：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/" target="_blank" rel="noopener">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</a></li><li>Safari：<a href="https://webkit.org/blog/6900/webdriver-support-in-safari-10/" target="_blank" rel="noopener">https://webkit.org/blog/6900/webdriver-support-in-safari-10/</a></li></ol><h2 id="安装Selenium和chromedriver："><a href="#安装Selenium和chromedriver：" class="headerlink" title="安装Selenium和chromedriver："></a>安装Selenium和chromedriver：</h2><ol><li><p>安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Selenium</span><br></pre></td></tr></tbody></table></figure><p>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Selenium</span><br></pre></td></tr></tbody></table></figure><p>有很多语言的版本，有java、ruby、python等。我们下载python版本的就可以了。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></tbody></table></figure></li><li><p>安装<code>chromedriver</code>：下载完成后，放到不需要权限的纯英文目录下就可以了。</p></li></ol><h3 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h3><p>现在以一个简单的获取百度首页的例子来讲下<code>Selenium</code>和<code>chromedriver</code>如何快速入门：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment"># chromedriver的绝对路径</span></span><br><span class="line">driver_path = <span class="string">r'D:\ProgramApp\chromedriver\chromedriver.exe'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化一个driver，并且指定chromedriver的路径</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line"><span class="comment"># 请求网页</span></span><br><span class="line">driver.get(<span class="string">"https://www.baidu.com/"</span>)</span><br><span class="line"><span class="comment"># 通过page_source获取网页源代码</span></span><br><span class="line">print(driver.page_source)</span><br></pre></td></tr></tbody></table></figure><h3 id="selenium常用操作："><a href="#selenium常用操作：" class="headerlink" title="selenium常用操作："></a>selenium常用操作：</h3><p>更多教程请参考：<a href="http://selenium-python.readthedocs.io/installation.html#introduction" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/installation.html#introduction</a></p><h4 id="关闭页面："><a href="#关闭页面：" class="headerlink" title="关闭页面："></a>关闭页面：</h4><ol><li><code>driver.close()</code>：关闭当前页面。</li><li><code>driver.quit()</code>：退出整个浏览器。</li></ol><h4 id="定位元素："><a href="#定位元素：" class="headerlink" title="定位元素："></a>定位元素：</h4><ol><li><pre><code>find_element_by_id<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">：根据id来查找某个元素。等价于：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> submitTag = driver.find_element_by_id('su')</span><br><span class="line"> submitTag1 = driver.find_element(By.ID,'su')</span><br></pre></td></tr></tbody></table></figure></code></pre></li><li><pre><code>find_element_by_class_name<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">：根据类名查找元素。 等价于：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> submitTag = driver.find_element_by_class_name('su')</span><br><span class="line"> submitTag1 = driver.find_element(By.CLASS_NAME,'su')</span><br></pre></td></tr></tbody></table></figure></code></pre></li><li><pre><code>find_element_by_name<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">：根据name属性的值来查找元素。等价于：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> submitTag = driver.find_element_by_name('email')</span><br><span class="line"> submitTag1 = driver.find_element(By.NAME,'email')</span><br></pre></td></tr></tbody></table></figure></code></pre></li><li><pre><code>find_element_by_tag_name<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">：根据标签名来查找元素。等价于：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> submitTag = driver.find_element_by_tag_name('div')</span><br><span class="line"> submitTag1 = driver.find_element(By.TAG_NAME,'div')</span><br></pre></td></tr></tbody></table></figure></code></pre></li><li><pre><code>find_element_by_xpath<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">：根据xpath语法来获取元素。等价于：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> submitTag = driver.find_element_by_xpath('//div')</span><br><span class="line"> submitTag1 = driver.find_element(By.XPATH,'//div')</span><br></pre></td></tr></tbody></table></figure></code></pre></li><li><p><code>find_element_by_css_selector</code>：根据css选择器选择元素。等价于：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">submitTag = driver.find_element_by_css_selector(<span class="string">'//div'</span>)</span><br><span class="line">submitTag1 = driver.find_element(By.CSS_SELECTOR,<span class="string">'//div'</span>)</span><br></pre></td></tr></tbody></table></figure><p>要注意，<code>find_element</code>是获取第一个满足条件的元素。<code>find_elements</code>是获取所有满足条件的元素。</p></li></ol><h4 id="操作表单元素："><a href="#操作表单元素：" class="headerlink" title="操作表单元素："></a>操作表单元素：</h4><ol><li><p>操作输入框：分为两步。第一步：找到这个元素。第二步：使用<code>send_keys(value)</code>，将数据填充进去。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputTag = driver.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line">inputTag.send_keys(<span class="string">'python'</span>)</span><br></pre></td></tr></tbody></table></figure><p>使用<code>clear</code>方法可以清除输入框中的内容。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inputTag.clear()</span><br></pre></td></tr></tbody></table></figure></li><li><p>操作checkbox：因为要选中<code>checkbox</code>标签，在网页中是通过鼠标点击的。因此想要选中<code>checkbox</code>标签，那么先选中这个标签，然后执行<code>click</code>事件。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rememberTag = driver.find_element_by_name(<span class="string">"rememberMe"</span>)</span><br><span class="line">rememberTag.click()</span><br></pre></td></tr></tbody></table></figure></li><li><p>选择select：select元素不能直接点击。因为点击后还需要选中元素。这时候selenium就专门为select标签提供了一个类<code>selenium.webdriver.support.ui.Select</code>。将获取到的元素当成参数传到这个类中，创建这个对象。以后就可以使用这个对象进行选择了。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"><span class="comment"># 选中这个标签，然后使用Select创建对象</span></span><br><span class="line">selectTag = Select(driver.find_element_by_name(<span class="string">"jumpMenu"</span>))</span><br><span class="line"><span class="comment"># 根据索引选择</span></span><br><span class="line">selectTag.select_by_index(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 根据值选择</span></span><br><span class="line">selectTag.select_by_value(<span class="string">"http://www.95yueba.com"</span>)</span><br><span class="line"><span class="comment"># 根据可视的文本选择</span></span><br><span class="line">selectTag.select_by_visible_text(<span class="string">"95秀客户端"</span>)</span><br><span class="line"><span class="comment"># 取消选中所有选项</span></span><br><span class="line">selectTag.deselect_all()</span><br></pre></td></tr></tbody></table></figure></li><li><p>操作按钮：操作按钮有很多种方式。比如单击、右击、双击等。这里讲一个最常用的。就是点击。直接调用<code>click</code>函数就可以了。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputTag = driver.find_element_by_id(<span class="string">'su'</span>)</span><br><span class="line">inputTag.click()</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="行为链："><a href="#行为链：" class="headerlink" title="行为链："></a>行为链：</h4><p>有时候在页面中的操作可能要有很多步，那么这时候可以使用鼠标行为链类<code>ActionChains</code>来完成。比如现在要将鼠标移动到某个元素上并执行点击事件。那么示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">inputTag = driver.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line">submitTag = driver.find_element_by_id(<span class="string">'su'</span>)</span><br><span class="line"></span><br><span class="line">actions = ActionChains(driver)</span><br><span class="line">actions.move_to_element(inputTag)</span><br><span class="line">actions.send_keys_to_element(inputTag,<span class="string">'python'</span>)</span><br><span class="line">actions.move_to_element(submitTag)</span><br><span class="line">actions.click(submitTag)</span><br><span class="line">actions.perform()</span><br></pre></td></tr></tbody></table></figure><p>还有更多的鼠标相关的操作。</p><ul><li>click_and_hold(element)：点击但不松开鼠标。</li><li>context_click(element)：右键点击。</li><li>double_click(element)：双击。 更多方法请参考：<a href="http://selenium-python.readthedocs.io/api.html" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/api.html</a></li></ul><h4 id="Cookie操作："><a href="#Cookie操作：" class="headerlink" title="Cookie操作："></a>Cookie操作：</h4><ol><li><p>获取所有的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie</span><br></pre></td></tr></tbody></table></figure><p>：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> driver.get_cookies():</span><br><span class="line">    print(cookie)</span><br></pre></td></tr></tbody></table></figure></li><li><p>根据cookie的key获取value：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value = driver.get_cookie(key)</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除所有的cookie：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.delete_all_cookies()</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除某个</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie</span><br></pre></td></tr></tbody></table></figure><p>：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.delete_cookie(key)</span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="页面等待："><a href="#页面等待：" class="headerlink" title="页面等待："></a>页面等待：</h4><p>现在的网页越来越多采用了 Ajax 技术，这样程序便不能确定何时某个元素完全加载出来了。如果实际页面等待时间过长导致某个dom元素还没出来，但是你的代码直接使用了这个WebElement，那么就会抛出NullPointer的异常。为了解决这个问题。所以 Selenium 提供了两种等待方式：一种是隐式等待、一种是显式等待。</p><ol><li><p>隐式等待：调用<code>driver.implicitly_wait</code>。那么在获取不可用的元素之前，会先等待10秒中的时间。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 请求网页</span></span><br><span class="line">driver.get(<span class="string">"https://www.douban.com/"</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p>显示等待：显示等待是表明某个条件成立后才执行获取元素的操作。也可以在等待的时候指定一个最大的时间，如果超过这个时间那么就抛出一个异常。显示等待应该使用<code>selenium.webdriver.support.excepted_conditions</code>期望的条件和<code>selenium.webdriver.support.ui.WebDriverWait</code>来配合完成。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line">   </span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">"http://somedomain/url_that_delays_loading"</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    element = WebDriverWait(driver, <span class="number">10</span>).until(</span><br><span class="line">        EC.presence_of_element_located((By.ID, <span class="string">"myDynamicElement"</span>))</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></tbody></table></figure></li><li><p>一些其他的等待条件：</p><ul><li><p>presence_of_element_located：某个元素已经加载完毕了。</p></li><li><p>presence_of_all_emement_located：网页中所有满足条件的元素都加载完毕了。</p></li><li><p>element_to_be_cliable：某个元素是可以点击了。</p><p>更多条件请参考：<a href="http://selenium-python.readthedocs.io/waits.html" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/waits.html</a></p></li></ul></li></ol><h4 id="切换页面："><a href="#切换页面：" class="headerlink" title="切换页面："></a>切换页面：</h4><p>有时候窗口中有很多子tab页面。这时候肯定是需要进行切换的。<code>selenium</code>提供了一个叫做<code>switch_to_window</code>来进行切换，具体切换到哪个页面，可以从<code>driver.window_handles</code>中找到。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开一个新的页面</span></span><br><span class="line">self.driver.execute_script(<span class="string">"window.open('"</span>+url+<span class="string">"')"</span>)</span><br><span class="line"><span class="comment"># 切换到这个新的页面中</span></span><br><span class="line">self.driver.switch_to_window(self.driver.window_handles[<span class="number">1</span>])</span><br></pre></td></tr></tbody></table></figure><h4 id="设置代理ip："><a href="#设置代理ip：" class="headerlink" title="设置代理ip："></a>设置代理ip：</h4><p>有时候频繁爬取一些网页。服务器发现你是爬虫后会封掉你的ip地址。这时候我们可以更改代理ip。更改代理ip，不同的浏览器有不同的实现方式。这里以<code>Chrome</code>浏览器为例来讲解：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">"--proxy-server=http://110.73.2.248:8123"</span>)</span><br><span class="line">driver_path = <span class="string">r"D:\ProgramApp\chromedriver\chromedriver.exe"</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path,chrome_options=options)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">'http://httpbin.org/ip'</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="WebElement元素："><a href="#WebElement元素：" class="headerlink" title="WebElement元素："></a><code>WebElement</code>元素：</h4><p><code>from selenium.webdriver.remote.webelement import WebElement</code>类是每个获取出来的元素的所属类。<br>有一些常用的属性：</p><ol><li>get_attribute：这个标签的某个属性的值。</li><li>screentshot：获取当前页面的截图。这个方法只能在<code>driver</code>上使用。<br><code>driver</code>的对象类，也是继承自<code>WebElement</code>。<br>更多请阅读相关源代码。</li></ol></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动态网页爬虫&quot;&gt;&lt;a href=&quot;#动态网页爬虫&quot; class=&quot;headerlink&quot; title=&quot;动态网页爬虫&quot;&gt;&lt;/a&gt;动态网页爬虫&lt;/h1&gt;&lt;h2 id=&quot;什么是AJAX：&quot;&gt;&lt;a href=&quot;#什么是AJAX：&quot; class=&quot;headerlink&quot; title=&quot;什么是AJAX：&quot;&gt;&lt;/a&gt;什么是AJAX：&lt;/h2&gt;&lt;p&gt;AJAX（Asynchronouse JavaScript And XML）异步JavaScript和XML。过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用Ajax）如果需要更新内容，必须重载整个网页页面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.club/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.club/tags/python/"/>
    
      <category term="python爬虫" scheme="http://philxling.club/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>容器</title>
    <link href="http://philxling.club/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/"/>
    <id>http://philxling.club/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/</id>
    <published>2020-04-15T15:20:00.000Z</published>
    <updated>2020-10-15T04:26:41.814Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h3 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h3><p>vector存放自定义类型数据</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="keyword">int</span> age,<span class="built_in">string</span> name){</span><br><span class="line"><span class="keyword">this</span>->age=age;</span><br><span class="line"><span class="keyword">this</span>->name=name;</span><br><span class="line">} </span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">12</span>,<span class="string">"java"</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">13</span>,<span class="string">"c++"</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">1</span>,<span class="string">"c"</span>)</span></span>;</span><br><span class="line"><span class="built_in">vector</span><Person*> v;</span><br><span class="line">v.push_back(&p1);</span><br><span class="line">v.push_back(&p2);</span><br><span class="line">v.push_back(&p3);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><Person*>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<(*it)->age<<(*it)->name<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>string容器</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20191219202604459.png" alt="image-20191219202604459"></p><p>string赋值</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20191219203111427.png" alt="image-20191219203111427"></p><p>string拼接</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20191219203050386.png" alt="image-20191219203050386"></p><p>容器嵌套容器</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">vector</span><<span class="built_in">vector</span><<span class="keyword">int</span>> >v; <span class="comment">//这里右边>>必须分开写 </span></span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v1;</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">4</span>;i++){</span><br><span class="line">v1.push_back(i);</span><br><span class="line">v2.push_back(i+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">v.push_back(v1);</span><br><span class="line">v.push_back(v2);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><<span class="built_in">vector</span><<span class="keyword">int</span>> >::iterator it = v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="comment">// *it 指的是vector<int></span></span><br><span class="line"><span class="comment">//再次遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator vit=(*it).<span class="built_in">begin</span>();vit!=(*it).<span class="built_in">end</span>();vit++){</span><br><span class="line"><span class="built_in">cout</span><<*(vit)<<<span class="string">" "</span>;</span><br><span class="line">} </span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>string字符串拼接</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321163725406.png" alt="image-20200321163725406"></p><p>string 查找和替换</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321163810944.png" alt="image-20200321163810944"></p><p>注意替换replace(),三个参数是指从第几个开始,替换几个,会将新的字符串全部加进去</p><p>如</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str=<span class="string">"cd"</span>;</span><br><span class="line">str.replace(<span class="number">1</span>,<span class="number">3</span>,<span class="string">"dasdddas"</span>)</span><br><span class="line"> <span class="comment">// cdasdddas</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><iostream> </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">string</span> str=<span class="string">"hello"</span>;</span><br><span class="line">str.append(<span class="string">"world"</span>); <span class="comment">//添加 </span></span><br><span class="line">str+=<span class="string">"i"</span>;</span><br><span class="line"><span class="built_in">string</span> str1=<span class="string">"cdwewewf"</span>;</span><br><span class="line">str1.replace(<span class="number">1</span>,<span class="number">3</span>,<span class="string">"das"</span>); <span class="comment">//字符替换 </span></span><br><span class="line"><span class="built_in">cout</span><<str1;</span><br><span class="line"><span class="built_in">string</span> str3=<span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">string</span> str2=<span class="string">"xello"</span> ;</span><br><span class="line"><span class="keyword">if</span>(str3.compare(str2)==<span class="number">0</span>){ <span class="comment">//字符串比较 </span></span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"相等"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"不相等"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//string字符存取</span></span><br><span class="line"><span class="built_in">string</span> str4=<span class="string">"hello"</span>;</span><br><span class="line"><span class="comment">//访问字符</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<str4.<span class="built_in">size</span>();i++){</span><br><span class="line"><span class="built_in">cout</span><<str4[i]<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<str4.<span class="built_in">size</span>();i++){</span><br><span class="line"><span class="built_in">cout</span><<str4.at(i)<<<span class="string">" "</span>;</span><br><span class="line">} </span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// string 插入删除</span></span><br><span class="line"><span class="comment">// insert()</span></span><br><span class="line"><span class="comment">// erase(int pos,int n=npos);</span></span><br><span class="line">str2.erase(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">cout</span><<str2<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// 子串</span></span><br><span class="line"><span class="comment">// substr(int pos,int n=npos)</span></span><br><span class="line"> <span class="built_in">string</span> str5=str3.substr(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"> <span class="built_in">cout</span><<str5<<<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">string</span> email = <span class="string">"zhangsan@sina.com"</span>; <span class="comment">//截取邮箱 </span></span><br><span class="line"> <span class="keyword">int</span> pos = email.<span class="built_in">find</span>(<span class="string">"@"</span>);</span><br><span class="line"> <span class="built_in">cout</span><<email.substr(<span class="number">0</span>,pos)<<<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    test();</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>vector 容器 动态扩展</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321214940482.png" alt="image-20200321214940482"></p><p>vector赋值操作</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span><<span class="keyword">int</span>> &v)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v1;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">4</span>;i++){</span><br><span class="line">v1.push_back(i);</span><br><span class="line">}</span><br><span class="line">printVector(v1);</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v2;</span><br><span class="line">v2=v1; <span class="comment">//拷贝构造 </span></span><br><span class="line">printVector(v2);</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v3;</span><br><span class="line">v3.assign(v1.<span class="built_in">begin</span>(),v1.<span class="built_in">end</span>());</span><br><span class="line">printVector(v3);</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v4;</span><br><span class="line">v4.assign(<span class="number">10</span>,<span class="number">100</span>); <span class="comment">//赋值 </span></span><br><span class="line">printVector(v4);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>vector容量和大小</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321220704981.png" alt="image-20200321220704981"></p><p>插入和删除</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321211635313.png" alt="image-20200321211635313"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span><<span class="keyword">int</span>>&v)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v1;</span><br><span class="line"><span class="built_in">cout</span><<v1.capacity()<<<span class="built_in">endl</span>;<span class="comment">// 为空的时候 容量为0 </span></span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">2</span>);</span><br><span class="line">v1.push_back(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span><<v1.capacity()<<<span class="built_in">endl</span>;<span class="comment">//</span></span><br><span class="line"> <span class="comment">// 插入和删除</span></span><br><span class="line"><span class="comment">// 尾删</span></span><br><span class="line">printVector(v1);</span><br><span class="line">v1.pop_back();</span><br><span class="line">printVector(v1);</span><br><span class="line"><span class="comment">// insert()</span></span><br><span class="line">v1.insert(v1.<span class="built_in">begin</span>(),<span class="number">100</span>);</span><br><span class="line">printVector(v1);</span><br><span class="line">v1.insert(v1.<span class="built_in">begin</span>(),<span class="number">2</span>,<span class="number">1000</span>);</span><br><span class="line">printVector(v1);</span><br><span class="line">v1.erase(v1.<span class="built_in">begin</span>());</span><br><span class="line">printVector(v1);</span><br><span class="line">v1.erase(v1.<span class="built_in">begin</span>(),v1.<span class="built_in">end</span>()); <span class="comment">//相等于清空 </span></span><br><span class="line">printVector(v1);</span><br><span class="line">v1.<span class="built_in">clear</span>(); <span class="comment">//清空 </span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321213530726.png" alt="image-20200321213530726"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span><<span class="keyword">int</span>> &v1)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><<span class="keyword">int</span>>::iterator it=v1.<span class="built_in">begin</span>();it!=v1.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>; </span><br><span class="line">} </span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v1;</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line">v1.push_back(i);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10</span>;i><span class="number">0</span>;i--){</span><br><span class="line">v2.push_back(i);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//cout<<*v1<<endl; // 不被允许 </span></span><br><span class="line"><span class="comment">// 数组方式遍历vector</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<v1.<span class="built_in">size</span>();i++){</span><br><span class="line"><span class="built_in">cout</span><<v1[i]<<<span class="string">" "</span>;</span><br><span class="line">} </span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<v1.<span class="built_in">size</span>();i++){</span><br><span class="line"><span class="built_in">cout</span><<v1.at(i)<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// 获取第一个元素</span></span><br><span class="line"><span class="built_in">cout</span><<v1.front()<<<span class="built_in">endl</span>; </span><br><span class="line"><span class="comment">//互换容器</span></span><br><span class="line">v1.swap(v2);</span><br><span class="line">printVector(v1);</span><br><span class="line">printVector(v2);</span><br><span class="line"> <span class="comment">// 实际用途,收缩内存空间 </span></span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>> v4;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用reserve预留空间,可以减少内存开辟次数</span></span><br><span class="line">v4.reserve(<span class="number">100000</span>); </span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> *p=<span class="literal">NULL</span>;  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">100000</span>;i++){</span><br><span class="line"> v4.push_back(i);</span><br><span class="line"> <span class="keyword">if</span>(p!=&v4[<span class="number">0</span>]){</span><br><span class="line"> p=&v4[<span class="number">0</span>];</span><br><span class="line"> num++;</span><br><span class="line"> }</span><br><span class="line">} </span><br><span class="line"><span class="built_in">cout</span><<num<<<span class="built_in">endl</span>; <span class="comment">//num 用来统计开辟了多少次内存  18 次 </span></span><br><span class="line"><span class="built_in">cout</span><<v4.capacity()<<<span class="built_in">endl</span>;</span><br><span class="line">v4.resize(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">vector</span><<span class="keyword">int</span>>(v4).swap(v4); <span class="comment">//匿名对象 ,回收内存 </span></span><br><span class="line"><span class="built_in">cout</span><<v4.capacity()<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// 预留空间</span></span><br><span class="line"> </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>deque 双端数组</p><p>与vector的区别</p><p>vector对于头部的插入删除效率低,数据量越大,效率越低</p><p>deque相对而言,对头部的插入删除速度比vector快</p><p>vector访问元素的速度会比deque快</p><p>deque内部工作原理,deque内部有中控器,维护每段缓冲区的内容,缓冲区中存放真实数据</p><p>中控器维护的是每一个缓冲区的地址,是的每个deque像一片连续的地址</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321220121820.png" alt="image-20200321220121820"></p><p>注意: deque没有容量的概念</p><p>判断为空—empty</p><p>返回元素个数—-size</p><p>重新指定个数—-resize</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200321211749654.png" alt="image-20200321211749654"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><deque></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// deque容器的插入和删除 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDeque</span><span class="params">(<span class="keyword">const</span> <span class="built_in">deque</span><<span class="keyword">int</span>>&d)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">deque</span><<span class="keyword">int</span>>::const_iterator it=d.<span class="built_in">begin</span>();it!=d.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">deque</span><<span class="keyword">int</span>> d;</span><br><span class="line">d.push_back(<span class="number">12</span>);</span><br><span class="line">d.push_back(<span class="number">100</span>);</span><br><span class="line">d.push_front(<span class="number">120</span>);</span><br><span class="line">printDeque(d);</span><br><span class="line"><span class="comment">// 尾删</span></span><br><span class="line">d.pop_back();</span><br><span class="line">d.pop_front();</span><br><span class="line">printDeque(d);</span><br><span class="line"><span class="comment">// 指定位置插入删除</span></span><br><span class="line">d.insert(d.<span class="built_in">begin</span>(),<span class="number">10000</span>);</span><br><span class="line">printDeque(d); </span><br><span class="line"><span class="comment">// 在指定区间</span></span><br><span class="line"><span class="built_in">deque</span><<span class="keyword">int</span>> d2;</span><br><span class="line">d2.push_back(<span class="number">1</span>);</span><br><span class="line">d2.push_back(<span class="number">2</span>);</span><br><span class="line">d2.push_back(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// </span></span><br><span class="line">d.insert(d.<span class="built_in">begin</span>(),d2.<span class="built_in">begin</span>(),d2.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">printDeque(d); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">d.erase(d.<span class="built_in">begin</span>());</span><br><span class="line"><span class="built_in">deque</span><<span class="keyword">int</span>>::iterator it=d.<span class="built_in">begin</span>();</span><br><span class="line">it++;</span><br><span class="line">d.erase(it); </span><br><span class="line">printDeque(d);</span><br><span class="line">sort(d.<span class="built_in">begin</span>(),d.<span class="built_in">end</span>()); <span class="comment">// 排序算法</span></span><br><span class="line">printDeque(d);</span><br><span class="line">}</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">120 12 100</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">10000 12</span></span><br><span class="line"><span class="comment">1 2 3 10000 12</span></span><br><span class="line"><span class="comment">2 10000 12</span></span><br><span class="line"><span class="comment">2 12 10000</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>案例</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><deque></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><vector></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><algorithm></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><ctime></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line">Person(<span class="built_in">string</span> name,<span class="keyword">int</span> score){</span><br><span class="line"><span class="keyword">this</span>->name=name;</span><br><span class="line"><span class="keyword">this</span>->score=score;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span><Person>&v)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><Person>::const_iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<(*it).name<<<span class="string">":"</span><<<span class="string">"分数"</span><<(*it).score<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createPerson</span><span class="params">(<span class="built_in">vector</span><Person> &v)</span></span>{</span><br><span class="line"><span class="built_in">string</span> stringSeed=<span class="string">"ABCDE"</span>;</span><br><span class="line"><span class="keyword">int</span> score=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">5</span>;i++){</span><br><span class="line"><span class="built_in">string</span> name =<span class="string">"选手"</span>;</span><br><span class="line">name+=stringSeed[i];</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(name,score)</span></span>;</span><br><span class="line">v.push_back(p); <span class="comment">//创建5名对象 </span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="built_in">vector</span><Person>&v)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span><Person>::iterator it=v.<span class="built_in">begin</span>();it!=v.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">deque</span><<span class="keyword">int</span>> d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<<span class="number">10</span>;i++){</span><br><span class="line"><span class="keyword">int</span> score=rand()%<span class="number">41</span>+<span class="number">60</span>; <span class="comment">//60-100</span></span><br><span class="line">d.push_back(score);</span><br><span class="line"><span class="built_in">cout</span><<(*it).name<<<span class="string">":"</span><<score<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">sort(d.<span class="built_in">begin</span>(),d.<span class="built_in">end</span>()); <span class="comment">// 排序</span></span><br><span class="line">d.pop_front();</span><br><span class="line">d.pop_back(); <span class="comment">//去掉分数</span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">deque</span><<span class="keyword">int</span>>::iterator it=d.<span class="built_in">begin</span>();it!=d.<span class="built_in">end</span>();it++){</span><br><span class="line">sum+=*it;</span><br><span class="line">}</span><br><span class="line">(*it).score=sum/d.<span class="built_in">size</span>();</span><br><span class="line">}</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//随机数种子</span></span><br><span class="line">srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>)); </span><br><span class="line"><span class="comment">// 创建5名选手</span></span><br><span class="line"><span class="built_in">vector</span><Person> v;</span><br><span class="line">createPerson(v);</span><br><span class="line"><span class="comment">// 给5名选手打分</span></span><br><span class="line">setScore(v);</span><br><span class="line"><span class="comment">//  </span></span><br><span class="line"><span class="built_in">print</span>(v);</span><br><span class="line"><span class="built_in">cout</span><<rand()<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>stack容器</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200322014757939.png" alt="image-20200322014757939"></p><p>queue容器</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200322015602691.png" alt="image-20200322015602691"></p><p>list容器</p><p>list赋值和交换</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><list></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(<span class="keyword">const</span> <span class="built_in">list</span><<span class="keyword">int</span>>&L)</span></span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">list</span><<span class="keyword">int</span>>::const_iterator it=L.<span class="built_in">begin</span>();it!=L.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">list</span><<span class="keyword">int</span>> L1;</span><br><span class="line"><span class="built_in">list</span><<span class="keyword">int</span>> L2;</span><br><span class="line">L1.push_back(<span class="number">100</span>);</span><br><span class="line">L1.push_back(<span class="number">20</span>);</span><br><span class="line">L1.push_back(<span class="number">12</span>);</span><br><span class="line">L2.assign(<span class="number">10</span>,<span class="number">100</span>);</span><br><span class="line">printList(L1);</span><br><span class="line">printList(L2);</span><br><span class="line">L1.swap(L2); <span class="comment">//交换 </span></span><br><span class="line">printList(L1);</span><br><span class="line">printList(L2);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200324233345500.png" alt="image-20200324233345500"></p><p>list排序案例</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><list></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// list 容器的排序案例 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">height</span>;</span><br><span class="line">Person(<span class="built_in">string</span> name,<span class="keyword">int</span> age, <span class="keyword">int</span> <span class="built_in">height</span>){</span><br><span class="line"><span class="keyword">this</span>->name=name;</span><br><span class="line"><span class="keyword">this</span>->age=age;</span><br><span class="line"><span class="keyword">this</span>-><span class="built_in">height</span>=<span class="built_in">height</span>;</span><br><span class="line">}</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPerson</span><span class="params">(<span class="keyword">const</span> <span class="built_in">list</span><Person>&L)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">list</span><Person>::const_iterator it=L.<span class="built_in">begin</span>();it!=L.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<(*it).name<<<span class="string">" "</span><<(*it).age<<<span class="string">" "</span><<(*it).<span class="built_in">height</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myCompare</span><span class="params">(Person &p1, Person &p2 )</span></span>{ <span class="comment">// 自定义数据类型的排序规则 </span></span><br><span class="line"><span class="keyword">if</span>(p1.age==p2.age){</span><br><span class="line"><span class="keyword">return</span> p1.<span class="built_in">height</span><p2.<span class="built_in">height</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> p1.age<p2.age;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">list</span><Person> L;</span><br><span class="line">L.push_back(Person(<span class="string">"zhangsan"</span>,<span class="number">23</span>,<span class="number">180</span>));</span><br><span class="line">L.push_back(Person(<span class="string">"lisi"</span>,<span class="number">43</span>,<span class="number">290</span>));</span><br><span class="line">L.push_back(Person(<span class="string">"wangwu"</span>,<span class="number">43</span>,<span class="number">90</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 容器用年龄排序,如果年龄相同,用身高排序</span></span><br><span class="line">printPerson(L);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L.sort(myCompare);</span><br><span class="line"></span><br><span class="line">printPerson(L);</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>set集合(没有重复元素,并且自动排序)</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200325004617027.png" alt="image-20200325004617027"></p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200325011034860.png" alt="image-20200325011034860"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><set></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSet</span><span class="params">(<span class="keyword">const</span> <span class="built_in">set</span><<span class="keyword">int</span>> &s)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">set</span><<span class="keyword">int</span>>::const_iterator it=s.<span class="built_in">begin</span>();it!=s.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">set</span><<span class="keyword">int</span>> s;</span><br><span class="line">s.insert(<span class="number">23</span>);</span><br><span class="line">s.insert(<span class="number">43</span>);</span><br><span class="line">printSet(s);</span><br><span class="line"><span class="comment">// find 返回迭代器</span></span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">find</span>(<span class="number">43</span>)!=s.<span class="built_in">end</span>()){</span><br><span class="line"><span class="built_in">cout</span><<*(s.<span class="built_in">find</span>(<span class="number">43</span>))<<<span class="built_in">endl</span>; <span class="comment">// 返回迭代器 *(s.find(23))</span></span><br><span class="line">} </span><br><span class="line"><span class="built_in">cout</span><<s.count(<span class="number">23</span>)<<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>pair对组(和元组很像)</p><p>paie的创建方式</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pair<<span class="built_in">string</span>,<span class="keyword">int</span>>p(<span class="string">"tom"</span>,<span class="number">23</span>);</span><br><span class="line">pair<<span class="built_in">string</span>,<span class="keyword">int</span>> p2 =make_pair(<span class="string">"zhangsan"</span>,<span class="number">43</span>);</span><br></pre></td></tr></tbody></table></figure><p>利用仿函数重载排序规则</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">compare</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span></span>{</span><br><span class="line"><span class="keyword">return</span> v1>v2;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="built_in">set</span><<span class="keyword">int</span>,compare> s;</span><br><span class="line">s.insert(<span class="number">23</span>);</span><br><span class="line">s.insert(<span class="number">43</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">set</span><<span class="keyword">int</span>,compare>::iterator it=s.<span class="built_in">begin</span>();it!=s.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<*it<<<span class="string">" "</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>map容器(高效率)(会按照key排序)</p><p><img src="/2020/04/15/c++/5-%E5%AE%B9%E5%99%A8/image-20200325015540130.png" alt="image-20200325015540130"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span><<span class="built_in">string</span>,<span class="keyword">int</span>> m;</span><br><span class="line">m.insert(pair<<span class="built_in">string</span>,<span class="keyword">int</span>>(<span class="string">"zhangsan"</span>,<span class="number">23</span>));</span><br><span class="line">m.insert(pair<<span class="built_in">string</span>,<span class="keyword">int</span>>(<span class="string">"lisi"</span>,<span class="number">34</span>));</span><br><span class="line">m.insert(pair<<span class="built_in">string</span>,<span class="keyword">int</span>>(<span class="string">"wangwu"</span>,<span class="number">343</span>));</span><br><span class="line">m.insert(make_pair(<span class="string">"wangmazi"</span>,<span class="number">89</span>));</span><br><span class="line">m.insert(<span class="built_in">map</span><<span class="built_in">string</span>,<span class="keyword">int</span>>::value_type(<span class="string">"啦啦啦"</span>,<span class="number">43</span>));</span><br><span class="line"><span class="built_in">cout</span><<m[<span class="string">"zhangsan"</span>]<<<span class="built_in">endl</span>; <span class="comment">// 中括号适合访问,不适合插入</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">map</span><<span class="built_in">string</span>,<span class="keyword">int</span>>::iterator it=m.<span class="built_in">begin</span>();it!=m.<span class="built_in">end</span>();it++){</span><br><span class="line"><span class="built_in">cout</span><<it->first<<it->second<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vector容器&quot;&gt;&lt;a href=&quot;#vector容器&quot; class=&quot;headerlink&quot; title=&quot;vector容器&quot;&gt;&lt;/a&gt;vector容器&lt;/h3&gt;&lt;p&gt;vector存放自定义类型数据&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://philxling.club/categories/c/"/>
    
    
      <category term="c++" scheme="http://philxling.club/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>多线程爬虫</title>
    <link href="http://philxling.club/2020/04/13/python%E7%88%AC%E8%99%AB/13-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB/"/>
    <id>http://philxling.club/2020/04/13/python%E7%88%AC%E8%99%AB/13-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB/</id>
    <published>2020-04-13T14:46:23.000Z</published>
    <updated>2020-10-15T04:26:41.926Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="多线程爬虫"><a href="#多线程爬虫" class="headerlink" title="多线程爬虫"></a>多线程爬虫</h1><p>有些时候，比如下载图片，因为下载图片是一个耗时的操作。如果采用之前那种同步的方式下载。那效率肯会特别慢。这时候我们就可以考虑使用多线程的方式来下载图片。</p><a id="more"></a><h2 id="多线程介绍："><a href="#多线程介绍：" class="headerlink" title="多线程介绍："></a>多线程介绍：</h2><p>多线程是为了同步完成多项任务，通过提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。<br>最简单的比喻多线程就像火车的每一节车厢，而进程则是火车。车厢离开火车是无法跑动的，同理火车也可以有多节车厢。多线程的出现就是为了提高效率。同时它的出现也带来了一些问题。更多介绍请参考：<a href="https://baike.baidu.com/item/多线程/1190404?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/多线程/1190404?fr=aladdin</a></p><h2 id="threading模块介绍："><a href="#threading模块介绍：" class="headerlink" title="threading模块介绍："></a>threading模块介绍：</h2><p><code>threading</code>模块是<code>python</code>中专门提供用来做多线程编程的模块。<code>threading</code>模块中最常用的类是<code>Thread</code>。以下看一个简单的多线程程序：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coding</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">'%s正在写代码'</span> % x)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawing</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        print(<span class="string">'%s正在画图'</span> % x)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_thread</span><span class="params">()</span>:</span></span><br><span class="line">    coding()</span><br><span class="line">    drawing()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_thread</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = threading.Thread(target=coding)</span><br><span class="line">    t2 = threading.Thread(target=drawing)</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    multi_thread()</span><br></pre></td></tr></tbody></table></figure><h3 id="查看线程数："><a href="#查看线程数：" class="headerlink" title="查看线程数："></a>查看线程数：</h3><p>使用<code>threading.enumerate()</code>函数便可以看到当前线程的数量。</p><h3 id="查看当前线程的名字："><a href="#查看当前线程的名字：" class="headerlink" title="查看当前线程的名字："></a>查看当前线程的名字：</h3><p>使用<code>threading.current_thread()</code>可以看到当前线程的信息。</p><h3 id="继承自threading-Thread类："><a href="#继承自threading-Thread类：" class="headerlink" title="继承自threading.Thread类："></a>继承自<code>threading.Thread</code>类：</h3><p>为了让线程代码更好的封装。可以使用<code>threading</code>模块下的<code>Thread</code>类，继承自这个类，然后实现<code>run</code>方法，线程就会自动运行<code>run</code>方法中的代码。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodingThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            print(<span class="string">'%s正在写代码'</span> % threading.current_thread())</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawingThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            print(<span class="string">'%s正在画图'</span> % threading.current_thread())</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_thread</span><span class="params">()</span>:</span></span><br><span class="line">    t1 = CodingThread()</span><br><span class="line">    t2 = DrawingThread()</span><br><span class="line"></span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    multi_thread()</span><br></pre></td></tr></tbody></table></figure><h3 id="多线程共享全局变量的问题："><a href="#多线程共享全局变量的问题：" class="headerlink" title="多线程共享全局变量的问题："></a>多线程共享全局变量的问题：</h3><p>多线程都是在同一个进程中运行的。因此在进程中的全局变量所有线程都是可共享的。这就造成了一个问题，因为线程执行的顺序是无序的。有可能会造成数据错误。比如以下代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">tickets = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ticket</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> tickets</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        tickets += <span class="number">1</span></span><br><span class="line">    print(<span class="string">'tickets:%d'</span>%tickets)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t = threading.Thread(target=get_ticket)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>以上结果正常来讲应该是6，但是因为多线程运行的不确定性。因此最后的结果可能是随机的。</p><h3 id="锁机制："><a href="#锁机制：" class="headerlink" title="锁机制："></a>锁机制：</h3><p>为了解决以上使用共享全局变量的问题。<code>threading</code>提供了一个<code>Lock</code>类，这个类可以在某个线程访问某个变量的时候加锁，其他线程此时就不能进来，直到当前线程处理完后，把锁释放了，其他线程才能进来处理。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">VALUE = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">gLock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_value</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> VALUE</span><br><span class="line">    gLock.acquire()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        VALUE += <span class="number">1</span></span><br><span class="line">    gLock.release()</span><br><span class="line">    print(<span class="string">'value：%d'</span>%VALUE)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        t = threading.Thread(target=add_value)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h2 id="Lock版本生产者和消费者模式："><a href="#Lock版本生产者和消费者模式：" class="headerlink" title="Lock版本生产者和消费者模式："></a>Lock版本生产者和消费者模式：</h2><p>生产者和消费者模式是多线程开发中经常见到的一种模式。生产者的线程专门用来生产一些数据，然后存放到一个中间的变量中。消费者再从这个中间的变量中取出数据进行消费。但是因为要使用中间变量，中间变量经常是一些全局变量，因此需要使用锁来保证数据完整性。以下是使用<code>threading.Lock</code>锁实现的“生产者与消费者模式”的一个例子：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">1000</span></span><br><span class="line">gLock = threading.Lock()</span><br><span class="line"><span class="comment"># 记录生产者生产的次数，达到10次就不再生产</span></span><br><span class="line">gTimes = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gLock</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            <span class="comment"># 如果已经达到10次了，就不再生产了</span></span><br><span class="line">            <span class="keyword">if</span> gTimes >= <span class="number">10</span>:</span><br><span class="line">                gLock.release()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            gMoney += money</span><br><span class="line">            print(<span class="string">'%s当前存入%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            gLock.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gLock</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">500</span>)</span><br><span class="line">            gLock.acquire()</span><br><span class="line">            <span class="keyword">if</span> gMoney > money:</span><br><span class="line">                gMoney -= money</span><br><span class="line">                print(<span class="string">'%s当前取出%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">                time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 如果钱不够了，有可能是已经超过了次数，这时候就判断一下</span></span><br><span class="line">                <span class="keyword">if</span> gTimes >= <span class="number">10</span>:</span><br><span class="line">                    gLock.release()</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                print(<span class="string">"%s当前想取%s元钱，剩余%s元钱，不足！"</span> % (threading.current_thread(),money,gMoney))</span><br><span class="line">            gLock.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Consumer(name=<span class="string">'消费者线程%d'</span>%x).start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Producer(name=<span class="string">'生产者线程%d'</span>%x).start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h2 id="Condition版的生产者与消费者模式："><a href="#Condition版的生产者与消费者模式：" class="headerlink" title="Condition版的生产者与消费者模式："></a>Condition版的生产者与消费者模式：</h2><p><code>Lock</code>版本的生产者与消费者模式可以正常的运行。但是存在一个不足，在消费者中，总是通过<code>while True</code>死循环并且上锁的方式去判断钱够不够。上锁是一个很耗费CPU资源的行为。因此这种方式不是最好的。还有一种更好的方式便是使用<code>threading.Condition</code>来实现。<code>threading.Condition</code>可以在没有数据的时候处于阻塞等待状态。一旦有合适的数据了，还可以使用<code>notify</code>相关的函数来通知其他处于等待状态的线程。这样就可以不用做一些无用的上锁和解锁的操作。可以提高程序的性能。首先对<code>threading.Condition</code>相关的函数做个介绍，<code>threading.Condition</code>类似<code>threading.Lock</code>，可以在修改全局数据的时候进行上锁，也可以在修改完毕后进行解锁。以下将一些常用的函数做个简单的介绍：</p><ol><li><code>acquire</code>：上锁。</li><li><code>release</code>：解锁。</li><li><code>wait</code>：将当前线程处于等待状态，并且会释放锁。可以被其他线程使用<code>notify</code>和<code>notify_all</code>函数唤醒。被唤醒后会继续等待上锁，上锁后继续执行下面的代码。</li><li><code>notify</code>：通知某个正在等待的线程，默认是第1个等待的线程。</li><li><code>notify_all</code>：通知所有正在等待的线程。<code>notify</code>和<code>notify_all</code>不会释放锁。并且需要在<code>release</code>之前调用。</li></ol><p><code>Condition</code>版的生产者与消费者模式代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">gMoney = <span class="number">1000</span></span><br><span class="line">gCondition = threading.Condition()</span><br><span class="line">gTimes = <span class="number">0</span></span><br><span class="line">gTotalTimes = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gCondition</span><br><span class="line">        <span class="keyword">global</span> gTimes</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">1000</span>)</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            <span class="keyword">if</span> gTimes >= gTotalTimes:</span><br><span class="line">                gCondition.release()</span><br><span class="line">                print(<span class="string">'当前生产者总共生产了%s次'</span>%gTimes)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            gMoney += money</span><br><span class="line">            print(<span class="string">'%s当前存入%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">            gTimes += <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            gCondition.notify_all()</span><br><span class="line">            gCondition.release()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> gMoney</span><br><span class="line">        <span class="keyword">global</span> gCondition</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            money = random.randint(<span class="number">100</span>, <span class="number">500</span>)</span><br><span class="line">            gCondition.acquire()</span><br><span class="line">            <span class="comment"># 这里要给个while循环判断，因为等轮到这个线程的时候</span></span><br><span class="line">            <span class="comment"># 条件有可能又不满足了</span></span><br><span class="line">            <span class="keyword">while</span> gMoney < money:</span><br><span class="line">                <span class="keyword">if</span> gTimes >= gTotalTimes:</span><br><span class="line">                    gCondition.release()</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                print(<span class="string">'%s准备取%s元钱，剩余%s元钱，不足！'</span>%(threading.current_thread(),money,gMoney))</span><br><span class="line">                gCondition.wait()</span><br><span class="line">            gMoney -= money</span><br><span class="line">            print(<span class="string">'%s当前取出%s元钱，剩余%s元钱'</span> % (threading.current_thread(), money, gMoney))</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            gCondition.release()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        Consumer(name=<span class="string">'消费者线程%d'</span>%x).start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        Producer(name=<span class="string">'生产者线程%d'</span>%x).start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h2 id="Queue线程安全队列："><a href="#Queue线程安全队列：" class="headerlink" title="Queue线程安全队列："></a>Queue线程安全队列：</h2><p>在线程中，访问一些全局变量，加锁是一个经常的过程。如果你是想把一些数据存储到某个队列中，那么Python内置了一个线程安全的模块叫做<code>queue</code>模块。Python中的queue模块中提供了同步的、线程安全的队列类，包括FIFO（先进先出）队列Queue，LIFO（后入先出）队列LifoQueue。这些队列都实现了锁原语（可以理解为原子操作，即要么不做，要么都做完），能够在多线程中直接使用。可以使用队列来实现线程间的同步。相关的函数如下：</p><ol><li>初始化Queue(maxsize)：创建一个先进先出的队列。</li><li>qsize()：返回队列的大小。</li><li>empty()：判断队列是否为空。</li><li>full()：判断队列是否满了。</li><li>get()：从队列中取最后一个数据。</li><li>put()：将一个数据放到队列中。</li></ol><h2 id="使用生产者与消费者模式多线程下载表情包："><a href="#使用生产者与消费者模式多线程下载表情包：" class="headerlink" title="使用生产者与消费者模式多线程下载表情包："></a>使用生产者与消费者模式多线程下载表情包：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    headers = {</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page_queue,img_queue,*args,**kwargs)</span>:</span></span><br><span class="line">        super(Producer, self).__init__(*args,**kwargs)</span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        self.img_queue = img_queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.page_queue.empty():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            url = self.page_queue.get()</span><br><span class="line">            self.parse_page(url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        response = requests.get(url,headers=self.headers)</span><br><span class="line">        text = response.text</span><br><span class="line">        html = etree.HTML(text)</span><br><span class="line">        imgs = html.xpath(<span class="string">"//div[@class='page-content text-center']//a//img"</span>)</span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> imgs:</span><br><span class="line">            <span class="keyword">if</span> img.get(<span class="string">'class'</span>) == <span class="string">'gif'</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            img_url = img.xpath(<span class="string">".//@data-original"</span>)[<span class="number">0</span>]</span><br><span class="line">            suffix = os.path.splitext(img_url)[<span class="number">1</span>]</span><br><span class="line">            alt = img.xpath(<span class="string">".//@alt"</span>)[<span class="number">0</span>]</span><br><span class="line">            alt = re.sub(<span class="string">r'[，。？?,/\\·]'</span>,<span class="string">''</span>,alt)</span><br><span class="line">            img_name = alt + suffix</span><br><span class="line">            self.img_queue.put((img_url,img_name))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page_queue,img_queue,*args,**kwargs)</span>:</span></span><br><span class="line">        super(Consumer, self).__init__(*args,**kwargs)</span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        self.img_queue = img_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.img_queue.empty():</span><br><span class="line">                <span class="keyword">if</span> self.page_queue.empty():</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            img = self.img_queue.get(block=<span class="literal">True</span>)</span><br><span class="line">            url,filename = img</span><br><span class="line">            request.urlretrieve(url,<span class="string">'images/'</span>+filename)</span><br><span class="line">            print(filename+<span class="string">'  下载完成！'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    page_queue = Queue(<span class="number">100</span>)</span><br><span class="line">    img_queue = Queue(<span class="number">500</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">        url = <span class="string">"http://www.doutula.com/photo/list/?page=%d"</span> % x</span><br><span class="line">        page_queue.put(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = Producer(page_queue,img_queue)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = Consumer(page_queue,img_queue)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h2 id="GIL全局解释器锁："><a href="#GIL全局解释器锁：" class="headerlink" title="GIL全局解释器锁："></a>GIL全局解释器锁：</h2><p>Python自带的解释器是<code>CPython</code>。<code>CPython</code>解释器的多线程实际上是一个假的多线程（在多核CPU中，只能利用一核，不能利用多核）。同一时刻只有一个线程在执行，为了保证同一时刻只有一个线程在执行，在<code>CPython</code>解释器中有一个东西叫做<code>GIL（Global Intepreter Lock）</code>，叫做全局解释器锁。这个解释器锁是有必要的。因为<code>CPython</code>解释器的内存管理不是线程安全的。当然除了<code>CPython</code>解释器，还有其他的解释器，有些解释器是没有<code>GIL</code>锁的，见下面：</p><ol><li><code>Jython</code>：用Java实现的Python解释器。不存在GIL锁。更多详情请见：<a href="https://zh.wikipedia.org/wiki/Jython" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Jython</a></li><li><code>IronPython</code>：用<code>.net</code>实现的Python解释器。不存在GIL锁。更多详情请见：<a href="https://zh.wikipedia.org/wiki/IronPython" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/IronPython</a></li><li><code>PyPy</code>：用<code>Python</code>实现的Python解释器。存在GIL锁。更多详情请见：<a href="https://zh.wikipedia.org/wiki/PyPy" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/PyPy</a><br>GIL虽然是一个假的多线程。但是在处理一些IO操作（比如文件读写和网络请求）还是可以在很大程度上提高效率的。在IO操作上建议使用多线程提高效率。在一些CPU计算操作上不建议使用多线程，而建议使用多进程。</li></ol><h2 id="多线程下载百思不得姐段子作业："><a href="#多线程下载百思不得姐段子作业：" class="headerlink" title="多线程下载百思不得姐段子作业："></a>多线程下载百思不得姐段子作业：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSSpider</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    headers = {</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,page_queue,joke_queue,*args,**kwargs)</span>:</span></span><br><span class="line">        super(BSSpider, self).__init__(*args,**kwargs)</span><br><span class="line">        self.base_domain = <span class="string">'http://www.budejie.com'</span></span><br><span class="line">        self.page_queue = page_queue</span><br><span class="line">        self.joke_queue = joke_queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.page_queue.empty():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            url = self.page_queue.get()</span><br><span class="line">            response = requests.get(url, headers=self.headers)</span><br><span class="line">            text = response.text</span><br><span class="line">            html = etree.HTML(text)</span><br><span class="line">            descs = html.xpath(<span class="string">"//div[@class='j-r-list-c-desc']"</span>)</span><br><span class="line">            <span class="keyword">for</span> desc <span class="keyword">in</span> descs:</span><br><span class="line">                jokes = desc.xpath(<span class="string">".//text()"</span>)</span><br><span class="line">                joke = <span class="string">"\n"</span>.join(jokes).strip()</span><br><span class="line">                link = self.base_domain+desc.xpath(<span class="string">".//a/@href"</span>)[<span class="number">0</span>]</span><br><span class="line">                self.joke_queue.put((joke,link))</span><br><span class="line">            print(<span class="string">'='</span>*<span class="number">30</span>+<span class="string">"第%s页下载完成！"</span>%url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]+<span class="string">"="</span>*<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSWriter</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    headers = {</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, joke_queue, writer,gLock, *args, **kwargs)</span>:</span></span><br><span class="line">        super(BSWriter, self).__init__(*args, **kwargs)</span><br><span class="line">        self.joke_queue = joke_queue</span><br><span class="line">        self.writer = writer</span><br><span class="line">        self.lock = gLock</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                joke_info = self.joke_queue.get(timeout=<span class="number">40</span>)</span><br><span class="line">                joke,link = joke_info</span><br><span class="line">                self.lock.acquire()</span><br><span class="line">                self.writer.writerow((joke,link))</span><br><span class="line">                self.lock.release()</span><br><span class="line">                print(<span class="string">'保存一条'</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    page_queue = Queue(<span class="number">10</span>)</span><br><span class="line">    joke_queue = Queue(<span class="number">500</span>)</span><br><span class="line">    gLock = threading.Lock()</span><br><span class="line">    fp = open(<span class="string">'bsbdj.csv'</span>, <span class="string">'a'</span>,newline=<span class="string">''</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    writer = csv.writer(fp)</span><br><span class="line">    writer.writerow((<span class="string">'content'</span>, <span class="string">'link'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">        url = <span class="string">'http://www.budejie.com/text/%d'</span> % x</span><br><span class="line">        page_queue.put(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = BSSpider(page_queue,joke_queue)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = BSWriter(joke_queue,writer,gLock)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多线程爬虫&quot;&gt;&lt;a href=&quot;#多线程爬虫&quot; class=&quot;headerlink&quot; title=&quot;多线程爬虫&quot;&gt;&lt;/a&gt;多线程爬虫&lt;/h1&gt;&lt;p&gt;有些时候，比如下载图片，因为下载图片是一个耗时的操作。如果采用之前那种同步的方式下载。那效率肯会特别慢。这时候我们就可以考虑使用多线程的方式来下载图片。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.club/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.club/tags/python/"/>
    
      <category term="python爬虫" scheme="http://philxling.club/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>csv文件处理</title>
    <link href="http://philxling.club/2020/04/11/python%E7%88%AC%E8%99%AB/12-csv%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>http://philxling.club/2020/04/11/python%E7%88%AC%E8%99%AB/12-csv%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</id>
    <published>2020-04-11T15:40:12.000Z</published>
    <updated>2020-10-15T04:26:41.926Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="csv文件处理"><a href="#csv文件处理" class="headerlink" title="csv文件处理"></a>csv文件处理</h1><h2 id="读取csv文件："><a href="#读取csv文件：" class="headerlink" title="读取csv文件："></a>读取csv文件：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'stock.csv'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    reader = csv.reader(fp)</span><br><span class="line">    titles = next(reader)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> reader:</span><br><span class="line">        print(x)</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>这样操作，以后获取数据的时候，就要通过下表来获取数据。如果想要在获取数据的时候通过标题来获取。那么可以使用<code>DictReader</code>。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'stock.csv'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    reader = csv.DictReader(fp)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> reader:</span><br><span class="line">        print(x[<span class="string">'turnoverVol'</span>])</span><br></pre></td></tr></tbody></table></figure><h2 id="写入数据到csv文件："><a href="#写入数据到csv文件：" class="headerlink" title="写入数据到csv文件："></a>写入数据到csv文件：</h2><p>写入数据到csv文件，需要创建一个<code>writer</code>对象，主要用到两个方法。一个是<code>writerow</code>，这个是写入一行。一个是<code>writerows</code>，这个是写入多行。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">headers = [<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'classroom'</span>]</span><br><span class="line">values = [</span><br><span class="line">    (<span class="string">'zhiliao'</span>,<span class="number">18</span>,<span class="string">'111'</span>),</span><br><span class="line">    (<span class="string">'wena'</span>,<span class="number">20</span>,<span class="string">'222'</span>),</span><br><span class="line">    (<span class="string">'bbc'</span>,<span class="number">21</span>,<span class="string">'111'</span>)</span><br><span class="line">]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.csv'</span>,<span class="string">'w'</span>,newline=<span class="string">''</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    writer = csv.writer(fp)</span><br><span class="line">    writer.writerow(headers)</span><br><span class="line">    writer.writerows(values)</span><br></pre></td></tr></tbody></table></figure><p>也可以使用字典的方式把数据写入进去。这时候就需要使用<code>DictWriter</code>了。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">headers = [<span class="string">'name'</span>,<span class="string">'age'</span>,<span class="string">'classroom'</span>]</span><br><span class="line">values = [</span><br><span class="line">    {<span class="string">"name"</span>:<span class="string">'wenn'</span>,<span class="string">"age"</span>:<span class="number">20</span>,<span class="string">"classroom"</span>:<span class="string">'222'</span>},</span><br><span class="line">    {<span class="string">"name"</span>:<span class="string">'abc'</span>,<span class="string">"age"</span>:<span class="number">30</span>,<span class="string">"classroom"</span>:<span class="string">'333'</span>}</span><br><span class="line">]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.csv'</span>,<span class="string">'w'</span>,newline=<span class="string">''</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    writer = csv.DictWriter(fp,headers)</span><br><span class="line">    writer = csv.writeheader()</span><br><span class="line">    writer.writerow({<span class="string">'name'</span>:<span class="string">'zhiliao'</span>,<span class="string">"age"</span>:<span class="number">18</span>,<span class="string">"classroom"</span>:<span class="string">'111'</span>})</span><br><span class="line">    writer.writerows(values</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;csv文件处理&quot;&gt;&lt;a href=&quot;#csv文件处理&quot; class=&quot;headerlink&quot; title=&quot;csv文件处理&quot;&gt;&lt;/a&gt;csv文件处理&lt;/h1&gt;&lt;h2 id=&quot;读取csv文件：&quot;&gt;&lt;a href=&quot;#读取csv文件：&quot; class=&quot;headerlink&quot; title=&quot;读取csv文件：&quot;&gt;&lt;/a&gt;读取csv文件：&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; csv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&#39;stock.csv&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;r&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; fp:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    reader = csv.reader(fp)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    titles = next(reader)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; reader:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.club/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.club/tags/python/"/>
    
      <category term="python爬虫" scheme="http://philxling.club/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>继承和多态</title>
    <link href="http://philxling.club/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/"/>
    <id>http://philxling.club/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/</id>
    <published>2020-04-10T15:15:56.000Z</published>
    <updated>2020-10-15T04:26:41.806Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承的构造和析构的循序:先父类再子类,然后子类析构父类析构</p><p>访问同名的成员变量需要加作用域其为:</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">Base(){</span><br><span class="line">a=<span class="number">100</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"父类同名函数"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a)</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"父类同名函数"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">}; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span><span class="keyword">public</span> Base{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A(){</span><br><span class="line">a=<span class="number">23</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"子类同名函数"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">protected</span> Base{</span><br><span class="line">}; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">private</span> Base{</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">A a1;</span><br><span class="line"><span class="built_in">cout</span><<a1.a<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><<a1.Base::a<<<span class="built_in">endl</span>;</span><br><span class="line">a1.fun();</span><br><span class="line">a1.Base::fun();</span><br><span class="line"><span class="comment">//若想访问到父类的同名成员函数加作用域 </span></span><br><span class="line">a1.Base::fun(<span class="number">1000</span>); </span><br><span class="line">    <span class="comment">//访问静态成员</span></span><br><span class="line">    <span class="comment">//子类::父类::静态变量;表示通过类名访问父类作用域下的静态变量</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>多继承</p><p>子类:继承方式 父类,继承方式 父类…</p><p>菱形继承问题</p><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191117222518708.png" alt="image-20191117222518708"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Base{</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> Base{</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">public</span> A,<span class="keyword">public</span> B{</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">C c;</span><br><span class="line">c.age=<span class="number">100</span>;</span><br><span class="line">c.age=<span class="number">23</span>;</span><br><span class="line"><span class="built_in">cout</span><<c.age<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态的条件: 1 继承 2 子类覆写父类的方法 </p><p>使用 父类的引用指向子类的对象</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Annimal</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>{ <span class="comment">//虚函数实现多态</span></span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"动物在说话"</span><<<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span><span class="keyword">public</span> Annimal{</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"小猫在说话"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">}; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span><span class="keyword">public</span> Annimal{</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"小狗在说话"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSpeak</span><span class="params">(Annimal &annimal)</span></span>{</span><br><span class="line">annimal.speak();</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">Cat cat;</span><br><span class="line">doSpeak(cat);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>纯虚函数和抽象类</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>=<span class="number">0</span>;有了纯虚函数我们城为抽象类,无法实例化对象</span><br><span class="line">子类必须重写父类的方法;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractDrinking</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//煮水 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//冲泡</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//倒入杯中</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//加料 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeDrink</span><span class="params">()</span></span>{</span><br><span class="line">Boil();</span><br><span class="line">Brew();</span><br><span class="line">PourInCup();</span><br><span class="line">PutSomething();</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffee</span>:</span><span class="keyword">public</span> AbstractDrinking{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//煮水 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"煮水"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="comment">//冲泡</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"冲泡"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="comment">//倒入杯中</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"导入杯中"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="comment">//加料 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"加料"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">}; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tea</span>:</span><span class="keyword">public</span> AbstractDrinking{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//煮水 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Boil</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"煮水"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="comment">//冲泡</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Brew</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"冲泡茶叶"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="comment">//倒入杯中</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PourInCup</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"导入杯中"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="comment">//加料 </span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PutSomething</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"加料"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doWork</span><span class="params">(AbstractDrinking *<span class="built_in">abs</span>)</span></span>{</span><br><span class="line"><span class="built_in">abs</span>->makeDrink();</span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">abs</span>; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">doWork(<span class="keyword">new</span> Coffee);</span><br><span class="line">doWork(<span class="keyword">new</span> Tea);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>纯虚析构需要声明也需要实现</p><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191121160323393.png" alt="image-20191121160323393"></p><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191121160358800.png" alt="image-20191121160358800"></p><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191121160431500.png" alt="image-20191121160431500"></p><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191121160500114.png" alt="image-20191121160500114"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cpu</span>{</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">caculate</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoCard</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span>{</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span>=<span class="number">0</span>; </span><br><span class="line">}; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Computer(Cpu *cpu,VideoCard *videoCard,Memory *memory){</span><br><span class="line"><span class="keyword">this</span>->cpu=cpu;</span><br><span class="line"><span class="keyword">this</span>->videoCard=videoCard;</span><br><span class="line"><span class="keyword">this</span>->memory=memory;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Work</span><span class="params">()</span></span>{</span><br><span class="line">cpu->caculate();</span><br><span class="line">videoCard-><span class="built_in">display</span>();</span><br><span class="line">memory->storage();</span><br><span class="line">}</span><br><span class="line">~Computer(){</span><br><span class="line"><span class="keyword">if</span>(cpu!=<span class="literal">NULL</span>){</span><br><span class="line"><span class="keyword">delete</span> cpu;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(videoCard!=<span class="literal">NULL</span>){</span><br><span class="line"><span class="keyword">delete</span> videoCard;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(memory!=<span class="literal">NULL</span>){</span><br><span class="line"><span class="keyword">delete</span> memory;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Cpu *cpu;</span><br><span class="line">VideoCard *videoCard;</span><br><span class="line">Memory *memory;</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelCpu</span>:</span><span class="keyword">public</span> Cpu{</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">caculate</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"Intel的cpu"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelVideoCard</span>:</span><span class="keyword">public</span> VideoCard{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"Intel的显示器"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelMemory</span>:</span><span class="keyword">public</span> Memory{</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"Intel的内存"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoCpu</span>:</span><span class="keyword">public</span> Cpu{</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">caculate</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"Lenovo的cpu"</span><<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoVideoCard</span>:</span><span class="keyword">public</span> VideoCard{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"Lenovo的显示器"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoMemory</span>:</span><span class="keyword">public</span> Memory{</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"Lenovo的内存"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">Computer *com=<span class="keyword">new</span> Computer(<span class="keyword">new</span> IntelCpu,<span class="keyword">new</span> LenovoVideoCard,<span class="keyword">new</span> IntelMemory);</span><br><span class="line">com->Work();</span><br><span class="line"><span class="keyword">delete</span> com; </span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>文件操作</p><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191121164144152.png" alt="image-20191121164144152"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><fstream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>{</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.<span class="built_in">open</span>(<span class="string">"test.txt"</span>,ios::app);</span><br><span class="line">ofs<<<span class="string">"张三"</span><<<span class="built_in">endl</span>;</span><br><span class="line">ofs<<<span class="string">"李四"</span><<<span class="built_in">endl</span>;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>{</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.<span class="built_in">open</span>(<span class="string">"test.txt"</span>,ios::in);</span><br><span class="line"><span class="keyword">if</span>(!ifs.is_open()){</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"文件打开失败"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="comment">//四种方式读取</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>]={<span class="number">0</span>};</span><br><span class="line"><span class="keyword">while</span>(ifs>>buf){</span><br><span class="line"><span class="built_in">cout</span><<buf<<<span class="built_in">endl</span>;</span><br><span class="line">} </span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="keyword">char</span> buf2[<span class="number">1024</span>]={<span class="number">0</span>};</span><br><span class="line"><span class="keyword">while</span>(ifs.getline(buf2,<span class="keyword">sizeof</span>(buf2))){</span><br><span class="line"><span class="built_in">cout</span><<buf2<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="built_in">string</span> <span class="built_in">buffer</span>;</span><br><span class="line"><span class="keyword">while</span>(getline(ifs,<span class="built_in">buffer</span>)){</span><br><span class="line"><span class="built_in">cout</span><<<span class="built_in">buffer</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//4单个读取</span></span><br><span class="line"> <span class="keyword">char</span> c;</span><br><span class="line"> <span class="keyword">while</span>(c=ifs.<span class="built_in">get</span>()!=EOF){</span><br><span class="line"> <span class="built_in">cout</span><<c<<<span class="built_in">endl</span>;</span><br><span class="line"> } </span><br><span class="line">ifs.<span class="built_in">close</span>();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">write</span>();</span><br><span class="line"><span class="built_in">read</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>模板必须推导出数据类型才可以使用</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">add</span>(<span class="title">T</span> <span class="title">a</span>,<span class="title">T</span> <span class="title">b</span>){</span></span><br><span class="line"><span class="built_in">cout</span><<a+b<<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">add<<span class="keyword">int</span>>(<span class="number">23</span>,<span class="number">12</span>);<span class="comment">//显示</span></span><br><span class="line">add(<span class="number">12.2</span>,<span class="number">34.2</span>);<span class="comment">//自动类型推导</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>普通函数与函数模板的区别</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myadd01</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">myadd</span>(<span class="title">T</span> <span class="title">a</span>,<span class="title">T</span> <span class="title">b</span>){</span></span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">12</span>,b=<span class="number">23</span>;</span><br><span class="line"><span class="keyword">char</span> c=<span class="string">'a'</span>;</span><br><span class="line"><span class="built_in">cout</span><<myadd01(a,b)<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><<myadd01(a,c)<<<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span><<myadd(a,b)<<<span class="built_in">endl</span>;<span class="comment">//函数模板自动类型推导,不会发生自动类型转换 </span></span><br><span class="line"><span class="built_in">cout</span><<myadd<<span class="keyword">int</span>>(a,c)<<<span class="built_in">endl</span>;<span class="comment">//不能类型转换,需要指定类型 </span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191205175241874.png" alt="image-20191205175241874"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过空模板参数调用函数模板</span></span><br><span class="line"><span class="comment">//函数模板也能发生函数重载</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">add</span>(<span class="title">T</span> <span class="title">a</span>,<span class="title">T</span> <span class="title">b</span>){</span></span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"函数模板1"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">add</span>(<span class="title">T</span> <span class="title">a</span>,<span class="title">T</span> <span class="title">b</span>,<span class="title">T</span> <span class="title">c</span>){</span></span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"函数模板2"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="string">"普通函数"</span><<<span class="built_in">endl</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">add(<span class="number">12</span>,<span class="number">30</span>);</span><br><span class="line">add<>(<span class="number">12</span>,<span class="number">30</span>);</span><br><span class="line">add(<span class="number">12</span>,<span class="number">30</span>,<span class="number">23</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>函数模板的类对象的对比</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="keyword">int</span> age,<span class="built_in">string</span> name){</span><br><span class="line"><span class="keyword">this</span>->age=age;</span><br><span class="line"><span class="keyword">this</span>->name=name;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">mycompare</span>(<span class="title">T</span> &<span class="title">a</span>,<span class="title">T</span> &<span class="title">b</span>){</span></span><br><span class="line"><span class="keyword">if</span>(a==b){</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">template</span><> <span class="keyword">bool</span> <span class="title">mycompare</span><span class="params">(Person &a,Person &b)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(a.age==b.age&&a.name==b.name){</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">12</span>,<span class="string">"java"</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">12</span>,<span class="string">"java"</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span><<mycompare(p1,p2)<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>类模板</p><p>语法</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class">类</span></span><br></pre></td></tr></tbody></table></figure><p>类模板与函数模板的区别</p><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191205183118841.png" alt="image-20191205183118841"></p><p>类模板中成员函数的创建时机是模板调用时才创建</p><p>类模板的对象作为函数参数</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><typeinfo></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(T1 name,T2 age){</span><br><span class="line"><span class="keyword">this</span>->name=name;</span><br><span class="line"><span class="keyword">this</span>->age=age;</span><br><span class="line">}</span><br><span class="line">T1 name;</span><br><span class="line">T2 age;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">cout</span><<<span class="keyword">this</span>->name<<<span class="string">" "</span><<<span class="keyword">this</span>->age<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="comment">//1 指定传入类型 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPerson</span><span class="params">(Person<<span class="built_in">string</span>,<span class="keyword">int</span>> &p)</span></span>{<span class="comment">//1 指定传入类型 </span></span><br><span class="line">p.showPerson();</span><br><span class="line">}</span><br><span class="line"><span class="comment">//2 参数模板化</span></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>> </span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">printPerson2</span>(<span class="title">Person</span><T1,T2> &<span class="title">p</span>){</span><span class="comment">//1 指定传入类型 </span></span><br><span class="line">p.showPerson();</span><br><span class="line">}</span><br><span class="line"><span class="comment">//3 整个类模板化</span></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span>  <span class="title">printPerson3</span>(<span class="title">T</span> &<span class="title">p</span>){</span></span><br><span class="line">p.showPerson();</span><br><span class="line"><span class="built_in">cout</span><<<span class="keyword">typeid</span>(T).name()<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{<span class="comment">//类模板的对象做函数的参数 </span></span><br><span class="line">Person<string,int> p1("java",12);</span><br><span class="line">printPerson(p1);</span><br><span class="line">printPerson2(p1);</span><br><span class="line">printPerson3(p1);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>类模板与继承</p><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191205205213805.png" alt="image-20191205205213805"></p><p>类模板成员函数类外实现</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(T1 name,T2 age);</span><br><span class="line">T1 name;</span><br><span class="line">T2 age;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>></span></span><br><span class="line"><span class="class"><span class="title">Person</span><T1,T2>:</span>:Person(T1 name,T2 age){<span class="comment">//类模板构造函数类外实现 </span></span><br><span class="line"><span class="keyword">this</span>->name=name;</span><br><span class="line"><span class="keyword">this</span>->age=age;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>></span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Person</span><T1,T2>:</span>:showPerson(){<span class="comment">//模板类成员函数类外实现 </span></span><br><span class="line"><span class="built_in">cout</span><<<span class="keyword">this</span>->name<<<span class="keyword">this</span>->age<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">Person<string,int> p1("c++",12);</span><br><span class="line">p1.showPerson();</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>类模板的的分文件编写</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//将类模板和实现放在同一个文件中并命名为.hpp的文件,然后再.cpp中包含.hpp文件.</span><br></pre></td></tr></tbody></table></figure><p><img src="/2020/04/10/c++/4-%E7%BB%A7%E6%89%BF%E5%92%8C%E5%A4%9A%E6%80%81/image-20191205213840891.png" alt="image-20191205213840891"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"person.hpp"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">Person<string,int> p1("java",12);</span><br><span class="line">p1.showPerson();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>全局函数类外实现</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><iostream></span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>>//声明模板 </span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span>;</span> <span class="comment">//声明类 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>>//声明这个函数 </span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">showPerson1</span>(<span class="title">Person</span><T1,T2> <span class="title">p</span>){</span></span><br><span class="line"><span class="built_in">cout</span><<p.name<<p.age<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span><<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span>{</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">showPerson</span><span class="params">(Person<T1,T2> p)</span></span>{<span class="comment">//全局函数类内实现</span></span><br><span class="line"><span class="built_in">cout</span><<p.name<<p.age<<<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//加空参数列表 </span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">void</span> showPerson1<>(Person<T1,T2> p);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T1 name;</span><br><span class="line">T2 age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(T1 name,T2 age){</span><br><span class="line"><span class="keyword">this</span>->name=name;</span><br><span class="line"><span class="keyword">this</span>->age=age;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">Person<string,int> p1("c++",12);</span><br><span class="line">showPerson(p1);</span><br><span class="line">showPerson1(p1);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">test();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id><a href="#" class="headerlink" title></a></h3></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;p&gt;继承的构造和析构的循序:先父类再子类,然后子类析构父类析构&lt;/p&gt;
&lt;p&gt;访问同名的成员变量需要加作用域其为:&lt;/p&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://philxling.club/categories/c/"/>
    
    
      <category term="c++" scheme="http://philxling.club/tags/c/"/>
    
      <category term="面向对象" scheme="http://philxling.club/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>json文件处理</title>
    <link href="http://philxling.club/2020/04/10/python%E7%88%AC%E8%99%AB/11-json%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>http://philxling.club/2020/04/10/python%E7%88%AC%E8%99%AB/11-json%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</id>
    <published>2020-04-09T19:00:12.000Z</published>
    <updated>2020-10-15T04:26:41.925Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="json文件处理"><a href="#json文件处理" class="headerlink" title="json文件处理"></a>json文件处理</h1><h2 id="什么是json："><a href="#什么是json：" class="headerlink" title="什么是json："></a>什么是json：</h2><p>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript (w3c制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。更多解释请见：<a href="https://baike.baidu.com/item/JSON/2462549?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/JSON/2462549?fr=aladdin</a></p><a id="more"></a><h2 id="JSON支持数据格式："><a href="#JSON支持数据格式：" class="headerlink" title="JSON支持数据格式："></a>JSON支持数据格式：</h2><ol><li>对象（字典）。使用花括号。</li><li>数组（列表）。使用方括号。</li><li>整形、浮点型、布尔类型还有null类型。</li><li>字符串类型（字符串必须要用双引号，不能用单引号）。</li></ol><p>多个数据之间使用逗号分开。<br><strong>注意：json本质上就是一个字符串。</strong></p><h2 id="字典和列表转JSON："><a href="#字典和列表转JSON：" class="headerlink" title="字典和列表转JSON："></a>字典和列表转JSON：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">books = [</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'钢铁是怎样练成的'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">9.8</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'红楼梦'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">9.9</span></span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">json_str = json.dumps(books,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">print(json_str)</span><br></pre></td></tr></tbody></table></figure><p>因为<code>json</code>在<code>dump</code>的时候，只能存放<code>ascii</code>的字符，因此会将中文进行转义，这时候我们可以使用<code>ensure_ascii=False</code>关闭这个特性。<br>在<code>Python</code>中。只有基本数据类型才能转换成<code>JSON</code>格式的字符串。也即：<code>int</code>、<code>float</code>、<code>str</code>、<code>list</code>、<code>dict</code>、<code>tuple</code>。</p><h3 id="将json数据直接dump到文件中："><a href="#将json数据直接dump到文件中：" class="headerlink" title="将json数据直接dump到文件中："></a>将json数据直接<code>dump</code>到文件中：</h3><p><code>json</code>模块中除了<code>dumps</code>函数，还有一个<code>dump</code>函数，这个函数可以传入一个文件指针，直接将字符串<code>dump</code>到文件中。示例代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">books = [</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'钢铁是怎样练成的'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">9.8</span></span><br><span class="line">    },</span><br><span class="line">    {</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'红楼梦'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">9.9</span></span><br><span class="line">    }</span><br><span class="line">]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.json'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json.dump(books,fp)</span><br></pre></td></tr></tbody></table></figure><h2 id="将一个json字符串load成Python对象："><a href="#将一个json字符串load成Python对象：" class="headerlink" title="将一个json字符串load成Python对象："></a>将一个json字符串load成Python对象：</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">json_str = <span class="string">'[{"title": "钢铁是怎样练成的", "price": 9.8}, {"title": "红楼梦", "price": 9.9}]'</span></span><br><span class="line">books = json.loads(json_str,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(type(books))</span><br><span class="line">print(books)</span><br></pre></td></tr></tbody></table></figure><h3 id="直接从文件中读取json："><a href="#直接从文件中读取json：" class="headerlink" title="直接从文件中读取json："></a>直接从文件中读取json：</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'a.json'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    json_str = json.load(fp)</span><br><span class="line">    print(json_str)</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;json文件处理&quot;&gt;&lt;a href=&quot;#json文件处理&quot; class=&quot;headerlink&quot; title=&quot;json文件处理&quot;&gt;&lt;/a&gt;json文件处理&lt;/h1&gt;&lt;h2 id=&quot;什么是json：&quot;&gt;&lt;a href=&quot;#什么是json：&quot; class=&quot;headerlink&quot; title=&quot;什么是json：&quot;&gt;&lt;/a&gt;什么是json：&lt;/h2&gt;&lt;p&gt;JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript (w3c制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。更多解释请见：&lt;a href=&quot;https://baike.baidu.com/item/JSON/2462549?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://baike.baidu.com/item/JSON/2462549?fr=aladdin&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python爬虫" scheme="http://philxling.club/categories/python%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="python" scheme="http://philxling.club/tags/python/"/>
    
      <category term="python爬虫" scheme="http://philxling.club/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
